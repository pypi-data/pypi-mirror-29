/*
 * # Licensed Materials - Property of IBM
 * # Copyright IBM Corp. 2015,2016
 */

#include "splpy.h"
#include "splpy_pyop.h"

using namespace streamsx::topology;

<%SPL::CodeGen::implementationPrologue($model);%>

<%
 my $cmnDir = $model->getContext()->getToolkitDirectory()."/opt/.__splpy/common/";

 require "splpy_operator.pm";
 require $cmnDir."/splpy.pm";

 my $module = splpy_Module();
 my $functionName = splpy_FunctionName();
 my @packages = splpy_Packages();
 spl_pip_packages($model, \@packages);

 my $iport;
 
  my $oport = $model->getOutputPortAt(0);
  my $otupleType = $oport->getSPLTupleType();
  my @onames = SPL::CodeGen::Type::getAttributeNames($otupleType);
  my @otypes = SPL::CodeGen::Type::getAttributeTypes($otupleType);
%>

// Constructor
MY_OPERATOR::MY_OPERATOR() :
   pyop_(NULL)
{
   PyObject * callable;
@include  "../../opt/.__splpy/common/py_constructor.cgt"
   
   {
      SplpyGIL lock;

      // callable is an instance of the callable class
      // then when called returns an iterable
     callable = SplpyGeneral::callFunction(
             "streamsx.spl.runtime", "_splpy_iter_source",
             callable, NULL);   

     PyObject *pyOutNames = Splpy::pyAttributeNames(getOutputPortAt(0));

     // Now create the wrapper function that converts
     // other types returned by the user's function
     // (e.g. dictionaries) to Python tuples as the
     // decorated operators only handle tuples to
     // simplify the generated code.
     callable = SplpyGeneral::callFunction(
             "streamsx.spl.runtime", "_splpy_to_tuples",
             callable, pyOutNames);   

     pyop_->setCallable(callable);
   }
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
   delete pyop_;
}

// Notify port readiness
void MY_OPERATOR::allPortsReady()
{
  createThreads(1);
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    pyop_->prepareToShutdown();
}

<%
  my $no_tuples_action = "submit(Punctuation::WindowMarker, 0);";
%>

void MY_OPERATOR::process(uint32_t idx)
{
  while(!getPE().getShutdownRequested()) {

      // GIL is released across submission
      SplpyGIL lock;

      PyObject *pyTuple = PyTuple_New(0);
      PyObject *pyDict = NULL;

@include  "../../opt/.__splpy/common/py_functionReturnToTuples.cgt"
  }
}

// Create member function that converts Python tuple to SPL tuple
@include  "../../opt/.__splpy/common/py_valueToTuples.cgt"
@include  "../../opt/.__splpy/common/py_pyTupleTosplTuple.cgt"

<%SPL::CodeGen::implementationEpilogue($model);%>
