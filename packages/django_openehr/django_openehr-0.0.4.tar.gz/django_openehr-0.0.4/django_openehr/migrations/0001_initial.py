# Generated by Django 2.0.1 on 2018-01-30 20:17

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AddressDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_type', models.CharField(choices=[('RESIDENTIAL', 'Residential'), ('CORRESPONDENCE', 'Correspondence'), ('BUSINESS', 'Business'), ('TEMPORARY', 'Temporary')], help_text='The type of address.', max_length=255)),
                ('unstructured_address', models.TextField(blank=True, help_text='A postal address expressed in an unstructured format.', null=True)),
                ('property_number', models.CharField(blank=True, help_text='The number of the property.', max_length=20, null=True)),
                ('address_line1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line3', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line4', models.CharField(blank=True, max_length=255, null=True)),
                ('post_code', models.CharField(blank=True, help_text='Post code.', max_length=20, null=True)),
                ('validity_period_from', models.DateTimeField(blank=True, help_text='The start of the period for which this address is valid.', null=True)),
                ('validity_period_to', models.DateTimeField(blank=True, help_text='Date from which the address is no longer valid.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BodySite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='DemographicPersonal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_to_subject', models.CharField(blank=True, help_text='The relationship of this individual to the subject e.g. family member, informal carer.', max_length=255, null=True)),
                ('date_of_birth', models.DateTimeField(blank=True, help_text="Individual's date of birth.", null=True)),
                ('gender', models.CharField(blank=True, choices=[('FEMALE', 'Female'), ('MALE', 'Male'), ('UNSPECIFIED', 'Unspecified')], help_text='The administrative phenotypical gender of the individual.', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Identifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issuer', models.CharField(blank=True, max_length=255)),
                ('assigner', models.CharField(blank=True, max_length=255)),
                ('identifier', models.CharField(max_length=255)),
                ('identifier_type', models.CharField(blank=True, max_length=255)),
                ('demographics', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_openehr.DemographicPersonal')),
            ],
        ),
        migrations.CreateModel(
            name='SymptomSign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symptom_sign_name', models.CharField(help_text='The name of the reported symptom or sign.', max_length=255)),
                ('nil_significant', models.NullBooleanField(help_text='The identified symptom or sign was reported as not being present to any significant degree.')),
                ('description', models.CharField(blank=True, help_text='Narrative description about the reported symptom or sign.', max_length=255, null=True)),
                ('episodicity', models.CharField(blank=True, choices=[('NEW', 'New'), ('ONGOING', 'Ongoing'), ('INDETERMINATE', 'Indeterminate')], help_text='Category of this episode for the identified symptom or sign.', max_length=255, null=True)),
                ('first_ever', models.NullBooleanField(help_text='Is this the first ever occurrence of this symptom or sign?')),
                ('episode_onset', models.DateTimeField(blank=True, help_text='The onset for this episode of the symptom or sign.', null=True)),
                ('onset_type', models.CharField(blank=True, help_text='Description of the onset of the symptom or sign eg gradual or sudden.', max_length=255, null=True)),
                ('duration', models.DateTimeField(blank=True, help_text='The duration of this episode of the symptom or sign since onset', null=True)),
                ('severity_category', models.CharField(blank=True, choices=[('MILD', 'Mild [The intensity of the symptom or sign does not cause interference with normal activity.] [SNOMED-CT::162468002] (Symptom mild (finding)'), ('MODERATE', 'Moderate: Moderate [The intensity of the symptom or sign causes interference with normal activity.] [SNOMED-CT::162469005] (Symptom moderate (finding)'), ('SEVERE', 'Severe: Severe [The intensity of the symptom or sign prevents normal activity.] [SNOMED-CT::162470006] (Symptom severe (finding)')], help_text='Category representing the overall severity of the symptom or sign.', max_length=255, null=True)),
                ('severity_rating', models.DecimalField(decimal_places=1, max_digits=1, max_length=1, null=True, validators=[django.core.validators.MaxValueValidator(10.0), django.core.validators.MinValueValidator(0.0)])),
                ('progression', models.CharField(blank=True, choices=[('WORSENING', 'Worsening [The severity of the symptom or sign has worsened overall during this episode.]'), ('UNCHANGED', 'Unchanged [The severity of the symptom or sign has not changed overall during this episode.]'), ('IMPROVING', 'Improving [The severity of the symptom or sign has improved overall during this episode.]'), ('RESOLVED', 'Resolved [The severity of the symptom or sign has resolved.]')], help_text='Description progression of the symptom or sign at the time of reporting.', max_length=255, null=True)),
                ('pattern', models.CharField(blank=True, help_text='Narrative description about the pattern of the symptom or sign during this episode.', max_length=255, null=True)),
                ('modifying_factor_name', models.CharField(blank=True, help_text='Name of the modifying factor.', max_length=255, null=True)),
                ('modifying_factor_effect', models.CharField(blank=True, choices=[('Relieves', 'Relieves [The factor decreases the severity or impact of the symptom or sign, but does not fully # resolve it.]'), ('NOEFFECT', 'No effect [The factor has no impact on the symptom or sign.]'), ('WORSENS', 'Worsens [The factor increases the severity or impact of the symptom or sign.]')], help_text='Perceived effect of the modifying factor on the symptom or sign.', max_length=255, null=True)),
                ('modifying_factor_effect_description', models.TextField(blank=True, help_text='Narrative description of the effect of the modifying factor on the symptom or sign.', null=True)),
                ('precipitating_resolving_factor_name', models.CharField(blank=True, help_text='Name of the health event, symptom, reported sign or other factor.', max_length=255, null=True)),
                ('precipitating_resolving_factor_interval', models.DateTimeField(blank=True, help_text='The interval of time between the occurrence or onset of the factor and onset/resolution of the # symptom or sign.', null=True)),
                ('precipitating_resolving_factor_description', models.CharField(blank=True, help_text='Narrative description about the effect of the factor on the identified symptom or sign.', max_length=255, null=True)),
                ('impact', models.TextField(blank=True, help_text='Description of the impact of this symptom or sign.', null=True)),
                ('episode_description', models.TextField(blank=True, null=True)),
                ('resolution_date_time', models.DateTimeField(blank=True, help_text='The timing of the cessation of this episode of the symptom or sign.', null=True)),
                ('previous_episode_description', models.TextField(blank=True, help_text='Narrative description of any or all previous episodes.', null=True)),
                ('symptom_comment', models.TextField(blank=True, help_text='Additional narrative about the symptom or sign not captured in other fields.', null=True)),
                ('associated_symptom_sign', models.ManyToManyField(blank=True, help_text='Structured details about any associated symptoms or signs that are concurrent.', null=True, related_name='_symptomsign_associated_symptom_sign_+', to='django_openehr.SymptomSign')),
                ('body_site', models.ManyToManyField(blank=True, help_text='Simple body site where the symptom or sign was reported.', null=True, to='django_openehr.BodySite')),
            ],
        ),
        migrations.CreateModel(
            name='TelecomDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unstructured_telecoms', models.TextField(blank=True, help_text='An unstructured description of telecoms.', null=True)),
                ('country_code', models.CharField(blank=True, help_text='Telephone country code. ENV13606-4:2000 7.11.18.', max_length=20, null=True)),
                ('area_code', models.CharField(blank=True, help_text='Telephone area code.', max_length=20, null=True)),
                ('number', models.CharField(blank=True, help_text='Telephone number.', max_length=20, null=True)),
                ('extension', models.CharField(blank=True, help_text='Telephone extension number. ENV13606-4:2000 7.11.18.', max_length=20, null=True)),
                ('method', models.CharField(blank=True, help_text='The communications mode, eg Fax, Skype, Landline, Mobile etc', max_length=255, null=True)),
                ('use_context', models.CharField(blank=True, help_text='the context of use of this telecom contact eg Home, Work, Business', max_length=255, null=True)),
                ('demographics', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_openehr.DemographicPersonal')),
            ],
        ),
        migrations.CreateModel(
            name='TherapeuticDirection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('direction_sequence', models.IntegerField(blank=True, help_text='The intended position of this direction within the overall sequence of directions.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('direction_duration', models.CharField(blank=True, choices=[('INDEFINITE', 'Indefinite'), ('INDEFINITENTBDC', 'Indefinite - not to be discontinued')], max_length=255, null=True)),
                ('direction_duration_seconds', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('direction_duration_text', models.CharField(blank=True, max_length=255, null=True)),
                ('maximum_administrations', models.IntegerField(blank=True, help_text='The maximum number of administrations to be given for this direction.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='TherapeuticDirectionDosage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dosage_sequence', models.IntegerField(blank=True, help_text='The intended position of this dosage within the overall sequence of dosages.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('dose_amount_exact', models.DecimalField(blank=True, decimal_places=3, help_text='The value of the amount of medication administered at one time, as a real number, or range of real numbers, and associated with the Dose unit.', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('dose_amount_range_lower', models.DecimalField(blank=True, decimal_places=3, help_text='Lower limit of the dose range', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('dose_amount_range_upper', models.DecimalField(blank=True, decimal_places=3, help_text='Upper limit of the dose range', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('dose_unit', models.CharField(blank=True, help_text='The unit which is associated with the Dose amount.', max_length=255, null=True)),
                ('therapeutic_direction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_openehr.TherapeuticDirection')),
            ],
        ),
        migrations.AddField(
            model_name='addressdetails',
            name='demographics',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_openehr.DemographicPersonal'),
        ),
    ]
