# =====================================================
# Create a generic VPC
# =====================================================


variable "cidr" {
  description = "The CIDR block for the VPC"
  default     = "10.0.0.0/16"
}


variable "public_subnets" {
  description = "A list of public subnets inside the VPC"
  default     = ["10.0.10.0/24", "10.0.11.0/24"]
}

variable "private_subnets" {
  description = "A list of private subnets inside the VPC"
  default     = ["10.0.20.0/24", "10.0.21.0/24"]
}

variable "tags" {
  description = "tags"
  default     = {
    Owner = "demo}"
  }
}

data "aws_availability_zones" "available" {}

#
# ######
# # VPC
# ######
resource "aws_vpc" "this" {
  cidr_block           = "${var.cidr}"
  enable_dns_hostnames = "true"
  enable_dns_support   = "true"

  tags = "${merge(var.tags, map("Name", format("vpc-%s", var.name)))}"
}
#
# ###################
# # Internet Gateway
# ###################
resource "aws_internet_gateway" "this" {
  count = "${length(var.public_subnets) > 0 ? 1 : 0}"
  vpc_id = "${aws_vpc.this.id}"
  tags = "${merge(var.tags, map("Name", format("igw-%s", var.name)))}"
}
#
# ################
# # Publiс routes
# ################
resource "aws_route_table" "public" {
  count = "${length(var.public_subnets) > 0 ? 1 : 0}"
  vpc_id           = "${aws_vpc.this.id}"
  tags = "${merge(var.tags, map("Name", format("%s-public", var.name)))}"
}

resource "aws_route" "public_internet_gateway" {
  count = "${length(var.public_subnets) > 0 ? 1 : 0}"
  route_table_id         = "${aws_route_table.public.id}"
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = "${aws_internet_gateway.this.id}"
}
#
# #################
# # Private routes
# #################
resource "aws_route_table" "private" {
  count     = "${length(var.private_subnets)}"
  vpc_id    = "${aws_vpc.this.id}"
  tags      = "${merge(var.tags,  map("Name", format("%s-private-%s", var.name, element(data.aws_availability_zones.available.names, count.index))))}"
}
#
# ################
# # Public subnet
# ################
resource "aws_subnet" "public" {
  count                   = "${length(var.public_subnets)}"
  vpc_id                  = "${aws_vpc.this.id}"
  cidr_block              = "${var.public_subnets[count.index]}"
  availability_zone       = "${element(data.aws_availability_zones.available.names, count.index)}"
  map_public_ip_on_launch = "true"
  tags = "${merge(var.tags, map("Name", format("%s-public-%s", var.name, element(data.aws_availability_zones.available.names, count.index))))}"
}

resource "aws_route_table_association" "public" {
  count = "${length(var.public_subnets)}"

  subnet_id      = "${element(aws_subnet.public.*.id, count.index)}"
  route_table_id = "${element(aws_route_table.public.*.id, count.index)}"
}
#
# #################
# # Private subnet
# #################
resource "aws_subnet" "private" {
  count = "${length(var.private_subnets)}"

  vpc_id            = "${aws_vpc.this.id}"
  cidr_block        = "${var.private_subnets[count.index]}"
  availability_zone = "${element(data.aws_availability_zones.available.names, count.index)}"

  tags = "${merge(var.tags, map("Name", format("%s-private-%s", var.name, element(data.aws_availability_zones.available.names, count.index))))}"
}

resource "aws_route_table_association" "private" {
  count = "${length(var.private_subnets)}"

  subnet_id      = "${element(aws_subnet.private.*.id, count.index)}"
  route_table_id = "${element(aws_route_table.private.*.id, count.index)}"
}

#
# ######################
# # VPC Endpoint for S3
# ######################
data "aws_vpc_endpoint_service" "s3" {
  service = "s3"
}

resource "aws_vpc_endpoint" "s3" {

  vpc_id       = "${aws_vpc.this.id}"
  service_name = "${data.aws_vpc_endpoint_service.s3.service_name}"
}

resource "aws_vpc_endpoint_route_table_association" "private_s3" {
  vpc_endpoint_id = "${aws_vpc_endpoint.s3.id}"
  route_table_id  = "${element(aws_route_table.private.*.id, count.index)}"
}



# ############################
# # VPC Endpoint for DynamoDB
# ############################

resource "aws_security_group" "sg_endpoint" {
  name        = "sshless-sg-endpoint"
  description = "sshless-sg-endpoint"
  vpc_id      = "${aws_vpc.this.id}"

  ingress {
    from_port = 443
    to_port = 443
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
}



resource "aws_vpc_endpoint" "ssm_endp" {
  service_name      = "com.amazonaws.${var.region}.ssm"
  vpc_endpoint_type = "Interface"

  vpc_id       = "${aws_vpc.this.id}"
  private_dns_enabled = true
  security_group_ids = [
    "${aws_security_group.sg_endpoint.id}"
  ]
}

resource "aws_vpc_endpoint" "ec2messages_endp" {
  service_name      = "com.amazonaws.${var.region}.ec2messages"
  vpc_endpoint_type = "Interface"

  vpc_id       = "${aws_vpc.this.id}"
  private_dns_enabled = true
  security_group_ids = [
    "${aws_security_group.sg_endpoint.id}"
  ]
}

# open  issue https://github.com/terraform-providers/terraform-provider-aws/issues/3382
# resource "aws_vpc_endpoint_subnet_association" "ssm_endp_assoc0" {
#   vpc_endpoint_id = "${aws_vpc_endpoint.ssm_endp.id}"
#   subnet_id  = "${element(aws_subnet.private.*.id, 0)}"
# }
#
# resource "aws_vpc_endpoint_subnet_association" "ssm_endp_assoc1" {
#   vpc_endpoint_id = "${aws_vpc_endpoint.ssm_endp.id}"
#   subnet_id  = "${element(aws_subnet.private.*.id, 1)}"
# }
# #
# resource "aws_vpc_endpoint_subnet_association" "ec2messages_endp_assoc0" {
#   vpc_endpoint_id = "${aws_vpc_endpoint.ec2messages_endp.id}"
#   subnet_id  = "${element(aws_subnet.private.*.id, 0)}"
# }
#
# resource "aws_vpc_endpoint_subnet_association" "ec2messages_endp_assoc1" {
#   vpc_endpoint_id = "${aws_vpc_endpoint.ec2messages_endp.id}"
#   subnet_id  = "${element(aws_subnet.private.*.id, 1)}"
# }

# #
# ##########################
# # Route table association
# ##########################
