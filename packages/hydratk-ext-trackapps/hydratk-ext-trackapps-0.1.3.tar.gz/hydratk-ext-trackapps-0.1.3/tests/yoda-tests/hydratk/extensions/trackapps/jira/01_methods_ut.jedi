Test-Scenario-1:
  Id: ts_01
  Path: hydratk/extensions/trackapps/jira/01_methods_ut.jedi
  Name: ts_init
  Desc: Test __init__ method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize client
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_default
      Desc: Default initialization
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('jira')
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'Client'), '__init__ = Client'
        res = [c._return_fields, c._default_values, c._url, c._user, c._passw, c._project]
        exp = [None, {}, None, None, None, None]
        this.test_result = str(res)
        assert (res == exp), '_return_fields, _default_values, _url, _user, _passw, _project = {0}'.format(exp)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_config
      Desc: Initialization with configuration
      
      Test: |
        cfg = mh.cfg['Extensions']['TrackApps']['jira']
        return_fields, default_values, url, user, passw, project = 'a,b', {'a':'x', 'b':'y'}, 'url', 'user', 'passw', 'project'
        cfg['return_fields'] = return_fields
        cfg['default_values'] = default_values
        cfg['url'] = url
        cfg['user'] = user
        cfg['passw'] = passw
        cfg['project'] = project
        c = ext.init_client('jira')
        res = c.__class__.__name__
      
      Validate: | 
        this.test_result = res
        assert (res == 'Client'), '__init__ = Client'
        res = [c._return_fields, c._default_values, c._url, c._user, c._passw, c._project]
        exp = [['a', 'b'], default_values, url, user, passw, project]   
        this.test_result = str(res)    
        assert (res == exp), '_return_fields, _default_values, _url, _user, _passw, _project = {0}'.format(exp)
        cfg['return_fields'] = cfg['url'] = cfg['user'] = cfg['passw'] = cfg['project'] = None
        cfg['default_values'] = {}
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/extensions/trackapps/jira/01_methods_ut.jedi
  Name: ts_props
  Desc: Test properties
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_getters
    Desc: Getter methods
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_client
      Desc: Getter client
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('jira')        
        c.connect('https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST')
        res = c.client.__class__.__name__        
      
      Validate: |        
        this.test_result = res
        exp = c._client.__class__.__name__
        assert (res == exp), 'client = {0}'.format(exp)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_url
      Desc: Getter url
      
      Test: |
        res = c.url       
      
      Validate: |        
        this.test_result = res
        exp = c._url
        assert (res == exp), 'url = {0}'.format(exp)     
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_user
      Desc: Getter user
      
      Test: |
        res = c.user   
      
      Validate: |        
        this.test_result = res
        exp = c._user
        assert (res == exp), 'user = {0}'.format(exp)
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_passw
      Desc: Getter passw
      
      Test: |
        res = c.passw  
      
      Validate: |        
        this.test_result = res
        exp = c._passw
        assert (res == exp), 'passw = {0}'.format(exp)  
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_project
      Desc: Getter project
      
      Test: |
        res = c.project
      
      Validate: |        
        this.test_result = res
        exp = c._project
        assert (res == exp), 'project = {0}'.format(exp)         
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_return_fields
      Desc: Getter return_fields
      
      Test: |
        res = c.return_fields
      
      Validate: |        
        this.test_result = str(res)
        exp = c._return_fields
        assert (res == exp), 'return_fields = {0}'.format(exp)
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_default_values
      Desc: Getter default_values
      
      Test: |
        res = c.default_values
      
      Validate: |        
        this.test_result = str(res)
        exp = c._default_values
        assert (res == exp), 'default_values = {0}'.format(exp) 
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_is_connected
      Desc: Getter is_connected
      
      Test: |
        res = c.is_connected
      
      Validate: |        
        this.test_result = res
        exp = c._is_connected
        assert (res == exp), 'is_connected = {0}'.format(exp)     
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/extensions/trackapps/trac/01_methods_ut.jedi
  Name: ts_connect
  Desc: Test method connect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook 
    
  Test-Case-1:
    Id: tc_01
    Name: tc_connect
    Desc: Connect to server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_connect
      Desc: Connect
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_connect', 'track_after_connect']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('jira')
        url, user, passw, project = 'https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST'
        res = c.connect(url, user, passw, project)  
      
      Validate: |    
        this.test_result = res
        assert (res), 'connect = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'connect fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0] 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_config
      Desc: Connect from configuration
      
      Test: |
        cfg = mh.cfg['Extensions']['TrackApps']['jira']
        cfg['url'] = 'https://freeswitch.org/jira'
        cfg['user'] = user
        cfg['passw'] = passw
        cfg['project'] = project
        c = ext.init_client('jira')
        res = c.connect()
      
      Validate: |        
        this.test_result = res
        assert (res), 'connect = True'
        cfg['url'] = cfg['user'] = cfg['passw'] = cfg['project'] = None  
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_url
      Desc: Invalid url  
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('jira')
        url, user, passw, project = 'xx', 'xx', 'xx', 'xx'   
        res = c.connect(url, user, passw, project)
      
      Validate: |                       
        this.test_result = res
        assert (not res), 'connect = False'    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_user
      Desc: Invalid user
      
      Test: |        
        res = c.connect(url, user, passw, project)
      
      Validate: |                       
        this.test_result = res
        assert (not res), 'connect = False'   
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/extensions/trackapps/trac/01_methods_ut.jedi
  Name: ts_read
  Desc: Test method read
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_read
    Desc: Read issue
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_read
      Desc: Read issue
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_read', 'track_after_read']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('jira')
        url, user, passw, project = 'https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST'
        c.connect(url, user, passw, project)
        id = 4
        res, recs = c.read(id)  
      
      Validate: |    
        this.test_result = res
        assert (res), 'read = True'        
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'read fires {0}'.format(evs)
        res = recs[0]['id']
        this.test_result = str(res)
        assert (res == id), 'record contains {0}'.format(id)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]        
        del events[0]   
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_fields
      Desc: Get requested fields
      
      Test: |
        fields = ['creator', 'description', 'id', 'status']
        res, recs = c.read(id, fields)
        
      Validate: |
        this.test_result = str(recs)
        res = sorted(recs[0].keys())
        assert (res == fields), 'fields = {0}'.format(fields)  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_query
      Desc: Use query
      
      Test: |
        val = 'Minor'
        res, recs = c.read(query='priority={0}'.format(val))
      
      Validate: |                             
        this.test_result = str(recs)
        assert (len(recs) > 0), 'records is not empty'
        this.test_result = res = str(recs[-1]['priority']['name'])
        assert (res == val), 'record priority = {0}'.format(val)    
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_limit
      Desc: Use limit
      
      Test: |
        limit = 5
        res, recs = c.read(limit=limit)
      
      Validate: |                 
        this.test_result = str(recs)
        assert (len(recs) == limit), 'output contains {0} records'.format(limit)
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_offset
      Desc: Use offset
      
      Test: |
        offset = 5
        res, recs = c.read(limit=1, offset=offset)
      
      Validate: |                 
        this.test_result = str(recs)
        assert (recs[0]['id'] > offset), 'record id > {0}'.format(offset)          
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('jira')
        res, recs = c.read()
      
      Validate: |     
        this.test_result = res
        assert (not res), 'read = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_id
      Desc: Invalid id
      
      Test: |
        url, user, passw, project = 'https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST'
        c.connect(url, user, passw, project)
        res, recs = c.read(id=-1)      
      
      Validate: |               
        this.test_result = str(recs)
        assert (len(recs) == 0), 'records is empty'
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_field
      Desc: Invalid field
      
      Test: |
        res, recs = c.read(id=1, fields=['xx'])
      
      Validate: | 
        this.test_result = str(recs)
        assert (recs == None), 'records is empty'  
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/extensions/trackapps/jira/01_methods_ut.jedi
  Name: ts_create
  Desc: Test method create
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_create
    Desc: Create issue
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_create
      Desc: Create issue
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_create', 'track_after_create']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('jira')
        url, user, passw, project = 'https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST'
        c.connect(url, user, passw, project)
        params = {'summary': 'hydra test', 'description': 'hydra desc', 'customfield_10024': '1234567890123456789012345678901234567890'}
        params['components'] = [{'self': 'https://freeswitch.org/jira/rest/api/2/component/11220', 'id': '11220', 'name': 'test', 'description': 'A test component'}]
        id = c.create(params) 
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'id {0} > 0'.format(id)        
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'create fires {0}'.format(evs)
        res, recs = c.read(id)
        res = [recs[0]['id'], recs[0]['summary'], recs[0]['description']]
        exp = [id, params['summary'], params['description']]
        this.test_result = str(res)
        assert (res == exp), 'record contains {0}'.format(exp)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]        
        del events[0]     
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_default_values
      Desc: Default values
      
      Test: |
        cfg = mh.cfg['Extensions']['TrackApps']['jira']
        customfield_10024 = '1234567890123456789012345678901234567890'
        components = [{'self': 'https://freeswitch.org/jira/rest/api/2/component/11220', 'id': '11220', 'name': 'test', 'description': 'A test component'}]
        c._default_values = {'customfield_10024': customfield_10024, 'components': components}
        params = {'summary': 'test hydra', 'description': 'hydra desc'}
        id = c.create(params)
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'id {0} > 0'.format(id)  
        res, recs = c.read(id)
        res, recs = c.read(id)
        res = [recs[0]['id'], recs[0]['summary'], recs[0]['description']]
        exp = [id, params['summary'], params['description']]
        this.test_result = str(res)
        assert (res == exp), 'record contains {0}'.format(exp)  
        c._default_values = {}  
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps'] 
        c = ext.init_client('jira')  
        res = c.create({})    
      
      Validate: |             
        this.test_result = res
        assert (res == None), 'create = None'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_missing_params
      Desc: Missing params
      
      Test: |
        url, user, passw, project = 'https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST'
        c.connect(url, user, passw, project)
        res = c.create({'summary': 'test hydra', 'description': 'hydra desc'})      
      
      Validate: | 
        this.test_result = res
        assert (res == None), 'create = None'    
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_param
      Desc: Invalid param
      
      Test: |
        params = {'summary': 'hydra test', 'description': 'hydra desc', 'customfield_10024': '1234567890123456789012345678901234567890', 'xx': 'xx'}
        params['components'] = [{'self': 'https://freeswitch.org/jira/rest/api/2/component/11220', 'id': '11220', 'name': 'test', 'description': 'A test component'}]        
        res = c.create(params)      
      
      Validate: | 
        this.test_result = res
        assert (res == None), 'create = None'    
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_invalid_value
      Desc: Invalid value
      
      Test: |
        params = {'summary': 'hydra test', 'description': 'hydra desc', 'customfield_10024': '1234567890123456789012345678901234567890'}
        params['components'] = [{'self': 'https://freeswitch.org/jira/rest/api/2/component/xx', 'id': 'xx', 'name': 'test', 'description': 'A test component'}]        
        res = c.create(params)      
      
      Validate: | 
        this.test_result = res
        assert (res == None), 'create = None'  
        
Test-Scenario-6:
  Id: ts_06
  Path: hydratk/extensions/trackapps/jira/01_methods_ut.jedi
  Name: ts_update
  Desc: Test method update
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_update
    Desc: Update issue
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_update
      Desc: Update issue
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_update', 'track_after_update']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('jira')
        url, user, passw, project = 'https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST'
        c.connect(url, user, passw, project)
        params = {'summary': 'hydra test', 'description': 'hydra desc', 'customfield_10024': '1234567890123456789012345678901234567890'}
        params['components'] = [{'self': 'https://freeswitch.org/jira/rest/api/2/component/11220', 'id': '11220', 'name': 'test', 'description': 'A test component'}]        
        id = c.create(params)
        val = 'test hydra 2'
        res = c.update(id, {'summary': val}) 
      
      Validate: |    
        this.test_result = res
        assert (res), 'update = True'        
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'update fires {0}'.format(evs)
        res, recs = c.read(id)
        res = [recs[0]['id'], recs[0]['summary'], recs[0]['description']]
        exp = [id, val, params['description']]
        this.test_result = str(res)
        assert (res == exp), 'record contains {0}'.format(exp)   
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]        
        del events[0]   
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps'] 
        c = ext.init_client('jira')  
        res = c.update(None)    
      
      Validate: |             
        this.test_result = res
        assert (not res), 'update = False' 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_id
      Desc: Invalid id
                 
      Test: |
        url, user, passw, project = 'https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST'
        c.connect(url, user, passw, project)
        res = c.update(-1)      
      
      Validate: |
        this.test_result = res
        assert (not res), 'update = False'                                                                                                      