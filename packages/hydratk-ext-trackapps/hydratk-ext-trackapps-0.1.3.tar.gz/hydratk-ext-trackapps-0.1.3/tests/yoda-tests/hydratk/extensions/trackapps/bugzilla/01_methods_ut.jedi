Test-Scenario-1:
  Id: ts_01
  Path: hydratk/extensions/trackapps/bugzilla/01_methods_ut.jedi
  Name: ts_init
  Desc: Test __init__ method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize client
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_default
      Desc: Default initialization
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('bugzilla')
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'Client'), '__init__ = Client'
        res = [c._return_fields, c._default_values, c._url, c._user, c._passw]
        exp = [None, {}, None, None, None]
        this.test_result = str(res)
        assert (res == exp), '_return_fields, _default_values, _url, _user, _passw = {0}'.format(exp)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_config
      Desc: Initialization with configuration
      
      Test: |
        cfg = mh.cfg['Extensions']['TrackApps']['bugzilla']
        return_fields, default_values, url, user, passw = 'a,b', {'a':'x', 'b':'y'}, 'url', 'user', 'passw'
        cfg['return_fields'] = return_fields
        cfg['default_values'] = default_values
        cfg['url'] = url
        cfg['user'] = user
        cfg['passw'] = passw
        c = ext.init_client('bugzilla')
        res = c.__class__.__name__
      
      Validate: | 
        this.test_result = res
        assert (res == 'Client'), '__init__ = Client'
        res = [c._return_fields, c._default_values, c._url, c._user, c._passw]
        exp = [['a', 'b'], default_values, url, user, passw]   
        this.test_result = str(res)    
        assert (res == exp), '_return_fields, _default_values, _url, _user, _passw = {0}'.format(exp)
        cfg['return_fields'] = cfg['url'] = cfg['user'] = cfg['passw'] = None
        cfg['default_values'] = {}     
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/extensions/trackapps/bugzilla/01_methods_ut.jedi
  Name: ts_props
  Desc: Test properties
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_getters
    Desc: Getter methods
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_client
      Desc: Getter client
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('bugzilla')
        c.connect('https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password')
        res = c.client.__class__.__name__        
      
      Validate: |        
        this.test_result = res
        exp = c._client.__class__.__name__
        assert (res == exp), 'client = {0}'.format(exp)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_url
      Desc: Getter url
      
      Test: |
        res = c.url       
      
      Validate: |        
        this.test_result = res
        exp = c._url
        assert (res == exp), 'url = {0}'.format(exp)     
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_user
      Desc: Getter user
      
      Test: |
        res = c.user   
      
      Validate: |        
        this.test_result = res
        exp = c._user
        assert (res == exp), 'user = {0}'.format(exp)
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_passw
      Desc: Getter passw
      
      Test: |
        res = c.passw  
      
      Validate: |        
        this.test_result = res
        exp = c._passw
        assert (res == exp), 'passw = {0}'.format(exp)  
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_token
      Desc: Getter token
      
      Test: |
        res = c.token  
      
      Validate: |        
        this.test_result = res
        exp = c._token
        assert (res == exp), 'token = {0}'.format(exp)  
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_return_fields
      Desc: Getter return_fields
      
      Test: |
        res = c.return_fields
      
      Validate: |        
        this.test_result = str(res)
        exp = c._return_fields
        assert (res == exp), 'return_fields = {0}'.format(exp)
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_default_values
      Desc: Getter default_values
      
      Test: |
        res = c.default_values
      
      Validate: |        
        this.test_result = str(res)
        exp = c._default_values
        assert (res == exp), 'default_values = {0}'.format(exp) 
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_is_connected
      Desc: Getter is_connected
      
      Test: |
        res = c.is_connected
      
      Validate: |        
        this.test_result = res
        exp = c._is_connected
        assert (res == exp), 'is_connected = {0}'.format(exp)
        c.disconnect()   
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/extensions/trackapps/bugzilla/01_methods_ut.jedi
  Name: ts_connect
  Desc: Test method connect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_connect
    Desc: Connect to server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_connect
      Desc: Connect
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_connect', 'track_after_connect']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('bugzilla')
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        res = c.connect(url, user, passw)   
      
      Validate: |    
        this.test_result = res
        assert (res), 'connect = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'connect fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0] 
        c.disconnect()  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_config
      Desc: Connect from configuration
      
      Test: |
        cfg = mh.cfg['Extensions']['TrackApps']['bugzilla']
        cfg['url'] = url
        cfg['user'] = user
        cfg['passw'] = passw
        c = ext.init_client('bugzilla')
        res = c.connect()
      
      Validate: |        
        this.test_result = res
        assert (res), 'connect = True'
        c.disconnect()
        cfg['url'] = cfg['user'] = cfg['passw'] = None   
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_url
      Desc: Invalid url  
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('bugzilla')
        url, user, passw = 'xx', 'xx', 'xx'   
        res = c.connect(url, user, passw)
      
      Validate: |                       
        this.test_result = res
        assert (not res), 'connect = False'    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_user
      Desc: Invalid user
      
      Test: |
        url = 'https://app.devzing.com/demo/bugzilla'
        res = c.connect(url, user, passw)
      
      Validate: |                       
        this.test_result = res
        assert (not res), 'connect = False'  
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/extensions/trackapps/bugzilla/01_methods_ut.jedi
  Name: ts_disconnect
  Desc: Test method disconnect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    
  Test-Case-1:
    Id: tc_01
    Name: tc_disconnect
    Desc: Disconnect from server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_disconnect
      Desc: Disconnect
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']             
        c = ext.init_client('bugzilla')                            
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        c.connect(url, user, passw)
        res = c.disconnect()
        
      Validate: |
        this.test_result = res
        assert (res), 'disconnect = True' 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server 
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps'] 
        c = ext.init_client('bugzilla')                                        
        res = c.disconnect()
        
      Validate: |
        this.test_result = res
        assert (not res), 'disconnect = False'  
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/extensions/trackapps/bugzilla/01_methods_ut.jedi
  Name: ts_read
  Desc: Test method read
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_read
    Desc: Read bug
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_read
      Desc: Read bug
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_read', 'track_after_read']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('bugzilla')
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        c.connect(url, user, passw)
        id = 40 
        res, recs = c.read(id)  
      
      Validate: |    
        this.test_result = res
        assert (res), 'read = True'        
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'read fires {0}'.format(evs)
        res = [recs[0]['id'], recs[0]['summary']]
        exp = [id, 'test hydra 2']
        this.test_result = str(res)
        assert (res == exp), 'record contains {0}'.format(exp)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]        
        del events[0]
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_fields
      Desc: Get requested fields
      
      Test: |
        fields = ['creator', 'id', 'product', 'summary']
        res, recs = c.read(id, fields)
        
      Validate: |
        this.test_result = str(recs)
        res = sorted(recs[0].keys())
        assert (res == fields), 'fields = {0}'.format(fields)       
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_query
      Desc: Use query
      
      Test: |
        res, recs = c.read(query={'product': 'FooBar', 'summary': 'hydra'})
        
      Validate: |
        this.test_result = str(recs)
        assert (len(recs) > 0), 'records is not empty'  
        res = [recs[-1]['product'], recs[-1]['summary']]
        this.test_result = str(recs[-1])
        assert (res[0] == 'FooBar' and 'hydra' in res[1]), 'product, summary = FooBar, like hydra'       
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_limit
      Desc: Use limit
      
      Test: |
        limit = 5
        res, recs = c.read(limit=limit)
      
      Validate: |                 
        this.test_result = str(recs)
        assert (len(recs) == limit), 'output contains {0} records'.format(limit)
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_offset
      Desc: Use offset
      
      Test: |
        offset = 100
        res, recs = c.read(limit=1, offset=offset-2)
      
      Validate: |                 
        this.test_result = str(recs)
        assert (recs[0]['id'] == offset), 'record id = {0}'.format(offset)        
        c.disconnect() 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('bugzilla')
        res, recs = c.read()
      
      Validate: |     
        this.test_result = res
        assert (not res), 'read = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_id
      Desc: Invalid id
      
      Test: |
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        c.connect(url, user, passw)
        res, recs = c.read(id=-1)      
      
      Validate: |               
        this.test_result = str(recs)
        assert (len(recs) == 0), 'records is empty'
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_field
      Desc: Invalid field
      
      Test: |
        res, recs = c.read(id=40, fields=['xx'])
      
      Validate: | 
        this.test_result = str(recs)
        assert (len(recs) == 0), 'records is empty'             
        c.disconnect()  
        
Test-Scenario-6:
  Id: ts_06
  Path: hydratk/extensions/trackapps/bugzilla/01_methods_ut.jedi
  Name: ts_create
  Desc: Test method create
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_create
    Desc: Create bug
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_create
      Desc: Create bug
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_create', 'track_after_create']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('bugzilla')
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        c.connect(url, user, passw)
        params = {'summary': 'test hydra', 'version': '1', 'product': 'FooBar', 'component': 'Bar'}
        id = c.create(params) 
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'id {0} > 0'.format(id)        
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'create fires {0}'.format(evs)
        res, recs = c.read(id)
        res = [recs[0]['id'], recs[0]['summary'], recs[0]['version'], recs[0]['product'], recs[0]['component']]
        exp = [id, params['summary'], params['version'], params['product'], params['component']]
        this.test_result = str(res)
        assert (res == exp), 'record contains {0}'.format(exp)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]        
        del events[0]  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_default_values
      Desc: Default values
      
      Test: |
        cfg = mh.cfg['Extensions']['TrackApps']['bugzilla']
        product, component = 'FooBar', 'Bar'
        c._default_values = {'product': product, 'component': component}
        params = {'summary': 'test hydra', 'version': '1'}
        id = c.create(params)
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'id {0} > 0'.format(id)  
        res, recs = c.read(id)
        res = [recs[0]['id'], recs[0]['summary'], recs[0]['version'], recs[0]['product'], recs[0]['component']]
        exp = [id, params['summary'], params['version'], product, component]
        this.test_result = str(res)
        assert (res == exp), 'record contains {0}'.format(exp)
        c._default_values = {}   
        c.disconnect()          
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps'] 
        c = ext.init_client('bugzilla')  
        res = c.create({})    
      
      Validate: |             
        this.test_result = res
        assert (res == None), 'create = None'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_missing_params
      Desc: Missing params
      
      Test: |
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        c.connect(url, user, passw)
        res = c.create({})      
      
      Validate: | 
        this.test_result = res
        assert (res == None), 'create = None'  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_missing_required
      Desc: Missing required params 
                       
      Test: |
        params = {'summary': 'test hydra', 'version': '1'}
        res = c.create(params)
      
      Validate: |
        this.test_result = res
        assert (res == None), 'create = None'     
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_invalid_param
      Desc: Invalid param
                       
      Test: |
        params = {'summary': 'test hydra', 'version': '1', 'product': 'FooBar', 'component': 'Bar', 'xx': 'xx'}
        res = c.create(params)
      
      Validate: |
        this.test_result = res
        assert (res == None), 'create = None'  
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_invalid_value
      Desc: Invalid value
                       
      Test: |
        params = {'summary': 'test hydra', 'version': '1', 'product': 'FooBar', 'component': 'xx'}
        res = c.create(params)
      
      Validate: |
        this.test_result = res
        assert (res == None), 'create = None'            
        c.disconnect()         
        
Test-Scenario-7:
  Id: ts_07
  Path: hydratk/extensions/trackapps/bugzilla/01_methods_ut.jedi
  Name: ts_update
  Desc: Test method update
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_update
    Desc: Update bug
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_update
      Desc: Update bug
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_update', 'track_after_update']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('bugzilla')
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        c.connect(url, user, passw)
        params = {'summary': 'test hydra', 'version': '1', 'product': 'FooBar', 'component': 'Bar'}
        id = c.create(params)
        val = 'test hydra 2'
        res = c.update(id, {'summary': val}) 
      
      Validate: |    
        this.test_result = res
        assert (res), 'update = True'        
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'update fires {0}'.format(evs)
        res, recs = c.read(id)
        res = [recs[0]['id'], recs[0]['summary'], recs[0]['version'], recs[0]['product'], recs[0]['component']]
        exp = [id, val, params['version'], params['product'], params['component']]
        this.test_result = str(res)
        assert (res == exp), 'record contains {0}'.format(exp)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]        
        del events[0]  
        c.disconnect()   
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps'] 
        c = ext.init_client('bugzilla')  
        res = c.update(None)    
      
      Validate: |             
        this.test_result = res
        assert (not res), 'update = False' 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_id
      Desc: Invalid id
                 
      Test: |
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        c.connect(url, user, passw)
        res = c.update(-1)      
      
      Validate: |
        this.test_result = res
        assert (not res), 'update = False'       
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_value
      Desc: Invalid value
                       
      Test: |
        params = {'summary': 'test hydra', 'version': '1', 'product': 'FooBar', 'component': 'Bar'}
        id = c.create(params)
        res = c.update(id, {'product': 'xx'})
      
      Validate: |
        this.test_result = res
        assert (not res), 'update = False'  
        c.disconnect()                                  