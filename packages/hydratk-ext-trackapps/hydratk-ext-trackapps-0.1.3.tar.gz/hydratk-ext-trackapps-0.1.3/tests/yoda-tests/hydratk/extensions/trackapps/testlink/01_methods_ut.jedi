Test-Scenario-1:
  Id: ts_01
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_init
  Desc: Test __init__ method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize client
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_default
      Desc: Default initialization
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('testlink')
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'Client'), '__init__ = Client'
        res = [c._return_fields, c._default_values, c._url, c._dev_key, c._project]
        exp = [None, {}, None, None, None]
        this.test_result = str(res)
        assert (res == exp), '_return_fields, _default_values, _url, _dev_key, _project = {0}'.format(exp)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_config
      Desc: Initialization with configuration
      
      Test: |
        cfg = mh.cfg['Extensions']['TrackApps']['testlink']
        return_fields, default_values, url, dev_key, project = 'a,b', {'a':'x', 'b':'y'}, 'url', 'dev_key', 'project'
        cfg['return_fields'] = return_fields
        cfg['default_values'] = default_values
        cfg['url'] = url
        cfg['dev_key'] = dev_key
        cfg['project'] = project
        c = ext.init_client('testlink')
        res = c.__class__.__name__
      
      Validate: | 
        this.test_result = res
        assert (res == 'Client'), '__init__ = Client'
        res = [c._return_fields, c._default_values, c._url, c._dev_key, c._project]
        exp = [['a', 'b'], default_values, url, dev_key, project]   
        this.test_result = str(res)    
        assert (res == exp), '_return_fields, _default_values, _url, _dev_key, _project = {0}'.format(exp)
        cfg['return_fields'] = cfg['url'] = cfg['dev_key'] = cfg['project'] = None
        cfg['default_values'] = {} 
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_props
  Desc: Test properties
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_getters
    Desc: Getter methods
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_client
      Desc: Getter client
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('testlink')
        c.connect('https://127.0.0.1:81', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman')
        res = c.client.__class__.__name__        
      
      Validate: |        
        this.test_result = res
        exp = c._client.__class__.__name__
        assert (res == exp), 'client = {0}'.format(exp)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_url
      Desc: Getter url
      
      Test: |
        res = c.url       
      
      Validate: |        
        this.test_result = res
        exp = c._url
        assert (res == exp), 'url = {0}'.format(exp)     
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_dev_key
      Desc: Getter dev_key
      
      Test: |
        res = c.dev_key
      
      Validate: |        
        this.test_result = res
        exp = c._dev_key
        assert (res == exp), 'dev_key = {0}'.format(exp)
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_project
      Desc: Getter project
      
      Test: |
        res = c.project  
      
      Validate: |        
        this.test_result = res
        exp = c._project
        assert (res == exp), 'project = {0}'.format(exp)  
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_project_id
      Desc: Getter project_id
      
      Test: |
        res = c.project_id
      
      Validate: |        
        this.test_result = res
        exp = c._project_id
        assert (res == exp), 'project_id = {0}'.format(exp)         
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_return_fields
      Desc: Getter return_fields
      
      Test: |
        res = c.return_fields
      
      Validate: |        
        this.test_result = str(res)
        exp = c._return_fields
        assert (res == exp), 'return_fields = {0}'.format(exp)
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_default_values
      Desc: Getter default_values
      
      Test: |
        res = c.default_values
      
      Validate: |        
        this.test_result = str(res)
        exp = c._default_values
        assert (res == exp), 'default_values = {0}'.format(exp) 
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_is_connected
      Desc: Getter is_connected
      
      Test: |
        res = c.is_connected
      
      Validate: |        
        this.test_result = res
        exp = c._is_connected
        assert (res == exp), 'is_connected = {0}'.format(exp)
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_connect
  Desc: Test method connect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_connect
    Desc: Connect to server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_connect
      Desc: Connect
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_connect', 'track_after_connect']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('testlink')
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        res = c.connect(url, dev_key, project)   
      
      Validate: |    
        this.test_result = res
        assert (res), 'connect = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'connect fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_config
      Desc: Connect from configuration
      
      Test: |
        cfg = mh.cfg['Extensions']['TrackApps']['testlink']
        cfg['url'] = url
        cfg['dev_key'] = dev_key
        cfg['project'] = project
        c = ext.init_client('testlink')
        res = c.connect()
      
      Validate: |        
        this.test_result = res
        assert (res), 'connect = True'
        cfg['url'] = cfg['dev_key'] = cfg['project'] = None  
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_url
      Desc: Invalid url  
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('testlink')
        url, dev_key, project = 'xx', 'xx', 'xx'   
        res = c.connect(url, dev_key, project)
      
      Validate: |                       
        this.test_result = res
        assert (not res), 'connect = False'    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_dev_key
      Desc: Invalid dev_key
      
      Test: |
        url = 'https://127.0.0.1:81'
        res = c.connect(url, dev_key, project)
      
      Validate: |                       
        this.test_result = res
        assert (not res), 'connect = False'    
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_project
      Desc: Invalid project
      
      Test: |
        dev_key = '3db69a303c75cdaa08c98b12d5f9f2aa'
        res = c.connect(url, dev_key, project)
      
      Validate: |                       
        this.test_result = res
        assert (not res), 'connect = False' 
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_read_test_suite
  Desc: Test method read_test_suite
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_read_test_suite
    Desc: Read test suite
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_empty
      Desc: Empty test suite
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_read_suite', 'track_after_read_suite']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('testlink')
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project) 
        res, recs = c.read_test_suite('suite 2')  
      
      Validate: |    
        this.test_result = res
        assert (res), 'read_test_suite = True'
        this.test_result = str(recs)
        assert (len(recs) == 0), 'output is empty'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'read_test_suite fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]             
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_single
      Desc: Single test suite
      
      Test: |
        suite = 'suite 1/suite 4'
        res, recs = c.read_test_suite(suite)
      
      Validate: |   
        this.test_result = res
        assert (res), 'read_test_suite = True'
        this.test_result = str(recs)
        assert (len(recs) == 1 and len(recs[suite]) == 1), 'output contains 1 suite with 1 record'
        res = [recs[suite][0]['tsuite_name'], recs[suite][0]['external_id']]
        exp = ['suite 4', 'TC-50']
        assert (res == exp), 'record contains {0}'.format(exp) 
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_mult
      Desc: Multiple test suites
      
      Test: |
        suites = ['suite 1', 'suite 1/suite 3', 'suite 1/suite 4']
        res, recs = c.read_test_suite(suites[0])
      
      Validate: |
        this.test_result = res
        assert (res), 'read_test_suite = True'
        this.test_result = str(recs)
        assert (sorted(recs.keys()) == suites), 'output contains suites {0}'.format(suites)  
        res = [len(recs[suites[0]]), len(recs[suites[1]]), len(recs[suites[2]])]
        exp = [1, 3, 1]
        assert (res == exp), 'suites contain {0} records'.format(exp) 
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_steps
      Desc: Record with steps
      
      Test: |
        suite = 'suite 1'
        res, recs = c.read_test_suite(suite, steps=True)
      
      Validate: |                          
        this.test_result = str(recs[suite])
        assert (len(recs[suite][0]['steps']) > 0), 'record contains steps'  
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_no_steps
      Desc: Record without steps
      
      Test: |
        res, recs = c.read_test_suite(suite, steps=False)
      
      Validate: |                           
        this.test_result = str(recs[suite])
        assert ('steps' not in recs[suite][0]), 'record does not contain steps'     
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_fields
      Desc: Get requested fields
      
      Test: |
        suite = 'suite 1/suite 4'
        fields = ['external_id', 'id', 'name']
        res, recs = c.read_test_suite(suite, fields=fields)
      
      Validate: |                    
        this.test_result = str(recs)
        assert (sorted(recs[suite][0].keys()) == fields), 'record contains fields {0}'.format(fields)
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']  
        c = ext.init_client('testlink')
        res, recs = c.read_test_suite('')       
      
      Validate: |       
        this.test_result = res
        assert (not res), 'read_test_suite = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_suite
      Desc: Invalid test suite
      
      Test: |
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project) 
        res, recs = c.read_test_suite('xx')
      
      Validate: | 
        this.test_result = res
        assert (not res), 'read_test_suite = False'
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_field
      Desc: Invalid field
      
      Test: |
        suite = 'suite 1/suite 4'
        res, recs = c.read_test_suite(suite, fields=['xx'])
      
      Validate: |                     
        this.test_result = str(recs)
        assert (len(recs[suite]) == 0), 'suite is empty'
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_create_test_suite
  Desc: Test method create_test_suite
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_create_test_suite
    Desc: Create test suite
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_create
      Desc: Create test suite
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_create', 'track_after_create']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('testlink')
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        path, suite = 'suite 1', 'test' 
        id = c.create_test_suite(path, suite) 
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'create_test_suite id {0} > 0'.format(id)
        suite = path + '/' + suite
        res, recs = c.read_test_suite(suite)
        this.test_result = str(recs)
        assert (res and len(recs) == 0), 'suite {0} created'.format(suite)
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'create_test_suite fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]  
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']  
        c = ext.init_client('testlink')
        id = c.create_test_suite('', '')
      
      Validate: |
        this.test_result = id
        assert (id == None), 'create_test_suite = None'
    
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_path
      Desc: Invalid path
      
      Test: |
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        id = c.create_test_suite('xx', '')      
      
      Validate: |    
        this.test_result = id
        assert (id == None), 'create_test_suite = None'  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_duplicate
      Desc: Duplicate test suite
      
      Test: |
        id = c.create_test_suite('suite 1', 'test')
      
      Validate: |                           
        this.test_result = id
        assert (id == None), 'create_test_suite = None'
        
Test-Scenario-6:
  Id: ts_06
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_read_test_plan
  Desc: Test method read_test_plan
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_read_test_plan
    Desc: Read test plan
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_empty
      Desc: Empty test plan
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_read_plan', 'track_after_read_plan']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('testlink')
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project) 
        res, recs = c.read_test_plan('plan 2') 
      
      Validate: |    
        this.test_result = res
        assert (res), 'read_test_plan = True'
        this.test_result = str(recs)
        assert (len(recs) == 0), 'output is empty'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'read_test_plan fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]       
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_plan_name
      Desc: Read plan by name
      
      Test: |
        res, recs = c.read_test_plan('plan 1')
      
      Validate: |   
        this.test_result = res
        assert (res), 'read_test_plan = True'
        this.test_result = str(recs)
        assert (len(recs) == 2), 'output contains 2 records'     
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_plan_id
      Desc: Read plan by id
      
      Test: |
        res, recs = c.read_test_plan(plan_id=167)
      
      Validate: |   
        this.test_result = res
        assert (res), 'read_test_plan = True'
        this.test_result = str(recs)
        assert (len(recs) == 2), 'output contains 2 records'         
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_build
      Desc: Read plan with build
      
      Test: |
        res, recs = c.read_test_plan(plan_id=167, build_id=13)
      
      Validate: |   
        this.test_result = res
        assert (res), 'read_test_plan = True'
        this.test_result = str(recs)
        assert (len(recs) == 2), 'output contains 2 records'  
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_fields
      Desc: Get requested fields
      
      Test: |
        fields = ['external_id', 'tcase_name']
        res, recs = c.read_test_plan('plan 1', fields=fields)
      
      Validate: |                               
        this.test_result = str(recs)
        assert (sorted(recs[-1].keys()) == fields), 'record contains fields {0}'.format(fields)
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
            
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']   
        c = ext.init_client('testlink')        
        res, recs = c.read_test_plan('')
      
      Validate: |
        this.test_result = res
        assert (not res), 'read_test_plan = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_plan
      Desc: Invalid plan
      
      Test: |
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project) 
        res, recs = c.read_test_plan('xx')      
      
      Validate: |    
        this.test_result = res
        assert (not res), 'read_test_plan = False'
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_plan_id
      Desc: Invalid plan id
      
      Test: |
        res, recs = c.read_test_plan(plan_id=-1)
      
      Validate: | 
        this.test_result = res
        assert (not res), 'read_test_plan = False'   
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_invalid_build
      Desc: Invalid build
      
      Test: |
        res, recs = c.read_test_plan('plan 1', build_id=-1)
      
      Validate: |          
        this.test_result = res
        assert (not res), 'read_test_plan = False'   
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_invalid_field
      Desc: Invalid field
      
      Test: |
        res, recs = c.read_test_plan('plan 1', fields=['xx'])
      
      Validate: |        
        this.test_result = str(recs)
        assert (len(recs) == 0), 'output is empty'   
        
Test-Scenario-7:
  Id: ts_07
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_create_test_plan
  Desc: Test method create_test_plan
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_create_test_plan
    Desc: Create test plan
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_create
      Desc: Create test plan
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_create', 'track_after_create']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('testlink')
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        plan = 'test' 
        id = c.create_test_plan(plan) 
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'create_test_plan id {0} > 0'.format(id)        
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'create_test_plan fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]    
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
            
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']   
        c = ext.init_client('testlink')        
        id = c.create_test_plan('')
      
      Validate: |
        this.test_result = id
        assert (id == None), 'create_test_plan = None'     
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_duplicate
      Desc: Duplicate plan
      
      Test: |
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        id = c.create_test_plan('plan 1')      
      
      Validate: |    
        this.test_result = id
        assert (id == None), 'create_test_plan = None'    
        
Test-Scenario-8:
  Id: ts_08
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_create_build
  Desc: Test method create_build
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_create_build
    Desc: Create test build
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_create
      Desc: Create test build
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_create', 'track_after_create']
        c = ext.init_client('testlink')
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        plan, build = c.create_test_plan('test 2'), 'test'
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])        
        id = c.create_build(plan, build) 
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'create_build id {0} > 0'.format(id)    
        res, recs = c.read_test_plan(plan_id=plan)
        this.test_result = str(recs)
        assert (res and len(recs) == 0), 'plan is empty'    
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'create_build fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0] 
        print(events)          
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
            
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']   
        c = ext.init_client('testlink')        
        id = c.create_build('', '')
      
      Validate: |
        this.test_result = id
        assert (id == None), 'create_test_build = None'     
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_plan
      Desc: Invalid plan
      
      Test: |
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        id = c.create_build('xx', 'test')      
      
      Validate: |    
        this.test_result = id
        assert (id == None), 'create_build = None'  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_duplicate
      Desc: Duplicate build
      
      Test: |
        id = c.create_build('test 2', 'test')
      
      Validate: |                        
        this.test_result = id
        assert (id == None), 'create_build = None' 
        
Test-Scenario-9:
  Id: ts_09
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_read_test
  Desc: Test method rest_test
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_read_test
    Desc: Read test
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_read
      Desc: Read
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_read', 'track_after_read']      
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('testlink')
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        id = 3
        res, recs = c.read_test(id)  
      
      Validate: |    
        this.test_result = res
        assert (res), 'read_test = True'
        assert (int(recs['testcase_id']) == id), 'id = {0}'.format(id)
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'read_test fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0] 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_fields
      Desc: Get requested fields
      
      Test: |
        fields = ['tc_external_id', 'testcase_id']
        res, recs = c.read_test(id, fields=fields)
      
      Validate: |                
        this.test_result = str(recs)
        assert (sorted(recs.keys()) == fields), 'record contains {0}'.format(fields)
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
            
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']   
        c = ext.init_client('testlink')        
        res, recs = c.read_test('')
      
      Validate: |
        this.test_result = res
        assert (not res), 'read_test = False'     
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_id
      Desc: Invalid id
      
      Test: |
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        res, recs = c.read_test('xx')    
      
      Validate: |    
        this.test_result = res
        assert (not res), 'read_test = False'          
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_field
      Desc: Invalid field
      
      Test: |
        res, recs = c.read_test(3, fields=['xx'])    
      
      Validate: |    
        this.test_result = str(recs)
        assert (len(recs) == 0), 'records is empty'     
        
Test-Scenario-10:
  Id: ts_10
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_create_test
  Desc: Test method create_test
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_create_test
    Desc: Create test
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_create
      Desc: Create test
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_create', 'track_after_create']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('testlink')
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        path = 'suite 1/test'
        params = {'testcasename': 'test', 'authorlogin': 'lynus', 'summary': 'hydratk'}
        id = c.create_test(path, params) 
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'create_test id {0} > 0'.format(id)    
        res, recs = c.read_test(id)
        this.test_result = str(recs)
        res = [int(recs['testcase_id']), recs['name'], recs['author_login'], recs['summary']]
        exp = [id, params['testcasename'], params['authorlogin'], params['summary']]
        assert (res == exp), 'record contains {0}'.format(exp)    
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'create_test fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]] 
        del events[0]
        del events[0]           
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_steps
      Desc: Create test with steps
      
      Test: |
        steps = [{'actions': 'DO', 'expected_results': 'OK'}]
        id = c.create_test(path, params, steps)
      
      Validate: |   
        this.test_result = id
        assert (id > 0), 'create_test id {0} > 0'.format(id)    
        res, recs = c.read_test(id)
        this.test_result = str(recs)
        res = [int(recs['testcase_id']), recs['name'], recs['author_login'], recs['summary'], [recs['steps'][0]['actions'], recs['steps'][0]['expected_results']]]
        exp = [id, params['testcasename'], params['authorlogin'], params['summary'], [steps[0]['actions'], steps[0]['expected_results']]]
        assert (res == exp), 'record contains {0}'.format(exp)   
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
            
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']   
        c = ext.init_client('testlink')        
        id = c.create_test('')
      
      Validate: |
        this.test_result = id
        assert (id == None), 'create_test = None'     
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_path
      Desc: Invalid path
      
      Test: |
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        id = c.create_test('xx')   
      
      Validate: |    
        this.test_result = id
        assert (id == None), 'create_test = None'          
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_missing_fields
      Desc: Missing fields
      
      Test: |
        path = 'suite 1/test'
        id = c.create_test(path)    
      
      Validate: |    
        this.test_result = id
        assert (id == None), 'create_test = None'    
        
Test-Scenario-11:
  Id: ts_11
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_add_test_to_plan
  Desc: Test method add_test_to_plan
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_add_test_to_plan
    Desc: Add test to plan
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_add
      Desc: Add test
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_update', 'track_after_update']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('testlink')
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        plan = 'test 3'
        plan_id = c.create_test_plan(plan)
        c.create_build(plan_id, 'test') 
        params = {'testcasename': 'test', 'authorlogin': 'lynus', 'summary': 'hydratk'}
        id = c.create_test('suite 1/test', params)        
        res = c.add_test_to_plan(id, plan)
      
      Validate: |    
        this.test_result = res
        assert (res), 'add_test_to_plan = True'    
        res, recs = c.read_test_plan(plan)
        this.test_result = str(recs)
        assert (int(recs[-1]['tcase_id']) == id), 'plan contains test {0}'.format(id)    
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'add_test_to_plan fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_add_by_id
      Desc: Add test by plan id
      
      Test: |
        id = c.create_test('suite 1/test', params)
        res = c.add_test_to_plan(id, plan_id=plan_id)
      
      Validate: |                                                                                  
        this.test_result = res
        assert (res), 'add_test_to_plan = True'    
        res, recs = c.read_test_plan(plan)
        this.test_result = str(recs)
        assert (int(recs[-1]['tcase_id']) == id), 'plan contains test {0}'.format(id) 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
            
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']   
        c = ext.init_client('testlink')        
        res = c.add_test_to_plan('', '')
      
      Validate: |
        this.test_result = res
        assert (not res), 'add_test_to_plan = False'     
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_plan
      Desc: Invalid plan
      
      Test: |
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        res = c.add_test_to_plan('', plan_id='xx')   
      
      Validate: |    
        this.test_result = res
        assert (not res), 'add_test_to_plan = False'  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_test
      Desc: Invalid test
      
      Test: |
        res = c.add_test_to_plan('xx', plan_id=plan_id)   
      
      Validate: |    
        this.test_result = res
        assert (not res), 'add_test_to_plan = False'           
        
Test-Scenario-12:
  Id: ts_12
  Path: hydratk/extensions/trackapps/testlink/01_methods_ut.jedi
  Name: ts_update_test_execution
  Desc: Test method add_test_to_plan
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_update_test_execution
    Desc: Execute test
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_execute
      Desc: Execute test
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_update', 'track_after_update']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('testlink')
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        plan = 'test 4'
        plan_id = c.create_test_plan(plan)
        build = c.create_build(plan_id, 'test') 
        params = {'testcasename': 'test', 'authorlogin': 'lynus', 'summary': 'hydratk'}
        id = c.create_test('suite 1/test', params)        
        c.add_test_to_plan(id, plan)
        status = 'p'
        res = c.update_test_execution(id, status, plan=plan)
      
      Validate: |    
        this.test_result = res
        assert (res), 'update_test_execution = True'    
        res, recs = c.read_test_plan(plan)
        this.test_result = str(recs)
        assert (recs[-1]['exec_status'] == status), 'status = {0}'.format(status)    
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'update_test_execution fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_plan_id
      Desc: Execute test by plan_id
      
      Test: |
        status = 'f'
        res = c.update_test_execution(id, status, plan_id=plan_id)
      
      Validate: |     
        res, recs = c.read_test_plan(plan)
        this.test_result = str(recs)
        assert (recs[-1]['exec_status'] == status), 'status = {0}'.format(status) 
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_build
      Desc: Execute test by build
      
      Test: |
        status = 'b'
        res = c.update_test_execution(id, status, plan_id=plan_id, build_id=build)
      
      Validate: |     
        res, recs = c.read_test_plan(plan)
        this.test_result = str(recs)
        assert (recs[-1]['exec_status'] == status), 'status = {0}'.format(status)  
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
            
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']   
        c = ext.init_client('testlink')        
        res = c.update_test_execution('', '')
      
      Validate: |
        this.test_result = res
        assert (not res), 'update_test_execution = False'     
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_plan
      Desc: Invalid plan
      
      Test: |
        url, dev_key, project = 'https://127.0.0.1', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        c.connect(url, dev_key, project)
        res = c.update_test_execution('', '', plan_id='xx')   
      
      Validate: |    
        this.test_result = res
        assert (not res), 'update_test_execution = False'     
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_build
      Desc: Invalid build
      
      Test: |
        res = c.update_test_execution('', '', plan_id=plan_id, build_id='xx')   
      
      Validate: |    
        this.test_result = res
        assert (not res), 'update_test_execution = False'   
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_invalid_test
      Desc: Invalid test
      
      Test: |
        res = c.update_test_execution('', '', plan_id=plan_id, build_id=build)   
      
      Validate: |    
        this.test_result = res
        assert (not res), 'update_test_execution = False'     
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_invalid_status
      Desc: Invalid status
      
      Test: |
        res = c.update_test_execution(id, status='xx', plan_id=plan_id, build_id=build)   
      
      Validate: |    
        this.test_result = res
        assert (not res), 'update_test_execution = False'                                                                                 