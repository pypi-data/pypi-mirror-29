Test-Scenario-1:
  Id: ts_01
  Path: hydratk/extensions/trackapps/trackapps/01_methods_ut.jedi
  Name: ts_init_extension
  Desc: Test _init_extension method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize extension
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_init
      Desc: Initialize extension
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        ext._ext_id = ext._ext_name = None
        ext._init_extension()
        res = [ext._ext_id, ext._ext_name]
      
      Validate: |
        this.test_result = str(res)
        exp = ['trackapps', 'TrackApps']
        assert (res == exp), '_ext_id, _ext_name = {0}'.format(exp)
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/extensions/trackapps/trackapps/01_methods_ut.jedi
  Name: ts_init_client
  Desc: Test init_client method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init_client
    Desc: Initialize client
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_qc
      Desc: Quality Center  
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('qc')
        res = c.__class__.__name__            
        
      Validate: |
        this.test_result = res
        assert (res == 'Client'), 'init_client = Client'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_bugzilla
      Desc: Bugzilla  
      
      Test: |
        c = ext.init_client('bugzilla')
        res = c.__class__.__name__            
        
      Validate: |
        this.test_result = res
        assert (res == 'Client'), 'init_client = Client'   
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_mantis
      Desc: Mantis
      
      Test: |
        c = ext.init_client('mantis')
        res = c.__class__.__name__            
        
      Validate: |
        this.test_result = res
        assert (res == 'Client'), 'init_client = Client'     
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_trac
      Desc: Trac  
      
      Test: |
        c = ext.init_client('trac')
        res = c.__class__.__name__            
        
      Validate: |
        this.test_result = res
        assert (res == 'Client'), 'init_client = Client'    
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_jira
      Desc: Jira  
      
      Test: |
        c = ext.init_client('jira')
        res = c.__class__.__name__            
        
      Validate: |
        this.test_result = res
        assert (res == 'Client'), 'init_client = Client'  
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_testlink
      Desc: TestLink
      
      Test: |
        c = ext.init_client('testlink')
        res = c.__class__.__name__            
        
      Validate: |
        this.test_result = res
        assert (res == 'Client'), 'init_client = Client'   
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_invalid
      Desc: Invalid application
      
      Test: |
        try:
            ext.init_client('xx')
            ex = False
        except NotImplementedError:
            ex = True
      
      Validate: |    
        this.test_result = ex
        assert (ex), 'init_client raises NotImplementedError' 
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/extensions/trackapps/01_methods_ut.jedi
  Name: ts_register_htk_actions
  Desc: Test method _register_htk_actions
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead
    import yodalib.hydratk.core.commandopt as commandopt    
  
  Test-Case-1:
    Id: tc_01
    Name: tc_register_htk_actions
    Desc: Register Hydra actions
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_register
      Desc: Register 
      
      Test: |
        th = TestHead()     
        ext = th._ext['TrackApps']  
        th.clear_cmd()
        ext._register_htk_actions()
        res = th._cmd_hooks
        
      Validate: |         
        this.test_result = str(res)
        exp = ['track']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)
        res = commandopt.long_opt['htk']
        this.test_result = str(res)
        exp = ['tr-action', 'tr-app', 'tr-dev-key', 'tr-domain', 'tr-fields', 'tr-id', 'tr-input', 'tr-limit', 'tr-offset', 'tr-order-by', 
               'tr-output', 'tr-page', 'tr-params', 'tr-passw', 'tr-path', 'tr-per-page', 'tr-project', 'tr-query', 'tr-steps', 'tr-type',
               'tr-url', 'tr-user']
        assert (sorted(res) == exp), 'long_opt = {0}'.format(exp)
        th.clear_cmd()
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/extensions/trackapps/01_methods_ut.jedi
  Name: ts_register_standalone_actions
  Desc: Test method _register_standalone_actions
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead
    import yodalib.hydratk.core.commandopt as commandopt           
  
  Test-Case-1:
    Id: tc_01
    Name: tc_register_standalone_actions
    Desc: Register standalone actions
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_register
      Desc: Register   
      
      Test: |
        th = TestHead()
        ext = th._ext['TrackApps']
        th.clear_cmd()
        ext._register_standalone_actions()
        res = th._cmd_hooks
      
      Validate: |   
        this.test_result = str(res)
        exp = ['run']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)  
        res = commandopt.long_opt['trackapps']
        this.test_result = str(res)
        exp = ['action', 'app', 'config', 'debug', 'debug-channel', 'dev-key', 'domain', 'fields', 'force', 'home', 'id', 'input', 'interactive', 'language', 
               'limit', 'offset', 'order-by', 'output', 'page', 'params', 'passw', 'path', 'per-page', 'project', 'query', 'run-mode', 'steps', 'type',
               'url', 'user']
        assert (sorted(res) == exp), 'long_opt = {0}'.format(exp)        
        th.clear_cmd()     
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/extensions/trackapps/01_methods_ut.jedi
  Name: ts_register_actions
  Desc: Test method _register_actions
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead
    import yodalib.hydratk.core.commandopt as commandopt           
  
  Test-Case-1:
    Id: tc_01
    Name: tc_register_actions
    Desc: Register actions
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_htk
      Desc: Profile htk
      
      Test: |
        th = TestHead()
        ext = th._ext['TrackApps']
        th.clear_cmd()
        th.cli_cmdopt_profile = 'htk'
        ext._register_actions()
        res = th._cmd_hooks        
      
      Validate: |  
        this.test_result = str(res)
        exp = ['track']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)
        res = commandopt.long_opt['htk']
        this.test_result = str(res)
        exp = ['tr-action', 'tr-app', 'tr-dev-key', 'tr-domain', 'tr-fields', 'tr-id', 'tr-input', 'tr-limit', 'tr-offset', 'tr-order-by', 
               'tr-output', 'tr-page', 'tr-params', 'tr-passw', 'tr-path', 'tr-per-page', 'tr-project', 'tr-query', 'tr-steps', 'tr-type',
               'tr-url', 'tr-user']
        assert (sorted(res) == exp), 'long_opt = {0}'.format(exp)        
        th.clear_cmd()    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_trackapps
      Desc: Profile trackapps
      
      Test: |
        th = TestHead()
        ext = th._ext['TrackApps']
        th.clear_cmd()      
        th.cli_cmdopt_profile = 'trackapps'
        ext._register_actions()
        res = th._cmd_hooks        
      
      Validate: |  
        this.test_result = str(res)
        exp = ['run']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)
        res = commandopt.long_opt['trackapps']
        this.test_result = str(res)
        exp = ['action', 'app', 'config', 'debug', 'debug-channel', 'dev-key', 'domain', 'fields', 'force', 'home', 'id', 'input', 'interactive', 'language', 
               'limit', 'offset', 'order-by', 'output', 'page', 'params', 'passw', 'path', 'per-page', 'project', 'query', 'run-mode', 'steps', 'type',
               'url', 'user']
        assert (sorted(res) == exp), 'long_opt = {0}'.format(exp)           
        th.clear_cmd() 
        
Test-Scenario-6:
  Id: ts_06
  Path: hydratk/extensions/trackapps/01_methods_ut.jedi
  Name: ts_handle_track
  Desc: Test method handle_track
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead        
    import sys
 
    try:
        from StringIO import StringIO
    except ImportError:
        from io import StringIO  
        
  Test-Case-1:
    Id: tc_01
    Name: tc_handle_track
    Desc: Handle track command
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_bugzilla_cli
      Desc: Bugzilla with CLI params
      
      Test: |
        th = TestHead()
        ext = th._ext['TrackApps']
        th.pre_replace()
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        TestHead.options = {'tr-app': 'bugzilla', 'tr-action': 'read', 'tr-id': -1, 'tr-url': url, 'tr-user': user, 'tr-passw': passw}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = str([])
        assert (exp in res), 'message contains {0}'.format(exp)   
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_bugzilla_cfg
      Desc: Bugzilla with CFG params
      
      Test: |
        cfg = th._config['Extensions']['TrackApps']['bugzilla']
        cfg['url'], cfg['user'], cfg['passw'] = url, user, passw
        TestHead.options = {'tr-app': 'bugzilla', 'tr-action': 'read', 'tr-id': -1}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = str([])
        assert (exp in res), 'message contains {0}'.format(exp) 
        cfg['url'] = cfg['user'] = cfg['passw'] = None     
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_mantis_cli
      Desc: Mantis with CLI params
      
      Test: |
        url, user, passw, project = 'https://app.devzing.com/demo/mantisbt', 'demo', 'password', 'Sample Project'
        TestHead.options = {'tr-app': 'mantis', 'tr-action': 'read', 'tr-id': -1, 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Read error'
        assert (exp in res), 'message contains {0}'.format(exp)   
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_mantis_cfg
      Desc: Mantis with CFG params
      
      Test: |
        cfg = th._config['Extensions']['TrackApps']['mantis']
        cfg['url'], cfg['user'], cfg['passw'], cfg['project'] = url, user, passw, project
        TestHead.options = {'tr-app': 'mantis', 'tr-action': 'read', 'tr-id': -1}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Read error'
        assert (exp in res), 'message contains {0}'.format(exp) 
        cfg['url'] = cfg['user'] = cfg['passw'] = cfg['project'] = None  
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_trac_cli
      Desc: Trac with CLI params
      
      Test: |
        url, user, passw, project = 'https://trac.devzing.com/demo', 'demo', 'password', 'project1'
        TestHead.options = {'tr-app': 'trac', 'tr-action': 'read', 'tr-id': -1, 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Read error'
        assert (exp in res), 'message contains {0}'.format(exp)   
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_trac_cfg
      Desc: Trac with CFG params
      
      Test: |
        cfg = th._config['Extensions']['TrackApps']['trac']
        cfg['url'], cfg['user'], cfg['passw'], cfg['project'] = url, user, passw, project
        TestHead.options = {'tr-app': 'trac', 'tr-action': 'read', 'tr-id': -1}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Read error'
        assert (exp in res), 'message contains {0}'.format(exp) 
        cfg['url'] = cfg['user'] = cfg['passw'] = cfg['project'] = None  
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_jira_cli
      Desc: Jira with CLI params
      
      Test: |
        url, user, passw, project = 'https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST'
        TestHead.options = {'tr-app': 'jira', 'tr-action': 'read', 'tr-id': -1, 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = str([])
        assert (exp in res), 'message contains {0}'.format(exp)   
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_jira_cfg
      Desc: Jira with CFG params
      
      Test: |
        cfg = th._config['Extensions']['TrackApps']['jira']
        cfg['url'], cfg['user'], cfg['passw'], cfg['project'] = url, user, passw, project
        TestHead.options = {'tr-app': 'jira', 'tr-action': 'read', 'tr-id': -1}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = str([])
        assert (exp in res), 'message contains {0}'.format(exp) 
        cfg['url'] = cfg['user'] = cfg['passw'] = cfg['project'] = None       
        
    Test-Condition-9: 
      Id: tco_09
      Name: tco_testlink_cli
      Desc: TestLink with CLI params
      
      Test: |
        url, dev_key, project = 'http://127.0.0.1:81', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        TestHead.options = {'tr-app': 'testlink', 'tr-action': 'read', 'tr-id': -1, 'tr-type': 'test', 'tr-url': url, 'tr-dev-key': dev_key, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Read error'
        assert (exp in res), 'message contains {0}'.format(exp)   
        
    Test-Condition-10: 
      Id: tco_10
      Name: tco_testlink_cfg
      Desc: TestLink with CFG params
      
      Test: |
        cfg = th._config['Extensions']['TrackApps']['testlink']
        cfg['url'], cfg['dev_key'], cfg['project'] = url, dev_key, project
        TestHead.options = {'tr-app': 'testlink', 'tr-action': 'read', 'tr-id': -1, 'tr-type': 'test'}        
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Read error'
        assert (exp in res), 'message contains {0}'.format(exp) 
        cfg['url'] = cfg['dev_key'] = cfg['project'] = None                             
        th.post_replace()
        th.clear_cmd()                        
  
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_missing_app
      Desc: Missing app option
      
      Test: |
        th = TestHead()
        ext = th._ext['TrackApps']
        th.pre_replace()
        TestHead.options = {}
        old = sys.stdout
        sys.stdout = res = StringIO()        
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old         
        
      Validate: |
        this.test_result = res
        exp = 'Missing option app'
        assert (exp in res), 'message contains {0}'.format(exp) 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_app
      Desc: Invalid app option
      
      Test: |
        TestHead.options['tr-app'] = 'xx'
        old = sys.stdout
        sys.stdout = res = StringIO()        
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old         
        
      Validate: |
        this.test_result = res
        exp = 'Application not in'
        assert (exp in res), 'message contains {0}'.format(exp) 
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_missing_action
      Desc: Missing action option
      
      Test: |
        TestHead.options['tr-app'] = 'bugzilla'
        old = sys.stdout
        sys.stdout = res = StringIO()        
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old         
        
      Validate: |
        this.test_result = res
        exp = 'Missing option action'
        assert (exp in res), 'message contains {0}'.format(exp) 
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_invalid_action
      Desc: Invalid action option
      
      Test: |
        TestHead.options['tr-action'] = 'xx'
        old = sys.stdout
        sys.stdout = res = StringIO()        
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old         
        
      Validate: |
        this.test_result = res
        exp = 'Action not in'
        assert (exp in res), 'message contains {0}'.format(exp)
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_not_supported_action
      Desc: Not supported action
      
      Test: |
        TestHead.options['tr-action'] = 'delete'
        old = sys.stdout
        sys.stdout = res = StringIO()        
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old         
        
      Validate: |
        this.test_result = res
        exp = 'doesn\'t support'
        assert (exp in res), 'message contains {0}'.format(exp)             
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_tl_invalid_entity
      Desc: TestLink invalid entity
      
      Test: |
        TestHead.options['tr-url'], TestHead.options['tr-dev-key'], TestHead.options['tr-project'] = 'xx', 'xx', 'xx'
        TestHead.options['tr-app'], TestHead.options['tr-type'], TestHead.options['tr-action'] = 'testlink', 'xx', 'read'
        old = sys.stdout
        sys.stdout = res = StringIO()        
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old         
        
      Validate: |
        this.test_result = res
        exp = 'Type not in'
        assert (exp in res), 'message contains {0}'.format(exp)  
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_tl_invalid_entity_read
      Desc: TestLink invalid entity for read
      
      Test: |
        TestHead.options['tr-type'] = 'build'
        old = sys.stdout
        sys.stdout = res = StringIO()        
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old         
        
      Validate: |
        this.test_result = res
        exp = 'for action read'
        assert (exp in res), 'message contains {0}'.format(exp)    
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_tl_invalid_entity_update
      Desc: TestLink invalid entity for update
      
      Test: |
        TestHead.options['tr-action'] = 'update'
        old = sys.stdout
        sys.stdout = res = StringIO()        
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old         
        
      Validate: |
        this.test_result = res
        exp = 'for action update'
        assert (exp in res), 'message contains {0}'.format(exp)                                            
        th.post_replace() 
        th.clear_cmd() 
        
Test-Scenario-7:
  Id: ts_07
  Path: hydratk/extensions/trackapps/01_methods_ut.jedi
  Name: ts_read
  Desc: Test method read
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead    
    from os import path, remove    
    import sys
 
    try:
        from StringIO import StringIO
    except ImportError:
        from io import StringIO  
        
  Test-Case-1:
    Id: tc_01
    Name: tc_read
    Desc: Read records
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_bugzilla
      Desc: Bugzilla     
      
      Test: |
        th = TestHead()
        ext = th._ext['TrackApps']
        th.pre_replace()
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        TestHead.options = {'tr-app': 'bugzilla', 'tr-action': 'read', 'tr-id': 40, 'tr-url': url, 'tr-user': user, 'tr-passw': passw}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'test hydra 2'
        assert (exp in res), 'message contains {0}'.format(exp)           
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_mantis
      Desc: Mantis
      
      Test: |
        url, user, passw, project = 'https://app.devzing.com/demo/mantisbt', 'demo', 'password', 'Sample Project'
        TestHead.options = {'tr-app': 'mantis', 'tr-action': 'read', 'tr-id': 1, 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'defect'
        assert (exp in res), 'message contains {0}'.format(exp)        
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_trac
      Desc: Trac
      
      Test: |
        url, user, passw, project = 'https://trac.devzing.com/demo', 'demo', 'password', 'project1'
        TestHead.options = {'tr-app': 'trac', 'tr-action': 'read', 'tr-id': 2, 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'enhancement'
        assert (exp in res), 'message contains {0}'.format(exp)    
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_jira
      Desc: Jira
      
      Test: |
        url, user, passw, project = 'https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST'
        TestHead.options = {'tr-app': 'jira', 'tr-action': 'read', 'tr-id': 4, 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Bug'
        assert (exp in res), 'message contains {0}'.format(exp)   
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_testlink_suite
      Desc: TestLink test suite
      
      Test: |
        url, dev_key, project = 'http://127.0.0.1:81', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        TestHead.options = {'tr-app': 'testlink', 'tr-action': 'read', 'tr-path': 'suite 1/suite 4', 'tr-type': 'test-suite', 'tr-url': url, 'tr-dev-key': dev_key, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'TC-50'
        assert (exp in res), 'message contains {0}'.format(exp)   
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_testlink_plan
      Desc: TestLink test plan
      
      Test: |
        TestHead.options = {'tr-app': 'testlink', 'tr-action': 'read', 'tr-id': 167, 'tr-type': 'test-plan', 'tr-url': url, 'tr-dev-key': dev_key, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'TC-50'
        assert (exp in res), 'message contains {0}'.format(exp)
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_testlink_test
      Desc: TestLink test
      
      Test: |
        TestHead.options = {'tr-app': 'testlink', 'tr-action': 'read', 'tr-id': 3, 'tr-type': 'test', 'tr-url': url, 'tr-dev-key': dev_key, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'testcase_id'
        assert (exp in res), 'message contains {0}'.format(exp)     
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_output
      Desc: Set output
      
      Test: |
        file = './test.txt'
        TestHead.options['tr-output'] = file        
        ext.handle_track()
        res = (path.exists(file))     
        
      Validate: |
        this.test_result = res
        assert (res), 'file {0} created'.format(file)
        remove(file) 
        th.post_replace()
        th.clear_cmd()
        
Test-Scenario-8:
  Id: ts_08
  Path: hydratk/extensions/trackapps/01_methods_ut.jedi
  Name: ts_create
  Desc: Test method create
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead      
    import sys
 
    try:
        from StringIO import StringIO
    except ImportError:
        from io import StringIO  
        
  Test-Case-1:
    Id: tc_01
    Name: tc_create
    Desc: Create record
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_bugzilla
      Desc: Bugzilla            
      
      Test: |
        th = TestHead()
        ext = th._ext['TrackApps']
        th.pre_replace()
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        params = 'summary:test hydra,version:1,product:FooBar,component:Bar'
        TestHead.options = {'tr-app': 'bugzilla', 'tr-action': 'create', 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-params': params}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'created'
        assert (exp in res), 'message contains {0}'.format(exp)  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_mantis
      Desc: Mantis
      
      Test: |
        url, user, passw, project = 'https://app.devzing.com/demo/mantisbt', 'demo', 'password', 'Sample Project'
        params = 'category:defect,summary:test hydra,description:test hydra'
        TestHead.options = {'tr-app': 'mantis', 'tr-action': 'create', 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project, 'tr-params': params}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'created'
        assert (exp in res), 'message contains {0}'.format(exp)        
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_trac
      Desc: Trac
      
      Test: |
        url, user, passw, project = 'https://trac.devzing.com/demo', 'demo', 'password', 'project1'
        params = 'type:defect,priority:major,summary:test hydra,description:test hydra'
        TestHead.options = {'tr-app': 'trac', 'tr-action': 'create', 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project, 'tr-params': params}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'created'
        assert (exp in res), 'message contains {0}'.format(exp)    
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_jira
      Desc: Jira
      
      Test: |
        url, user, passw, project = 'https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST'
        params = 'summary:hydra test,description:hydra desc,customfield_10024:1234567890123456789012345678901234567890'
        TestHead.options = {'tr-app': 'jira', 'tr-action': 'create', 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project, 'tr-params': params}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Create error'
        assert (exp in res), 'message contains {0}'.format(exp)  
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_testlink_suite
      Desc: TestLink test suite
      
      Test: |
        url, dev_key, project = 'http://127.0.0.1:81', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        TestHead.options = {'tr-app': 'testlink', 'tr-action': 'create', 'tr-path': 'suite 1/test', 'tr-type': 'test-suite', 'tr-url': url, 'tr-dev-key': dev_key, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'created'
        assert (exp in res), 'message contains {0}'.format(exp)             
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_testlink_plan
      Desc: TestLink test plan
      
      Test: |
        params = 'name:test'
        TestHead.options = {'tr-app': 'testlink', 'tr-action': 'create', 'tr-type': 'test-plan', 'tr-url': url, 'tr-dev-key': dev_key, 'tr-project': project, 'tr-params': params}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'created'
        assert (exp in res), 'message contains {0}'.format(exp) 
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_testlink_test
      Desc: TestLink test
      
      Test: |
        params = 'testcasename:test,authorlogin:lynus,summary:test'
        TestHead.options = {'tr-app': 'testlink', 'tr-action': 'create', 'tr-type': 'test', 'tr-path': 'suite 1/test', 'tr-url': url, 'tr-dev-key': dev_key, 'tr-project': project, 'tr-params': params}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'created'
        assert (exp in res), 'message contains {0}'.format(exp) 
        th.post_replace() 
        th.clear_cmd()     
        
Test-Scenario-9:
  Id: ts_09
  Path: hydratk/extensions/trackapps/01_methods_ut.jedi
  Name: ts_update
  Desc: Test method update
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead      
    import sys
 
    try:
        from StringIO import StringIO
    except ImportError:
        from io import StringIO  
        
  Test-Case-1:
    Id: tc_01
    Name: tc_update
    Desc: Update record
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_bugzilla
      Desc: Bugzilla            
      
      Test: |
        th = TestHead()
        ext = th._ext['TrackApps']
        th.pre_replace()
        url, user, passw = 'https://app.devzing.com/demo/bugzilla', 'demo@devzing.com', 'password'
        TestHead.options = {'tr-app': 'bugzilla', 'tr-action': 'update', 'tr-id': -1, 'tr-url': url, 'tr-user': user, 'tr-passw': passw}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Update error'
        assert (exp in res), 'message contains {0}'.format(exp)  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_mantis
      Desc: Mantis
      
      Test: |
        url, user, passw, project = 'https://app.devzing.com/demo/mantisbt', 'demo', 'password', 'Sample Project'
        TestHead.options = {'tr-app': 'mantis', 'tr-action': 'update', 'tr-id': -1, 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Update error'
        assert (exp in res), 'message contains {0}'.format(exp)        
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_trac
      Desc: Trac
      
      Test: |
        url, user, passw, project = 'https://trac.devzing.com/demo', 'demo', 'password', 'project1'
        TestHead.options = {'tr-app': 'trac', 'tr-action': 'update', 'tr-id': -1, 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Update error'
        assert (exp in res), 'message contains {0}'.format(exp)    
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_jira
      Desc: Jira
      
      Test: |
        url, user, passw, project = 'https://freeswitch.org/jira', 'lynus', 'bowman', 'TEST'
        TestHead.options = {'tr-app': 'jira', 'tr-action': 'update', 'tr-id': -1, 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Update error'
        assert (exp in res), 'message contains {0}'.format(exp)  
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_testlink
      Desc: TestLink
      
      Test: |
        url, dev_key, project = 'http://127.0.0.1:81', '3db69a303c75cdaa08c98b12d5f9f2aa', 'bowman'
        params = 'plan:1'
        TestHead.options = {'tr-app': 'testlink', 'tr-action': 'update', 'tr-type': 'test', 'tr-id': -1, 'tr-url': url, 'tr-dev-key': dev_key, 'tr-project': project, 'tr-params': params}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Update error'
        assert (exp in res), 'message contains {0}'.format(exp) 
        th.post_replace()
        th.clear_cmd()
        
Test-Scenario-10:
  Id: ts_10
  Path: hydratk/extensions/trackapps/01_methods_ut.jedi
  Name: ts_delete
  Desc: Test method delete
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead      
    import sys
 
    try:
        from StringIO import StringIO
    except ImportError:
        from io import StringIO  
        
  Test-Case-1:
    Id: tc_01
    Name: tc_delete
    Desc: Delete record
        
    Test-Condition-1: 
      Id: tco_01
      Name: tco_mantis
      Desc: Mantis
      
      Test: |
        th = TestHead()
        ext = th._ext['TrackApps']
        th.pre_replace()      
        url, user, passw, project = 'https://app.devzing.com/demo/mantisbt', 'demo', 'password', 'Sample Project'
        TestHead.options = {'tr-app': 'mantis', 'tr-action': 'delete', 'tr-id': -1, 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Delete error'
        assert (exp in res), 'message contains {0}'.format(exp)        
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_trac
      Desc: Trac
      
      Test: |
        url, user, passw, project = 'https://trac.devzing.com/demo', 'demo', 'password', 'project1'
        TestHead.options = {'tr-app': 'trac', 'tr-action': 'delete', 'tr-id': -1, 'tr-url': url, 'tr-user': user, 'tr-passw': passw, 'tr-project': project}
        old = sys.stdout
        sys.stdout = res = StringIO()          
        ext.handle_track()
        res = res.getvalue()
        sys.stdout = old          
        
      Validate: |
        this.test_result = res
        exp = 'Delete error'
        assert (exp in res), 'message contains {0}'.format(exp)   
        th.post_replace()                                                                                                                                                