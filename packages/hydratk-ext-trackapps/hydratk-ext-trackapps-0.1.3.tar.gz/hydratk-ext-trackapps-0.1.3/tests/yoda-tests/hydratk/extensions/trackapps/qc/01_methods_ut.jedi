Test-Scenario-1:
  Id: ts_01
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_init
  Desc: Test __init__ method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize client
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_default
      Desc: Default initialization
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('qc')
        res = c.__class__.__name__
        
      Validate: |
        this.test_result = res
        assert (res == 'Client'), '__init__ = Client'
        res = [c._return_fields, c._default_values, c._url, c._user, c._passw, c._domain, c._project]
        return_fields = {'defect':None, 'test':None, 'test-set':None, 'test-instance':None}
        default_values = {'defect':{}, 'test':{}, 'test-set':{}, 'test-instance':{}}
        exp = [return_fields, default_values, None, None, None, None, None]
        this.test_result = str(res)
        assert (res == exp), '_return_fields, _default_values, _url, _user, _passw, _domain, _project = {0}'.format(exp)       
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_config
      Desc: Initialization with configuration
      
      Test: |
        cfg = mh.cfg['Extensions']['TrackApps']['qc']
        return_fields, default_values, url, user, passw, domain, project = {'a':'x', 'b':'y'}, {'a':'x%1', 'b':'y%2'}, 'url', 'user', 'passw', 'dom', 'proj'
        cfg['return_fields'] = return_fields
        cfg['default_values'] = default_values
        cfg['url'] = url
        cfg['user'] = user
        cfg['passw'] = passw
        cfg['domain'] = domain
        cfg['project'] = project
        c = ext.init_client('qc')
        res = c.__class__.__name__
      
      Validate: | 
        this.test_result = res
        assert (res == 'Client'), '__init__ = Client'
        res = [c._return_fields, c._default_values, c._url, c._user, c._passw, c._domain, c._project]
        exp = [{'a':['x'], 'b':['y']}, {'a': {'x': '1'}, 'b': {'y': '2'}}, url, user, passw, domain, project]   
        this.test_result = str(res)    
        assert (res == exp), '_return_fields, _default_values, _url, _user, _passw, _domain, _project = {0}'.format(exp)
        cfg['url'] = cfg['user'] = cfg['passw'] = cfg['domain'] = cfg['project'] = None
        cfg['return_fields'] = cfg['default_values'] = {}        
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_props
  Desc: Test properties
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_getters
    Desc: Getter methods
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_client
      Desc: Getter client
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('qc')
        c.connect('https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB')
        res = c.client.__class__.__name__        
      
      Validate: |        
        this.test_result = res
        exp = c._client.__class__.__name__
        assert (res == exp), 'client = {0}'.format(exp)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_url
      Desc: Getter url
      
      Test: |
        res = c.url       
      
      Validate: |        
        this.test_result = res
        exp = c._url
        assert (res == exp), 'url = {0}'.format(exp)     
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_user
      Desc: Getter user
      
      Test: |
        res = c.user   
      
      Validate: |        
        this.test_result = res
        exp = c._user
        assert (res == exp), 'user = {0}'.format(exp)
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_passw
      Desc: Getter passw
      
      Test: |
        res = c.passw  
      
      Validate: |        
        this.test_result = res
        exp = c._passw
        assert (res == exp), 'passw = {0}'.format(exp) 
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_domain
      Desc: Getter domain
      
      Test: |
        res = c.domain
      
      Validate: |        
        this.test_result = res
        exp = c._domain
        assert (res == exp), 'domain = {0}'.format(exp)  
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_project
      Desc: Getter project
      
      Test: |
        res = c.project  
      
      Validate: |        
        this.test_result = res
        exp = c._project
        assert (res == exp), 'project = {0}'.format(exp)                            
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_cookie
      Desc: Cookie token
      
      Test: |
        res = c.cookie  
      
      Validate: |        
        this.test_result = res
        exp = c._cookie
        assert (res == exp), 'cookie = {0}'.format(exp)  
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_return_fields
      Desc: Getter return_fields
      
      Test: |
        res = c.return_fields
      
      Validate: |        
        this.test_result = str(res)
        exp = c._return_fields
        assert (res == exp), 'return_fields = {0}'.format(exp)
        
    Test-Condition-9: 
      Id: tco_09
      Name: tco_default_values
      Desc: Getter default_values
      
      Test: |
        res = c.default_values
      
      Validate: |        
        this.test_result = str(res)
        exp = c._default_values
        assert (res == exp), 'default_values = {0}'.format(exp) 
        
    Test-Condition-10: 
      Id: tco_10
      Name: tco_is_connected
      Desc: Getter is_connected
      
      Test: |
        res = c.is_connected
      
      Validate: |        
        this.test_result = res
        exp = c._is_connected
        assert (res == exp), 'is_connected = {0}'.format(exp)
        c.disconnect()         
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_connect
  Desc: Test method connect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_connect
    Desc: Connect to server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_connect
      Desc: Connect
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_connect', 'track_after_connect']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        res = c.connect(url, user, passw, domain, project)   
      
      Validate: |    
        this.test_result = res
        assert (res), 'connect = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'connect fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0] 
        c.disconnect()  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_config
      Desc: Connect from configuration
      
      Test: |
        cfg = mh.cfg['Extensions']['TrackApps']['qc']
        cfg['url'] = url
        cfg['user'] = user
        cfg['passw'] = passw
        cfg['domain'] = domain
        cfg['project'] = project
        c = ext.init_client('qc')
        res = c.connect()
      
      Validate: |        
        this.test_result = res
        assert (res), 'connect = True'
        c.disconnect()
        cfg['url'] = cfg['user'] = cfg['passw'] = cfg['domain'] = cfg['project'] = None   
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_url
      Desc: Invalid url  
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'xx', 'xx', 'xx', 'xx', 'xx'   
        res = c.connect(url, user, passw, domain, project)
      
      Validate: |                       
        this.test_result = res
        assert (not res), 'connect = False'    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_user
      Desc: Invalid user
      
      Test: |
        url = 'https://aqc.kbc.be:2503/qcbin'
        res = c.connect(url, user, passw, domain, project)
      
      Validate: |                       
        this.test_result = res
        assert (not res), 'connect = False'                   
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_disconnect
  Desc: Test method disconnect
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    
  Test-Case-1:
    Id: tc_01
    Name: tc_disconnect
    Desc: Disconnect from server
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_disconnect
      Desc: Disconnect
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']             
        c = ext.init_client('qc')                            
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        res = c.disconnect()
        
      Validate: |
        this.test_result = res
        assert (res), 'disconnect = True' 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server 
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps'] 
        c = ext.init_client('qc')                                        
        res = c.disconnect()
        
      Validate: |
        this.test_result = res
        assert (not res), 'disconnect = False'  
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_read
  Desc: Test method read
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_defect
    Desc: Read defect
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_read
      Desc: Read defect
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_read', 'track_after_read']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        id = '63274' 
        res, recs = c.read(id)  
      
      Validate: |    
        this.test_result = res
        assert (res), 'read = True'        
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'read fires {0}'.format(evs)
        res = [str(recs[0]['id'])]
        exp = [id]
        this.test_result = str(res)
        assert (res == exp), 'record contains {0}'.format(exp)          
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]        
        del events[0]                      
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_fields
      Desc: Get requested fields
      
      Test: |
        fields = ['id', 'name', 'owner']
        res, recs = c.read(id, fields=fields)
        
      Validate: |
        this.test_result = str(recs)
        res = sorted(recs[0].keys())
        assert (res == fields), 'fields = {0}'.format(fields)
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_query
      Desc: Use query
      
      Test: |
        res, recs = c.read(query='{ID[=63274]}')
      
      Validate: |                             
        this.test_result = str(recs)
        assert (len(recs) > 0), 'records is not empty'
        this.test_result = res = str(recs[-1]['id'])
        assert (res == id), 'record id = {0}'.format(id)                    
        c.disconnect()      
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']
        c = ext.init_client('qc')
        res, recs = c.read()
      
      Validate: |     
        this.test_result = res
        assert (not res), 'read = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_id
      Desc: Invalid id
      
      Test: |
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        res, recs = c.read(id=-1)      
      
      Validate: |               
        this.test_result = str(recs)
        assert (len(recs) == 0), 'records is empty'
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_field
      Desc: Invalid field
      
      Test: |
        res, recs = c.read(id=63274, fields=['xx'])
      
      Validate: | 
        this.test_result = str(recs)
        assert (recs == None or len(recs) == 0), 'records is empty'             
        c.disconnect()            
        
Test-Scenario-6:
  Id: ts_06
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_create
  Desc: Test method create
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_defect
    Desc: Create defect
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_create
      Desc: Create defect
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_create', 'track_after_create']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        params = {'name': 'test hydra', 'user-16': '4_Small Impact', 'user-15': '3_Not Urgent', 'user-03': 'AREL 1603 CZ LONG',
                  'user-29': 'NAJ - Utility file for communication (FTP mailer) CSOB', 'user-05': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)',
                  'user-07': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)', 'user-31': 'I03.06.01.12/001 - DIR maintenance testers',
                  'user-37': 'I03.06.01.12/001 - DIR maintenance testers', 'description': 'test hydra', 'detected-by': 'je15291', 'user-18': '1_Open'}
        id = c.create(params=params) 
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'id {0} > 0'.format(id)        
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'create fires {0}'.format(evs)
        res, recs = c.read(id)
        res = [recs[0]['id'], recs[0]['name'], recs[0]['user-16'], recs[0]['user-15'], recs[0]['user-03'], recs[0]['user-29'], recs[0]['user-05'],
               recs[0]['user-07'], recs[0]['user-31'], recs[0]['user-37'], recs[0]['description'], recs[0]['user-18']]
        exp = [id, params['name'], params['user-16'], params['user-15'], params['user-03'], params['user-29'], params['user-05'],
               params['user-07'], params['user-31'], params['user-37'], '<html><body>\ntest hydra\n</body></html>', params['user-18']]
        this.test_result = str(res)
        assert (res == exp), 'record contains {0}'.format(exp)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]        
        del events[0] 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_default_values
      Desc: Default values
      
      Test: |
        cfg = mh.cfg['Extensions']['TrackApps']['qc']
        user_03, user_18 = 'AREL 1603 CZ LONG', '1_Open'
        c._default_values['defect'] = {'user-03': user_03, 'user-18': user_18}
        params = {'name': 'test hydra', 'user-16': '4_Small Impact', 'user-15': '3_Not Urgent', 
                  'user-29': 'NAJ - Utility file for communication (FTP mailer) CSOB', 'user-05': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)',
                  'user-07': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)', 'user-31': 'I03.06.01.12/001 - DIR maintenance testers',
                  'user-37': 'I03.06.01.12/001 - DIR maintenance testers', 'description': 'test hydra', 'detected-by': 'je15291'}
        id = c.create(params=params)
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'id {0} > 0'.format(id)  
        res, recs = c.read(id)
        res = [recs[0]['id'], recs[0]['name'], recs[0]['user-16'], recs[0]['user-15'], recs[0]['user-03'], recs[0]['user-29'], recs[0]['user-05'],
               recs[0]['user-07'], recs[0]['user-31'], recs[0]['user-37'], recs[0]['description'], recs[0]['user-18']]
        exp = [id, params['name'], params['user-16'], params['user-15'], user_03, params['user-29'], params['user-05'],
               params['user-07'], params['user-31'], params['user-37'], '<html><body>\ntest hydra\n</body></html>', user_18]
        this.test_result = str(res)
        assert (res == exp), 'record contains {0}'.format(exp)
        c._default_values = {}   
        c.disconnect() 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps'] 
        c = ext.init_client('qc')  
        res = c.create({})    
      
      Validate: |             
        this.test_result = res
        assert (res == None), 'create = None'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_missing_params
      Desc: Missing params
      
      Test: |
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        res = c.create({})      
      
      Validate: | 
        this.test_result = res
        assert (res == None), 'create = None'  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_missing_required
      Desc: Missing required params 
                       
      Test: |
        params = {'name': 'test hydra', 'user-16': '4_Small Impact', 'user-15': '3_Not Urgent', 'user-03': 'AREL 1603 CZ LONG',
                  'user-29': 'NAJ - Utility file for communication (FTP mailer) CSOB', 'user-05': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)',
                  'user-07': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)', 'user-31': 'I03.06.01.12/001 - DIR maintenance testers',
                  'user-37': 'I03.06.01.12/001 - DIR maintenance testers', 'description': 'test hydra', 'user-18': '1_Open'}
        res = c.create(params=params)
      
      Validate: |
        this.test_result = res
        assert (res == None), 'create = None'     
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_invalid_param
      Desc: Invalid param
                       
      Test: |
        params['detected-by'], params['xx'] = 'je15291', 'xx'
        res = c.create(params=params)
      
      Validate: |
        this.test_result = res
        assert (res == None), 'create = None'  
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_invalid_value
      Desc: Invalid value
                       
      Test: |
        del params['xx']
        params['detected-by'] = 'xx'
        res = c.create(params=params)
      
      Validate: |
        this.test_result = res
        assert (res == None), 'create = None'            
        c.disconnect()                
        
Test-Scenario-7:
  Id: ts_07
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_update
  Desc: Test method update
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_defect
    Desc: Update defect
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_update
      Desc: Update defect
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_update', 'track_after_update']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        params = {'name': 'test hydra', 'user-16': '4_Small Impact', 'user-15': '3_Not Urgent', 'user-03': 'AREL 1603 CZ LONG',
                  'user-29': 'NAJ - Utility file for communication (FTP mailer) CSOB', 'user-05': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)',
                  'user-07': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)', 'user-31': 'I03.06.01.12/001 - DIR maintenance testers',
                  'user-37': 'I03.06.01.12/001 - DIR maintenance testers', 'description': 'test hydra', 'detected-by': 'je15291', 'user-18': '1_Open'}
        id = c.create(params=params)
        val = 'test hydra 2'
        res = c.update(id, params={'name': val}) 
      
      Validate: |    
        this.test_result = res
        assert (res), 'update = True'        
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'update fires {0}'.format(evs)
        res, recs = c.read(id)
        res = [recs[0]['id'], recs[0]['name'], recs[0]['user-16'], recs[0]['user-15'], recs[0]['user-03'], recs[0]['user-29'], recs[0]['user-05'],
               recs[0]['user-07'], recs[0]['user-31'], recs[0]['user-37'], recs[0]['description'], recs[0]['user-18']]
        exp = [id, val, params['user-16'], params['user-15'], params['user-03'], params['user-29'], params['user-05'],
               params['user-07'], params['user-31'], params['user-37'], '<html><body>\ntest hydra\n</body></html>', params['user-18']]
        this.test_result = str(res)
        assert (res == exp), 'record contains {0}'.format(exp)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]        
        del events[0]  
        c.disconnect()            
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps'] 
        c = ext.init_client('qc')  
        res = c.update(None)    
      
      Validate: |             
        this.test_result = res
        assert (not res), 'update = False' 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_id
      Desc: Invalid id
                 
      Test: |
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        res = c.update(-1)      
      
      Validate: |
        this.test_result = res
        assert (not res), 'update = False'       
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_value
      Desc: Invalid value
                       
      Test: |
        params = {'name': 'test hydra', 'user-16': '4_Small Impact', 'user-15': '3_Not Urgent', 'user-03': 'AREL 1603 CZ LONG',
                  'user-29': 'NAJ - Utility file for communication (FTP mailer) CSOB', 'user-05': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)',
                  'user-07': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)', 'user-31': 'I03.06.01.12/001 - DIR maintenance testers',
                  'user-37': 'I03.06.01.12/001 - DIR maintenance testers', 'description': 'test hydra', 'detected-by': 'je15291', 'user-18': '1_Open'}
        id = c.create(params=params)
        res = c.update(id, params={'detected-by': 'xx'})
      
      Validate: |
        this.test_result = res
        assert (not res), 'update = False'  
        c.disconnect()     
        
Test-Scenario-8:
  Id: ts_08
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_delete
  Desc: Test method delete
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_defect
    Desc: Delete defect
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_delete
      Desc: Delete defect
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_delete', 'track_after_delete']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        params = {'name': 'test hydra', 'user-16': '4_Small Impact', 'user-15': '3_Not Urgent', 'user-03': 'AREL 1603 CZ LONG',
                  'user-29': 'NAJ - Utility file for communication (FTP mailer) CSOB', 'user-05': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)',
                  'user-07': 'JE15291 - CZADERNA PETR (I03.06.01.12/001)', 'user-31': 'I03.06.01.12/001 - DIR maintenance testers',
                  'user-37': 'I03.06.01.12/001 - DIR maintenance testers', 'description': 'test hydra', 'detected-by': 'je15291', 'user-18': '1_Open'}
        id = c.create(params=params)
        res = c.delete(id)
      
      Validate: |    
        this.test_result = res
        assert (not res), 'delete = False'        
        res = events[0]._id
        this.test_result = str(res)
        assert (res == evs[0]), 'delete fires {0}'.format(evs[0])
        res, recs = c.read(id)
        this.test_result = res
        assert (res), 'record {0} not deleted'.format(id)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]   
        c.disconnect()      
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps'] 
        c = ext.init_client('qc')  
        res = c.delete(None)    
      
      Validate: |             
        this.test_result = res
        assert (not res), 'delete = False' 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_id
      Desc: Invalid id
                 
      Test: |
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, project)
        res = c.delete(-1)      
      
      Validate: |
        this.test_result = res
        assert (not res), 'delete = False'  
        c.disconnect()                                                      
        
Test-Scenario-9:
  Id: ts_09
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_read_test_folder
  Desc: Test method read_test_folder
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_test_folder
    Desc: Read test folder
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_empty
      Desc: Empty test folder
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_read_folder', 'track_after_read_folder']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project) 
        res, recs = c.read_test_folder('Subject/ATV_N57_Asset Management (SAP-AM) CSOB/test 2')  
      
      Validate: |    
        this.test_result = res
        assert (res), 'read_test_folder = True'
        this.test_result = str(recs)
        assert (len(recs.values()[0]) == 0), 'output is empty'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'read_test_folder fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_single
      Desc: Single test folder
      
      Test: |
        folder = 'Subject/ATV_N57_Asset Management (SAP-AM) CSOB/test'
        res, recs = c.read_test_folder(folder)
      
      Validate: |   
        this.test_result = res
        assert (res), 'read_test_folder = True'
        this.test_result = str(recs)
        assert (len(recs) == 1 and len(recs[folder]) == 1), 'output contains 1 folder with 1 record'
        res = [recs[folder][0]['name']]
        exp = ['Test CM3']
        assert (res == exp), 'record contains {0}'.format(exp)       
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_mult
      Desc: Multiple test set folders
      
      Test: |
        folder = 'Subject/ATV_N57_Asset Management (SAP-AM) CSOB'
        folders = ['Subject/ATV_N57_Asset Management (SAP-AM) CSOB',
                  'Subject/ATV_N57_Asset Management (SAP-AM) CSOB/DTB_NYG_Self Service Portal (SSP-syst\xc4\x82\xc5\xa0m) CSOB',
                  'Subject/ATV_N57_Asset Management (SAP-AM) CSOB/DTB_NYG_Self Service Portal (SSP-syst\xc4\x82\xc5\xa0m) CSOB/SEPA nov\xc4\x82\xc4\x84',
                  'Subject/ATV_N57_Asset Management (SAP-AM) CSOB/DTB_NYG_Self Service Portal (SSP-syst\xc4\x82\xc5\xa0m) CSOB/SEPA nov\xc4\x82\xc4\x84/SEPA_TESTY',
                  'Subject/ATV_N57_Asset Management (SAP-AM) CSOB/test', 'Subject/ATV_N57_Asset Management (SAP-AM) CSOB/test 2']
        res, recs = c.read_test_folder(folder)
      
      Validate: |
        this.test_result = res
        assert (res), 'read_test_folder = True'
        this.test_result = str(recs)
        assert (sorted(recs.keys()) == folders), 'output contains folders {0}'.format(suites)  
        res = [len(recs[folders[0]]), len(recs[folders[1]]), len(recs[folders[2]]), len(recs[folders[3]]), len(recs[folders[4]]), len(recs[folders[5]])]
        exp = [1, 0, 0, 1, 1, 0]
        assert (res == exp), 'folders contain {0} records'.format(exp)            
        c.disconnect()                 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_test_set_folder
    Desc: Read test set folder
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_empty
      Desc: Empty test set folder
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_read_folder', 'track_after_read_folder']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project) 
        res, recs = c.read_test_folder('Root/AREL 1410 CZ LONG/Maintenance', entity='test-set-folder')  
      
      Validate: |    
        this.test_result = res
        assert (res), 'read_test_folder = True'
        this.test_result = str(recs)
        assert (len(recs.values()[0]) == 0), 'output is empty'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'read_test_folder fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]   
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_single
      Desc: Single test set folder
      
      Test: |
        folder = 'Root/AREL 1410 CZ LONG/Projects/GC012145.M025444-DMS - PILOT PBA for biometric signatures/INT'
        res, recs = c.read_test_folder(folder, entity='test-set-folder')
      
      Validate: |   
        this.test_result = res
        assert (res), 'read_test_folder = True'
        this.test_result = str(recs)
        assert (len(recs) == 1 and len(recs[folder]) == 2), 'output contains 1 folder with 1 record'
        res = [recs[folder][0]['name']]
        exp = ['INT-E2E']
        assert (res == exp), 'record contains {0}'.format(exp)    
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_mult
      Desc: Multiple test set folders
      
      Test: |
        folder = 'Root/AREL 1410 CZ LONG/Projects/GC012145.M025444-DMS - PILOT PBA for biometric signatures'
        folders = ['Root/AREL 1410 CZ LONG/Projects/GC012145.M025444-DMS - PILOT PBA for biometric signatures',
                  'Root/AREL 1410 CZ LONG/Projects/GC012145.M025444-DMS - PILOT PBA for biometric signatures/ACC',
                  'Root/AREL 1410 CZ LONG/Projects/GC012145.M025444-DMS - PILOT PBA for biometric signatures/INT']
        res, recs = c.read_test_folder(folder, entity='test-set-folder')
      
      Validate: |
        this.test_result = res
        assert (res), 'read_test_folder = True'
        this.test_result = str(recs)
        assert (sorted(recs.keys()) == folders), 'output contains folders {0}'.format(suites)  
        res = [len(recs[folders[0]]), len(recs[folders[1]]), len(recs[folders[2]])]
        exp = [0, 3, 2]
        assert (res == exp), 'folders contain {0} records'.format(exp)              
        c.disconnect()     
        
  Test-Case-3:
    Id: tc_03
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']  
        c = ext.init_client('qc')
        res, recs = c.read_test_folder('')       
      
      Validate: |       
        this.test_result = res
        assert (not res), 'read_test_folder = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_folder
      Desc: Invalid test folder
      
      Test: |
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project) 
        res, recs = c.read_test_folder('Subject/XYZ')
      
      Validate: | 
        this.test_result = res
        assert (not res), 'read_test_folder = False'
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_set_folder
      Desc: Invalid test set folder
      
      Test: |
        res, recs = c.read_test_folder('Root/XYZ', entity='test-set-folder')
      
      Validate: | 
        this.test_result = res
        assert (not res), 'read_test_folder = False'        
        c.disconnect()        
        
Test-Scenario-10:
  Id: ts_10
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_create_test_folder
  Desc: Test method create_test_folder
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_test_folder
    Desc: Create test folder
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_folder
      Desc: Create test folder
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_create', 'track_after_create']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        path, folder = 'Subject/ATV_N57_Asset Management (SAP-AM) CSOB', 'test3' 
        id = c.create_test_folder(path, folder) 
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'create_test_folder id {0} > 0'.format(id)
        folder = path + '/' + folder
        res, recs = c.read_test_folder(folder)
        this.test_result = str(recs)
        assert (res and folder in recs and len(recs[folder]) == 0), 'folder {0} created'.format(folder)
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'create_test_folder fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]                 
        c.disconnect() 
        
  Test-Case-2:
    Id: tc_02
    Name: tc_test_set_folder
    Desc: Create test set folder
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_folder
      Desc: Create test set folder
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_create', 'track_after_create']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        path, folder = 'Root/AREL 1410 CZ LONG/Projects/GC012145.M025444-DMS - PILOT PBA for biometric signatures/INT', 'test' 
        id = c.create_test_folder(path, folder, entity='test-set-folder') 
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'create_test_folder id {0} > 0'.format(id)
        folder = path + '/' + folder
        res, recs = c.read_test_folder(folder, entity='test-set-folder')
        this.test_result = str(recs)
        assert (res and folder in recs and len(recs[folder]) == 0), 'folder {0} created'.format(folder)
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'create_test_folder fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]                 
        c.disconnect()         
        
  Test-Case-3:
    Id: tc_03
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']  
        c = ext.init_client('qc')
        id = c.create_test_folder('', '')
      
      Validate: |
        this.test_result = id
        assert (id == None), 'create_test_folder = None'
    
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_path
      Desc: Invalid path
      
      Test: |
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        id = c.create_test_folder('xx', '')      
      
      Validate: |    
        this.test_result = id
        assert (id == None), 'create_test_folder = None'  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_duplicate
      Desc: Duplicate test folder
      
      Test: |
        id = c.create_test_folder('Subject/ATV_N57_Asset Management (SAP-AM) CSOB', 'test3')
      
      Validate: |                           
        this.test_result = id
        assert (id == None), 'create_test_folder = None'
        c.disconnect()             
        
Test-Scenario-11:
  Id: ts_11
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_read_test_set
  Desc: Test method read_test_set
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_test_set
    Desc: Read test set
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_empty
      Desc: Empty test set
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_read_set', 'track_after_read_set']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project) 
        res, recs = c.read_test_set(42347)  
      
      Validate: |    
        this.test_result = res
        assert (res), 'read_test_set = True'
        this.test_result = str(recs)
        assert (len(recs) == 0), 'output is empty'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'read_test_set fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0] 
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_not_empty
      Desc: Not empty test set
      
      Test: |
        res, recs = c.read_test_set(19175)
      
      Validate: |   
        this.test_result = res
        assert (res), 'read_test_set = True'
        this.test_result = str(recs)
        assert (len(recs) == 4), 'output contains 1 folder with 4 records'
        res = [recs[0]['status'], recs[0]['actual-tester']]
        exp = ['Failed', 'jd36312']
        assert (res == exp), 'record contains {0}'.format(exp)                
        c.disconnect()       
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']  
        c = ext.init_client('qc')
        res, recs = c.read_test_set('')       
      
      Validate: |       
        this.test_result = res
        assert (not res), 'read_test_set = False'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_set
      Desc: Invalid test set
      
      Test: |
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project) 
        res, recs = c.read_test_set(-1)
      
      Validate: | 
        this.test_result = res
        assert (res), 'read_test_set = True'     
        c.disconnect()          
        
Test-Scenario-12:
  Id: ts_12
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_create_test_set
  Desc: Test method create_test_set
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_test_set
    Desc: Create test set
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_set
      Desc: Create test set
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_create', 'track_after_create']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        path = 'Root/AREL 1410 CZ LONG/Projects/GC012145.M025444-DMS - PILOT PBA for biometric signatures/INT'
        params = {'name': 'test', 'subtype-id': 'hp.qc.test-set.default'}
        id = c.create_test_set(path, params) 
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'create_test_set id {0} > 0'.format(id)
        res, recs = c.read_test_set(id)
        this.test_result = str(recs)
        assert (res and len(recs) == 0), 'set created'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'create_test_set fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]                 
        c.disconnect()   
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']  
        c = ext.init_client('qc')
        res = c.create_test_set('')       
      
      Validate: |       
        this.test_result = res
        assert (res == None), 'create_test_set = None'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_path
      Desc: Invalid path
      
      Test: |
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project) 
        res = c.create_test_set('xx')
      
      Validate: | 
        this.test_result = res
        assert (res == None), 'create_test_set = None'  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_missing_param
      Desc: Missing param
      
      Test: |
        path = 'Root/AREL 1410 CZ LONG/Projects/GC012145.M025444-DMS - PILOT PBA for biometric signatures/INT' 
        res = c.create_test_set(path, {'name': 'test'})
      
      Validate: | 
        this.test_result = res
        assert (res == None), 'create_test_set = None'    
        
    Test-Condition-4: 
      Id: tco_03
      Name: tco_invalid_value
      Desc: Invalid param value
      
      Test: |
        res = c.create_test_set(path, {'name': 'test', 'subtype-id': 'xx'})
      
      Validate: | 
        this.test_result = res
        assert (res == None), 'create_test_set = None'                  
        c.disconnect()        
        
Test-Scenario-13:
  Id: ts_13
  Path: hydratk/extensions/trackapps/qc/01_methods_ut.jedi
  Name: ts_create_test
  Desc: Test method create_test
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    
  Test-Case-1:
    Id: tc_01
    Name: tc_test
    Desc: Create test
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_create_test
      Desc: Create test
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']           
        evs = ['track_before_create', 'track_after_create']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])
        c = ext.init_client('qc')
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project)
        path = 'Subject/ATV_N57_Asset Management (SAP-AM) CSOB/test'
        params = {'name': 'test', 'subtype-id': 'MANUAL', 'owner': 'je15291'}
        test = c.create_test(path, params) 
      
      Validate: |    
        this.test_result = test
        assert (test > 0), 'create_test id {0} > 0'.format(test)
        res, recs = c.read(test, entity='test')
        this.test_result = str(recs)
        assert (res and len(recs) == 1), 'test created'
        res = [recs[0]['name'], recs[0]['subtype-id']]
        exp = [params['name'], params['subtype-id']]
        assert (res == exp), 'record contains {0}'.format(exp)
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'create_test fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_update_test
      Desc: Update test  
      
      Test: |
        params = {'name': 'test 2'}
        res = c.update(test, entity='test', params=params)
      
      Validate: | 
        this.test_result = res
        assert (res == True), 'update = True'    
        res, recs = c.read(test, entity='test')
        this.test_result = str(recs)
        res = [recs[0]['name']]
        exp = [params['name']]   
        assert (res == exp), 'record contains {0}'.format(exp)
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_create_instance
      Desc: Create test instance
      
      Test: |
        path = 'Root/AREL 1410 CZ LONG/Projects/GC012145.M025444-DMS - PILOT PBA for biometric signatures/INT'
        params = {'name': 'test', 'subtype-id': 'hp.qc.test-set.default'}
        test_set = c.create_test_set(path, params) 
        params = {'cycle-id': test_set, 'test-id': test, 'test-order': '1', 'subtype-id': 'hp.qc.test-instance.MANUAL'}
        id = c.create(entity='test-instance', params=params)      
      
      Validate: |    
        this.test_result = id
        assert (id > 0), 'create id {0} > 0'.format(id)      
        res, recs = c.read(id, entity='test-instance')
        this.test_result = str(recs)
        assert (res and len(recs) == 1), 'test instance created'
        res = [recs[0]['cycle-id'], recs[0]['test-id'], recs[0]['subtype-id']]
        exp = [params['cycle-id'], params['test-id'], params['subtype-id']]
        assert (res == exp), 'record contains {0}'.format(exp)   
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_update_instance
      Desc: Update test instance
      
      Test: |
        params = {'status': 'Blocked'}
        res = c.update(id, entity='test-instance', params=params)
      
      Validate: | 
        this.test_result = res
        assert (res == True), 'update = True'    
        res, recs = c.read(id, entity='test-instance')
        this.test_result = str(recs)
        res = [recs[0]['status']]
        exp = [params['status']]   
        assert (res == exp), 'record contains {0}'.format(exp)                        
        c.disconnect()     
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_connected
      Desc: Not connected to server
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['TrackApps']  
        c = ext.init_client('qc')
        res = c.create_test('')       
      
      Validate: |       
        this.test_result = res
        assert (res == None), 'create_test = None'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_invalid_path
      Desc: Invalid path
      
      Test: |
        url, user, passw, domain, project = 'https://aqc.kbc.be:2503/qcbin', 'je15867', 'Bowmanlop1', 'IDV0_CSOB', 'CSOB'
        c.connect(url, user, passw, domain, project) 
        res = c.create_test('xx')
      
      Validate: | 
        this.test_result = res
        assert (res == None), 'create_test = None'  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_missing_param
      Desc: Missing param
      
      Test: |
        path = 'Subject/ATV_N57_Asset Management (SAP-AM) CSOB/test' 
        res = c.create_test(path, {'name': 'test'})
      
      Validate: | 
        this.test_result = res
        assert (res == None), 'create_test = None'    
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_invalid_value
      Desc: Invalid param value
      
      Test: |
        res = c.create_test(path, {'name': 'test', 'owner': 'je15291', 'subtype-id': 'xx'})
      
      Validate: | 
        this.test_result = res
        assert (res == None), 'create_test = None'                  
        c.disconnect()                         