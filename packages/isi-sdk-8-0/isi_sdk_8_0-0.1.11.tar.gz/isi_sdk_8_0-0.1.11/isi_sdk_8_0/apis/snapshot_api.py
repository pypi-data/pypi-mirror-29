# coding: utf-8

"""
SnapshotApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SnapshotApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_snapshot_aliase(self, snapshot_aliase, **kwargs):
        """
        
        Create a new snapshot alias.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_snapshot_aliase(snapshot_aliase, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SnapshotAliaseCreateParams snapshot_aliase:  (required)
        :return: CreateSnapshotAliaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_aliase']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_snapshot_aliase" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_aliase' is set
        if ('snapshot_aliase' not in params) or (params['snapshot_aliase'] is None):
            raise ValueError("Missing the required parameter `snapshot_aliase` when calling `create_snapshot_aliase`")


        resource_path = '/platform/1/snapshot/aliases'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'snapshot_aliase' in params:
            body_params = params['snapshot_aliase']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateSnapshotAliaseResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_snapshot_changelist(self, snapshot_changelist, **kwargs):
        """
        
        Create a new changelist.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_snapshot_changelist(snapshot_changelist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SnapshotChangelists snapshot_changelist:  (required)
        :return: CreateSnapshotChangelistResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_changelist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_snapshot_changelist" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_changelist' is set
        if ('snapshot_changelist' not in params) or (params['snapshot_changelist'] is None):
            raise ValueError("Missing the required parameter `snapshot_changelist` when calling `create_snapshot_changelist`")


        resource_path = '/platform/1/snapshot/changelists'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'snapshot_changelist' in params:
            body_params = params['snapshot_changelist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateSnapshotChangelistResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_snapshot_repstate(self, snapshot_repstate, **kwargs):
        """
        
        Create a new repstates.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_snapshot_repstate(snapshot_repstate, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SnapshotRepstates snapshot_repstate:  (required)
        :return: CreateSnapshotRepstateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_repstate']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_snapshot_repstate" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_repstate' is set
        if ('snapshot_repstate' not in params) or (params['snapshot_repstate'] is None):
            raise ValueError("Missing the required parameter `snapshot_repstate` when calling `create_snapshot_repstate`")


        resource_path = '/platform/1/snapshot/repstates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'snapshot_repstate' in params:
            body_params = params['snapshot_repstate']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateSnapshotRepstateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_snapshot_schedule(self, snapshot_schedule, **kwargs):
        """
        
        Create a new schedule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_snapshot_schedule(snapshot_schedule, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SnapshotScheduleCreateParams snapshot_schedule:  (required)
        :return: CreateSnapshotScheduleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_schedule']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_snapshot_schedule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_schedule' is set
        if ('snapshot_schedule' not in params) or (params['snapshot_schedule'] is None):
            raise ValueError("Missing the required parameter `snapshot_schedule` when calling `create_snapshot_schedule`")


        resource_path = '/platform/3/snapshot/schedules'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'snapshot_schedule' in params:
            body_params = params['snapshot_schedule']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateSnapshotScheduleResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_snapshot_snapshot(self, snapshot_snapshot, **kwargs):
        """
        
        Create a new snapshot.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_snapshot_snapshot(snapshot_snapshot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SnapshotSnapshotCreateParams snapshot_snapshot:  (required)
        :return: SnapshotSnapshotExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_snapshot']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_snapshot_snapshot" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_snapshot' is set
        if ('snapshot_snapshot' not in params) or (params['snapshot_snapshot'] is None):
            raise ValueError("Missing the required parameter `snapshot_snapshot` when calling `create_snapshot_snapshot`")


        resource_path = '/platform/1/snapshot/snapshots'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'snapshot_snapshot' in params:
            body_params = params['snapshot_snapshot']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotSnapshotExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_snapshot_aliase(self, snapshot_aliase_id, **kwargs):
        """
        
        Delete the snapshot alias

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_snapshot_aliase(snapshot_aliase_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str snapshot_aliase_id: Delete the snapshot alias (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_aliase_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot_aliase" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_aliase_id' is set
        if ('snapshot_aliase_id' not in params) or (params['snapshot_aliase_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_aliase_id` when calling `delete_snapshot_aliase`")


        resource_path = '/platform/1/snapshot/aliases/{SnapshotAliaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_aliase_id' in params:
            path_params['SnapshotAliaseId'] = params['snapshot_aliase_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_snapshot_aliases(self, **kwargs):
        """
        
        Delete all or matching snapshot aliases.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_snapshot_aliases(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot_aliases" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/snapshot/aliases'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_snapshot_changelist(self, snapshot_changelist_id, **kwargs):
        """
        
        Delete the specified changelist.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_snapshot_changelist(snapshot_changelist_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str snapshot_changelist_id: Delete the specified changelist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_changelist_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot_changelist" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_changelist_id' is set
        if ('snapshot_changelist_id' not in params) or (params['snapshot_changelist_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_changelist_id` when calling `delete_snapshot_changelist`")


        resource_path = '/platform/1/snapshot/changelists/{SnapshotChangelistId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_changelist_id' in params:
            path_params['SnapshotChangelistId'] = params['snapshot_changelist_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_snapshot_repstate(self, snapshot_repstate_id, **kwargs):
        """
        
        Delete the specified repstate.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_snapshot_repstate(snapshot_repstate_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str snapshot_repstate_id: Delete the specified repstate. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_repstate_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot_repstate" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_repstate_id' is set
        if ('snapshot_repstate_id' not in params) or (params['snapshot_repstate_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_repstate_id` when calling `delete_snapshot_repstate`")


        resource_path = '/platform/1/snapshot/repstates/{SnapshotRepstateId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_repstate_id' in params:
            path_params['SnapshotRepstateId'] = params['snapshot_repstate_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_snapshot_schedule(self, snapshot_schedule_id, **kwargs):
        """
        
        Delete the schedule. This does not affect already created snapshots.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_snapshot_schedule(snapshot_schedule_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str snapshot_schedule_id: Delete the schedule. This does not affect already created snapshots. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_schedule_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot_schedule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_schedule_id' is set
        if ('snapshot_schedule_id' not in params) or (params['snapshot_schedule_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_schedule_id` when calling `delete_snapshot_schedule`")


        resource_path = '/platform/3/snapshot/schedules/{SnapshotScheduleId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_schedule_id' in params:
            path_params['SnapshotScheduleId'] = params['snapshot_schedule_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_snapshot_schedules(self, **kwargs):
        """
        
        Delete all snapshot schedules.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_snapshot_schedules(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot_schedules" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/snapshot/schedules'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_snapshot_snapshot(self, snapshot_snapshot_id, **kwargs):
        """
        
        Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_snapshot_snapshot(snapshot_snapshot_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str snapshot_snapshot_id: Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_snapshot_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot_snapshot" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_snapshot_id' is set
        if ('snapshot_snapshot_id' not in params) or (params['snapshot_snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_snapshot_id` when calling `delete_snapshot_snapshot`")


        resource_path = '/platform/1/snapshot/snapshots/{SnapshotSnapshotId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_snapshot_id' in params:
            path_params['SnapshotSnapshotId'] = params['snapshot_snapshot_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_snapshot_snapshots(self, **kwargs):
        """
        
        Delete all or matching snapshots.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_snapshot_snapshots(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str type: Only list snapshots matching this type.
        :param str schedule: Only list snapshots created by this schedule.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'schedule']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot_snapshots" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/snapshot/snapshots'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']
        if 'schedule' in params:
            query_params['schedule'] = params['schedule']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_snapshot_aliase(self, snapshot_aliase_id, **kwargs):
        """
        
        Retrieve snapshot alias information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_aliase(snapshot_aliase_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str snapshot_aliase_id: Retrieve snapshot alias information. (required)
        :return: SnapshotAliases
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_aliase_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_aliase" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_aliase_id' is set
        if ('snapshot_aliase_id' not in params) or (params['snapshot_aliase_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_aliase_id` when calling `get_snapshot_aliase`")


        resource_path = '/platform/1/snapshot/aliases/{SnapshotAliaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_aliase_id' in params:
            path_params['SnapshotAliaseId'] = params['snapshot_aliase_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotAliases',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_snapshot_changelist(self, snapshot_changelist_id, **kwargs):
        """
        
        Retrieve basic information on a changelist.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_changelist(snapshot_changelist_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str snapshot_changelist_id: Retrieve basic information on a changelist. (required)
        :return: SnapshotChangelists
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_changelist_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_changelist" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_changelist_id' is set
        if ('snapshot_changelist_id' not in params) or (params['snapshot_changelist_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_changelist_id` when calling `get_snapshot_changelist`")


        resource_path = '/platform/1/snapshot/changelists/{SnapshotChangelistId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_changelist_id' in params:
            path_params['SnapshotChangelistId'] = params['snapshot_changelist_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotChangelists',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_snapshot_license(self, **kwargs):
        """
        
        Retrieve license information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_license(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: LicenseLicense
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_license" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/snapshot/license'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LicenseLicense',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_snapshot_pending(self, **kwargs):
        """
        
        Return list of snapshots to be taken.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_pending(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Return no more than this many result at once (see resume).
        :param int begin: Unix Epoch time to start generating matches. Default is now.
        :param str schedule: Limit output only to the named schedule.
        :param int end: Unix Epoch time to end generating matches. Default is forever.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: SnapshotPending
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'begin', 'schedule', 'end', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_pending" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/snapshot/pending'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'begin' in params:
            query_params['begin'] = params['begin']
        if 'schedule' in params:
            query_params['schedule'] = params['schedule']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotPending',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_snapshot_repstate(self, snapshot_repstate_id, **kwargs):
        """
        
        Retrieve basic information on a repstate.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_repstate(snapshot_repstate_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str snapshot_repstate_id: Retrieve basic information on a repstate. (required)
        :return: SnapshotRepstates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_repstate_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_repstate" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_repstate_id' is set
        if ('snapshot_repstate_id' not in params) or (params['snapshot_repstate_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_repstate_id` when calling `get_snapshot_repstate`")


        resource_path = '/platform/1/snapshot/repstates/{SnapshotRepstateId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_repstate_id' in params:
            path_params['SnapshotRepstateId'] = params['snapshot_repstate_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotRepstates',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_snapshot_schedule(self, snapshot_schedule_id, **kwargs):
        """
        
        Retrieve the schedule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_schedule(snapshot_schedule_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str snapshot_schedule_id: Retrieve the schedule. (required)
        :return: SnapshotSchedules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_schedule_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_schedule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_schedule_id' is set
        if ('snapshot_schedule_id' not in params) or (params['snapshot_schedule_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_schedule_id` when calling `get_snapshot_schedule`")


        resource_path = '/platform/3/snapshot/schedules/{SnapshotScheduleId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_schedule_id' in params:
            path_params['SnapshotScheduleId'] = params['snapshot_schedule_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotSchedules',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_snapshot_settings(self, **kwargs):
        """
        
        List all settings

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_settings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SnapshotSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_settings" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/snapshot/settings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotSettings',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_snapshot_snapshot(self, snapshot_snapshot_id, **kwargs):
        """
        
        Retrieve snapshot information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_snapshot(snapshot_snapshot_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str snapshot_snapshot_id: Retrieve snapshot information. (required)
        :return: SnapshotSnapshots
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_snapshot_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_snapshot" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_snapshot_id' is set
        if ('snapshot_snapshot_id' not in params) or (params['snapshot_snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_snapshot_id` when calling `get_snapshot_snapshot`")


        resource_path = '/platform/1/snapshot/snapshots/{SnapshotSnapshotId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_snapshot_id' in params:
            path_params['SnapshotSnapshotId'] = params['snapshot_snapshot_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotSnapshots',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_snapshot_snapshots_summary(self, **kwargs):
        """
        
        Return summary information about snapshots.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_snapshots_summary(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SnapshotSnapshotsSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_snapshots_summary" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/snapshot/snapshots-summary'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotSnapshotsSummary',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_snapshot_aliases(self, **kwargs):
        """
        
        List all or matching snapshot aliases.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_snapshot_aliases(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.  Choices are id, name, snapshot, and created.  Default is id.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: SnapshotAliasesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_snapshot_aliases" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_snapshot_aliases`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/snapshot/aliases'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotAliasesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_snapshot_changelists(self, **kwargs):
        """
        
        List all changelists.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_snapshot_changelists(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SnapshotChangelistsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_snapshot_changelists" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/snapshot/changelists'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotChangelistsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_snapshot_repstates(self, **kwargs):
        """
        
        List all repstates.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_snapshot_repstates(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SnapshotRepstatesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_snapshot_repstates" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/snapshot/repstates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotRepstatesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_snapshot_schedules(self, **kwargs):
        """
        
        List all or matching schedules.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_snapshot_schedules(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.  Choices are id, name, path, pattern, schedule, duration, alias, next_run, and next_snapshot.  Default is id.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: SnapshotSchedulesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_snapshot_schedules" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_snapshot_schedules`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/snapshot/schedules'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotSchedulesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_snapshot_snapshots(self, **kwargs):
        """
        
        List all or matching snapshots.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_snapshot_snapshots(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.  Choices are id, name, path, created, expires, size, has_locks, schedule, alias_target, alias_target_name, pct_filesystem, pct_reserve, and state.  Default is id.
        :param str schedule: Only list snapshots created by this schedule.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param str state: Only list snapshots matching this state.
        :param int limit: Return no more than this many results at once (see resume).
        :param str type: Only list snapshots matching this type.
        :param str dir: The direction of the sort.
        :return: SnapshotSnapshotsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'schedule', 'resume', 'state', 'limit', 'type', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_snapshot_snapshots" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_snapshot_snapshots`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/snapshot/snapshots'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'schedule' in params:
            query_params['schedule'] = params['schedule']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'type' in params:
            query_params['type'] = params['type']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SnapshotSnapshotsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_snapshot_aliase(self, snapshot_aliase, snapshot_aliase_id, **kwargs):
        """
        
        Modify snapshot alias. All input fields are optional, but one or more must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_snapshot_aliase(snapshot_aliase, snapshot_aliase_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SnapshotAliase snapshot_aliase:  (required)
        :param str snapshot_aliase_id: Modify snapshot alias. All input fields are optional, but one or more must be supplied. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_aliase', 'snapshot_aliase_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_snapshot_aliase" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_aliase' is set
        if ('snapshot_aliase' not in params) or (params['snapshot_aliase'] is None):
            raise ValueError("Missing the required parameter `snapshot_aliase` when calling `update_snapshot_aliase`")
        # verify the required parameter 'snapshot_aliase_id' is set
        if ('snapshot_aliase_id' not in params) or (params['snapshot_aliase_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_aliase_id` when calling `update_snapshot_aliase`")


        resource_path = '/platform/1/snapshot/aliases/{SnapshotAliaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_aliase_id' in params:
            path_params['SnapshotAliaseId'] = params['snapshot_aliase_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'snapshot_aliase' in params:
            body_params = params['snapshot_aliase']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_snapshot_schedule(self, snapshot_schedule, snapshot_schedule_id, **kwargs):
        """
        
        Modify the schedule. All input fields are optional, but one or more must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_snapshot_schedule(snapshot_schedule, snapshot_schedule_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SnapshotSchedule snapshot_schedule:  (required)
        :param str snapshot_schedule_id: Modify the schedule. All input fields are optional, but one or more must be supplied. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_schedule', 'snapshot_schedule_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_snapshot_schedule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_schedule' is set
        if ('snapshot_schedule' not in params) or (params['snapshot_schedule'] is None):
            raise ValueError("Missing the required parameter `snapshot_schedule` when calling `update_snapshot_schedule`")
        # verify the required parameter 'snapshot_schedule_id' is set
        if ('snapshot_schedule_id' not in params) or (params['snapshot_schedule_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_schedule_id` when calling `update_snapshot_schedule`")


        resource_path = '/platform/3/snapshot/schedules/{SnapshotScheduleId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_schedule_id' in params:
            path_params['SnapshotScheduleId'] = params['snapshot_schedule_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'snapshot_schedule' in params:
            body_params = params['snapshot_schedule']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_snapshot_settings(self, snapshot_settings, **kwargs):
        """
        
        Modify one or more settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_snapshot_settings(snapshot_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SnapshotSettingsExtended snapshot_settings:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_settings']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_snapshot_settings" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_settings' is set
        if ('snapshot_settings' not in params) or (params['snapshot_settings'] is None):
            raise ValueError("Missing the required parameter `snapshot_settings` when calling `update_snapshot_settings`")


        resource_path = '/platform/1/snapshot/settings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'snapshot_settings' in params:
            body_params = params['snapshot_settings']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_snapshot_snapshot(self, snapshot_snapshot, snapshot_snapshot_id, **kwargs):
        """
        
        Modify snapshot. All input fields are optional, but one or more must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_snapshot_snapshot(snapshot_snapshot, snapshot_snapshot_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SnapshotSnapshot snapshot_snapshot:  (required)
        :param str snapshot_snapshot_id: Modify snapshot. All input fields are optional, but one or more must be supplied. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_snapshot', 'snapshot_snapshot_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_snapshot_snapshot" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'snapshot_snapshot' is set
        if ('snapshot_snapshot' not in params) or (params['snapshot_snapshot'] is None):
            raise ValueError("Missing the required parameter `snapshot_snapshot` when calling `update_snapshot_snapshot`")
        # verify the required parameter 'snapshot_snapshot_id' is set
        if ('snapshot_snapshot_id' not in params) or (params['snapshot_snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_snapshot_id` when calling `update_snapshot_snapshot`")


        resource_path = '/platform/1/snapshot/snapshots/{SnapshotSnapshotId}'.replace('{format}', 'json')
        path_params = {}
        if 'snapshot_snapshot_id' in params:
            path_params['SnapshotSnapshotId'] = params['snapshot_snapshot_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'snapshot_snapshot' in params:
            body_params = params['snapshot_snapshot']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
