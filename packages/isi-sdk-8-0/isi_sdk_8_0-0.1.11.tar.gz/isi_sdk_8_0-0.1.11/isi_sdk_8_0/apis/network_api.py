# coding: utf-8

"""
NetworkApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class NetworkApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_dnscache_flush_item(self, dnscache_flush_item, **kwargs):
        """
        
        Flush the DNSCache.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_dnscache_flush_item(dnscache_flush_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Empty dnscache_flush_item:  (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dnscache_flush_item']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dnscache_flush_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'dnscache_flush_item' is set
        if ('dnscache_flush_item' not in params) or (params['dnscache_flush_item'] is None):
            raise ValueError("Missing the required parameter `dnscache_flush_item` when calling `create_dnscache_flush_item`")


        resource_path = '/platform/3/network/dnscache/flush'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dnscache_flush_item' in params:
            body_params = params['dnscache_flush_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Empty',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_network_groupnet(self, network_groupnet, **kwargs):
        """
        
        Create a new groupnet.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_network_groupnet(network_groupnet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGroupnetCreateParams network_groupnet:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_groupnet']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_network_groupnet" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'network_groupnet' is set
        if ('network_groupnet' not in params) or (params['network_groupnet'] is None):
            raise ValueError("Missing the required parameter `network_groupnet` when calling `create_network_groupnet`")


        resource_path = '/platform/3/network/groupnets'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'network_groupnet' in params:
            body_params = params['network_groupnet']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_network_sc_rebalance_all_item(self, network_sc_rebalance_all_item, **kwargs):
        """
        
        Rebalance IP addresses in all pools.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_network_sc_rebalance_all_item(network_sc_rebalance_all_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Empty network_sc_rebalance_all_item:  (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_sc_rebalance_all_item']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_network_sc_rebalance_all_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'network_sc_rebalance_all_item' is set
        if ('network_sc_rebalance_all_item' not in params) or (params['network_sc_rebalance_all_item'] is None):
            raise ValueError("Missing the required parameter `network_sc_rebalance_all_item` when calling `create_network_sc_rebalance_all_item`")


        resource_path = '/platform/3/network/sc-rebalance-all'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'network_sc_rebalance_all_item' in params:
            body_params = params['network_sc_rebalance_all_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Empty',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_network_groupnet(self, network_groupnet_id, **kwargs):
        """
        
        Delete a network groupnet.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_network_groupnet(network_groupnet_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_groupnet_id: Delete a network groupnet. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_groupnet_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_network_groupnet" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'network_groupnet_id' is set
        if ('network_groupnet_id' not in params) or (params['network_groupnet_id'] is None):
            raise ValueError("Missing the required parameter `network_groupnet_id` when calling `delete_network_groupnet`")


        resource_path = '/platform/3/network/groupnets/{NetworkGroupnetId}'.replace('{format}', 'json')
        path_params = {}
        if 'network_groupnet_id' in params:
            path_params['NetworkGroupnetId'] = params['network_groupnet_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_network_dnscache(self, **kwargs):
        """
        
        View network dns cache settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_network_dnscache(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: NetworkDnscache
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_dnscache" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/network/dnscache'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NetworkDnscache',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_network_external(self, **kwargs):
        """
        
        View external network settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_network_external(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: NetworkExternal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_external" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/network/external'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NetworkExternal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_network_groupnet(self, network_groupnet_id, **kwargs):
        """
        
        View a network groupnet.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_network_groupnet(network_groupnet_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_groupnet_id: View a network groupnet. (required)
        :return: NetworkGroupnets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_groupnet_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_groupnet" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'network_groupnet_id' is set
        if ('network_groupnet_id' not in params) or (params['network_groupnet_id'] is None):
            raise ValueError("Missing the required parameter `network_groupnet_id` when calling `get_network_groupnet`")


        resource_path = '/platform/3/network/groupnets/{NetworkGroupnetId}'.replace('{format}', 'json')
        path_params = {}
        if 'network_groupnet_id' in params:
            path_params['NetworkGroupnetId'] = params['network_groupnet_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NetworkGroupnets',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_network_interfaces(self, **kwargs):
        """
        
        Get a list of interfaces.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_network_interfaces(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str network: Show interfaces associated with external and/or internal networks. Default is 'external'
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param str lnns: Get a list of interfaces for the specified lnn.
        :param str alloc_method: Filter addresses and owners by pool address allocation method.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :return: PoolsPoolInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'network', 'resume', 'lnns', 'alloc_method', 'limit', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_interfaces" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_network_interfaces`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/network/interfaces'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'network' in params:
            query_params['network'] = params['network']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'lnns' in params:
            query_params['lnns'] = params['lnns']
        if 'alloc_method' in params:
            query_params['alloc_method'] = params['alloc_method']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PoolsPoolInterfaces',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_network_pools(self, **kwargs):
        """
        
        Get a list of flexnet pools.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_network_pools(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str subnet: If specified, only pools for this subnet will be returned.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param str access_zone: If specified, only pools with this zone name will be returned.
        :param str alloc_method: If specified, only pools with this allocation type will be returned.
        :param int limit: Return no more than this many results at once (see resume).
        :param str groupnet: If specified, only pools for this groupnet will be returned.
        :param str dir: The direction of the sort.
        :return: NetworkPools
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'subnet', 'resume', 'access_zone', 'alloc_method', 'limit', 'groupnet', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_pools" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_network_pools`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/network/pools'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'subnet' in params:
            query_params['subnet'] = params['subnet']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'access_zone' in params:
            query_params['access_zone'] = params['access_zone']
        if 'alloc_method' in params:
            query_params['alloc_method'] = params['alloc_method']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'groupnet' in params:
            query_params['groupnet'] = params['groupnet']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NetworkPools',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_network_rules(self, **kwargs):
        """
        
        Get a list of network rules.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_network_rules(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str subnet: Name of the subnet to list rules from.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str groupnet: Name of the groupnet to list rules from.
        :param str pool: Name of the pool to list rules from.
        :return: PoolsPoolRulesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'subnet', 'resume', 'limit', 'dir', 'groupnet', 'pool']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_rules" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_network_rules`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/network/rules'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'subnet' in params:
            query_params['subnet'] = params['subnet']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'groupnet' in params:
            query_params['groupnet'] = params['groupnet']
        if 'pool' in params:
            query_params['pool'] = params['pool']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PoolsPoolRulesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_network_subnets(self, **kwargs):
        """
        
        Get a list of subnets.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_network_subnets(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str groupnet: If specified, only subnets for this groupnet will be returned.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: GroupnetSubnetsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'groupnet', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_subnets" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_network_subnets`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/network/subnets'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'groupnet' in params:
            query_params['groupnet'] = params['groupnet']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GroupnetSubnetsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_network_groupnets(self, **kwargs):
        """
        
        Get a list of groupnets.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_network_groupnets(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: NetworkGroupnetsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_network_groupnets" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_network_groupnets`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/network/groupnets'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NetworkGroupnetsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_network_dnscache(self, network_dnscache, **kwargs):
        """
        
        Modify network dns cache settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_network_dnscache(network_dnscache, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkDnscacheExtended network_dnscache:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_dnscache']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_network_dnscache" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'network_dnscache' is set
        if ('network_dnscache' not in params) or (params['network_dnscache'] is None):
            raise ValueError("Missing the required parameter `network_dnscache` when calling `update_network_dnscache`")


        resource_path = '/platform/3/network/dnscache'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'network_dnscache' in params:
            body_params = params['network_dnscache']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_network_external(self, network_external, **kwargs):
        """
        
        Modify external network settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_network_external(network_external, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkExternalExtended network_external:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_external']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_network_external" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'network_external' is set
        if ('network_external' not in params) or (params['network_external'] is None):
            raise ValueError("Missing the required parameter `network_external` when calling `update_network_external`")


        resource_path = '/platform/3/network/external'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'network_external' in params:
            body_params = params['network_external']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_network_groupnet(self, network_groupnet, network_groupnet_id, **kwargs):
        """
        
        Modify a network groupnet.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_network_groupnet(network_groupnet, network_groupnet_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetworkGroupnet network_groupnet:  (required)
        :param str network_groupnet_id: Modify a network groupnet. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_groupnet', 'network_groupnet_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_network_groupnet" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'network_groupnet' is set
        if ('network_groupnet' not in params) or (params['network_groupnet'] is None):
            raise ValueError("Missing the required parameter `network_groupnet` when calling `update_network_groupnet`")
        # verify the required parameter 'network_groupnet_id' is set
        if ('network_groupnet_id' not in params) or (params['network_groupnet_id'] is None):
            raise ValueError("Missing the required parameter `network_groupnet_id` when calling `update_network_groupnet`")


        resource_path = '/platform/3/network/groupnets/{NetworkGroupnetId}'.replace('{format}', 'json')
        path_params = {}
        if 'network_groupnet_id' in params:
            path_params['NetworkGroupnetId'] = params['network_groupnet_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'network_groupnet' in params:
            body_params = params['network_groupnet']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
