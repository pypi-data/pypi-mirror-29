# coding: utf-8

"""
AuthProvidersApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AuthProvidersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_ads_provider_controllers(self, id, **kwargs):
        """
        
        List all ADS controllers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ads_provider_controllers(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: AdsProviderControllers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ads_provider_controllers" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ads_provider_controllers`")


        resource_path = '/platform/1/auth/providers/ads/{Id}/controllers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdsProviderControllers',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_ads_provider_domain(self, ads_provider_domain_id, id, **kwargs):
        """
        
        Retrieve the ADS domain information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ads_provider_domain(ads_provider_domain_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ads_provider_domain_id: Retrieve the ADS domain information. (required)
        :param str id:  (required)
        :return: AdsProviderDomains
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ads_provider_domain_id', 'id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ads_provider_domain" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'ads_provider_domain_id' is set
        if ('ads_provider_domain_id' not in params) or (params['ads_provider_domain_id'] is None):
            raise ValueError("Missing the required parameter `ads_provider_domain_id` when calling `get_ads_provider_domain`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ads_provider_domain`")


        resource_path = '/platform/3/auth/providers/ads/{Id}/domains/{AdsProviderDomainId}'.replace('{format}', 'json')
        path_params = {}
        if 'ads_provider_domain_id' in params:
            path_params['AdsProviderDomainId'] = params['ads_provider_domain_id']
        if 'id' in params:
            path_params['Id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdsProviderDomains',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_ads_provider_domains(self, id, **kwargs):
        """
        
        List all ADS domains.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ads_provider_domains(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: AdsProviderDomains
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ads_provider_domains" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ads_provider_domains`")


        resource_path = '/platform/3/auth/providers/ads/{Id}/domains'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdsProviderDomains',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_ads_provider_search(self, id, **kwargs):
        """
        
        Retrieve search results.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ads_provider_search(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str domain: The domain to search in.
        :param str description: The user or group description to search for.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param bool search_users: If true, search for users.
        :param str filter: The LDAP filter to apply to the search.
        :param int limit: Return no more than this many results at once (see resume).
        :param str user: The user name for the domain if untrusted.
        :param str password: The password for the domain if untrusted.
        :param bool search_groups: If true, search for groups.
        :return: AdsProviderSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'domain', 'description', 'resume', 'search_users', 'filter', 'limit', 'user', 'password', 'search_groups']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ads_provider_search" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ads_provider_search`")

        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_ads_provider_search`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/auth/providers/ads/{Id}/search'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['Id'] = params['id']

        query_params = {}
        if 'domain' in params:
            query_params['domain'] = params['domain']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'search_users' in params:
            query_params['search_users'] = params['search_users']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'user' in params:
            query_params['user'] = params['user']
        if 'password' in params:
            query_params['password'] = params['password']
        if 'search_groups' in params:
            query_params['search_groups'] = params['search_groups']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdsProviderSearch',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
