# coding: utf-8

"""
AuthUsersApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AuthUsersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_user_member_of_item(self, user_member_of_item, user, **kwargs):
        """
        
        Add the user to a group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_user_member_of_item(user_member_of_item, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupMember user_member_of_item:  (required)
        :param str user:  (required)
        :param str zone: Filter groups by zone.
        :param str provider: Filter groups by provider.
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_member_of_item', 'user', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_member_of_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'user_member_of_item' is set
        if ('user_member_of_item' not in params) or (params['user_member_of_item'] is None):
            raise ValueError("Missing the required parameter `user_member_of_item` when calling `create_user_member_of_item`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `create_user_member_of_item`")


        resource_path = '/platform/3/auth/users/{User}/member-of'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['User'] = params['user']

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_member_of_item' in params:
            body_params = params['user_member_of_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_user_member_of_member_of(self, user_member_of_member_of, user, **kwargs):
        """
        
        Remove the user from the group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_user_member_of_member_of(user_member_of_member_of, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_member_of_member_of: Remove the user from the group. (required)
        :param str user:  (required)
        :param str zone: Filter groups by zone.
        :param str provider: Filter groups by provider.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_member_of_member_of', 'user', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_member_of_member_of" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'user_member_of_member_of' is set
        if ('user_member_of_member_of' not in params) or (params['user_member_of_member_of'] is None):
            raise ValueError("Missing the required parameter `user_member_of_member_of` when calling `delete_user_member_of_member_of`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `delete_user_member_of_member_of`")


        resource_path = '/platform/3/auth/users/{User}/member-of/{UserMemberOfMemberOf}'.replace('{format}', 'json')
        path_params = {}
        if 'user_member_of_member_of' in params:
            path_params['UserMemberOfMemberOf'] = params['user_member_of_member_of']
        if 'user' in params:
            path_params['User'] = params['user']

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_user_member_of(self, user, **kwargs):
        """
        
        List all groups the user is a member of.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_user_member_of(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user:  (required)
        :param bool resolve_names: Resolve names of personas.
        :param str zone: Filter groups by zone.
        :param str provider: Filter groups by provider.
        :return: UserMemberOf
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'resolve_names', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_user_member_of" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `list_user_member_of`")


        resource_path = '/platform/3/auth/users/{User}/member-of'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['User'] = params['user']

        query_params = {}
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserMemberOf',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_user_change_password(self, user_change_password, user, **kwargs):
        """
        
        Change the user's password.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_user_change_password(user_change_password, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserChangePassword user_change_password:  (required)
        :param str user:  (required)
        :param str zone: Specifies access zone containing user.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_change_password', 'user', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_change_password" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'user_change_password' is set
        if ('user_change_password' not in params) or (params['user_change_password'] is None):
            raise ValueError("Missing the required parameter `user_change_password` when calling `update_user_change_password`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `update_user_change_password`")


        resource_path = '/platform/3/auth/users/{User}/change-password'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['User'] = params['user']

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_change_password' in params:
            body_params = params['user_change_password']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
