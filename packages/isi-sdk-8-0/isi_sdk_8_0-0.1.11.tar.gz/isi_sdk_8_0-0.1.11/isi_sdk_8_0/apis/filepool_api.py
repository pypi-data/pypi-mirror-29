# coding: utf-8

"""
FilepoolApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class FilepoolApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_filepool_policy(self, filepool_policy, **kwargs):
        """
        
        Create a new policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_filepool_policy(filepool_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FilepoolPolicyCreateParams filepool_policy:  (required)
        :return: CreateFilepoolPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filepool_policy']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_filepool_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'filepool_policy' is set
        if ('filepool_policy' not in params) or (params['filepool_policy'] is None):
            raise ValueError("Missing the required parameter `filepool_policy` when calling `create_filepool_policy`")


        resource_path = '/platform/1/filepool/policies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filepool_policy' in params:
            body_params = params['filepool_policy']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateFilepoolPolicyResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_filepool_policy(self, filepool_policy_id, **kwargs):
        """
        
        Delete file pool policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_filepool_policy(filepool_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filepool_policy_id: Delete file pool policy. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filepool_policy_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_filepool_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'filepool_policy_id' is set
        if ('filepool_policy_id' not in params) or (params['filepool_policy_id'] is None):
            raise ValueError("Missing the required parameter `filepool_policy_id` when calling `delete_filepool_policy`")


        resource_path = '/platform/1/filepool/policies/{FilepoolPolicyId}'.replace('{format}', 'json')
        path_params = {}
        if 'filepool_policy_id' in params:
            path_params['FilepoolPolicyId'] = params['filepool_policy_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_filepool_default_policy(self, **kwargs):
        """
        
        List default file pool policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_filepool_default_policy(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: FilepoolDefaultPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filepool_default_policy" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/filepool/default-policy'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FilepoolDefaultPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_filepool_policy(self, filepool_policy_id, **kwargs):
        """
        
        Retrieve file pool policy information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_filepool_policy(filepool_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filepool_policy_id: Retrieve file pool policy information. (required)
        :return: FilepoolPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filepool_policy_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filepool_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'filepool_policy_id' is set
        if ('filepool_policy_id' not in params) or (params['filepool_policy_id'] is None):
            raise ValueError("Missing the required parameter `filepool_policy_id` when calling `get_filepool_policy`")


        resource_path = '/platform/1/filepool/policies/{FilepoolPolicyId}'.replace('{format}', 'json')
        path_params = {}
        if 'filepool_policy_id' in params:
            path_params['FilepoolPolicyId'] = params['filepool_policy_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FilepoolPolicies',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_filepool_template(self, filepool_template_id, **kwargs):
        """
        
        List all templates.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_filepool_template(filepool_template_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filepool_template_id: List all templates. (required)
        :return: FilepoolTemplates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filepool_template_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filepool_template" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'filepool_template_id' is set
        if ('filepool_template_id' not in params) or (params['filepool_template_id'] is None):
            raise ValueError("Missing the required parameter `filepool_template_id` when calling `get_filepool_template`")


        resource_path = '/platform/1/filepool/templates/{FilepoolTemplateId}'.replace('{format}', 'json')
        path_params = {}
        if 'filepool_template_id' in params:
            path_params['FilepoolTemplateId'] = params['filepool_template_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FilepoolTemplates',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_filepool_templates(self, **kwargs):
        """
        
        List all templates.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_filepool_templates(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: FilepoolTemplates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filepool_templates" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/filepool/templates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FilepoolTemplates',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_filepool_policies(self, **kwargs):
        """
        
        List all policies.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_filepool_policies(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: FilepoolPoliciesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_filepool_policies" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/filepool/policies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FilepoolPoliciesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_filepool_default_policy(self, filepool_default_policy, **kwargs):
        """
        
        Set default file pool policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_filepool_default_policy(filepool_default_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FilepoolDefaultPolicyExtended filepool_default_policy:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filepool_default_policy']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_filepool_default_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'filepool_default_policy' is set
        if ('filepool_default_policy' not in params) or (params['filepool_default_policy'] is None):
            raise ValueError("Missing the required parameter `filepool_default_policy` when calling `update_filepool_default_policy`")


        resource_path = '/platform/1/filepool/default-policy'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filepool_default_policy' in params:
            body_params = params['filepool_default_policy']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_filepool_policy(self, filepool_policy, filepool_policy_id, **kwargs):
        """
        
        Modify file pool policy. All input fields are optional, but one or more must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_filepool_policy(filepool_policy, filepool_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FilepoolPolicy filepool_policy:  (required)
        :param str filepool_policy_id: Modify file pool policy. All input fields are optional, but one or more must be supplied. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filepool_policy', 'filepool_policy_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_filepool_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'filepool_policy' is set
        if ('filepool_policy' not in params) or (params['filepool_policy'] is None):
            raise ValueError("Missing the required parameter `filepool_policy` when calling `update_filepool_policy`")
        # verify the required parameter 'filepool_policy_id' is set
        if ('filepool_policy_id' not in params) or (params['filepool_policy_id'] is None):
            raise ValueError("Missing the required parameter `filepool_policy_id` when calling `update_filepool_policy`")


        resource_path = '/platform/1/filepool/policies/{FilepoolPolicyId}'.replace('{format}', 'json')
        path_params = {}
        if 'filepool_policy_id' in params:
            path_params['FilepoolPolicyId'] = params['filepool_policy_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filepool_policy' in params:
            body_params = params['filepool_policy']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
