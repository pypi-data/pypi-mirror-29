# coding: utf-8

"""
AntivirusApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AntivirusApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_antivirus_policy(self, antivirus_policy, **kwargs):
        """
        
        Create new antivirus scan policies.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_antivirus_policy(antivirus_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AntivirusPolicyCreateParams antivirus_policy:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_policy']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_antivirus_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_policy' is set
        if ('antivirus_policy' not in params) or (params['antivirus_policy'] is None):
            raise ValueError("Missing the required parameter `antivirus_policy` when calling `create_antivirus_policy`")


        resource_path = '/platform/3/antivirus/policies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'antivirus_policy' in params:
            body_params = params['antivirus_policy']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_antivirus_scan_item(self, antivirus_scan_item, **kwargs):
        """
        
        Manually scan a file.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_antivirus_scan_item(antivirus_scan_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AntivirusScanItem antivirus_scan_item:  (required)
        :return: CreateAntivirusScanItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_scan_item']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_antivirus_scan_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_scan_item' is set
        if ('antivirus_scan_item' not in params) or (params['antivirus_scan_item'] is None):
            raise ValueError("Missing the required parameter `antivirus_scan_item` when calling `create_antivirus_scan_item`")


        resource_path = '/platform/3/antivirus/scan'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'antivirus_scan_item' in params:
            body_params = params['antivirus_scan_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAntivirusScanItemResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_antivirus_server(self, antivirus_server, **kwargs):
        """
        
        Create new antivirus servers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_antivirus_server(antivirus_server, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AntivirusServerCreateParams antivirus_server:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_server']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_antivirus_server" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_server' is set
        if ('antivirus_server' not in params) or (params['antivirus_server'] is None):
            raise ValueError("Missing the required parameter `antivirus_server` when calling `create_antivirus_server`")


        resource_path = '/platform/3/antivirus/servers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'antivirus_server' in params:
            body_params = params['antivirus_server']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_antivirus_policies(self, **kwargs):
        """
        
        Delete all antivirus scan policies.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_antivirus_policies(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_antivirus_policies" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/antivirus/policies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_antivirus_policy(self, antivirus_policy_id, **kwargs):
        """
        
        Delete an antivirus scan policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_antivirus_policy(antivirus_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str antivirus_policy_id: Delete an antivirus scan policy. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_policy_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_antivirus_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_policy_id' is set
        if ('antivirus_policy_id' not in params) or (params['antivirus_policy_id'] is None):
            raise ValueError("Missing the required parameter `antivirus_policy_id` when calling `delete_antivirus_policy`")


        resource_path = '/platform/3/antivirus/policies/{AntivirusPolicyId}'.replace('{format}', 'json')
        path_params = {}
        if 'antivirus_policy_id' in params:
            path_params['AntivirusPolicyId'] = params['antivirus_policy_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_antivirus_server(self, antivirus_server_id, **kwargs):
        """
        
        Delete an antivirus server entry.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_antivirus_server(antivirus_server_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str antivirus_server_id: Delete an antivirus server entry. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_server_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_antivirus_server" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_server_id' is set
        if ('antivirus_server_id' not in params) or (params['antivirus_server_id'] is None):
            raise ValueError("Missing the required parameter `antivirus_server_id` when calling `delete_antivirus_server`")


        resource_path = '/platform/3/antivirus/servers/{AntivirusServerId}'.replace('{format}', 'json')
        path_params = {}
        if 'antivirus_server_id' in params:
            path_params['AntivirusServerId'] = params['antivirus_server_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_antivirus_servers(self, **kwargs):
        """
        
        Delete all antivirus servers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_antivirus_servers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_antivirus_servers" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/antivirus/servers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_reports_scan(self, reports_scan_id, **kwargs):
        """
        
        Delete one antivirus scan report, and all of its associated threat reports.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_reports_scan(reports_scan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str reports_scan_id: Delete one antivirus scan report, and all of its associated threat reports. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reports_scan_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_reports_scan" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'reports_scan_id' is set
        if ('reports_scan_id' not in params) or (params['reports_scan_id'] is None):
            raise ValueError("Missing the required parameter `reports_scan_id` when calling `delete_reports_scan`")


        resource_path = '/platform/3/antivirus/reports/scans/{ReportsScanId}'.replace('{format}', 'json')
        path_params = {}
        if 'reports_scan_id' in params:
            path_params['ReportsScanId'] = params['reports_scan_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_reports_scans(self, **kwargs):
        """
        
        Delete antivirus scan reports, and any threat reports associated with those scans.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_reports_scans(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int age: An amount of time in seconds. If present, only reports older than this age are deleted.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['age']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_reports_scans" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/antivirus/reports/scans'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'age' in params:
            query_params['age'] = params['age']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_antivirus_policy(self, antivirus_policy_id, **kwargs):
        """
        
        Retrieve one antivirus scan policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_antivirus_policy(antivirus_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str antivirus_policy_id: Retrieve one antivirus scan policy. (required)
        :return: AntivirusPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_policy_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_antivirus_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_policy_id' is set
        if ('antivirus_policy_id' not in params) or (params['antivirus_policy_id'] is None):
            raise ValueError("Missing the required parameter `antivirus_policy_id` when calling `get_antivirus_policy`")


        resource_path = '/platform/3/antivirus/policies/{AntivirusPolicyId}'.replace('{format}', 'json')
        path_params = {}
        if 'antivirus_policy_id' in params:
            path_params['AntivirusPolicyId'] = params['antivirus_policy_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AntivirusPolicies',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_antivirus_quarantine_path(self, antivirus_quarantine_path, **kwargs):
        """
        
        Retrieve the quarantine status of the file at the specified path.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_antivirus_quarantine_path(antivirus_quarantine_path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str antivirus_quarantine_path: Retrieve the quarantine status of the file at the specified path. (required)
        :return: AntivirusQuarantine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_quarantine_path']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_antivirus_quarantine_path" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_quarantine_path' is set
        if ('antivirus_quarantine_path' not in params) or (params['antivirus_quarantine_path'] is None):
            raise ValueError("Missing the required parameter `antivirus_quarantine_path` when calling `get_antivirus_quarantine_path`")


        resource_path = '/platform/3/antivirus/quarantine/{AntivirusQuarantinePath}'.replace('{format}', 'json')
        path_params = {}
        if 'antivirus_quarantine_path' in params:
            path_params['AntivirusQuarantinePath'] = params['antivirus_quarantine_path']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AntivirusQuarantine',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_antivirus_server(self, antivirus_server_id, **kwargs):
        """
        
        Retrieve one antivirus server entry.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_antivirus_server(antivirus_server_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str antivirus_server_id: Retrieve one antivirus server entry. (required)
        :return: AntivirusServers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_server_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_antivirus_server" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_server_id' is set
        if ('antivirus_server_id' not in params) or (params['antivirus_server_id'] is None):
            raise ValueError("Missing the required parameter `antivirus_server_id` when calling `get_antivirus_server`")


        resource_path = '/platform/3/antivirus/servers/{AntivirusServerId}'.replace('{format}', 'json')
        path_params = {}
        if 'antivirus_server_id' in params:
            path_params['AntivirusServerId'] = params['antivirus_server_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AntivirusServers',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_antivirus_settings(self, **kwargs):
        """
        
        Retrieve the Antivirus settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_antivirus_settings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AntivirusSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_antivirus_settings" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/antivirus/settings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AntivirusSettings',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_reports_scan(self, reports_scan_id, **kwargs):
        """
        
        Retrieve one antivirus scan report.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reports_scan(reports_scan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str reports_scan_id: Retrieve one antivirus scan report. (required)
        :return: ReportsScans
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reports_scan_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reports_scan" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'reports_scan_id' is set
        if ('reports_scan_id' not in params) or (params['reports_scan_id'] is None):
            raise ValueError("Missing the required parameter `reports_scan_id` when calling `get_reports_scan`")


        resource_path = '/platform/3/antivirus/reports/scans/{ReportsScanId}'.replace('{format}', 'json')
        path_params = {}
        if 'reports_scan_id' in params:
            path_params['ReportsScanId'] = params['reports_scan_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReportsScans',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_reports_scans(self, **kwargs):
        """
        
        List antivirus scan reports.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reports_scans(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str status: If present, only scan reports with this status will be returned.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str policy_id: If present, only reports for scans associated with this policy will be returned.
        :return: ReportsScansExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'status', 'resume', 'limit', 'dir', 'policy_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reports_scans" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_reports_scans`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/antivirus/reports/scans'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'policy_id' in params:
            query_params['policy_id'] = params['policy_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReportsScansExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_reports_threat(self, reports_threat_id, **kwargs):
        """
        
        Retrieve one antivirus threat report.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reports_threat(reports_threat_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str reports_threat_id: Retrieve one antivirus threat report. (required)
        :return: ReportsThreats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reports_threat_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reports_threat" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'reports_threat_id' is set
        if ('reports_threat_id' not in params) or (params['reports_threat_id'] is None):
            raise ValueError("Missing the required parameter `reports_threat_id` when calling `get_reports_threat`")


        resource_path = '/platform/3/antivirus/reports/threats/{ReportsThreatId}'.replace('{format}', 'json')
        path_params = {}
        if 'reports_threat_id' in params:
            path_params['ReportsThreatId'] = params['reports_threat_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReportsThreats',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_reports_threats(self, **kwargs):
        """
        
        List antivirus threat reports.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reports_threats(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str scan_id: If present, only returns threat reports associated with the given scan report.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param int limit: Return no more than this many results at once (see resume).
        :param str file: If present, only returns threat reports for the given file.
        :param str remediation: If present, only returns threat reports with the given remediation.
        :param str dir: The direction of the sort.
        :return: ReportsThreatsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'scan_id', 'resume', 'limit', 'file', 'remediation', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reports_threats" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_reports_threats`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/antivirus/reports/threats'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'scan_id' in params:
            query_params['scan_id'] = params['scan_id']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'file' in params:
            query_params['file'] = params['file']
        if 'remediation' in params:
            query_params['remediation'] = params['remediation']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReportsThreatsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_antivirus_policies(self, **kwargs):
        """
        
        List antivirus scan policies.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_antivirus_policies(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: AntivirusPoliciesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_antivirus_policies" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_antivirus_policies`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/antivirus/policies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AntivirusPoliciesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_antivirus_servers(self, **kwargs):
        """
        
        List antivirus servers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_antivirus_servers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: AntivirusServersExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_antivirus_servers" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_antivirus_servers`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/antivirus/servers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AntivirusServersExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_antivirus_policy(self, antivirus_policy, antivirus_policy_id, **kwargs):
        """
        
        Modify an antivirus scan policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_antivirus_policy(antivirus_policy, antivirus_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AntivirusPolicy antivirus_policy:  (required)
        :param str antivirus_policy_id: Modify an antivirus scan policy. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_policy', 'antivirus_policy_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_antivirus_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_policy' is set
        if ('antivirus_policy' not in params) or (params['antivirus_policy'] is None):
            raise ValueError("Missing the required parameter `antivirus_policy` when calling `update_antivirus_policy`")
        # verify the required parameter 'antivirus_policy_id' is set
        if ('antivirus_policy_id' not in params) or (params['antivirus_policy_id'] is None):
            raise ValueError("Missing the required parameter `antivirus_policy_id` when calling `update_antivirus_policy`")


        resource_path = '/platform/3/antivirus/policies/{AntivirusPolicyId}'.replace('{format}', 'json')
        path_params = {}
        if 'antivirus_policy_id' in params:
            path_params['AntivirusPolicyId'] = params['antivirus_policy_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'antivirus_policy' in params:
            body_params = params['antivirus_policy']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_antivirus_quarantine_path(self, antivirus_quarantine_path_params, antivirus_quarantine_path, **kwargs):
        """
        
        Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {\"quarantined\":true} to quarantine the file, and {\"quarantined\":false} to unquarantine the file.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_antivirus_quarantine_path(antivirus_quarantine_path_params, antivirus_quarantine_path, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AntivirusQuarantinePathParams antivirus_quarantine_path_params:  (required)
        :param str antivirus_quarantine_path: Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {\"quarantined\":true} to quarantine the file, and {\"quarantined\":false} to unquarantine the file. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_quarantine_path_params', 'antivirus_quarantine_path']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_antivirus_quarantine_path" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_quarantine_path_params' is set
        if ('antivirus_quarantine_path_params' not in params) or (params['antivirus_quarantine_path_params'] is None):
            raise ValueError("Missing the required parameter `antivirus_quarantine_path_params` when calling `update_antivirus_quarantine_path`")
        # verify the required parameter 'antivirus_quarantine_path' is set
        if ('antivirus_quarantine_path' not in params) or (params['antivirus_quarantine_path'] is None):
            raise ValueError("Missing the required parameter `antivirus_quarantine_path` when calling `update_antivirus_quarantine_path`")


        resource_path = '/platform/3/antivirus/quarantine/{AntivirusQuarantinePath}'.replace('{format}', 'json')
        path_params = {}
        if 'antivirus_quarantine_path' in params:
            path_params['AntivirusQuarantinePath'] = params['antivirus_quarantine_path']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'antivirus_quarantine_path_params' in params:
            body_params = params['antivirus_quarantine_path_params']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_antivirus_server(self, antivirus_server, antivirus_server_id, **kwargs):
        """
        
        Modify an antivirus server entry.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_antivirus_server(antivirus_server, antivirus_server_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AntivirusServer antivirus_server:  (required)
        :param str antivirus_server_id: Modify an antivirus server entry. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_server', 'antivirus_server_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_antivirus_server" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_server' is set
        if ('antivirus_server' not in params) or (params['antivirus_server'] is None):
            raise ValueError("Missing the required parameter `antivirus_server` when calling `update_antivirus_server`")
        # verify the required parameter 'antivirus_server_id' is set
        if ('antivirus_server_id' not in params) or (params['antivirus_server_id'] is None):
            raise ValueError("Missing the required parameter `antivirus_server_id` when calling `update_antivirus_server`")


        resource_path = '/platform/3/antivirus/servers/{AntivirusServerId}'.replace('{format}', 'json')
        path_params = {}
        if 'antivirus_server_id' in params:
            path_params['AntivirusServerId'] = params['antivirus_server_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'antivirus_server' in params:
            body_params = params['antivirus_server']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_antivirus_settings(self, antivirus_settings, **kwargs):
        """
        
        Modify the Antivirus settings. All input fields are optional, but one or more must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_antivirus_settings(antivirus_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AntivirusSettingsSettings antivirus_settings:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['antivirus_settings']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_antivirus_settings" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'antivirus_settings' is set
        if ('antivirus_settings' not in params) or (params['antivirus_settings'] is None):
            raise ValueError("Missing the required parameter `antivirus_settings` when calling `update_antivirus_settings`")


        resource_path = '/platform/3/antivirus/settings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'antivirus_settings' in params:
            body_params = params['antivirus_settings']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
