# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class HttpSettingsSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HttpSettingsSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_control': 'bool',
            'basic_authentication': 'bool',
            'dav': 'bool',
            'enable_access_log': 'bool',
            'integrated_authentication': 'bool',
            'server_root': 'str',
            'service': 'str'
        }

        self.attribute_map = {
            'access_control': 'access_control',
            'basic_authentication': 'basic_authentication',
            'dav': 'dav',
            'enable_access_log': 'enable_access_log',
            'integrated_authentication': 'integrated_authentication',
            'server_root': 'server_root',
            'service': 'service'
        }

        self._access_control = None
        self._basic_authentication = None
        self._dav = None
        self._enable_access_log = None
        self._integrated_authentication = None
        self._server_root = None
        self._service = None

    @property
    def access_control(self):
        """
        Gets the access_control of this HttpSettingsSettings.
        Enable Access Control Authentication

        :return: The access_control of this HttpSettingsSettings.
        :rtype: bool
        """
        return self._access_control

    @access_control.setter
    def access_control(self, access_control):
        """
        Sets the access_control of this HttpSettingsSettings.
        Enable Access Control Authentication

        :param access_control: The access_control of this HttpSettingsSettings.
        :type: bool
        """
        
        self._access_control = access_control

    @property
    def basic_authentication(self):
        """
        Gets the basic_authentication of this HttpSettingsSettings.
        Enable Basic Authentication

        :return: The basic_authentication of this HttpSettingsSettings.
        :rtype: bool
        """
        return self._basic_authentication

    @basic_authentication.setter
    def basic_authentication(self, basic_authentication):
        """
        Sets the basic_authentication of this HttpSettingsSettings.
        Enable Basic Authentication

        :param basic_authentication: The basic_authentication of this HttpSettingsSettings.
        :type: bool
        """
        
        self._basic_authentication = basic_authentication

    @property
    def dav(self):
        """
        Gets the dav of this HttpSettingsSettings.
        Enable DAV specification

        :return: The dav of this HttpSettingsSettings.
        :rtype: bool
        """
        return self._dav

    @dav.setter
    def dav(self, dav):
        """
        Sets the dav of this HttpSettingsSettings.
        Enable DAV specification

        :param dav: The dav of this HttpSettingsSettings.
        :type: bool
        """
        
        self._dav = dav

    @property
    def enable_access_log(self):
        """
        Gets the enable_access_log of this HttpSettingsSettings.
        Enable HTTP access logging

        :return: The enable_access_log of this HttpSettingsSettings.
        :rtype: bool
        """
        return self._enable_access_log

    @enable_access_log.setter
    def enable_access_log(self, enable_access_log):
        """
        Sets the enable_access_log of this HttpSettingsSettings.
        Enable HTTP access logging

        :param enable_access_log: The enable_access_log of this HttpSettingsSettings.
        :type: bool
        """
        
        self._enable_access_log = enable_access_log

    @property
    def integrated_authentication(self):
        """
        Gets the integrated_authentication of this HttpSettingsSettings.
        Enable Integrated Authentication

        :return: The integrated_authentication of this HttpSettingsSettings.
        :rtype: bool
        """
        return self._integrated_authentication

    @integrated_authentication.setter
    def integrated_authentication(self, integrated_authentication):
        """
        Sets the integrated_authentication of this HttpSettingsSettings.
        Enable Integrated Authentication

        :param integrated_authentication: The integrated_authentication of this HttpSettingsSettings.
        :type: bool
        """
        
        self._integrated_authentication = integrated_authentication

    @property
    def server_root(self):
        """
        Gets the server_root of this HttpSettingsSettings.
        Document root directory. Must be within /ifs.

        :return: The server_root of this HttpSettingsSettings.
        :rtype: str
        """
        return self._server_root

    @server_root.setter
    def server_root(self, server_root):
        """
        Sets the server_root of this HttpSettingsSettings.
        Document root directory. Must be within /ifs.

        :param server_root: The server_root of this HttpSettingsSettings.
        :type: str
        """
        
        self._server_root = server_root

    @property
    def service(self):
        """
        Gets the service of this HttpSettingsSettings.
        Enable/disable the HTTP service or redirect to WebUI.

        :return: The service of this HttpSettingsSettings.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """
        Sets the service of this HttpSettingsSettings.
        Enable/disable the HTTP service or redirect to WebUI.

        :param service: The service of this HttpSettingsSettings.
        :type: str
        """
        allowed_values = ["enabled", "disabled", "redirect"]
        if service is not None and service not in allowed_values:
            raise ValueError(
                "Invalid value for `service`, must be one of {0}"
                .format(allowed_values)
            )

        self._service = service

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

