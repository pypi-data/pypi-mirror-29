# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'attribute_exists': 'bool',
            'case_sensitive': 'bool',
            'field': 'str',
            'operator': 'str',
            'type': 'str',
            'value': 'str',
            'whole_word': 'bool'
        }

        self.attribute_map = {
            'attribute_exists': 'attribute_exists',
            'case_sensitive': 'case_sensitive',
            'field': 'field',
            'operator': 'operator',
            'type': 'type',
            'value': 'value',
            'whole_word': 'whole_word'
        }

        self._attribute_exists = None
        self._case_sensitive = None
        self._field = None
        self._operator = None
        self._type = None
        self._value = None
        self._whole_word = None

    @property
    def attribute_exists(self):
        """
        Gets the attribute_exists of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.

        :return: The attribute_exists of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :rtype: bool
        """
        return self._attribute_exists

    @attribute_exists.setter
    def attribute_exists(self, attribute_exists):
        """
        Sets the attribute_exists of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        For \"custom_attribute\" type criteria.  The file will match as long as the attribute named by \"field\" exists.  Default is true.

        :param attribute_exists: The attribute_exists of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :type: bool
        """
        
        self._attribute_exists = attribute_exists

    @property
    def case_sensitive(self):
        """
        Gets the case_sensitive of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        If true, the value comparison will be case sensitive.  Default is true.

        :return: The case_sensitive of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """
        Sets the case_sensitive of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        If true, the value comparison will be case sensitive.  Default is true.

        :param case_sensitive: The case_sensitive of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :type: bool
        """
        
        self._case_sensitive = case_sensitive

    @property
    def field(self):
        """
        Gets the field of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".

        :return: The field of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        The name of the file attribute to match on (only required if this is a custom_attribute type criterion).  Default is an empty string \"\".

        :param field: The field of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :type: str
        """
        
        self._field = field

    @property
    def operator(self):
        """
        Gets the operator of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        How to compare the specified attribute of each file to the specified value.

        :return: The operator of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """
        Sets the operator of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        How to compare the specified attribute of each file to the specified value.

        :param operator: The operator of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :type: str
        """
        allowed_values = ["==", "!=", ">", ">=", "<", "<=", "!"]
        if operator is not None and operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator`, must be one of {0}"
                .format(allowed_values)
            )

        self._operator = operator

    @property
    def type(self):
        """
        Gets the type of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        The type of this criterion, that is, which file attribute to match on.

        :return: The type of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        The type of this criterion, that is, which file attribute to match on.

        :param type: The type of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :type: str
        """
        allowed_values = ["name", "path", "accessed_time", "accessed_before", "accessed_after", "birth_time", "birth_before", "birth_after", "changed_time", "changed_before", "changed_after", "size", "file_type", "posix_regex_name", "user_name", "user_id", "group_name", "group_id", "no_user", "no_group"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """
        Gets the value of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        The value to compare the specified attribute of each file to.

        :return: The value of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        The value to compare the specified attribute of each file to.

        :param value: The value of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :type: str
        """
        
        self._value = value

    @property
    def whole_word(self):
        """
        Gets the whole_word of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        If true, the attribute must match the entire word.  Default is true.

        :return: The whole_word of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :rtype: bool
        """
        return self._whole_word

    @whole_word.setter
    def whole_word(self, whole_word):
        """
        Sets the whole_word of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        If true, the attribute must match the entire word.  Default is true.

        :param whole_word: The whole_word of this ReportSubreportPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.
        :type: bool
        """
        
        self._whole_word = whole_word

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

