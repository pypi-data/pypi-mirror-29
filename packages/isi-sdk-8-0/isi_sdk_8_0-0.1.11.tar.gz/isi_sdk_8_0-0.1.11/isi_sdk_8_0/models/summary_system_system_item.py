# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SummarySystemSystemItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SummarySystemSystemItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cpu': 'float',
            'disk_in': 'float',
            'disk_out': 'float',
            'ftp': 'float',
            'hdfs': 'float',
            'http': 'float',
            'iscsi': 'float',
            'net_in': 'float',
            'net_out': 'float',
            'nfs': 'float',
            'node': 'str',
            'smb': 'float',
            'time': 'int',
            'total': 'float'
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'disk_in': 'disk_in',
            'disk_out': 'disk_out',
            'ftp': 'ftp',
            'hdfs': 'hdfs',
            'http': 'http',
            'iscsi': 'iscsi',
            'net_in': 'net_in',
            'net_out': 'net_out',
            'nfs': 'nfs',
            'node': 'node',
            'smb': 'smb',
            'time': 'time',
            'total': 'total'
        }

        self._cpu = None
        self._disk_in = None
        self._disk_out = None
        self._ftp = None
        self._hdfs = None
        self._http = None
        self._iscsi = None
        self._net_in = None
        self._net_out = None
        self._nfs = None
        self._node = None
        self._smb = None
        self._time = None
        self._total = None

    @property
    def cpu(self):
        """
        Gets the cpu of this SummarySystemSystemItem.
        The percentage CPU utilization.

        :return: The cpu of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this SummarySystemSystemItem.
        The percentage CPU utilization.

        :param cpu: The cpu of this SummarySystemSystemItem.
        :type: float
        """
        
        self._cpu = cpu

    @property
    def disk_in(self):
        """
        Gets the disk_in of this SummarySystemSystemItem.
        Traffic to disk (in bytes/sec).

        :return: The disk_in of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._disk_in

    @disk_in.setter
    def disk_in(self, disk_in):
        """
        Sets the disk_in of this SummarySystemSystemItem.
        Traffic to disk (in bytes/sec).

        :param disk_in: The disk_in of this SummarySystemSystemItem.
        :type: float
        """
        
        self._disk_in = disk_in

    @property
    def disk_out(self):
        """
        Gets the disk_out of this SummarySystemSystemItem.
        Traffic from disk (in bytes/sec).

        :return: The disk_out of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._disk_out

    @disk_out.setter
    def disk_out(self, disk_out):
        """
        Sets the disk_out of this SummarySystemSystemItem.
        Traffic from disk (in bytes/sec).

        :param disk_out: The disk_out of this SummarySystemSystemItem.
        :type: float
        """
        
        self._disk_out = disk_out

    @property
    def ftp(self):
        """
        Gets the ftp of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for FTP operations.

        :return: The ftp of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._ftp

    @ftp.setter
    def ftp(self, ftp):
        """
        Sets the ftp of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for FTP operations.

        :param ftp: The ftp of this SummarySystemSystemItem.
        :type: float
        """
        
        self._ftp = ftp

    @property
    def hdfs(self):
        """
        Gets the hdfs of this SummarySystemSystemItem.
        The total throughput (in bytes/second) for HDFS operations.

        :return: The hdfs of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._hdfs

    @hdfs.setter
    def hdfs(self, hdfs):
        """
        Sets the hdfs of this SummarySystemSystemItem.
        The total throughput (in bytes/second) for HDFS operations.

        :param hdfs: The hdfs of this SummarySystemSystemItem.
        :type: float
        """
        
        self._hdfs = hdfs

    @property
    def http(self):
        """
        Gets the http of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for HTTP operations.

        :return: The http of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._http

    @http.setter
    def http(self, http):
        """
        Sets the http of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for HTTP operations.

        :param http: The http of this SummarySystemSystemItem.
        :type: float
        """
        
        self._http = http

    @property
    def iscsi(self):
        """
        Gets the iscsi of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for ISCSI operations.

        :return: The iscsi of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._iscsi

    @iscsi.setter
    def iscsi(self, iscsi):
        """
        Sets the iscsi of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for ISCSI operations.

        :param iscsi: The iscsi of this SummarySystemSystemItem.
        :type: float
        """
        
        self._iscsi = iscsi

    @property
    def net_in(self):
        """
        Gets the net_in of this SummarySystemSystemItem.
        Incoming network traffic (in bytes/sec) for all operations.

        :return: The net_in of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._net_in

    @net_in.setter
    def net_in(self, net_in):
        """
        Sets the net_in of this SummarySystemSystemItem.
        Incoming network traffic (in bytes/sec) for all operations.

        :param net_in: The net_in of this SummarySystemSystemItem.
        :type: float
        """
        
        self._net_in = net_in

    @property
    def net_out(self):
        """
        Gets the net_out of this SummarySystemSystemItem.
        Outgoing network traffic (in bytes/sec) for all operations.

        :return: The net_out of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._net_out

    @net_out.setter
    def net_out(self, net_out):
        """
        Sets the net_out of this SummarySystemSystemItem.
        Outgoing network traffic (in bytes/sec) for all operations.

        :param net_out: The net_out of this SummarySystemSystemItem.
        :type: float
        """
        
        self._net_out = net_out

    @property
    def nfs(self):
        """
        Gets the nfs of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for NFS (NFS3 & NFS4) operations.

        :return: The nfs of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._nfs

    @nfs.setter
    def nfs(self, nfs):
        """
        Sets the nfs of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for NFS (NFS3 & NFS4) operations.

        :param nfs: The nfs of this SummarySystemSystemItem.
        :type: float
        """
        
        self._nfs = nfs

    @property
    def node(self):
        """
        Gets the node of this SummarySystemSystemItem.
        Node ID/LNN, 'All' for cluster.

        :return: The node of this SummarySystemSystemItem.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """
        Sets the node of this SummarySystemSystemItem.
        Node ID/LNN, 'All' for cluster.

        :param node: The node of this SummarySystemSystemItem.
        :type: str
        """
        
        self._node = node

    @property
    def smb(self):
        """
        Gets the smb of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for SMB (SMB1 & SMB2) operations.

        :return: The smb of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._smb

    @smb.setter
    def smb(self, smb):
        """
        Sets the smb of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for SMB (SMB1 & SMB2) operations.

        :param smb: The smb of this SummarySystemSystemItem.
        :type: float
        """
        
        self._smb = smb

    @property
    def time(self):
        """
        Gets the time of this SummarySystemSystemItem.
        Unix Epoch time in seconds of the request.

        :return: The time of this SummarySystemSystemItem.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this SummarySystemSystemItem.
        Unix Epoch time in seconds of the request.

        :param time: The time of this SummarySystemSystemItem.
        :type: int
        """
        
        self._time = time

    @property
    def total(self):
        """
        Gets the total of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for all protocols listed.

        :return: The total of this SummarySystemSystemItem.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this SummarySystemSystemItem.
        The total throughput (in bytes/sec) for all protocols listed.

        :param total: The total of this SummarySystemSystemItem.
        :type: float
        """
        
        self._total = total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

