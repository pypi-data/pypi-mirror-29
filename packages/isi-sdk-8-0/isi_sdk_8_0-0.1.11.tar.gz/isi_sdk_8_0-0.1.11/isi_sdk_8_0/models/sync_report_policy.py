# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SyncReportPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SyncReportPolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'action': 'str',
            'file_matching_pattern': 'ReportSubreportPolicyFileMatchingPattern',
            'name': 'str',
            'source_exclude_directories': 'list[str]',
            'source_include_directories': 'list[str]',
            'source_root_path': 'str',
            'target_host': 'str',
            'target_path': 'str'
        }

        self.attribute_map = {
            'action': 'action',
            'file_matching_pattern': 'file_matching_pattern',
            'name': 'name',
            'source_exclude_directories': 'source_exclude_directories',
            'source_include_directories': 'source_include_directories',
            'source_root_path': 'source_root_path',
            'target_host': 'target_host',
            'target_path': 'target_path'
        }

        self._action = None
        self._file_matching_pattern = None
        self._name = None
        self._source_exclude_directories = None
        self._source_include_directories = None
        self._source_root_path = None
        self._target_host = None
        self._target_path = None

    @property
    def action(self):
        """
        Gets the action of this SyncReportPolicy.
        If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.

        :return: The action of this SyncReportPolicy.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this SyncReportPolicy.
        If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.

        :param action: The action of this SyncReportPolicy.
        :type: str
        """
        
        self._action = action

    @property
    def file_matching_pattern(self):
        """
        Gets the file_matching_pattern of this SyncReportPolicy.
        A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.

        :return: The file_matching_pattern of this SyncReportPolicy.
        :rtype: ReportSubreportPolicyFileMatchingPattern
        """
        return self._file_matching_pattern

    @file_matching_pattern.setter
    def file_matching_pattern(self, file_matching_pattern):
        """
        Sets the file_matching_pattern of this SyncReportPolicy.
        A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.

        :param file_matching_pattern: The file_matching_pattern of this SyncReportPolicy.
        :type: ReportSubreportPolicyFileMatchingPattern
        """
        
        self._file_matching_pattern = file_matching_pattern

    @property
    def name(self):
        """
        Gets the name of this SyncReportPolicy.
        User-assigned name of this sync policy.

        :return: The name of this SyncReportPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SyncReportPolicy.
        User-assigned name of this sync policy.

        :param name: The name of this SyncReportPolicy.
        :type: str
        """
        
        self._name = name

    @property
    def source_exclude_directories(self):
        """
        Gets the source_exclude_directories of this SyncReportPolicy.
        Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.

        :return: The source_exclude_directories of this SyncReportPolicy.
        :rtype: list[str]
        """
        return self._source_exclude_directories

    @source_exclude_directories.setter
    def source_exclude_directories(self, source_exclude_directories):
        """
        Sets the source_exclude_directories of this SyncReportPolicy.
        Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.

        :param source_exclude_directories: The source_exclude_directories of this SyncReportPolicy.
        :type: list[str]
        """
        
        self._source_exclude_directories = source_exclude_directories

    @property
    def source_include_directories(self):
        """
        Gets the source_include_directories of this SyncReportPolicy.
        Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.

        :return: The source_include_directories of this SyncReportPolicy.
        :rtype: list[str]
        """
        return self._source_include_directories

    @source_include_directories.setter
    def source_include_directories(self, source_include_directories):
        """
        Sets the source_include_directories of this SyncReportPolicy.
        Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.

        :param source_include_directories: The source_include_directories of this SyncReportPolicy.
        :type: list[str]
        """
        
        self._source_include_directories = source_include_directories

    @property
    def source_root_path(self):
        """
        Gets the source_root_path of this SyncReportPolicy.
        The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.

        :return: The source_root_path of this SyncReportPolicy.
        :rtype: str
        """
        return self._source_root_path

    @source_root_path.setter
    def source_root_path(self, source_root_path):
        """
        Sets the source_root_path of this SyncReportPolicy.
        The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.

        :param source_root_path: The source_root_path of this SyncReportPolicy.
        :type: str
        """
        
        self._source_root_path = source_root_path

    @property
    def target_host(self):
        """
        Gets the target_host of this SyncReportPolicy.
        Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.

        :return: The target_host of this SyncReportPolicy.
        :rtype: str
        """
        return self._target_host

    @target_host.setter
    def target_host(self, target_host):
        """
        Sets the target_host of this SyncReportPolicy.
        Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.

        :param target_host: The target_host of this SyncReportPolicy.
        :type: str
        """
        
        self._target_host = target_host

    @property
    def target_path(self):
        """
        Gets the target_path of this SyncReportPolicy.
        Absolute filesystem path on the target cluster for the sync destination.

        :return: The target_path of this SyncReportPolicy.
        :rtype: str
        """
        return self._target_path

    @target_path.setter
    def target_path(self, target_path):
        """
        Sets the target_path of this SyncReportPolicy.
        Absolute filesystem path on the target cluster for the sync destination.

        :param target_path: The target_path of this SyncReportPolicy.
        :type: str
        """
        
        self._target_path = target_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

