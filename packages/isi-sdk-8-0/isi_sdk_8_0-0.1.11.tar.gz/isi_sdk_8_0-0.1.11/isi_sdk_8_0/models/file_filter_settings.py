# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class FileFilterSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FileFilterSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'file_filter_extensions': 'list[str]',
            'file_filter_type': 'str',
            'file_filtering_enabled': 'bool'
        }

        self.attribute_map = {
            'file_filter_extensions': 'file_filter_extensions',
            'file_filter_type': 'file_filter_type',
            'file_filtering_enabled': 'file_filtering_enabled'
        }

        self._file_filter_extensions = None
        self._file_filter_type = None
        self._file_filtering_enabled = None

    @property
    def file_filter_extensions(self):
        """
        Gets the file_filter_extensions of this FileFilterSettings.
        List of file extensions to be filtered.

        :return: The file_filter_extensions of this FileFilterSettings.
        :rtype: list[str]
        """
        return self._file_filter_extensions

    @file_filter_extensions.setter
    def file_filter_extensions(self, file_filter_extensions):
        """
        Sets the file_filter_extensions of this FileFilterSettings.
        List of file extensions to be filtered.

        :param file_filter_extensions: The file_filter_extensions of this FileFilterSettings.
        :type: list[str]
        """
        
        self._file_filter_extensions = file_filter_extensions

    @property
    def file_filter_type(self):
        """
        Gets the file_filter_type of this FileFilterSettings.
        Specifies if filter list is for deny or allow. Default is deny.

        :return: The file_filter_type of this FileFilterSettings.
        :rtype: str
        """
        return self._file_filter_type

    @file_filter_type.setter
    def file_filter_type(self, file_filter_type):
        """
        Sets the file_filter_type of this FileFilterSettings.
        Specifies if filter list is for deny or allow. Default is deny.

        :param file_filter_type: The file_filter_type of this FileFilterSettings.
        :type: str
        """
        allowed_values = ["deny", "allow"]
        if file_filter_type is not None and file_filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_filter_type`, must be one of {0}"
                .format(allowed_values)
            )

        self._file_filter_type = file_filter_type

    @property
    def file_filtering_enabled(self):
        """
        Gets the file_filtering_enabled of this FileFilterSettings.
        Indicates whether file filtering is enabled on this zone.

        :return: The file_filtering_enabled of this FileFilterSettings.
        :rtype: bool
        """
        return self._file_filtering_enabled

    @file_filtering_enabled.setter
    def file_filtering_enabled(self, file_filtering_enabled):
        """
        Sets the file_filtering_enabled of this FileFilterSettings.
        Indicates whether file filtering is enabled on this zone.

        :param file_filtering_enabled: The file_filtering_enabled of this FileFilterSettings.
        :type: bool
        """
        
        self._file_filtering_enabled = file_filtering_enabled

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

