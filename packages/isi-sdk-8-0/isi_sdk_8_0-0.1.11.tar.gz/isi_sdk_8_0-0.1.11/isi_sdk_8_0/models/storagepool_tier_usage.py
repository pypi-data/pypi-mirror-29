# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class StoragepoolTierUsage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        StoragepoolTierUsage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'avail_bytes': 'str',
            'avail_ssd_bytes': 'str',
            'balanced': 'bool',
            'free_bytes': 'str',
            'free_ssd_bytes': 'str',
            'total_bytes': 'str',
            'total_ssd_bytes': 'str',
            'virtual_hot_spare_bytes': 'str'
        }

        self.attribute_map = {
            'avail_bytes': 'avail_bytes',
            'avail_ssd_bytes': 'avail_ssd_bytes',
            'balanced': 'balanced',
            'free_bytes': 'free_bytes',
            'free_ssd_bytes': 'free_ssd_bytes',
            'total_bytes': 'total_bytes',
            'total_ssd_bytes': 'total_ssd_bytes',
            'virtual_hot_spare_bytes': 'virtual_hot_spare_bytes'
        }

        self._avail_bytes = None
        self._avail_ssd_bytes = None
        self._balanced = None
        self._free_bytes = None
        self._free_ssd_bytes = None
        self._total_bytes = None
        self._total_ssd_bytes = None
        self._virtual_hot_spare_bytes = None

    @property
    def avail_bytes(self):
        """
        Gets the avail_bytes of this StoragepoolTierUsage.
        Available free bytes remaining in the pool when virtual hot spare is taken into account.

        :return: The avail_bytes of this StoragepoolTierUsage.
        :rtype: str
        """
        return self._avail_bytes

    @avail_bytes.setter
    def avail_bytes(self, avail_bytes):
        """
        Sets the avail_bytes of this StoragepoolTierUsage.
        Available free bytes remaining in the pool when virtual hot spare is taken into account.

        :param avail_bytes: The avail_bytes of this StoragepoolTierUsage.
        :type: str
        """
        
        self._avail_bytes = avail_bytes

    @property
    def avail_ssd_bytes(self):
        """
        Gets the avail_ssd_bytes of this StoragepoolTierUsage.
        Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.

        :return: The avail_ssd_bytes of this StoragepoolTierUsage.
        :rtype: str
        """
        return self._avail_ssd_bytes

    @avail_ssd_bytes.setter
    def avail_ssd_bytes(self, avail_ssd_bytes):
        """
        Sets the avail_ssd_bytes of this StoragepoolTierUsage.
        Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.

        :param avail_ssd_bytes: The avail_ssd_bytes of this StoragepoolTierUsage.
        :type: str
        """
        
        self._avail_ssd_bytes = avail_ssd_bytes

    @property
    def balanced(self):
        """
        Gets the balanced of this StoragepoolTierUsage.
        Whether or not the pool usage is currently balanced.

        :return: The balanced of this StoragepoolTierUsage.
        :rtype: bool
        """
        return self._balanced

    @balanced.setter
    def balanced(self, balanced):
        """
        Sets the balanced of this StoragepoolTierUsage.
        Whether or not the pool usage is currently balanced.

        :param balanced: The balanced of this StoragepoolTierUsage.
        :type: bool
        """
        
        self._balanced = balanced

    @property
    def free_bytes(self):
        """
        Gets the free_bytes of this StoragepoolTierUsage.
        Free bytes remaining in the pool.

        :return: The free_bytes of this StoragepoolTierUsage.
        :rtype: str
        """
        return self._free_bytes

    @free_bytes.setter
    def free_bytes(self, free_bytes):
        """
        Sets the free_bytes of this StoragepoolTierUsage.
        Free bytes remaining in the pool.

        :param free_bytes: The free_bytes of this StoragepoolTierUsage.
        :type: str
        """
        
        self._free_bytes = free_bytes

    @property
    def free_ssd_bytes(self):
        """
        Gets the free_ssd_bytes of this StoragepoolTierUsage.
        Free bytes remaining in the pool on SSD drives.

        :return: The free_ssd_bytes of this StoragepoolTierUsage.
        :rtype: str
        """
        return self._free_ssd_bytes

    @free_ssd_bytes.setter
    def free_ssd_bytes(self, free_ssd_bytes):
        """
        Sets the free_ssd_bytes of this StoragepoolTierUsage.
        Free bytes remaining in the pool on SSD drives.

        :param free_ssd_bytes: The free_ssd_bytes of this StoragepoolTierUsage.
        :type: str
        """
        
        self._free_ssd_bytes = free_ssd_bytes

    @property
    def total_bytes(self):
        """
        Gets the total_bytes of this StoragepoolTierUsage.
        Total bytes used in the pool.

        :return: The total_bytes of this StoragepoolTierUsage.
        :rtype: str
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """
        Sets the total_bytes of this StoragepoolTierUsage.
        Total bytes used in the pool.

        :param total_bytes: The total_bytes of this StoragepoolTierUsage.
        :type: str
        """
        
        self._total_bytes = total_bytes

    @property
    def total_ssd_bytes(self):
        """
        Gets the total_ssd_bytes of this StoragepoolTierUsage.
        Total bytes used in the pool on SSD drives.

        :return: The total_ssd_bytes of this StoragepoolTierUsage.
        :rtype: str
        """
        return self._total_ssd_bytes

    @total_ssd_bytes.setter
    def total_ssd_bytes(self, total_ssd_bytes):
        """
        Sets the total_ssd_bytes of this StoragepoolTierUsage.
        Total bytes used in the pool on SSD drives.

        :param total_ssd_bytes: The total_ssd_bytes of this StoragepoolTierUsage.
        :type: str
        """
        
        self._total_ssd_bytes = total_ssd_bytes

    @property
    def virtual_hot_spare_bytes(self):
        """
        Gets the virtual_hot_spare_bytes of this StoragepoolTierUsage.
        Bytes reserved for virtual hot spare in the pool.

        :return: The virtual_hot_spare_bytes of this StoragepoolTierUsage.
        :rtype: str
        """
        return self._virtual_hot_spare_bytes

    @virtual_hot_spare_bytes.setter
    def virtual_hot_spare_bytes(self, virtual_hot_spare_bytes):
        """
        Sets the virtual_hot_spare_bytes of this StoragepoolTierUsage.
        Bytes reserved for virtual hot spare in the pool.

        :param virtual_hot_spare_bytes: The virtual_hot_spare_bytes of this StoragepoolTierUsage.
        :type: str
        """
        
        self._virtual_hot_spare_bytes = virtual_hot_spare_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

