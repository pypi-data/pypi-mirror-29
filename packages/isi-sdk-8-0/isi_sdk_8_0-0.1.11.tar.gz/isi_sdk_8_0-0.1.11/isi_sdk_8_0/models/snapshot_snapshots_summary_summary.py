# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SnapshotSnapshotsSummarySummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SnapshotSnapshotsSummarySummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'active_count': 'int',
            'active_size': 'int',
            'aliases_count': 'int',
            'count': 'int',
            'deleting_count': 'int',
            'deleting_size': 'int',
            'shadow_bytes': 'int',
            'size': 'int'
        }

        self.attribute_map = {
            'active_count': 'active_count',
            'active_size': 'active_size',
            'aliases_count': 'aliases_count',
            'count': 'count',
            'deleting_count': 'deleting_count',
            'deleting_size': 'deleting_size',
            'shadow_bytes': 'shadow_bytes',
            'size': 'size'
        }

        self._active_count = None
        self._active_size = None
        self._aliases_count = None
        self._count = None
        self._deleting_count = None
        self._deleting_size = None
        self._shadow_bytes = None
        self._size = None

    @property
    def active_count(self):
        """
        Gets the active_count of this SnapshotSnapshotsSummarySummary.
        Total number of active snapshots.

        :return: The active_count of this SnapshotSnapshotsSummarySummary.
        :rtype: int
        """
        return self._active_count

    @active_count.setter
    def active_count(self, active_count):
        """
        Sets the active_count of this SnapshotSnapshotsSummarySummary.
        Total number of active snapshots.

        :param active_count: The active_count of this SnapshotSnapshotsSummarySummary.
        :type: int
        """
        
        self._active_count = active_count

    @property
    def active_size(self):
        """
        Gets the active_size of this SnapshotSnapshotsSummarySummary.
        Sum of sizes of active snapshots.

        :return: The active_size of this SnapshotSnapshotsSummarySummary.
        :rtype: int
        """
        return self._active_size

    @active_size.setter
    def active_size(self, active_size):
        """
        Sets the active_size of this SnapshotSnapshotsSummarySummary.
        Sum of sizes of active snapshots.

        :param active_size: The active_size of this SnapshotSnapshotsSummarySummary.
        :type: int
        """
        
        self._active_size = active_size

    @property
    def aliases_count(self):
        """
        Gets the aliases_count of this SnapshotSnapshotsSummarySummary.
        Total number of snapshot aliases.

        :return: The aliases_count of this SnapshotSnapshotsSummarySummary.
        :rtype: int
        """
        return self._aliases_count

    @aliases_count.setter
    def aliases_count(self, aliases_count):
        """
        Sets the aliases_count of this SnapshotSnapshotsSummarySummary.
        Total number of snapshot aliases.

        :param aliases_count: The aliases_count of this SnapshotSnapshotsSummarySummary.
        :type: int
        """
        
        self._aliases_count = aliases_count

    @property
    def count(self):
        """
        Gets the count of this SnapshotSnapshotsSummarySummary.
        Total number of snapshots.

        :return: The count of this SnapshotSnapshotsSummarySummary.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this SnapshotSnapshotsSummarySummary.
        Total number of snapshots.

        :param count: The count of this SnapshotSnapshotsSummarySummary.
        :type: int
        """
        
        self._count = count

    @property
    def deleting_count(self):
        """
        Gets the deleting_count of this SnapshotSnapshotsSummarySummary.
        Total number of delete-pending snapshots.

        :return: The deleting_count of this SnapshotSnapshotsSummarySummary.
        :rtype: int
        """
        return self._deleting_count

    @deleting_count.setter
    def deleting_count(self, deleting_count):
        """
        Sets the deleting_count of this SnapshotSnapshotsSummarySummary.
        Total number of delete-pending snapshots.

        :param deleting_count: The deleting_count of this SnapshotSnapshotsSummarySummary.
        :type: int
        """
        
        self._deleting_count = deleting_count

    @property
    def deleting_size(self):
        """
        Gets the deleting_size of this SnapshotSnapshotsSummarySummary.
        Sum of sizes of delete-pending snapshots.

        :return: The deleting_size of this SnapshotSnapshotsSummarySummary.
        :rtype: int
        """
        return self._deleting_size

    @deleting_size.setter
    def deleting_size(self, deleting_size):
        """
        Sets the deleting_size of this SnapshotSnapshotsSummarySummary.
        Sum of sizes of delete-pending snapshots.

        :param deleting_size: The deleting_size of this SnapshotSnapshotsSummarySummary.
        :type: int
        """
        
        self._deleting_size = deleting_size

    @property
    def shadow_bytes(self):
        """
        Gets the shadow_bytes of this SnapshotSnapshotsSummarySummary.
        Sum of shadow bytes of all snapshots.

        :return: The shadow_bytes of this SnapshotSnapshotsSummarySummary.
        :rtype: int
        """
        return self._shadow_bytes

    @shadow_bytes.setter
    def shadow_bytes(self, shadow_bytes):
        """
        Sets the shadow_bytes of this SnapshotSnapshotsSummarySummary.
        Sum of shadow bytes of all snapshots.

        :param shadow_bytes: The shadow_bytes of this SnapshotSnapshotsSummarySummary.
        :type: int
        """
        
        self._shadow_bytes = shadow_bytes

    @property
    def size(self):
        """
        Gets the size of this SnapshotSnapshotsSummarySummary.
        Sum of sizes in bytes of all snapshots.

        :return: The size of this SnapshotSnapshotsSummarySummary.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this SnapshotSnapshotsSummarySummary.
        Sum of sizes in bytes of all snapshots.

        :param size: The size of this SnapshotSnapshotsSummarySummary.
        :type: int
        """
        
        self._size = size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

