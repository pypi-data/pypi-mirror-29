# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class JobJobSmartpoolstreeParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        JobJobSmartpoolstreeParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'directory_only': 'bool',
            'nop': 'bool',
            'policy_only': 'bool',
            'recurse': 'bool'
        }

        self.attribute_map = {
            'directory_only': 'directory_only',
            'nop': 'nop',
            'policy_only': 'policy_only',
            'recurse': 'recurse'
        }

        self._directory_only = None
        self._nop = None
        self._policy_only = None
        self._recurse = None

    @property
    def directory_only(self):
        """
        Gets the directory_only of this JobJobSmartpoolstreeParams.
        Skip processing of regular files.

        :return: The directory_only of this JobJobSmartpoolstreeParams.
        :rtype: bool
        """
        return self._directory_only

    @directory_only.setter
    def directory_only(self, directory_only):
        """
        Sets the directory_only of this JobJobSmartpoolstreeParams.
        Skip processing of regular files.

        :param directory_only: The directory_only of this JobJobSmartpoolstreeParams.
        :type: bool
        """
        
        self._directory_only = directory_only

    @property
    def nop(self):
        """
        Gets the nop of this JobJobSmartpoolstreeParams.
        Calculate what would be done (dry run).

        :return: The nop of this JobJobSmartpoolstreeParams.
        :rtype: bool
        """
        return self._nop

    @nop.setter
    def nop(self, nop):
        """
        Sets the nop of this JobJobSmartpoolstreeParams.
        Calculate what would be done (dry run).

        :param nop: The nop of this JobJobSmartpoolstreeParams.
        :type: bool
        """
        
        self._nop = nop

    @property
    def policy_only(self):
        """
        Gets the policy_only of this JobJobSmartpoolstreeParams.
        Apply policies but skip restriping.

        :return: The policy_only of this JobJobSmartpoolstreeParams.
        :rtype: bool
        """
        return self._policy_only

    @policy_only.setter
    def policy_only(self, policy_only):
        """
        Sets the policy_only of this JobJobSmartpoolstreeParams.
        Apply policies but skip restriping.

        :param policy_only: The policy_only of this JobJobSmartpoolstreeParams.
        :type: bool
        """
        
        self._policy_only = policy_only

    @property
    def recurse(self):
        """
        Gets the recurse of this JobJobSmartpoolstreeParams.
        Process children, recursively.

        :return: The recurse of this JobJobSmartpoolstreeParams.
        :rtype: bool
        """
        return self._recurse

    @recurse.setter
    def recurse(self, recurse):
        """
        Sets the recurse of this JobJobSmartpoolstreeParams.
        Process children, recursively.

        :param recurse: The recurse of this JobJobSmartpoolstreeParams.
        :type: bool
        """
        
        self._recurse = recurse

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

