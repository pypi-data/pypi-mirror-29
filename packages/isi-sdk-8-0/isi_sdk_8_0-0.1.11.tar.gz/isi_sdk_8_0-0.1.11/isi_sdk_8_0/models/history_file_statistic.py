# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class HistoryFileStatistic(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HistoryFileStatistic - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'allocated': 'int',
            'id': 'int',
            'limit': 'int',
            'timestamp': 'int',
            'total': 'int'
        }

        self.attribute_map = {
            'allocated': 'allocated',
            'id': 'id',
            'limit': 'limit',
            'timestamp': 'timestamp',
            'total': 'total'
        }

        self._allocated = None
        self._id = None
        self._limit = None
        self._timestamp = None
        self._total = None

    @property
    def allocated(self):
        """
        Gets the allocated of this HistoryFileStatistic.
        Nodes allocated for the sync action.

        :return: The allocated of this HistoryFileStatistic.
        :rtype: int
        """
        return self._allocated

    @allocated.setter
    def allocated(self, allocated):
        """
        Sets the allocated of this HistoryFileStatistic.
        Nodes allocated for the sync action.

        :param allocated: The allocated of this HistoryFileStatistic.
        :type: int
        """
        
        self._allocated = allocated

    @property
    def id(self):
        """
        Gets the id of this HistoryFileStatistic.
        An ID for a single performance report.

        :return: The id of this HistoryFileStatistic.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this HistoryFileStatistic.
        An ID for a single performance report.

        :param id: The id of this HistoryFileStatistic.
        :type: int
        """
        
        self._id = id

    @property
    def limit(self):
        """
        Gets the limit of this HistoryFileStatistic.
        Sync action limit.

        :return: The limit of this HistoryFileStatistic.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this HistoryFileStatistic.
        Sync action limit.

        :param limit: The limit of this HistoryFileStatistic.
        :type: int
        """
        
        self._limit = limit

    @property
    def timestamp(self):
        """
        Gets the timestamp of this HistoryFileStatistic.
        Timestamp for the performance report.

        :return: The timestamp of this HistoryFileStatistic.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this HistoryFileStatistic.
        Timestamp for the performance report.

        :param timestamp: The timestamp of this HistoryFileStatistic.
        :type: int
        """
        
        self._timestamp = timestamp

    @property
    def total(self):
        """
        Gets the total of this HistoryFileStatistic.
        Total usage for the performance report.

        :return: The total of this HistoryFileStatistic.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this HistoryFileStatistic.
        Total usage for the performance report.

        :param total: The total of this HistoryFileStatistic.
        :type: int
        """
        
        self._total = total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

