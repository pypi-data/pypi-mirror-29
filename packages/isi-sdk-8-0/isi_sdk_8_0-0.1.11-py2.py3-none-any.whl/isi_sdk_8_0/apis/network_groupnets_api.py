# coding: utf-8

"""
NetworkGroupnetsApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class NetworkGroupnetsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_groupnet_subnet(self, groupnet_subnet, groupnet, **kwargs):
        """
        
        Create a new subnet.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_groupnet_subnet(groupnet_subnet, groupnet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupnetSubnetCreateParams groupnet_subnet:  (required)
        :param str groupnet:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupnet_subnet', 'groupnet']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_groupnet_subnet" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'groupnet_subnet' is set
        if ('groupnet_subnet' not in params) or (params['groupnet_subnet'] is None):
            raise ValueError("Missing the required parameter `groupnet_subnet` when calling `create_groupnet_subnet`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `create_groupnet_subnet`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'groupnet_subnet' in params:
            body_params = params['groupnet_subnet']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_subnets_subnet_pool(self, subnets_subnet_pool, groupnet, subnet, **kwargs):
        """
        
        Create a new pool.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_subnets_subnet_pool(subnets_subnet_pool, groupnet, subnet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SubnetsSubnetPoolCreateParams subnets_subnet_pool:  (required)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param bool force: Force creating this pool even if it causes an MTU conflict.
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subnets_subnet_pool', 'groupnet', 'subnet', 'force']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subnets_subnet_pool" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'subnets_subnet_pool' is set
        if ('subnets_subnet_pool' not in params) or (params['subnets_subnet_pool'] is None):
            raise ValueError("Missing the required parameter `subnets_subnet_pool` when calling `create_subnets_subnet_pool`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `create_subnets_subnet_pool`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `create_subnets_subnet_pool`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'subnets_subnet_pool' in params:
            body_params = params['subnets_subnet_pool']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_groupnet_subnet(self, groupnet_subnet_id, groupnet, **kwargs):
        """
        
        Delete a network subnet..

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_groupnet_subnet(groupnet_subnet_id, groupnet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupnet_subnet_id: Delete a network subnet.. (required)
        :param str groupnet:  (required)
        :param bool force: force deleting this subnet even if pools in other subnets rely on this subnet's SC VIP.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupnet_subnet_id', 'groupnet', 'force']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_groupnet_subnet" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'groupnet_subnet_id' is set
        if ('groupnet_subnet_id' not in params) or (params['groupnet_subnet_id'] is None):
            raise ValueError("Missing the required parameter `groupnet_subnet_id` when calling `delete_groupnet_subnet`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `delete_groupnet_subnet`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{GroupnetSubnetId}'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet_subnet_id' in params:
            path_params['GroupnetSubnetId'] = params['groupnet_subnet_id']
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_subnets_subnet_pool(self, subnets_subnet_pool_id, groupnet, subnet, **kwargs):
        """
        
        Delete a network pool.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_subnets_subnet_pool(subnets_subnet_pool_id, groupnet, subnet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subnets_subnet_pool_id: Delete a network pool. (required)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subnets_subnet_pool_id', 'groupnet', 'subnet']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subnets_subnet_pool" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'subnets_subnet_pool_id' is set
        if ('subnets_subnet_pool_id' not in params) or (params['subnets_subnet_pool_id'] is None):
            raise ValueError("Missing the required parameter `subnets_subnet_pool_id` when calling `delete_subnets_subnet_pool`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `delete_subnets_subnet_pool`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `delete_subnets_subnet_pool`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{SubnetsSubnetPoolId}'.replace('{format}', 'json')
        path_params = {}
        if 'subnets_subnet_pool_id' in params:
            path_params['SubnetsSubnetPoolId'] = params['subnets_subnet_pool_id']
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_groupnet_subnet(self, groupnet_subnet_id, groupnet, **kwargs):
        """
        
        View a network subnet.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groupnet_subnet(groupnet_subnet_id, groupnet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupnet_subnet_id: View a network subnet. (required)
        :param str groupnet:  (required)
        :return: GroupnetSubnets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupnet_subnet_id', 'groupnet']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groupnet_subnet" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'groupnet_subnet_id' is set
        if ('groupnet_subnet_id' not in params) or (params['groupnet_subnet_id'] is None):
            raise ValueError("Missing the required parameter `groupnet_subnet_id` when calling `get_groupnet_subnet`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `get_groupnet_subnet`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{GroupnetSubnetId}'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet_subnet_id' in params:
            path_params['GroupnetSubnetId'] = params['groupnet_subnet_id']
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GroupnetSubnets',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_subnets_subnet_pool(self, subnets_subnet_pool_id, groupnet, subnet, **kwargs):
        """
        
        View a single network pool.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subnets_subnet_pool(subnets_subnet_pool_id, groupnet, subnet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subnets_subnet_pool_id: View a single network pool. (required)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :return: SubnetsSubnetPools
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subnets_subnet_pool_id', 'groupnet', 'subnet']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subnets_subnet_pool" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'subnets_subnet_pool_id' is set
        if ('subnets_subnet_pool_id' not in params) or (params['subnets_subnet_pool_id'] is None):
            raise ValueError("Missing the required parameter `subnets_subnet_pool_id` when calling `get_subnets_subnet_pool`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `get_subnets_subnet_pool`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `get_subnets_subnet_pool`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{SubnetsSubnetPoolId}'.replace('{format}', 'json')
        path_params = {}
        if 'subnets_subnet_pool_id' in params:
            path_params['SubnetsSubnetPoolId'] = params['subnets_subnet_pool_id']
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SubnetsSubnetPools',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_groupnet_subnets(self, groupnet, **kwargs):
        """
        
        Get a list of subnets.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_groupnet_subnets(groupnet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupnet:  (required)
        :param str sort: The field that will be used for sorting.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: GroupnetSubnetsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupnet', 'sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_groupnet_subnets" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `list_groupnet_subnets`")

        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_groupnet_subnets`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GroupnetSubnetsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_subnets_subnet_pools(self, groupnet, subnet, **kwargs):
        """
        
        Get a list of network pools.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_subnets_subnet_pools(groupnet, subnet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param str sort: The field that will be used for sorting.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param str access_zone: If specified, only pools with this zone name will be returned.
        :param str alloc_method: If specified, only pools with this allocation type will be returned.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :return: SubnetsSubnetPoolsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupnet', 'subnet', 'sort', 'resume', 'access_zone', 'alloc_method', 'limit', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_subnets_subnet_pools" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `list_subnets_subnet_pools`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `list_subnets_subnet_pools`")

        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_subnets_subnet_pools`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'access_zone' in params:
            query_params['access_zone'] = params['access_zone']
        if 'alloc_method' in params:
            query_params['alloc_method'] = params['alloc_method']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SubnetsSubnetPoolsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_groupnet_subnet(self, groupnet_subnet, groupnet_subnet_id, groupnet, **kwargs):
        """
        
        Modify a network subnet.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_groupnet_subnet(groupnet_subnet, groupnet_subnet_id, groupnet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupnetSubnet groupnet_subnet:  (required)
        :param str groupnet_subnet_id: Modify a network subnet. (required)
        :param str groupnet:  (required)
        :param bool force: force modifying this subnet even if it causes an MTU conflict.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupnet_subnet', 'groupnet_subnet_id', 'groupnet', 'force']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_groupnet_subnet" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'groupnet_subnet' is set
        if ('groupnet_subnet' not in params) or (params['groupnet_subnet'] is None):
            raise ValueError("Missing the required parameter `groupnet_subnet` when calling `update_groupnet_subnet`")
        # verify the required parameter 'groupnet_subnet_id' is set
        if ('groupnet_subnet_id' not in params) or (params['groupnet_subnet_id'] is None):
            raise ValueError("Missing the required parameter `groupnet_subnet_id` when calling `update_groupnet_subnet`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `update_groupnet_subnet`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{GroupnetSubnetId}'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet_subnet_id' in params:
            path_params['GroupnetSubnetId'] = params['groupnet_subnet_id']
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'groupnet_subnet' in params:
            body_params = params['groupnet_subnet']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_subnets_subnet_pool(self, subnets_subnet_pool, subnets_subnet_pool_id, groupnet, subnet, **kwargs):
        """
        
        Modify a network pool.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_subnets_subnet_pool(subnets_subnet_pool, subnets_subnet_pool_id, groupnet, subnet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SubnetsSubnetPool subnets_subnet_pool:  (required)
        :param str subnets_subnet_pool_id: Modify a network pool. (required)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param bool force: force creating this pool even if it causes an MTU conflict.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subnets_subnet_pool', 'subnets_subnet_pool_id', 'groupnet', 'subnet', 'force']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_subnets_subnet_pool" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'subnets_subnet_pool' is set
        if ('subnets_subnet_pool' not in params) or (params['subnets_subnet_pool'] is None):
            raise ValueError("Missing the required parameter `subnets_subnet_pool` when calling `update_subnets_subnet_pool`")
        # verify the required parameter 'subnets_subnet_pool_id' is set
        if ('subnets_subnet_pool_id' not in params) or (params['subnets_subnet_pool_id'] is None):
            raise ValueError("Missing the required parameter `subnets_subnet_pool_id` when calling `update_subnets_subnet_pool`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `update_subnets_subnet_pool`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `update_subnets_subnet_pool`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{SubnetsSubnetPoolId}'.replace('{format}', 'json')
        path_params = {}
        if 'subnets_subnet_pool_id' in params:
            path_params['SubnetsSubnetPoolId'] = params['subnets_subnet_pool_id']
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'subnets_subnet_pool' in params:
            body_params = params['subnets_subnet_pool']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
