# coding: utf-8

"""
NetworkGroupnetsSubnetsApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class NetworkGroupnetsSubnetsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_pools_pool_rebalance_ip(self, pools_pool_rebalance_ip, groupnet, subnet, pool, **kwargs):
        """
        
        Rebalance IP addresses in specified pool.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_pools_pool_rebalance_ip(pools_pool_rebalance_ip, groupnet, subnet, pool, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Empty pools_pool_rebalance_ip:  (required)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param str pool:  (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pools_pool_rebalance_ip', 'groupnet', 'subnet', 'pool']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pools_pool_rebalance_ip" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pools_pool_rebalance_ip' is set
        if ('pools_pool_rebalance_ip' not in params) or (params['pools_pool_rebalance_ip'] is None):
            raise ValueError("Missing the required parameter `pools_pool_rebalance_ip` when calling `create_pools_pool_rebalance_ip`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `create_pools_pool_rebalance_ip`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `create_pools_pool_rebalance_ip`")
        # verify the required parameter 'pool' is set
        if ('pool' not in params) or (params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `create_pools_pool_rebalance_ip`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rebalance-ips'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']
        if 'pool' in params:
            path_params['Pool'] = params['pool']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pools_pool_rebalance_ip' in params:
            body_params = params['pools_pool_rebalance_ip']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Empty',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_pools_pool_rule(self, pools_pool_rule, groupnet, subnet, pool, **kwargs):
        """
        
        Create a new rule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_pools_pool_rule(pools_pool_rule, groupnet, subnet, pool, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PoolsPoolRuleCreateParams pools_pool_rule:  (required)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param str pool:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pools_pool_rule', 'groupnet', 'subnet', 'pool']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pools_pool_rule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pools_pool_rule' is set
        if ('pools_pool_rule' not in params) or (params['pools_pool_rule'] is None):
            raise ValueError("Missing the required parameter `pools_pool_rule` when calling `create_pools_pool_rule`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `create_pools_pool_rule`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `create_pools_pool_rule`")
        # verify the required parameter 'pool' is set
        if ('pool' not in params) or (params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `create_pools_pool_rule`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']
        if 'pool' in params:
            path_params['Pool'] = params['pool']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pools_pool_rule' in params:
            body_params = params['pools_pool_rule']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_pools_pool_sc_resume_node(self, pools_pool_sc_resume_node, groupnet, subnet, pool, **kwargs):
        """
        
        Resume suspended nodes.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_pools_pool_sc_resume_node(pools_pool_sc_resume_node, groupnet, subnet, pool, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PoolsPoolScResumeNode pools_pool_sc_resume_node:  (required)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param str pool:  (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pools_pool_sc_resume_node', 'groupnet', 'subnet', 'pool']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pools_pool_sc_resume_node" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pools_pool_sc_resume_node' is set
        if ('pools_pool_sc_resume_node' not in params) or (params['pools_pool_sc_resume_node'] is None):
            raise ValueError("Missing the required parameter `pools_pool_sc_resume_node` when calling `create_pools_pool_sc_resume_node`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `create_pools_pool_sc_resume_node`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `create_pools_pool_sc_resume_node`")
        # verify the required parameter 'pool' is set
        if ('pool' not in params) or (params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `create_pools_pool_sc_resume_node`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/sc-resume-nodes'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']
        if 'pool' in params:
            path_params['Pool'] = params['pool']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pools_pool_sc_resume_node' in params:
            body_params = params['pools_pool_sc_resume_node']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Empty',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_pools_pool_sc_suspend_node(self, pools_pool_sc_suspend_node, groupnet, subnet, pool, **kwargs):
        """
        
        Suspend nodes.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_pools_pool_sc_suspend_node(pools_pool_sc_suspend_node, groupnet, subnet, pool, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PoolsPoolScResumeNode pools_pool_sc_suspend_node:  (required)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param str pool:  (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pools_pool_sc_suspend_node', 'groupnet', 'subnet', 'pool']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pools_pool_sc_suspend_node" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pools_pool_sc_suspend_node' is set
        if ('pools_pool_sc_suspend_node' not in params) or (params['pools_pool_sc_suspend_node'] is None):
            raise ValueError("Missing the required parameter `pools_pool_sc_suspend_node` when calling `create_pools_pool_sc_suspend_node`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `create_pools_pool_sc_suspend_node`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `create_pools_pool_sc_suspend_node`")
        # verify the required parameter 'pool' is set
        if ('pool' not in params) or (params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `create_pools_pool_sc_suspend_node`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/sc-suspend-nodes'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']
        if 'pool' in params:
            path_params['Pool'] = params['pool']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pools_pool_sc_suspend_node' in params:
            body_params = params['pools_pool_sc_suspend_node']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Empty',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_pools_pool_rule(self, pools_pool_rule_id, groupnet, subnet, pool, **kwargs):
        """
        
        Delete a network rule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_pools_pool_rule(pools_pool_rule_id, groupnet, subnet, pool, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pools_pool_rule_id: Delete a network rule. (required)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param str pool:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pools_pool_rule_id', 'groupnet', 'subnet', 'pool']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pools_pool_rule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pools_pool_rule_id' is set
        if ('pools_pool_rule_id' not in params) or (params['pools_pool_rule_id'] is None):
            raise ValueError("Missing the required parameter `pools_pool_rule_id` when calling `delete_pools_pool_rule`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `delete_pools_pool_rule`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `delete_pools_pool_rule`")
        # verify the required parameter 'pool' is set
        if ('pool' not in params) or (params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `delete_pools_pool_rule`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}'.replace('{format}', 'json')
        path_params = {}
        if 'pools_pool_rule_id' in params:
            path_params['PoolsPoolRuleId'] = params['pools_pool_rule_id']
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']
        if 'pool' in params:
            path_params['Pool'] = params['pool']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_pools_pool_interfaces(self, groupnet, subnet, pool, **kwargs):
        """
        
        Get a list of interfaces.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pools_pool_interfaces(groupnet, subnet, pool, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param str pool:  (required)
        :param str sort: The field that will be used for sorting.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str lnns: Get a list of interfaces for the specified lnn.
        :return: PoolsPoolInterfaces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupnet', 'subnet', 'pool', 'sort', 'resume', 'limit', 'dir', 'lnns']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pools_pool_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `get_pools_pool_interfaces`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `get_pools_pool_interfaces`")
        # verify the required parameter 'pool' is set
        if ('pool' not in params) or (params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `get_pools_pool_interfaces`")

        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_pools_pool_interfaces`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/interfaces'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']
        if 'pool' in params:
            path_params['Pool'] = params['pool']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'lnns' in params:
            query_params['lnns'] = params['lnns']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PoolsPoolInterfaces',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_pools_pool_rule(self, pools_pool_rule_id, groupnet, subnet, pool, **kwargs):
        """
        
        View a single network rule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pools_pool_rule(pools_pool_rule_id, groupnet, subnet, pool, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pools_pool_rule_id: View a single network rule. (required)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param str pool:  (required)
        :return: PoolsPoolRules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pools_pool_rule_id', 'groupnet', 'subnet', 'pool']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pools_pool_rule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pools_pool_rule_id' is set
        if ('pools_pool_rule_id' not in params) or (params['pools_pool_rule_id'] is None):
            raise ValueError("Missing the required parameter `pools_pool_rule_id` when calling `get_pools_pool_rule`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `get_pools_pool_rule`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `get_pools_pool_rule`")
        # verify the required parameter 'pool' is set
        if ('pool' not in params) or (params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `get_pools_pool_rule`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}'.replace('{format}', 'json')
        path_params = {}
        if 'pools_pool_rule_id' in params:
            path_params['PoolsPoolRuleId'] = params['pools_pool_rule_id']
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']
        if 'pool' in params:
            path_params['Pool'] = params['pool']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PoolsPoolRules',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_pools_pool_rules(self, groupnet, subnet, pool, **kwargs):
        """
        
        Get a list of network rules.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_pools_pool_rules(groupnet, subnet, pool, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param str pool:  (required)
        :param str sort: The field that will be used for sorting.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: PoolsPoolRulesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupnet', 'subnet', 'pool', 'sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pools_pool_rules" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `list_pools_pool_rules`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `list_pools_pool_rules`")
        # verify the required parameter 'pool' is set
        if ('pool' not in params) or (params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `list_pools_pool_rules`")

        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_pools_pool_rules`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules'.replace('{format}', 'json')
        path_params = {}
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']
        if 'pool' in params:
            path_params['Pool'] = params['pool']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PoolsPoolRulesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_pools_pool_rule(self, pools_pool_rule, pools_pool_rule_id, groupnet, subnet, pool, **kwargs):
        """
        
        Modify a network rule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_pools_pool_rule(pools_pool_rule, pools_pool_rule_id, groupnet, subnet, pool, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PoolsPoolRule pools_pool_rule:  (required)
        :param str pools_pool_rule_id: Modify a network rule. (required)
        :param str groupnet:  (required)
        :param str subnet:  (required)
        :param str pool:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pools_pool_rule', 'pools_pool_rule_id', 'groupnet', 'subnet', 'pool']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pools_pool_rule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pools_pool_rule' is set
        if ('pools_pool_rule' not in params) or (params['pools_pool_rule'] is None):
            raise ValueError("Missing the required parameter `pools_pool_rule` when calling `update_pools_pool_rule`")
        # verify the required parameter 'pools_pool_rule_id' is set
        if ('pools_pool_rule_id' not in params) or (params['pools_pool_rule_id'] is None):
            raise ValueError("Missing the required parameter `pools_pool_rule_id` when calling `update_pools_pool_rule`")
        # verify the required parameter 'groupnet' is set
        if ('groupnet' not in params) or (params['groupnet'] is None):
            raise ValueError("Missing the required parameter `groupnet` when calling `update_pools_pool_rule`")
        # verify the required parameter 'subnet' is set
        if ('subnet' not in params) or (params['subnet'] is None):
            raise ValueError("Missing the required parameter `subnet` when calling `update_pools_pool_rule`")
        # verify the required parameter 'pool' is set
        if ('pool' not in params) or (params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `update_pools_pool_rule`")


        resource_path = '/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}'.replace('{format}', 'json')
        path_params = {}
        if 'pools_pool_rule_id' in params:
            path_params['PoolsPoolRuleId'] = params['pools_pool_rule_id']
        if 'groupnet' in params:
            path_params['Groupnet'] = params['groupnet']
        if 'subnet' in params:
            path_params['Subnet'] = params['subnet']
        if 'pool' in params:
            path_params['Pool'] = params['pool']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pools_pool_rule' in params:
            body_params = params['pools_pool_rule']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
