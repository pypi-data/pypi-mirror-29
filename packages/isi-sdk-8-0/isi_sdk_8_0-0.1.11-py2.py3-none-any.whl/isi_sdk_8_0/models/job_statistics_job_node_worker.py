# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class JobStatisticsJobNodeWorker(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        JobStatisticsJobNodeWorker - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'stw': 'float',
            'task': 'str',
            'task_result': 'str',
            'worker': 'int'
        }

        self.attribute_map = {
            'stw': 'stw',
            'task': 'task',
            'task_result': 'task_result',
            'worker': 'worker'
        }

        self._stw = None
        self._task = None
        self._task_result = None
        self._worker = None

    @property
    def stw(self):
        """
        Gets the stw of this JobStatisticsJobNodeWorker.
        The sleep-to-work ratio of this worker; how much time it spends sleeping compared to working.

        :return: The stw of this JobStatisticsJobNodeWorker.
        :rtype: float
        """
        return self._stw

    @stw.setter
    def stw(self, stw):
        """
        Sets the stw of this JobStatisticsJobNodeWorker.
        The sleep-to-work ratio of this worker; how much time it spends sleeping compared to working.

        :param stw: The stw of this JobStatisticsJobNodeWorker.
        :type: float
        """
        
        self._stw = stw

    @property
    def task(self):
        """
        Gets the task of this JobStatisticsJobNodeWorker.
        A representation of the task the worker is currently processing; not intended to be read by humans.

        :return: The task of this JobStatisticsJobNodeWorker.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """
        Sets the task of this JobStatisticsJobNodeWorker.
        A representation of the task the worker is currently processing; not intended to be read by humans.

        :param task: The task of this JobStatisticsJobNodeWorker.
        :type: str
        """
        
        self._task = task

    @property
    def task_result(self):
        """
        Gets the task_result of this JobStatisticsJobNodeWorker.
        A representation of the most recent task result produced by the worker; not intended to be read by humans.

        :return: The task_result of this JobStatisticsJobNodeWorker.
        :rtype: str
        """
        return self._task_result

    @task_result.setter
    def task_result(self, task_result):
        """
        Sets the task_result of this JobStatisticsJobNodeWorker.
        A representation of the most recent task result produced by the worker; not intended to be read by humans.

        :param task_result: The task_result of this JobStatisticsJobNodeWorker.
        :type: str
        """
        
        self._task_result = task_result

    @property
    def worker(self):
        """
        Gets the worker of this JobStatisticsJobNodeWorker.
        The worker ID.

        :return: The worker of this JobStatisticsJobNodeWorker.
        :rtype: int
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """
        Sets the worker of this JobStatisticsJobNodeWorker.
        The worker ID.

        :param worker: The worker of this JobStatisticsJobNodeWorker.
        :type: int
        """
        
        self._worker = worker

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

