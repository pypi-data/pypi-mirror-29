# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class QuotaQuotaCreateParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        QuotaQuotaCreateParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'container': 'bool',
            'enforced': 'bool',
            'force': 'bool',
            'include_snapshots': 'bool',
            'path': 'str',
            'persona': 'GroupMember',
            'thresholds': 'QuotaQuotaThresholds',
            'thresholds_include_overhead': 'bool',
            'type': 'str'
        }

        self.attribute_map = {
            'container': 'container',
            'enforced': 'enforced',
            'force': 'force',
            'include_snapshots': 'include_snapshots',
            'path': 'path',
            'persona': 'persona',
            'thresholds': 'thresholds',
            'thresholds_include_overhead': 'thresholds_include_overhead',
            'type': 'type'
        }

        self._container = None
        self._enforced = None
        self._force = None
        self._include_snapshots = None
        self._path = None
        self._persona = None
        self._thresholds = None
        self._thresholds_include_overhead = None
        self._type = None

    @property
    def container(self):
        """
        Gets the container of this QuotaQuotaCreateParams.
        If true, SMB shares using the quota directory see the quota thresholds as share size.

        :return: The container of this QuotaQuotaCreateParams.
        :rtype: bool
        """
        return self._container

    @container.setter
    def container(self, container):
        """
        Sets the container of this QuotaQuotaCreateParams.
        If true, SMB shares using the quota directory see the quota thresholds as share size.

        :param container: The container of this QuotaQuotaCreateParams.
        :type: bool
        """
        
        self._container = container

    @property
    def enforced(self):
        """
        Gets the enforced of this QuotaQuotaCreateParams.
        True if the quota provides enforcement, otherwise a accounting quota.

        :return: The enforced of this QuotaQuotaCreateParams.
        :rtype: bool
        """
        return self._enforced

    @enforced.setter
    def enforced(self, enforced):
        """
        Sets the enforced of this QuotaQuotaCreateParams.
        True if the quota provides enforcement, otherwise a accounting quota.

        :param enforced: The enforced of this QuotaQuotaCreateParams.
        :type: bool
        """
        
        self._enforced = enforced

    @property
    def force(self):
        """
        Gets the force of this QuotaQuotaCreateParams.
        Force creation of quotas on the root of /ifs.

        :return: The force of this QuotaQuotaCreateParams.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """
        Sets the force of this QuotaQuotaCreateParams.
        Force creation of quotas on the root of /ifs.

        :param force: The force of this QuotaQuotaCreateParams.
        :type: bool
        """
        
        self._force = force

    @property
    def include_snapshots(self):
        """
        Gets the include_snapshots of this QuotaQuotaCreateParams.
        If true, quota governs snapshot data as well as head data.

        :return: The include_snapshots of this QuotaQuotaCreateParams.
        :rtype: bool
        """
        return self._include_snapshots

    @include_snapshots.setter
    def include_snapshots(self, include_snapshots):
        """
        Sets the include_snapshots of this QuotaQuotaCreateParams.
        If true, quota governs snapshot data as well as head data.

        :param include_snapshots: The include_snapshots of this QuotaQuotaCreateParams.
        :type: bool
        """
        
        self._include_snapshots = include_snapshots

    @property
    def path(self):
        """
        Gets the path of this QuotaQuotaCreateParams.
        The /ifs path governed.

        :return: The path of this QuotaQuotaCreateParams.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this QuotaQuotaCreateParams.
        The /ifs path governed.

        :param path: The path of this QuotaQuotaCreateParams.
        :type: str
        """
        
        self._path = path

    @property
    def persona(self):
        """
        Gets the persona of this QuotaQuotaCreateParams.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :return: The persona of this QuotaQuotaCreateParams.
        :rtype: GroupMember
        """
        return self._persona

    @persona.setter
    def persona(self, persona):
        """
        Sets the persona of this QuotaQuotaCreateParams.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :param persona: The persona of this QuotaQuotaCreateParams.
        :type: GroupMember
        """
        
        self._persona = persona

    @property
    def thresholds(self):
        """
        Gets the thresholds of this QuotaQuotaCreateParams.
        

        :return: The thresholds of this QuotaQuotaCreateParams.
        :rtype: QuotaQuotaThresholds
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """
        Sets the thresholds of this QuotaQuotaCreateParams.
        

        :param thresholds: The thresholds of this QuotaQuotaCreateParams.
        :type: QuotaQuotaThresholds
        """
        
        self._thresholds = thresholds

    @property
    def thresholds_include_overhead(self):
        """
        Gets the thresholds_include_overhead of this QuotaQuotaCreateParams.
        If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).

        :return: The thresholds_include_overhead of this QuotaQuotaCreateParams.
        :rtype: bool
        """
        return self._thresholds_include_overhead

    @thresholds_include_overhead.setter
    def thresholds_include_overhead(self, thresholds_include_overhead):
        """
        Sets the thresholds_include_overhead of this QuotaQuotaCreateParams.
        If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).

        :param thresholds_include_overhead: The thresholds_include_overhead of this QuotaQuotaCreateParams.
        :type: bool
        """
        
        self._thresholds_include_overhead = thresholds_include_overhead

    @property
    def type(self):
        """
        Gets the type of this QuotaQuotaCreateParams.
        The type of quota.

        :return: The type of this QuotaQuotaCreateParams.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this QuotaQuotaCreateParams.
        The type of quota.

        :param type: The type of this QuotaQuotaCreateParams.
        :type: str
        """
        allowed_values = ["directory", "user", "group", "default-user", "default-group"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

