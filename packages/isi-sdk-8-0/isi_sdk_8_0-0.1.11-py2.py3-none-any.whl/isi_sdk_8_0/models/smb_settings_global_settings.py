# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SmbSettingsGlobalSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SmbSettingsGlobalSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_based_share_enum': 'bool',
            'audit_fileshare': 'str',
            'audit_global_sacl': 'list[SmbSettingsGlobalSettingsAuditGlobalSaclItem]',
            'audit_logon': 'str',
            'dot_snap_accessible_child': 'bool',
            'dot_snap_accessible_root': 'bool',
            'dot_snap_visible_child': 'bool',
            'dot_snap_visible_root': 'bool',
            'enable_security_signatures': 'bool',
            'guest_user': 'str',
            'ignore_eas': 'bool',
            'onefs_cpu_multiplier': 'int',
            'onefs_num_workers': 'int',
            'require_security_signatures': 'bool',
            'server_side_copy': 'bool',
            'server_string': 'str',
            'service': 'bool',
            'srv_cpu_multiplier': 'int',
            'srv_num_workers': 'int',
            'support_multichannel': 'bool',
            'support_netbios': 'bool',
            'support_smb2': 'bool'
        }

        self.attribute_map = {
            'access_based_share_enum': 'access_based_share_enum',
            'audit_fileshare': 'audit_fileshare',
            'audit_global_sacl': 'audit_global_sacl',
            'audit_logon': 'audit_logon',
            'dot_snap_accessible_child': 'dot_snap_accessible_child',
            'dot_snap_accessible_root': 'dot_snap_accessible_root',
            'dot_snap_visible_child': 'dot_snap_visible_child',
            'dot_snap_visible_root': 'dot_snap_visible_root',
            'enable_security_signatures': 'enable_security_signatures',
            'guest_user': 'guest_user',
            'ignore_eas': 'ignore_eas',
            'onefs_cpu_multiplier': 'onefs_cpu_multiplier',
            'onefs_num_workers': 'onefs_num_workers',
            'require_security_signatures': 'require_security_signatures',
            'server_side_copy': 'server_side_copy',
            'server_string': 'server_string',
            'service': 'service',
            'srv_cpu_multiplier': 'srv_cpu_multiplier',
            'srv_num_workers': 'srv_num_workers',
            'support_multichannel': 'support_multichannel',
            'support_netbios': 'support_netbios',
            'support_smb2': 'support_smb2'
        }

        self._access_based_share_enum = None
        self._audit_fileshare = None
        self._audit_global_sacl = None
        self._audit_logon = None
        self._dot_snap_accessible_child = None
        self._dot_snap_accessible_root = None
        self._dot_snap_visible_child = None
        self._dot_snap_visible_root = None
        self._enable_security_signatures = None
        self._guest_user = None
        self._ignore_eas = None
        self._onefs_cpu_multiplier = None
        self._onefs_num_workers = None
        self._require_security_signatures = None
        self._server_side_copy = None
        self._server_string = None
        self._service = None
        self._srv_cpu_multiplier = None
        self._srv_num_workers = None
        self._support_multichannel = None
        self._support_netbios = None
        self._support_smb2 = None

    @property
    def access_based_share_enum(self):
        """
        Gets the access_based_share_enum of this SmbSettingsGlobalSettings.
        Only enumerate files and folders the requesting user has access to.

        :return: The access_based_share_enum of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._access_based_share_enum

    @access_based_share_enum.setter
    def access_based_share_enum(self, access_based_share_enum):
        """
        Sets the access_based_share_enum of this SmbSettingsGlobalSettings.
        Only enumerate files and folders the requesting user has access to.

        :param access_based_share_enum: The access_based_share_enum of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._access_based_share_enum = access_based_share_enum

    @property
    def audit_fileshare(self):
        """
        Gets the audit_fileshare of this SmbSettingsGlobalSettings.
        Specify level of file share audit events to log.

        :return: The audit_fileshare of this SmbSettingsGlobalSettings.
        :rtype: str
        """
        return self._audit_fileshare

    @audit_fileshare.setter
    def audit_fileshare(self, audit_fileshare):
        """
        Sets the audit_fileshare of this SmbSettingsGlobalSettings.
        Specify level of file share audit events to log.

        :param audit_fileshare: The audit_fileshare of this SmbSettingsGlobalSettings.
        :type: str
        """
        allowed_values = ["all", "success", "failure", "none"]
        if audit_fileshare is not None and audit_fileshare not in allowed_values:
            raise ValueError(
                "Invalid value for `audit_fileshare`, must be one of {0}"
                .format(allowed_values)
            )

        self._audit_fileshare = audit_fileshare

    @property
    def audit_global_sacl(self):
        """
        Gets the audit_global_sacl of this SmbSettingsGlobalSettings.
        Specifies a list of permissions to audit.

        :return: The audit_global_sacl of this SmbSettingsGlobalSettings.
        :rtype: list[SmbSettingsGlobalSettingsAuditGlobalSaclItem]
        """
        return self._audit_global_sacl

    @audit_global_sacl.setter
    def audit_global_sacl(self, audit_global_sacl):
        """
        Sets the audit_global_sacl of this SmbSettingsGlobalSettings.
        Specifies a list of permissions to audit.

        :param audit_global_sacl: The audit_global_sacl of this SmbSettingsGlobalSettings.
        :type: list[SmbSettingsGlobalSettingsAuditGlobalSaclItem]
        """
        
        self._audit_global_sacl = audit_global_sacl

    @property
    def audit_logon(self):
        """
        Gets the audit_logon of this SmbSettingsGlobalSettings.
        Specify the level of logon audit events to log.

        :return: The audit_logon of this SmbSettingsGlobalSettings.
        :rtype: str
        """
        return self._audit_logon

    @audit_logon.setter
    def audit_logon(self, audit_logon):
        """
        Sets the audit_logon of this SmbSettingsGlobalSettings.
        Specify the level of logon audit events to log.

        :param audit_logon: The audit_logon of this SmbSettingsGlobalSettings.
        :type: str
        """
        allowed_values = ["all", "success", "failure", "none"]
        if audit_logon is not None and audit_logon not in allowed_values:
            raise ValueError(
                "Invalid value for `audit_logon`, must be one of {0}"
                .format(allowed_values)
            )

        self._audit_logon = audit_logon

    @property
    def dot_snap_accessible_child(self):
        """
        Gets the dot_snap_accessible_child of this SmbSettingsGlobalSettings.
        Allow access to .snapshot directories in share subdirectories.

        :return: The dot_snap_accessible_child of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._dot_snap_accessible_child

    @dot_snap_accessible_child.setter
    def dot_snap_accessible_child(self, dot_snap_accessible_child):
        """
        Sets the dot_snap_accessible_child of this SmbSettingsGlobalSettings.
        Allow access to .snapshot directories in share subdirectories.

        :param dot_snap_accessible_child: The dot_snap_accessible_child of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._dot_snap_accessible_child = dot_snap_accessible_child

    @property
    def dot_snap_accessible_root(self):
        """
        Gets the dot_snap_accessible_root of this SmbSettingsGlobalSettings.
        Allow access to the .snapshot directory in the root of the share.

        :return: The dot_snap_accessible_root of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._dot_snap_accessible_root

    @dot_snap_accessible_root.setter
    def dot_snap_accessible_root(self, dot_snap_accessible_root):
        """
        Sets the dot_snap_accessible_root of this SmbSettingsGlobalSettings.
        Allow access to the .snapshot directory in the root of the share.

        :param dot_snap_accessible_root: The dot_snap_accessible_root of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._dot_snap_accessible_root = dot_snap_accessible_root

    @property
    def dot_snap_visible_child(self):
        """
        Gets the dot_snap_visible_child of this SmbSettingsGlobalSettings.
        Show .snapshot directories in share subdirectories.

        :return: The dot_snap_visible_child of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._dot_snap_visible_child

    @dot_snap_visible_child.setter
    def dot_snap_visible_child(self, dot_snap_visible_child):
        """
        Sets the dot_snap_visible_child of this SmbSettingsGlobalSettings.
        Show .snapshot directories in share subdirectories.

        :param dot_snap_visible_child: The dot_snap_visible_child of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._dot_snap_visible_child = dot_snap_visible_child

    @property
    def dot_snap_visible_root(self):
        """
        Gets the dot_snap_visible_root of this SmbSettingsGlobalSettings.
        Show the .snapshot directory in the root of a share.

        :return: The dot_snap_visible_root of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._dot_snap_visible_root

    @dot_snap_visible_root.setter
    def dot_snap_visible_root(self, dot_snap_visible_root):
        """
        Sets the dot_snap_visible_root of this SmbSettingsGlobalSettings.
        Show the .snapshot directory in the root of a share.

        :param dot_snap_visible_root: The dot_snap_visible_root of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._dot_snap_visible_root = dot_snap_visible_root

    @property
    def enable_security_signatures(self):
        """
        Gets the enable_security_signatures of this SmbSettingsGlobalSettings.
        Indicates whether the server supports signed SMB packets.

        :return: The enable_security_signatures of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._enable_security_signatures

    @enable_security_signatures.setter
    def enable_security_signatures(self, enable_security_signatures):
        """
        Sets the enable_security_signatures of this SmbSettingsGlobalSettings.
        Indicates whether the server supports signed SMB packets.

        :param enable_security_signatures: The enable_security_signatures of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._enable_security_signatures = enable_security_signatures

    @property
    def guest_user(self):
        """
        Gets the guest_user of this SmbSettingsGlobalSettings.
        Specifies the fully-qualified user to use for guest access.

        :return: The guest_user of this SmbSettingsGlobalSettings.
        :rtype: str
        """
        return self._guest_user

    @guest_user.setter
    def guest_user(self, guest_user):
        """
        Sets the guest_user of this SmbSettingsGlobalSettings.
        Specifies the fully-qualified user to use for guest access.

        :param guest_user: The guest_user of this SmbSettingsGlobalSettings.
        :type: str
        """
        
        self._guest_user = guest_user

    @property
    def ignore_eas(self):
        """
        Gets the ignore_eas of this SmbSettingsGlobalSettings.
        Specify whether to ignore EAs on files.

        :return: The ignore_eas of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._ignore_eas

    @ignore_eas.setter
    def ignore_eas(self, ignore_eas):
        """
        Sets the ignore_eas of this SmbSettingsGlobalSettings.
        Specify whether to ignore EAs on files.

        :param ignore_eas: The ignore_eas of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._ignore_eas = ignore_eas

    @property
    def onefs_cpu_multiplier(self):
        """
        Gets the onefs_cpu_multiplier of this SmbSettingsGlobalSettings.
        Specify the number of OneFS driver worker threads per CPU.

        :return: The onefs_cpu_multiplier of this SmbSettingsGlobalSettings.
        :rtype: int
        """
        return self._onefs_cpu_multiplier

    @onefs_cpu_multiplier.setter
    def onefs_cpu_multiplier(self, onefs_cpu_multiplier):
        """
        Sets the onefs_cpu_multiplier of this SmbSettingsGlobalSettings.
        Specify the number of OneFS driver worker threads per CPU.

        :param onefs_cpu_multiplier: The onefs_cpu_multiplier of this SmbSettingsGlobalSettings.
        :type: int
        """
        
        if onefs_cpu_multiplier is not None  and onefs_cpu_multiplier > 4.0:
            raise ValueError("Invalid value for `onefs_cpu_multiplier`, must be a value less than or equal to `4.0`")
        if onefs_cpu_multiplier is not None and onefs_cpu_multiplier < 1.0:
            raise ValueError("Invalid value for `onefs_cpu_multiplier`, must be a value greater than or equal to `1.0`")

        self._onefs_cpu_multiplier = onefs_cpu_multiplier

    @property
    def onefs_num_workers(self):
        """
        Gets the onefs_num_workers of this SmbSettingsGlobalSettings.
        Set the maximum number of OneFS driver worker threads.

        :return: The onefs_num_workers of this SmbSettingsGlobalSettings.
        :rtype: int
        """
        return self._onefs_num_workers

    @onefs_num_workers.setter
    def onefs_num_workers(self, onefs_num_workers):
        """
        Sets the onefs_num_workers of this SmbSettingsGlobalSettings.
        Set the maximum number of OneFS driver worker threads.

        :param onefs_num_workers: The onefs_num_workers of this SmbSettingsGlobalSettings.
        :type: int
        """
        
        if onefs_num_workers is not None  and onefs_num_workers > 1024.0:
            raise ValueError("Invalid value for `onefs_num_workers`, must be a value less than or equal to `1024.0`")
        if onefs_num_workers is not None and onefs_num_workers < 0.0:
            raise ValueError("Invalid value for `onefs_num_workers`, must be a value greater than or equal to `0.0`")

        self._onefs_num_workers = onefs_num_workers

    @property
    def require_security_signatures(self):
        """
        Gets the require_security_signatures of this SmbSettingsGlobalSettings.
        Indicates whether the server requires signed SMB packets.

        :return: The require_security_signatures of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._require_security_signatures

    @require_security_signatures.setter
    def require_security_signatures(self, require_security_signatures):
        """
        Sets the require_security_signatures of this SmbSettingsGlobalSettings.
        Indicates whether the server requires signed SMB packets.

        :param require_security_signatures: The require_security_signatures of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._require_security_signatures = require_security_signatures

    @property
    def server_side_copy(self):
        """
        Gets the server_side_copy of this SmbSettingsGlobalSettings.
        Enable Server Side Copy.

        :return: The server_side_copy of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._server_side_copy

    @server_side_copy.setter
    def server_side_copy(self, server_side_copy):
        """
        Sets the server_side_copy of this SmbSettingsGlobalSettings.
        Enable Server Side Copy.

        :param server_side_copy: The server_side_copy of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._server_side_copy = server_side_copy

    @property
    def server_string(self):
        """
        Gets the server_string of this SmbSettingsGlobalSettings.
        Provides a description of the server.

        :return: The server_string of this SmbSettingsGlobalSettings.
        :rtype: str
        """
        return self._server_string

    @server_string.setter
    def server_string(self, server_string):
        """
        Sets the server_string of this SmbSettingsGlobalSettings.
        Provides a description of the server.

        :param server_string: The server_string of this SmbSettingsGlobalSettings.
        :type: str
        """
        
        self._server_string = server_string

    @property
    def service(self):
        """
        Gets the service of this SmbSettingsGlobalSettings.
        Specify whether service is enabled.

        :return: The service of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._service

    @service.setter
    def service(self, service):
        """
        Sets the service of this SmbSettingsGlobalSettings.
        Specify whether service is enabled.

        :param service: The service of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._service = service

    @property
    def srv_cpu_multiplier(self):
        """
        Gets the srv_cpu_multiplier of this SmbSettingsGlobalSettings.
        Specify the number of SRV service worker threads per CPU.

        :return: The srv_cpu_multiplier of this SmbSettingsGlobalSettings.
        :rtype: int
        """
        return self._srv_cpu_multiplier

    @srv_cpu_multiplier.setter
    def srv_cpu_multiplier(self, srv_cpu_multiplier):
        """
        Sets the srv_cpu_multiplier of this SmbSettingsGlobalSettings.
        Specify the number of SRV service worker threads per CPU.

        :param srv_cpu_multiplier: The srv_cpu_multiplier of this SmbSettingsGlobalSettings.
        :type: int
        """
        
        if srv_cpu_multiplier is not None  and srv_cpu_multiplier > 8.0:
            raise ValueError("Invalid value for `srv_cpu_multiplier`, must be a value less than or equal to `8.0`")
        if srv_cpu_multiplier is not None and srv_cpu_multiplier < 1.0:
            raise ValueError("Invalid value for `srv_cpu_multiplier`, must be a value greater than or equal to `1.0`")

        self._srv_cpu_multiplier = srv_cpu_multiplier

    @property
    def srv_num_workers(self):
        """
        Gets the srv_num_workers of this SmbSettingsGlobalSettings.
        Set the maximum number of SRV service worker threads.

        :return: The srv_num_workers of this SmbSettingsGlobalSettings.
        :rtype: int
        """
        return self._srv_num_workers

    @srv_num_workers.setter
    def srv_num_workers(self, srv_num_workers):
        """
        Sets the srv_num_workers of this SmbSettingsGlobalSettings.
        Set the maximum number of SRV service worker threads.

        :param srv_num_workers: The srv_num_workers of this SmbSettingsGlobalSettings.
        :type: int
        """
        
        if srv_num_workers is not None  and srv_num_workers > 1024.0:
            raise ValueError("Invalid value for `srv_num_workers`, must be a value less than or equal to `1024.0`")
        if srv_num_workers is not None and srv_num_workers < 0.0:
            raise ValueError("Invalid value for `srv_num_workers`, must be a value greater than or equal to `0.0`")

        self._srv_num_workers = srv_num_workers

    @property
    def support_multichannel(self):
        """
        Gets the support_multichannel of this SmbSettingsGlobalSettings.
        Support multichannel.

        :return: The support_multichannel of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._support_multichannel

    @support_multichannel.setter
    def support_multichannel(self, support_multichannel):
        """
        Sets the support_multichannel of this SmbSettingsGlobalSettings.
        Support multichannel.

        :param support_multichannel: The support_multichannel of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._support_multichannel = support_multichannel

    @property
    def support_netbios(self):
        """
        Gets the support_netbios of this SmbSettingsGlobalSettings.
        Support NetBIOS.

        :return: The support_netbios of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._support_netbios

    @support_netbios.setter
    def support_netbios(self, support_netbios):
        """
        Sets the support_netbios of this SmbSettingsGlobalSettings.
        Support NetBIOS.

        :param support_netbios: The support_netbios of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._support_netbios = support_netbios

    @property
    def support_smb2(self):
        """
        Gets the support_smb2 of this SmbSettingsGlobalSettings.
        Support the SMB2 protocol on the server.

        :return: The support_smb2 of this SmbSettingsGlobalSettings.
        :rtype: bool
        """
        return self._support_smb2

    @support_smb2.setter
    def support_smb2(self, support_smb2):
        """
        Sets the support_smb2 of this SmbSettingsGlobalSettings.
        Support the SMB2 protocol on the server.

        :param support_smb2: The support_smb2 of this SmbSettingsGlobalSettings.
        :type: bool
        """
        
        self._support_smb2 = support_smb2

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

