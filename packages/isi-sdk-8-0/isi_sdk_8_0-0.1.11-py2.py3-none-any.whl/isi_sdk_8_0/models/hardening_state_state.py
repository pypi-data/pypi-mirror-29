# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class HardeningStateState(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HardeningStateState - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'issues_file': 'str',
            'message': 'str',
            'state': 'str'
        }

        self.attribute_map = {
            'issues_file': 'issues_file',
            'message': 'message',
            'state': 'state'
        }

        self._issues_file = None
        self._message = None
        self._state = None

    @property
    def issues_file(self):
        """
        Gets the issues_file of this HardeningStateState.
        Full path name of issues file. This file contains all issues found when the cluster configuration is checked against expected configuration.

        :return: The issues_file of this HardeningStateState.
        :rtype: str
        """
        return self._issues_file

    @issues_file.setter
    def issues_file(self, issues_file):
        """
        Sets the issues_file of this HardeningStateState.
        Full path name of issues file. This file contains all issues found when the cluster configuration is checked against expected configuration.

        :param issues_file: The issues_file of this HardeningStateState.
        :type: str
        """
        
        self._issues_file = issues_file

    @property
    def message(self):
        """
        Gets the message of this HardeningStateState.
        This contains more information and details about the operation state.

        :return: The message of this HardeningStateState.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this HardeningStateState.
        This contains more information and details about the operation state.

        :param message: The message of this HardeningStateState.
        :type: str
        """
        
        self._message = message

    @property
    def state(self):
        """
        Gets the state of this HardeningStateState.
        The state of the hardening operation. In case there is no operation currently going on, this will display the last state of operation.

        :return: The state of this HardeningStateState.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this HardeningStateState.
        The state of the hardening operation. In case there is no operation currently going on, this will display the last state of operation.

        :param state: The state of this HardeningStateState.
        :type: str
        """
        allowed_values = ["Disabled", "Checking_Before_Apply", "Issues_Found_Before_Apply", "Applying", "Enabled", "Checking_Before_Revert", "Issues_Found_Before_Revert", "Reverting", "Failed", "Resolving", "Issues_Resolved", "No_Issues_Found", "Resolved_failed", "Issues_Found_In_Report", "No_Issues_Found_In_Report"]
        if state is not None and state not in allowed_values:
            raise ValueError(
                "Invalid value for `state`, must be one of {0}"
                .format(allowed_values)
            )

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

