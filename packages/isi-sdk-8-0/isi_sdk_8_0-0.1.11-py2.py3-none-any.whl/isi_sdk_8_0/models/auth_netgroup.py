# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AuthNetgroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AuthNetgroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'domainname': 'str',
            'hostname': 'str',
            'id': 'int',
            'netgroup': 'str',
            'username': 'str'
        }

        self.attribute_map = {
            'domainname': 'domainname',
            'hostname': 'hostname',
            'id': 'id',
            'netgroup': 'netgroup',
            'username': 'username'
        }

        self._domainname = None
        self._hostname = None
        self._id = None
        self._netgroup = None
        self._username = None

    @property
    def domainname(self):
        """
        Gets the domainname of this AuthNetgroup.


        :return: The domainname of this AuthNetgroup.
        :rtype: str
        """
        return self._domainname

    @domainname.setter
    def domainname(self, domainname):
        """
        Sets the domainname of this AuthNetgroup.


        :param domainname: The domainname of this AuthNetgroup.
        :type: str
        """
        
        self._domainname = domainname

    @property
    def hostname(self):
        """
        Gets the hostname of this AuthNetgroup.


        :return: The hostname of this AuthNetgroup.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this AuthNetgroup.


        :param hostname: The hostname of this AuthNetgroup.
        :type: str
        """
        
        self._hostname = hostname

    @property
    def id(self):
        """
        Gets the id of this AuthNetgroup.


        :return: The id of this AuthNetgroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AuthNetgroup.


        :param id: The id of this AuthNetgroup.
        :type: int
        """
        
        self._id = id

    @property
    def netgroup(self):
        """
        Gets the netgroup of this AuthNetgroup.


        :return: The netgroup of this AuthNetgroup.
        :rtype: str
        """
        return self._netgroup

    @netgroup.setter
    def netgroup(self, netgroup):
        """
        Sets the netgroup of this AuthNetgroup.


        :param netgroup: The netgroup of this AuthNetgroup.
        :type: str
        """
        
        self._netgroup = netgroup

    @property
    def username(self):
        """
        Gets the username of this AuthNetgroup.


        :return: The username of this AuthNetgroup.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this AuthNetgroup.


        :param username: The username of this AuthNetgroup.
        :type: str
        """
        
        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

