# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SummaryHeatHeatItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SummaryHeatHeatItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'class_name': 'str',
            'event_name': 'str',
            'event_type': 'int',
            'lin': 'str',
            'node': 'int',
            'operation_rate': 'float',
            'path': 'str',
            'time': 'int'
        }

        self.attribute_map = {
            'class_name': 'class_name',
            'event_name': 'event_name',
            'event_type': 'event_type',
            'lin': 'lin',
            'node': 'node',
            'operation_rate': 'operation_rate',
            'path': 'path',
            'time': 'time'
        }

        self._class_name = None
        self._event_name = None
        self._event_type = None
        self._lin = None
        self._node = None
        self._operation_rate = None
        self._path = None
        self._time = None

    @property
    def class_name(self):
        """
        Gets the class_name of this SummaryHeatHeatItem.
        The class of operation

        :return: The class_name of this SummaryHeatHeatItem.
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """
        Sets the class_name of this SummaryHeatHeatItem.
        The class of operation

        :param class_name: The class_name of this SummaryHeatHeatItem.
        :type: str
        """
        
        self._class_name = class_name

    @property
    def event_name(self):
        """
        Gets the event_name of this SummaryHeatHeatItem.
        The type of event

        :return: The event_name of this SummaryHeatHeatItem.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """
        Sets the event_name of this SummaryHeatHeatItem.
        The type of event

        :param event_name: The event_name of this SummaryHeatHeatItem.
        :type: str
        """
        
        self._event_name = event_name

    @property
    def event_type(self):
        """
        Gets the event_type of this SummaryHeatHeatItem.
        The event type id

        :return: The event_type of this SummaryHeatHeatItem.
        :rtype: int
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this SummaryHeatHeatItem.
        The event type id

        :param event_type: The event_type of this SummaryHeatHeatItem.
        :type: int
        """
        
        self._event_type = event_type

    @property
    def lin(self):
        """
        Gets the lin of this SummaryHeatHeatItem.
        Logical inode (LIN)

        :return: The lin of this SummaryHeatHeatItem.
        :rtype: str
        """
        return self._lin

    @lin.setter
    def lin(self, lin):
        """
        Sets the lin of this SummaryHeatHeatItem.
        Logical inode (LIN)

        :param lin: The lin of this SummaryHeatHeatItem.
        :type: str
        """
        
        self._lin = lin

    @property
    def node(self):
        """
        Gets the node of this SummaryHeatHeatItem.
        The node where this event occurred.

        :return: The node of this SummaryHeatHeatItem.
        :rtype: int
        """
        return self._node

    @node.setter
    def node(self, node):
        """
        Sets the node of this SummaryHeatHeatItem.
        The node where this event occurred.

        :param node: The node of this SummaryHeatHeatItem.
        :type: int
        """
        
        self._node = node

    @property
    def operation_rate(self):
        """
        Gets the operation_rate of this SummaryHeatHeatItem.
        Approximate operations per second for this lin.

        :return: The operation_rate of this SummaryHeatHeatItem.
        :rtype: float
        """
        return self._operation_rate

    @operation_rate.setter
    def operation_rate(self, operation_rate):
        """
        Sets the operation_rate of this SummaryHeatHeatItem.
        Approximate operations per second for this lin.

        :param operation_rate: The operation_rate of this SummaryHeatHeatItem.
        :type: float
        """
        
        self._operation_rate = operation_rate

    @property
    def path(self):
        """
        Gets the path of this SummaryHeatHeatItem.
        Canonical LIN path if known

        :return: The path of this SummaryHeatHeatItem.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this SummaryHeatHeatItem.
        Canonical LIN path if known

        :param path: The path of this SummaryHeatHeatItem.
        :type: str
        """
        
        self._path = path

    @property
    def time(self):
        """
        Gets the time of this SummaryHeatHeatItem.
        Unix Epoch time in seconds of the request.

        :return: The time of this SummaryHeatHeatItem.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this SummaryHeatHeatItem.
        Unix Epoch time in seconds of the request.

        :param time: The time of this SummaryHeatHeatItem.
        :type: int
        """
        
        self._time = time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

