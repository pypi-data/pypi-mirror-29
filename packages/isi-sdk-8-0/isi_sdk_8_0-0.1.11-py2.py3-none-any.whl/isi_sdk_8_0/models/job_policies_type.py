# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class JobPoliciesType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        JobPoliciesType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'id': 'str',
            'intervals': 'list[JobPolicyInterval]',
            'name': 'str',
            'system': 'bool'
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'intervals': 'intervals',
            'name': 'name',
            'system': 'system'
        }

        self._description = None
        self._id = None
        self._intervals = None
        self._name = None
        self._system = None

    @property
    def description(self):
        """
        Gets the description of this JobPoliciesType.
        A helpful human-readable description of the impact policy.

        :return: The description of this JobPoliciesType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this JobPoliciesType.
        A helpful human-readable description of the impact policy.

        :param description: The description of this JobPoliciesType.
        :type: str
        """
        
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this JobPoliciesType.
        The ID of the impact policy.

        :return: The id of this JobPoliciesType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this JobPoliciesType.
        The ID of the impact policy.

        :param id: The id of this JobPoliciesType.
        :type: str
        """
        
        self._id = id

    @property
    def intervals(self):
        """
        Gets the intervals of this JobPoliciesType.


        :return: The intervals of this JobPoliciesType.
        :rtype: list[JobPolicyInterval]
        """
        return self._intervals

    @intervals.setter
    def intervals(self, intervals):
        """
        Sets the intervals of this JobPoliciesType.


        :param intervals: The intervals of this JobPoliciesType.
        :type: list[JobPolicyInterval]
        """
        
        self._intervals = intervals

    @property
    def name(self):
        """
        Gets the name of this JobPoliciesType.
        The name of the impact policy.

        :return: The name of this JobPoliciesType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this JobPoliciesType.
        The name of the impact policy.

        :param name: The name of this JobPoliciesType.
        :type: str
        """
        
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def system(self):
        """
        Gets the system of this JobPoliciesType.
        Whether or not this is a read-only system impact policy.

        :return: The system of this JobPoliciesType.
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """
        Sets the system of this JobPoliciesType.
        Whether or not this is a read-only system impact policy.

        :param system: The system of this JobPoliciesType.
        :type: bool
        """
        
        self._system = system

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

