# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class RemotesupportConnectemcConnectemc(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RemotesupportConnectemcConnectemc - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'email_customer_on_failure': 'bool',
            'enabled': 'bool',
            'gateway_access_pools': 'list[str]',
            'primary_esrs_gateway': 'str',
            'secondary_esrs_gateway': 'str',
            'use_smtp_failover': 'bool'
        }

        self.attribute_map = {
            'email_customer_on_failure': 'email_customer_on_failure',
            'enabled': 'enabled',
            'gateway_access_pools': 'gateway_access_pools',
            'primary_esrs_gateway': 'primary_esrs_gateway',
            'secondary_esrs_gateway': 'secondary_esrs_gateway',
            'use_smtp_failover': 'use_smtp_failover'
        }

        self._email_customer_on_failure = None
        self._enabled = None
        self._gateway_access_pools = None
        self._primary_esrs_gateway = None
        self._secondary_esrs_gateway = None
        self._use_smtp_failover = None

    @property
    def email_customer_on_failure(self):
        """
        Gets the email_customer_on_failure of this RemotesupportConnectemcConnectemc.
        Email the customer if all transmission methods fail.

        :return: The email_customer_on_failure of this RemotesupportConnectemcConnectemc.
        :rtype: bool
        """
        return self._email_customer_on_failure

    @email_customer_on_failure.setter
    def email_customer_on_failure(self, email_customer_on_failure):
        """
        Sets the email_customer_on_failure of this RemotesupportConnectemcConnectemc.
        Email the customer if all transmission methods fail.

        :param email_customer_on_failure: The email_customer_on_failure of this RemotesupportConnectemcConnectemc.
        :type: bool
        """
        
        self._email_customer_on_failure = email_customer_on_failure

    @property
    def enabled(self):
        """
        Gets the enabled of this RemotesupportConnectemcConnectemc.
        Enable ConnectEMC.

        :return: The enabled of this RemotesupportConnectemcConnectemc.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this RemotesupportConnectemcConnectemc.
        Enable ConnectEMC.

        :param enabled: The enabled of this RemotesupportConnectemcConnectemc.
        :type: bool
        """
        
        self._enabled = enabled

    @property
    def gateway_access_pools(self):
        """
        Gets the gateway_access_pools of this RemotesupportConnectemcConnectemc.
        List of network pools that are able to connect to the ESRS gateway.  Necessary to enable ConnectEMC.

        :return: The gateway_access_pools of this RemotesupportConnectemcConnectemc.
        :rtype: list[str]
        """
        return self._gateway_access_pools

    @gateway_access_pools.setter
    def gateway_access_pools(self, gateway_access_pools):
        """
        Sets the gateway_access_pools of this RemotesupportConnectemcConnectemc.
        List of network pools that are able to connect to the ESRS gateway.  Necessary to enable ConnectEMC.

        :param gateway_access_pools: The gateway_access_pools of this RemotesupportConnectemcConnectemc.
        :type: list[str]
        """
        
        self._gateway_access_pools = gateway_access_pools

    @property
    def primary_esrs_gateway(self):
        """
        Gets the primary_esrs_gateway of this RemotesupportConnectemcConnectemc.
        Primary ESRS Gateway. Necessary to enable ConnectEMC.

        :return: The primary_esrs_gateway of this RemotesupportConnectemcConnectemc.
        :rtype: str
        """
        return self._primary_esrs_gateway

    @primary_esrs_gateway.setter
    def primary_esrs_gateway(self, primary_esrs_gateway):
        """
        Sets the primary_esrs_gateway of this RemotesupportConnectemcConnectemc.
        Primary ESRS Gateway. Necessary to enable ConnectEMC.

        :param primary_esrs_gateway: The primary_esrs_gateway of this RemotesupportConnectemcConnectemc.
        :type: str
        """
        
        self._primary_esrs_gateway = primary_esrs_gateway

    @property
    def secondary_esrs_gateway(self):
        """
        Gets the secondary_esrs_gateway of this RemotesupportConnectemcConnectemc.
        Secondary ESRS Gateway. Used if Primary is unavailable.

        :return: The secondary_esrs_gateway of this RemotesupportConnectemcConnectemc.
        :rtype: str
        """
        return self._secondary_esrs_gateway

    @secondary_esrs_gateway.setter
    def secondary_esrs_gateway(self, secondary_esrs_gateway):
        """
        Sets the secondary_esrs_gateway of this RemotesupportConnectemcConnectemc.
        Secondary ESRS Gateway. Used if Primary is unavailable.

        :param secondary_esrs_gateway: The secondary_esrs_gateway of this RemotesupportConnectemcConnectemc.
        :type: str
        """
        
        self._secondary_esrs_gateway = secondary_esrs_gateway

    @property
    def use_smtp_failover(self):
        """
        Gets the use_smtp_failover of this RemotesupportConnectemcConnectemc.
        Use SMPT if primary and secondary gateways are unavailable.

        :return: The use_smtp_failover of this RemotesupportConnectemcConnectemc.
        :rtype: bool
        """
        return self._use_smtp_failover

    @use_smtp_failover.setter
    def use_smtp_failover(self, use_smtp_failover):
        """
        Sets the use_smtp_failover of this RemotesupportConnectemcConnectemc.
        Use SMPT if primary and secondary gateways are unavailable.

        :param use_smtp_failover: The use_smtp_failover of this RemotesupportConnectemcConnectemc.
        :type: bool
        """
        
        self._use_smtp_failover = use_smtp_failover

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

