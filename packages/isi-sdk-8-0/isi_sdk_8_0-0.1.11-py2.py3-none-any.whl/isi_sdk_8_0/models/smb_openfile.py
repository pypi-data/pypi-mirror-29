# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SmbOpenfile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SmbOpenfile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'file': 'str',
            'id': 'int',
            'locks': 'int',
            'permissions': 'list[str]',
            'user': 'str'
        }

        self.attribute_map = {
            'file': 'file',
            'id': 'id',
            'locks': 'locks',
            'permissions': 'permissions',
            'user': 'user'
        }

        self._file = None
        self._id = None
        self._locks = None
        self._permissions = None
        self._user = None

    @property
    def file(self):
        """
        Gets the file of this SmbOpenfile.
        Path of file within /ifs.

        :return: The file of this SmbOpenfile.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """
        Sets the file of this SmbOpenfile.
        Path of file within /ifs.

        :param file: The file of this SmbOpenfile.
        :type: str
        """
        
        self._file = file

    @property
    def id(self):
        """
        Gets the id of this SmbOpenfile.
        The file ID.

        :return: The id of this SmbOpenfile.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SmbOpenfile.
        The file ID.

        :param id: The id of this SmbOpenfile.
        :type: int
        """
        
        self._id = id

    @property
    def locks(self):
        """
        Gets the locks of this SmbOpenfile.
        Number of locks user holds on file.

        :return: The locks of this SmbOpenfile.
        :rtype: int
        """
        return self._locks

    @locks.setter
    def locks(self, locks):
        """
        Sets the locks of this SmbOpenfile.
        Number of locks user holds on file.

        :param locks: The locks of this SmbOpenfile.
        :type: int
        """
        
        self._locks = locks

    @property
    def permissions(self):
        """
        Gets the permissions of this SmbOpenfile.
        The user's permissions on file.

        :return: The permissions of this SmbOpenfile.
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """
        Sets the permissions of this SmbOpenfile.
        The user's permissions on file.

        :param permissions: The permissions of this SmbOpenfile.
        :type: list[str]
        """
        
        self._permissions = permissions

    @property
    def user(self):
        """
        Gets the user of this SmbOpenfile.
        User holding file open.

        :return: The user of this SmbOpenfile.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this SmbOpenfile.
        User holding file open.

        :param user: The user of this SmbOpenfile.
        :type: str
        """
        
        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

