# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SmbShareExtended(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SmbShareExtended - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_based_enumeration': 'bool',
            'access_based_enumeration_root_only': 'bool',
            'allow_delete_readonly': 'bool',
            'allow_execute_always': 'bool',
            'allow_variable_expansion': 'bool',
            'auto_create_directory': 'bool',
            'browsable': 'bool',
            'ca_timeout': 'int',
            'ca_write_integrity': 'str',
            'change_notify': 'str',
            'continuously_available': 'bool',
            'create_permissions': 'str',
            'csc_policy': 'str',
            'description': 'str',
            'directory_create_mask': 'int',
            'directory_create_mode': 'int',
            'file_create_mask': 'int',
            'file_create_mode': 'int',
            'file_filter_extensions': 'list[str]',
            'file_filter_type': 'str',
            'file_filtering_enabled': 'bool',
            'hide_dot_files': 'bool',
            'host_acl': 'list[str]',
            'id': 'str',
            'impersonate_guest': 'str',
            'impersonate_user': 'str',
            'inheritable_path_acl': 'bool',
            'mangle_byte_start': 'int',
            'mangle_map': 'list[str]',
            'name': 'str',
            'ntfs_acl_support': 'bool',
            'oplocks': 'bool',
            'path': 'str',
            'permissions': 'list[SmbSharePermission]',
            'run_as_root': 'list[GroupMember]',
            'strict_ca_lockout': 'bool',
            'strict_flush': 'bool',
            'strict_locking': 'bool',
            'zid': 'int'
        }

        self.attribute_map = {
            'access_based_enumeration': 'access_based_enumeration',
            'access_based_enumeration_root_only': 'access_based_enumeration_root_only',
            'allow_delete_readonly': 'allow_delete_readonly',
            'allow_execute_always': 'allow_execute_always',
            'allow_variable_expansion': 'allow_variable_expansion',
            'auto_create_directory': 'auto_create_directory',
            'browsable': 'browsable',
            'ca_timeout': 'ca_timeout',
            'ca_write_integrity': 'ca_write_integrity',
            'change_notify': 'change_notify',
            'continuously_available': 'continuously_available',
            'create_permissions': 'create_permissions',
            'csc_policy': 'csc_policy',
            'description': 'description',
            'directory_create_mask': 'directory_create_mask',
            'directory_create_mode': 'directory_create_mode',
            'file_create_mask': 'file_create_mask',
            'file_create_mode': 'file_create_mode',
            'file_filter_extensions': 'file_filter_extensions',
            'file_filter_type': 'file_filter_type',
            'file_filtering_enabled': 'file_filtering_enabled',
            'hide_dot_files': 'hide_dot_files',
            'host_acl': 'host_acl',
            'id': 'id',
            'impersonate_guest': 'impersonate_guest',
            'impersonate_user': 'impersonate_user',
            'inheritable_path_acl': 'inheritable_path_acl',
            'mangle_byte_start': 'mangle_byte_start',
            'mangle_map': 'mangle_map',
            'name': 'name',
            'ntfs_acl_support': 'ntfs_acl_support',
            'oplocks': 'oplocks',
            'path': 'path',
            'permissions': 'permissions',
            'run_as_root': 'run_as_root',
            'strict_ca_lockout': 'strict_ca_lockout',
            'strict_flush': 'strict_flush',
            'strict_locking': 'strict_locking',
            'zid': 'zid'
        }

        self._access_based_enumeration = None
        self._access_based_enumeration_root_only = None
        self._allow_delete_readonly = None
        self._allow_execute_always = None
        self._allow_variable_expansion = None
        self._auto_create_directory = None
        self._browsable = None
        self._ca_timeout = None
        self._ca_write_integrity = None
        self._change_notify = None
        self._continuously_available = None
        self._create_permissions = None
        self._csc_policy = None
        self._description = None
        self._directory_create_mask = None
        self._directory_create_mode = None
        self._file_create_mask = None
        self._file_create_mode = None
        self._file_filter_extensions = None
        self._file_filter_type = None
        self._file_filtering_enabled = None
        self._hide_dot_files = None
        self._host_acl = None
        self._id = None
        self._impersonate_guest = None
        self._impersonate_user = None
        self._inheritable_path_acl = None
        self._mangle_byte_start = None
        self._mangle_map = None
        self._name = None
        self._ntfs_acl_support = None
        self._oplocks = None
        self._path = None
        self._permissions = None
        self._run_as_root = None
        self._strict_ca_lockout = None
        self._strict_flush = None
        self._strict_locking = None
        self._zid = None

    @property
    def access_based_enumeration(self):
        """
        Gets the access_based_enumeration of this SmbShareExtended.
        Only enumerate files and folders the requesting user has access to.

        :return: The access_based_enumeration of this SmbShareExtended.
        :rtype: bool
        """
        return self._access_based_enumeration

    @access_based_enumeration.setter
    def access_based_enumeration(self, access_based_enumeration):
        """
        Sets the access_based_enumeration of this SmbShareExtended.
        Only enumerate files and folders the requesting user has access to.

        :param access_based_enumeration: The access_based_enumeration of this SmbShareExtended.
        :type: bool
        """
        
        self._access_based_enumeration = access_based_enumeration

    @property
    def access_based_enumeration_root_only(self):
        """
        Gets the access_based_enumeration_root_only of this SmbShareExtended.
        Access-based enumeration on only the root directory of the share.

        :return: The access_based_enumeration_root_only of this SmbShareExtended.
        :rtype: bool
        """
        return self._access_based_enumeration_root_only

    @access_based_enumeration_root_only.setter
    def access_based_enumeration_root_only(self, access_based_enumeration_root_only):
        """
        Sets the access_based_enumeration_root_only of this SmbShareExtended.
        Access-based enumeration on only the root directory of the share.

        :param access_based_enumeration_root_only: The access_based_enumeration_root_only of this SmbShareExtended.
        :type: bool
        """
        
        self._access_based_enumeration_root_only = access_based_enumeration_root_only

    @property
    def allow_delete_readonly(self):
        """
        Gets the allow_delete_readonly of this SmbShareExtended.
        Allow deletion of read-only files in the share.

        :return: The allow_delete_readonly of this SmbShareExtended.
        :rtype: bool
        """
        return self._allow_delete_readonly

    @allow_delete_readonly.setter
    def allow_delete_readonly(self, allow_delete_readonly):
        """
        Sets the allow_delete_readonly of this SmbShareExtended.
        Allow deletion of read-only files in the share.

        :param allow_delete_readonly: The allow_delete_readonly of this SmbShareExtended.
        :type: bool
        """
        
        self._allow_delete_readonly = allow_delete_readonly

    @property
    def allow_execute_always(self):
        """
        Gets the allow_execute_always of this SmbShareExtended.
        Allows users to execute files they have read rights for.

        :return: The allow_execute_always of this SmbShareExtended.
        :rtype: bool
        """
        return self._allow_execute_always

    @allow_execute_always.setter
    def allow_execute_always(self, allow_execute_always):
        """
        Sets the allow_execute_always of this SmbShareExtended.
        Allows users to execute files they have read rights for.

        :param allow_execute_always: The allow_execute_always of this SmbShareExtended.
        :type: bool
        """
        
        self._allow_execute_always = allow_execute_always

    @property
    def allow_variable_expansion(self):
        """
        Gets the allow_variable_expansion of this SmbShareExtended.
        Allow automatic expansion of variables for home directories.

        :return: The allow_variable_expansion of this SmbShareExtended.
        :rtype: bool
        """
        return self._allow_variable_expansion

    @allow_variable_expansion.setter
    def allow_variable_expansion(self, allow_variable_expansion):
        """
        Sets the allow_variable_expansion of this SmbShareExtended.
        Allow automatic expansion of variables for home directories.

        :param allow_variable_expansion: The allow_variable_expansion of this SmbShareExtended.
        :type: bool
        """
        
        self._allow_variable_expansion = allow_variable_expansion

    @property
    def auto_create_directory(self):
        """
        Gets the auto_create_directory of this SmbShareExtended.
        Automatically create home directories.

        :return: The auto_create_directory of this SmbShareExtended.
        :rtype: bool
        """
        return self._auto_create_directory

    @auto_create_directory.setter
    def auto_create_directory(self, auto_create_directory):
        """
        Sets the auto_create_directory of this SmbShareExtended.
        Automatically create home directories.

        :param auto_create_directory: The auto_create_directory of this SmbShareExtended.
        :type: bool
        """
        
        self._auto_create_directory = auto_create_directory

    @property
    def browsable(self):
        """
        Gets the browsable of this SmbShareExtended.
        Share is visible in net view and the browse list.

        :return: The browsable of this SmbShareExtended.
        :rtype: bool
        """
        return self._browsable

    @browsable.setter
    def browsable(self, browsable):
        """
        Sets the browsable of this SmbShareExtended.
        Share is visible in net view and the browse list.

        :param browsable: The browsable of this SmbShareExtended.
        :type: bool
        """
        
        self._browsable = browsable

    @property
    def ca_timeout(self):
        """
        Gets the ca_timeout of this SmbShareExtended.
        Persistent open timeout for the share.

        :return: The ca_timeout of this SmbShareExtended.
        :rtype: int
        """
        return self._ca_timeout

    @ca_timeout.setter
    def ca_timeout(self, ca_timeout):
        """
        Sets the ca_timeout of this SmbShareExtended.
        Persistent open timeout for the share.

        :param ca_timeout: The ca_timeout of this SmbShareExtended.
        :type: int
        """
        
        if ca_timeout is not None and ca_timeout < 2.0:
            raise ValueError("Invalid value for `ca_timeout`, must be a value greater than or equal to `2.0`")

        self._ca_timeout = ca_timeout

    @property
    def ca_write_integrity(self):
        """
        Gets the ca_write_integrity of this SmbShareExtended.
        Specify the level of write-integrity on continuously available shares.

        :return: The ca_write_integrity of this SmbShareExtended.
        :rtype: str
        """
        return self._ca_write_integrity

    @ca_write_integrity.setter
    def ca_write_integrity(self, ca_write_integrity):
        """
        Sets the ca_write_integrity of this SmbShareExtended.
        Specify the level of write-integrity on continuously available shares.

        :param ca_write_integrity: The ca_write_integrity of this SmbShareExtended.
        :type: str
        """
        allowed_values = ["none", "write-read-coherent", "full"]
        if ca_write_integrity is not None and ca_write_integrity not in allowed_values:
            raise ValueError(
                "Invalid value for `ca_write_integrity`, must be one of {0}"
                .format(allowed_values)
            )

        self._ca_write_integrity = ca_write_integrity

    @property
    def change_notify(self):
        """
        Gets the change_notify of this SmbShareExtended.
        Level of change notification alerts on the share.

        :return: The change_notify of this SmbShareExtended.
        :rtype: str
        """
        return self._change_notify

    @change_notify.setter
    def change_notify(self, change_notify):
        """
        Sets the change_notify of this SmbShareExtended.
        Level of change notification alerts on the share.

        :param change_notify: The change_notify of this SmbShareExtended.
        :type: str
        """
        allowed_values = ["all", "norecurse", "none"]
        if change_notify is not None and change_notify not in allowed_values:
            raise ValueError(
                "Invalid value for `change_notify`, must be one of {0}"
                .format(allowed_values)
            )

        self._change_notify = change_notify

    @property
    def continuously_available(self):
        """
        Gets the continuously_available of this SmbShareExtended.
        Specify if persistent opens are allowed on the share.

        :return: The continuously_available of this SmbShareExtended.
        :rtype: bool
        """
        return self._continuously_available

    @continuously_available.setter
    def continuously_available(self, continuously_available):
        """
        Sets the continuously_available of this SmbShareExtended.
        Specify if persistent opens are allowed on the share.

        :param continuously_available: The continuously_available of this SmbShareExtended.
        :type: bool
        """
        
        self._continuously_available = continuously_available

    @property
    def create_permissions(self):
        """
        Gets the create_permissions of this SmbShareExtended.
        Create permissions for new files and directories in share.

        :return: The create_permissions of this SmbShareExtended.
        :rtype: str
        """
        return self._create_permissions

    @create_permissions.setter
    def create_permissions(self, create_permissions):
        """
        Sets the create_permissions of this SmbShareExtended.
        Create permissions for new files and directories in share.

        :param create_permissions: The create_permissions of this SmbShareExtended.
        :type: str
        """
        allowed_values = ["default acl", "inherit mode bits", "use create mask and mode"]
        if create_permissions is not None and create_permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `create_permissions`, must be one of {0}"
                .format(allowed_values)
            )

        self._create_permissions = create_permissions

    @property
    def csc_policy(self):
        """
        Gets the csc_policy of this SmbShareExtended.
        Client-side caching policy for the shares.

        :return: The csc_policy of this SmbShareExtended.
        :rtype: str
        """
        return self._csc_policy

    @csc_policy.setter
    def csc_policy(self, csc_policy):
        """
        Sets the csc_policy of this SmbShareExtended.
        Client-side caching policy for the shares.

        :param csc_policy: The csc_policy of this SmbShareExtended.
        :type: str
        """
        allowed_values = ["manual", "documents", "programs", "none"]
        if csc_policy is not None and csc_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `csc_policy`, must be one of {0}"
                .format(allowed_values)
            )

        self._csc_policy = csc_policy

    @property
    def description(self):
        """
        Gets the description of this SmbShareExtended.
        Description for this SMB share.

        :return: The description of this SmbShareExtended.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SmbShareExtended.
        Description for this SMB share.

        :param description: The description of this SmbShareExtended.
        :type: str
        """
        
        self._description = description

    @property
    def directory_create_mask(self):
        """
        Gets the directory_create_mask of this SmbShareExtended.
        Directory create mask bits.

        :return: The directory_create_mask of this SmbShareExtended.
        :rtype: int
        """
        return self._directory_create_mask

    @directory_create_mask.setter
    def directory_create_mask(self, directory_create_mask):
        """
        Sets the directory_create_mask of this SmbShareExtended.
        Directory create mask bits.

        :param directory_create_mask: The directory_create_mask of this SmbShareExtended.
        :type: int
        """
        
        self._directory_create_mask = directory_create_mask

    @property
    def directory_create_mode(self):
        """
        Gets the directory_create_mode of this SmbShareExtended.
        Directory create mode bits.

        :return: The directory_create_mode of this SmbShareExtended.
        :rtype: int
        """
        return self._directory_create_mode

    @directory_create_mode.setter
    def directory_create_mode(self, directory_create_mode):
        """
        Sets the directory_create_mode of this SmbShareExtended.
        Directory create mode bits.

        :param directory_create_mode: The directory_create_mode of this SmbShareExtended.
        :type: int
        """
        
        self._directory_create_mode = directory_create_mode

    @property
    def file_create_mask(self):
        """
        Gets the file_create_mask of this SmbShareExtended.
        File create mask bits.

        :return: The file_create_mask of this SmbShareExtended.
        :rtype: int
        """
        return self._file_create_mask

    @file_create_mask.setter
    def file_create_mask(self, file_create_mask):
        """
        Sets the file_create_mask of this SmbShareExtended.
        File create mask bits.

        :param file_create_mask: The file_create_mask of this SmbShareExtended.
        :type: int
        """
        
        self._file_create_mask = file_create_mask

    @property
    def file_create_mode(self):
        """
        Gets the file_create_mode of this SmbShareExtended.
        File create mode bits.

        :return: The file_create_mode of this SmbShareExtended.
        :rtype: int
        """
        return self._file_create_mode

    @file_create_mode.setter
    def file_create_mode(self, file_create_mode):
        """
        Sets the file_create_mode of this SmbShareExtended.
        File create mode bits.

        :param file_create_mode: The file_create_mode of this SmbShareExtended.
        :type: int
        """
        
        self._file_create_mode = file_create_mode

    @property
    def file_filter_extensions(self):
        """
        Gets the file_filter_extensions of this SmbShareExtended.
        Specifies the list of file extensions.

        :return: The file_filter_extensions of this SmbShareExtended.
        :rtype: list[str]
        """
        return self._file_filter_extensions

    @file_filter_extensions.setter
    def file_filter_extensions(self, file_filter_extensions):
        """
        Sets the file_filter_extensions of this SmbShareExtended.
        Specifies the list of file extensions.

        :param file_filter_extensions: The file_filter_extensions of this SmbShareExtended.
        :type: list[str]
        """
        
        self._file_filter_extensions = file_filter_extensions

    @property
    def file_filter_type(self):
        """
        Gets the file_filter_type of this SmbShareExtended.
        Specifies if filter list is for deny or allow. Default is deny.

        :return: The file_filter_type of this SmbShareExtended.
        :rtype: str
        """
        return self._file_filter_type

    @file_filter_type.setter
    def file_filter_type(self, file_filter_type):
        """
        Sets the file_filter_type of this SmbShareExtended.
        Specifies if filter list is for deny or allow. Default is deny.

        :param file_filter_type: The file_filter_type of this SmbShareExtended.
        :type: str
        """
        allowed_values = ["deny", "allow"]
        if file_filter_type is not None and file_filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_filter_type`, must be one of {0}"
                .format(allowed_values)
            )

        self._file_filter_type = file_filter_type

    @property
    def file_filtering_enabled(self):
        """
        Gets the file_filtering_enabled of this SmbShareExtended.
        Enables file filtering on this zone.

        :return: The file_filtering_enabled of this SmbShareExtended.
        :rtype: bool
        """
        return self._file_filtering_enabled

    @file_filtering_enabled.setter
    def file_filtering_enabled(self, file_filtering_enabled):
        """
        Sets the file_filtering_enabled of this SmbShareExtended.
        Enables file filtering on this zone.

        :param file_filtering_enabled: The file_filtering_enabled of this SmbShareExtended.
        :type: bool
        """
        
        self._file_filtering_enabled = file_filtering_enabled

    @property
    def hide_dot_files(self):
        """
        Gets the hide_dot_files of this SmbShareExtended.
        Hide files and directories that begin with a period '.'.

        :return: The hide_dot_files of this SmbShareExtended.
        :rtype: bool
        """
        return self._hide_dot_files

    @hide_dot_files.setter
    def hide_dot_files(self, hide_dot_files):
        """
        Sets the hide_dot_files of this SmbShareExtended.
        Hide files and directories that begin with a period '.'.

        :param hide_dot_files: The hide_dot_files of this SmbShareExtended.
        :type: bool
        """
        
        self._hide_dot_files = hide_dot_files

    @property
    def host_acl(self):
        """
        Gets the host_acl of this SmbShareExtended.
        An ACL expressing which hosts are allowed access. A deny clause must be the final entry.

        :return: The host_acl of this SmbShareExtended.
        :rtype: list[str]
        """
        return self._host_acl

    @host_acl.setter
    def host_acl(self, host_acl):
        """
        Sets the host_acl of this SmbShareExtended.
        An ACL expressing which hosts are allowed access. A deny clause must be the final entry.

        :param host_acl: The host_acl of this SmbShareExtended.
        :type: list[str]
        """
        
        self._host_acl = host_acl

    @property
    def id(self):
        """
        Gets the id of this SmbShareExtended.
        Share ID.

        :return: The id of this SmbShareExtended.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SmbShareExtended.
        Share ID.

        :param id: The id of this SmbShareExtended.
        :type: str
        """
        
        self._id = id

    @property
    def impersonate_guest(self):
        """
        Gets the impersonate_guest of this SmbShareExtended.
        Specify the condition in which user access is done as the guest account.

        :return: The impersonate_guest of this SmbShareExtended.
        :rtype: str
        """
        return self._impersonate_guest

    @impersonate_guest.setter
    def impersonate_guest(self, impersonate_guest):
        """
        Sets the impersonate_guest of this SmbShareExtended.
        Specify the condition in which user access is done as the guest account.

        :param impersonate_guest: The impersonate_guest of this SmbShareExtended.
        :type: str
        """
        allowed_values = ["always", "bad user", "never"]
        if impersonate_guest is not None and impersonate_guest not in allowed_values:
            raise ValueError(
                "Invalid value for `impersonate_guest`, must be one of {0}"
                .format(allowed_values)
            )

        self._impersonate_guest = impersonate_guest

    @property
    def impersonate_user(self):
        """
        Gets the impersonate_user of this SmbShareExtended.
        User account to be used as guest account.

        :return: The impersonate_user of this SmbShareExtended.
        :rtype: str
        """
        return self._impersonate_user

    @impersonate_user.setter
    def impersonate_user(self, impersonate_user):
        """
        Sets the impersonate_user of this SmbShareExtended.
        User account to be used as guest account.

        :param impersonate_user: The impersonate_user of this SmbShareExtended.
        :type: str
        """
        
        self._impersonate_user = impersonate_user

    @property
    def inheritable_path_acl(self):
        """
        Gets the inheritable_path_acl of this SmbShareExtended.
        Set the inheritable ACL on the share path.

        :return: The inheritable_path_acl of this SmbShareExtended.
        :rtype: bool
        """
        return self._inheritable_path_acl

    @inheritable_path_acl.setter
    def inheritable_path_acl(self, inheritable_path_acl):
        """
        Sets the inheritable_path_acl of this SmbShareExtended.
        Set the inheritable ACL on the share path.

        :param inheritable_path_acl: The inheritable_path_acl of this SmbShareExtended.
        :type: bool
        """
        
        self._inheritable_path_acl = inheritable_path_acl

    @property
    def mangle_byte_start(self):
        """
        Gets the mangle_byte_start of this SmbShareExtended.
        Specifies the wchar_t starting point for automatic byte mangling.

        :return: The mangle_byte_start of this SmbShareExtended.
        :rtype: int
        """
        return self._mangle_byte_start

    @mangle_byte_start.setter
    def mangle_byte_start(self, mangle_byte_start):
        """
        Sets the mangle_byte_start of this SmbShareExtended.
        Specifies the wchar_t starting point for automatic byte mangling.

        :param mangle_byte_start: The mangle_byte_start of this SmbShareExtended.
        :type: int
        """
        
        self._mangle_byte_start = mangle_byte_start

    @property
    def mangle_map(self):
        """
        Gets the mangle_map of this SmbShareExtended.
        Character mangle map.

        :return: The mangle_map of this SmbShareExtended.
        :rtype: list[str]
        """
        return self._mangle_map

    @mangle_map.setter
    def mangle_map(self, mangle_map):
        """
        Sets the mangle_map of this SmbShareExtended.
        Character mangle map.

        :param mangle_map: The mangle_map of this SmbShareExtended.
        :type: list[str]
        """
        
        self._mangle_map = mangle_map

    @property
    def name(self):
        """
        Gets the name of this SmbShareExtended.
        Share name.

        :return: The name of this SmbShareExtended.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SmbShareExtended.
        Share name.

        :param name: The name of this SmbShareExtended.
        :type: str
        """
        
        self._name = name

    @property
    def ntfs_acl_support(self):
        """
        Gets the ntfs_acl_support of this SmbShareExtended.
        Support NTFS ACLs on files and directories.

        :return: The ntfs_acl_support of this SmbShareExtended.
        :rtype: bool
        """
        return self._ntfs_acl_support

    @ntfs_acl_support.setter
    def ntfs_acl_support(self, ntfs_acl_support):
        """
        Sets the ntfs_acl_support of this SmbShareExtended.
        Support NTFS ACLs on files and directories.

        :param ntfs_acl_support: The ntfs_acl_support of this SmbShareExtended.
        :type: bool
        """
        
        self._ntfs_acl_support = ntfs_acl_support

    @property
    def oplocks(self):
        """
        Gets the oplocks of this SmbShareExtended.
        Support oplocks.

        :return: The oplocks of this SmbShareExtended.
        :rtype: bool
        """
        return self._oplocks

    @oplocks.setter
    def oplocks(self, oplocks):
        """
        Sets the oplocks of this SmbShareExtended.
        Support oplocks.

        :param oplocks: The oplocks of this SmbShareExtended.
        :type: bool
        """
        
        self._oplocks = oplocks

    @property
    def path(self):
        """
        Gets the path of this SmbShareExtended.
        Path of share within /ifs.

        :return: The path of this SmbShareExtended.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this SmbShareExtended.
        Path of share within /ifs.

        :param path: The path of this SmbShareExtended.
        :type: str
        """
        
        self._path = path

    @property
    def permissions(self):
        """
        Gets the permissions of this SmbShareExtended.
        Specifies an ordered list of permission modifications.

        :return: The permissions of this SmbShareExtended.
        :rtype: list[SmbSharePermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """
        Sets the permissions of this SmbShareExtended.
        Specifies an ordered list of permission modifications.

        :param permissions: The permissions of this SmbShareExtended.
        :type: list[SmbSharePermission]
        """
        
        self._permissions = permissions

    @property
    def run_as_root(self):
        """
        Gets the run_as_root of this SmbShareExtended.
        Allow account to run as root.

        :return: The run_as_root of this SmbShareExtended.
        :rtype: list[GroupMember]
        """
        return self._run_as_root

    @run_as_root.setter
    def run_as_root(self, run_as_root):
        """
        Sets the run_as_root of this SmbShareExtended.
        Allow account to run as root.

        :param run_as_root: The run_as_root of this SmbShareExtended.
        :type: list[GroupMember]
        """
        
        self._run_as_root = run_as_root

    @property
    def strict_ca_lockout(self):
        """
        Gets the strict_ca_lockout of this SmbShareExtended.
        Specifies if persistent opens would do strict lockout on the share.

        :return: The strict_ca_lockout of this SmbShareExtended.
        :rtype: bool
        """
        return self._strict_ca_lockout

    @strict_ca_lockout.setter
    def strict_ca_lockout(self, strict_ca_lockout):
        """
        Sets the strict_ca_lockout of this SmbShareExtended.
        Specifies if persistent opens would do strict lockout on the share.

        :param strict_ca_lockout: The strict_ca_lockout of this SmbShareExtended.
        :type: bool
        """
        
        self._strict_ca_lockout = strict_ca_lockout

    @property
    def strict_flush(self):
        """
        Gets the strict_flush of this SmbShareExtended.
        Handle SMB flush operations.

        :return: The strict_flush of this SmbShareExtended.
        :rtype: bool
        """
        return self._strict_flush

    @strict_flush.setter
    def strict_flush(self, strict_flush):
        """
        Sets the strict_flush of this SmbShareExtended.
        Handle SMB flush operations.

        :param strict_flush: The strict_flush of this SmbShareExtended.
        :type: bool
        """
        
        self._strict_flush = strict_flush

    @property
    def strict_locking(self):
        """
        Gets the strict_locking of this SmbShareExtended.
        Specifies whether byte range locks contend against SMB I/O.

        :return: The strict_locking of this SmbShareExtended.
        :rtype: bool
        """
        return self._strict_locking

    @strict_locking.setter
    def strict_locking(self, strict_locking):
        """
        Sets the strict_locking of this SmbShareExtended.
        Specifies whether byte range locks contend against SMB I/O.

        :param strict_locking: The strict_locking of this SmbShareExtended.
        :type: bool
        """
        
        self._strict_locking = strict_locking

    @property
    def zid(self):
        """
        Gets the zid of this SmbShareExtended.
        Numeric ID of the access zone which contains this SMB share

        :return: The zid of this SmbShareExtended.
        :rtype: int
        """
        return self._zid

    @zid.setter
    def zid(self, zid):
        """
        Sets the zid of this SmbShareExtended.
        Numeric ID of the access zone which contains this SMB share

        :param zid: The zid of this SmbShareExtended.
        :type: int
        """
        
        self._zid = zid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

