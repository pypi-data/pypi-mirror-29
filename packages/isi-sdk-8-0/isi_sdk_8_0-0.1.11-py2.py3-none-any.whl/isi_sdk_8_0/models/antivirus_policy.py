# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AntivirusPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AntivirusPolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'enabled': 'bool',
            'force_run': 'bool',
            'impact': 'str',
            'name': 'str',
            'paths': 'list[str]',
            'recursion_depth': 'int',
            'schedule': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'enabled': 'enabled',
            'force_run': 'force_run',
            'impact': 'impact',
            'name': 'name',
            'paths': 'paths',
            'recursion_depth': 'recursion_depth',
            'schedule': 'schedule'
        }

        self._description = None
        self._enabled = None
        self._force_run = None
        self._impact = None
        self._name = None
        self._paths = None
        self._recursion_depth = None
        self._schedule = None

    @property
    def description(self):
        """
        Gets the description of this AntivirusPolicy.
        A description for the policy.

        :return: The description of this AntivirusPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AntivirusPolicy.
        A description for the policy.

        :param description: The description of this AntivirusPolicy.
        :type: str
        """
        
        self._description = description

    @property
    def enabled(self):
        """
        Gets the enabled of this AntivirusPolicy.
        Whether the policy is enabled.

        :return: The enabled of this AntivirusPolicy.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this AntivirusPolicy.
        Whether the policy is enabled.

        :param enabled: The enabled of this AntivirusPolicy.
        :type: bool
        """
        
        self._enabled = enabled

    @property
    def force_run(self):
        """
        Gets the force_run of this AntivirusPolicy.
        Forces the scan to run regardless of whether the files were recently scanned.

        :return: The force_run of this AntivirusPolicy.
        :rtype: bool
        """
        return self._force_run

    @force_run.setter
    def force_run(self, force_run):
        """
        Sets the force_run of this AntivirusPolicy.
        Forces the scan to run regardless of whether the files were recently scanned.

        :param force_run: The force_run of this AntivirusPolicy.
        :type: bool
        """
        
        self._force_run = force_run

    @property
    def impact(self):
        """
        Gets the impact of this AntivirusPolicy.
        The priority of the antivirus scan job.  Must be a valid job engine impact policy, or null to use the default impact.

        :return: The impact of this AntivirusPolicy.
        :rtype: str
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """
        Sets the impact of this AntivirusPolicy.
        The priority of the antivirus scan job.  Must be a valid job engine impact policy, or null to use the default impact.

        :param impact: The impact of this AntivirusPolicy.
        :type: str
        """
        
        self._impact = impact

    @property
    def name(self):
        """
        Gets the name of this AntivirusPolicy.
        The name of the policy.

        :return: The name of this AntivirusPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AntivirusPolicy.
        The name of the policy.

        :param name: The name of this AntivirusPolicy.
        :type: str
        """
        
        self._name = name

    @property
    def paths(self):
        """
        Gets the paths of this AntivirusPolicy.
        Paths to include in the scan.

        :return: The paths of this AntivirusPolicy.
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """
        Sets the paths of this AntivirusPolicy.
        Paths to include in the scan.

        :param paths: The paths of this AntivirusPolicy.
        :type: list[str]
        """
        
        self._paths = paths

    @property
    def recursion_depth(self):
        """
        Gets the recursion_depth of this AntivirusPolicy.
        The depth to recurse in directories.  The default of -1 gives unlimited recursion.

        :return: The recursion_depth of this AntivirusPolicy.
        :rtype: int
        """
        return self._recursion_depth

    @recursion_depth.setter
    def recursion_depth(self, recursion_depth):
        """
        Sets the recursion_depth of this AntivirusPolicy.
        The depth to recurse in directories.  The default of -1 gives unlimited recursion.

        :param recursion_depth: The recursion_depth of this AntivirusPolicy.
        :type: int
        """
        
        self._recursion_depth = recursion_depth

    @property
    def schedule(self):
        """
        Gets the schedule of this AntivirusPolicy.
        The schedule for running scans in isi date format.  Examples include: 'every Friday' or 'every day at 4:00'.  A null value means the policy is manually scheduled.

        :return: The schedule of this AntivirusPolicy.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this AntivirusPolicy.
        The schedule for running scans in isi date format.  Examples include: 'every Friday' or 'every day at 4:00'.  A null value means the policy is manually scheduled.

        :param schedule: The schedule of this AntivirusPolicy.
        :type: str
        """
        
        self._schedule = schedule

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

