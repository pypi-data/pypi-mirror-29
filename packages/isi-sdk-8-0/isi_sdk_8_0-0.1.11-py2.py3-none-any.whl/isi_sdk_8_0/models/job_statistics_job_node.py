# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class JobStatisticsJobNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        JobStatisticsJobNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cpu': 'JobStatisticsJobNodeCpu',
            'io': 'JobStatisticsJobNodeIo',
            'memory': 'JobStatisticsJobNodeMemory',
            'node': 'int',
            'pid': 'int',
            'total_workers': 'int',
            'workers': 'list[JobStatisticsJobNodeWorker]'
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'io': 'io',
            'memory': 'memory',
            'node': 'node',
            'pid': 'pid',
            'total_workers': 'total_workers',
            'workers': 'workers'
        }

        self._cpu = None
        self._io = None
        self._memory = None
        self._node = None
        self._pid = None
        self._total_workers = None
        self._workers = None

    @property
    def cpu(self):
        """
        Gets the cpu of this JobStatisticsJobNode.
        

        :return: The cpu of this JobStatisticsJobNode.
        :rtype: JobStatisticsJobNodeCpu
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this JobStatisticsJobNode.
        

        :param cpu: The cpu of this JobStatisticsJobNode.
        :type: JobStatisticsJobNodeCpu
        """
        
        self._cpu = cpu

    @property
    def io(self):
        """
        Gets the io of this JobStatisticsJobNode.
        

        :return: The io of this JobStatisticsJobNode.
        :rtype: JobStatisticsJobNodeIo
        """
        return self._io

    @io.setter
    def io(self, io):
        """
        Sets the io of this JobStatisticsJobNode.
        

        :param io: The io of this JobStatisticsJobNode.
        :type: JobStatisticsJobNodeIo
        """
        
        self._io = io

    @property
    def memory(self):
        """
        Gets the memory of this JobStatisticsJobNode.
        

        :return: The memory of this JobStatisticsJobNode.
        :rtype: JobStatisticsJobNodeMemory
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this JobStatisticsJobNode.
        

        :param memory: The memory of this JobStatisticsJobNode.
        :type: JobStatisticsJobNodeMemory
        """
        
        self._memory = memory

    @property
    def node(self):
        """
        Gets the node of this JobStatisticsJobNode.
        The devid of the node.

        :return: The node of this JobStatisticsJobNode.
        :rtype: int
        """
        return self._node

    @node.setter
    def node(self, node):
        """
        Sets the node of this JobStatisticsJobNode.
        The devid of the node.

        :param node: The node of this JobStatisticsJobNode.
        :type: int
        """
        
        self._node = node

    @property
    def pid(self):
        """
        Gets the pid of this JobStatisticsJobNode.
        The process ID of the job on this node.

        :return: The pid of this JobStatisticsJobNode.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """
        Sets the pid of this JobStatisticsJobNode.
        The process ID of the job on this node.

        :param pid: The pid of this JobStatisticsJobNode.
        :type: int
        """
        
        self._pid = pid

    @property
    def total_workers(self):
        """
        Gets the total_workers of this JobStatisticsJobNode.
        The number of workers for this job on this node.

        :return: The total_workers of this JobStatisticsJobNode.
        :rtype: int
        """
        return self._total_workers

    @total_workers.setter
    def total_workers(self, total_workers):
        """
        Sets the total_workers of this JobStatisticsJobNode.
        The number of workers for this job on this node.

        :param total_workers: The total_workers of this JobStatisticsJobNode.
        :type: int
        """
        
        self._total_workers = total_workers

    @property
    def workers(self):
        """
        Gets the workers of this JobStatisticsJobNode.


        :return: The workers of this JobStatisticsJobNode.
        :rtype: list[JobStatisticsJobNodeWorker]
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """
        Sets the workers of this JobStatisticsJobNode.


        :param workers: The workers of this JobStatisticsJobNode.
        :type: list[JobStatisticsJobNodeWorker]
        """
        
        self._workers = workers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

