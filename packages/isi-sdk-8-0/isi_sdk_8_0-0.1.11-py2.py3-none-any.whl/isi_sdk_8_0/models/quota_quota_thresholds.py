# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class QuotaQuotaThresholds(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        QuotaQuotaThresholds - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'advisory': 'int',
            'hard': 'int',
            'soft': 'int',
            'soft_grace': 'int'
        }

        self.attribute_map = {
            'advisory': 'advisory',
            'hard': 'hard',
            'soft': 'soft',
            'soft_grace': 'soft_grace'
        }

        self._advisory = None
        self._hard = None
        self._soft = None
        self._soft_grace = None

    @property
    def advisory(self):
        """
        Gets the advisory of this QuotaQuotaThresholds.
        Usage bytes at which notifications will be sent but writes will not be denied.

        :return: The advisory of this QuotaQuotaThresholds.
        :rtype: int
        """
        return self._advisory

    @advisory.setter
    def advisory(self, advisory):
        """
        Sets the advisory of this QuotaQuotaThresholds.
        Usage bytes at which notifications will be sent but writes will not be denied.

        :param advisory: The advisory of this QuotaQuotaThresholds.
        :type: int
        """
        
        if advisory is not None and advisory < 1.0:
            raise ValueError("Invalid value for `advisory`, must be a value greater than or equal to `1.0`")

        self._advisory = advisory

    @property
    def hard(self):
        """
        Gets the hard of this QuotaQuotaThresholds.
        Usage bytes at which further writes will be denied.

        :return: The hard of this QuotaQuotaThresholds.
        :rtype: int
        """
        return self._hard

    @hard.setter
    def hard(self, hard):
        """
        Sets the hard of this QuotaQuotaThresholds.
        Usage bytes at which further writes will be denied.

        :param hard: The hard of this QuotaQuotaThresholds.
        :type: int
        """
        
        if hard is not None and hard < 1.0:
            raise ValueError("Invalid value for `hard`, must be a value greater than or equal to `1.0`")

        self._hard = hard

    @property
    def soft(self):
        """
        Gets the soft of this QuotaQuotaThresholds.
        Usage bytes at which notifications will be sent and soft grace time will be started.

        :return: The soft of this QuotaQuotaThresholds.
        :rtype: int
        """
        return self._soft

    @soft.setter
    def soft(self, soft):
        """
        Sets the soft of this QuotaQuotaThresholds.
        Usage bytes at which notifications will be sent and soft grace time will be started.

        :param soft: The soft of this QuotaQuotaThresholds.
        :type: int
        """
        
        if soft is not None and soft < 1.0:
            raise ValueError("Invalid value for `soft`, must be a value greater than or equal to `1.0`")

        self._soft = soft

    @property
    def soft_grace(self):
        """
        Gets the soft_grace of this QuotaQuotaThresholds.
        Time in seconds after which the soft threshold has been hit before writes will be denied.

        :return: The soft_grace of this QuotaQuotaThresholds.
        :rtype: int
        """
        return self._soft_grace

    @soft_grace.setter
    def soft_grace(self, soft_grace):
        """
        Sets the soft_grace of this QuotaQuotaThresholds.
        Time in seconds after which the soft threshold has been hit before writes will be denied.

        :param soft_grace: The soft_grace of this QuotaQuotaThresholds.
        :type: int
        """
        
        if soft_grace is not None and soft_grace < 1.0:
            raise ValueError("Invalid value for `soft_grace`, must be a value greater than or equal to `1.0`")

        self._soft_grace = soft_grace

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

