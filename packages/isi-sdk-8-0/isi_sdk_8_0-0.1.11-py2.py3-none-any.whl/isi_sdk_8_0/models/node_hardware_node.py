# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NodeHardwareNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NodeHardwareNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'chassis': 'str',
            'chassis_code': 'str',
            'chassis_count': 'str',
            '_class': 'str',
            'configuration_id': 'str',
            'cpu': 'str',
            'disk_controller': 'str',
            'disk_expander': 'str',
            'family_code': 'str',
            'flash_drive': 'str',
            'generation_code': 'str',
            'hwgen': 'str',
            'id': 'int',
            'imb_version': 'str',
            'infiniband': 'str',
            'lcd_version': 'str',
            'lnn': 'int',
            'motherboard': 'str',
            'net_interfaces': 'str',
            'nvram': 'str',
            'powersupplies': 'list[str]',
            'processor': 'str',
            'product': 'str',
            'ram': 'int',
            'serial_number': 'str',
            'series': 'str',
            'storage_class': 'str'
        }

        self.attribute_map = {
            'chassis': 'chassis',
            'chassis_code': 'chassis_code',
            'chassis_count': 'chassis_count',
            '_class': 'class',
            'configuration_id': 'configuration_id',
            'cpu': 'cpu',
            'disk_controller': 'disk_controller',
            'disk_expander': 'disk_expander',
            'family_code': 'family_code',
            'flash_drive': 'flash_drive',
            'generation_code': 'generation_code',
            'hwgen': 'hwgen',
            'id': 'id',
            'imb_version': 'imb_version',
            'infiniband': 'infiniband',
            'lcd_version': 'lcd_version',
            'lnn': 'lnn',
            'motherboard': 'motherboard',
            'net_interfaces': 'net_interfaces',
            'nvram': 'nvram',
            'powersupplies': 'powersupplies',
            'processor': 'processor',
            'product': 'product',
            'ram': 'ram',
            'serial_number': 'serial_number',
            'series': 'series',
            'storage_class': 'storage_class'
        }

        self._chassis = None
        self._chassis_code = None
        self._chassis_count = None
        self.__class = None
        self._configuration_id = None
        self._cpu = None
        self._disk_controller = None
        self._disk_expander = None
        self._family_code = None
        self._flash_drive = None
        self._generation_code = None
        self._hwgen = None
        self._id = None
        self._imb_version = None
        self._infiniband = None
        self._lcd_version = None
        self._lnn = None
        self._motherboard = None
        self._net_interfaces = None
        self._nvram = None
        self._powersupplies = None
        self._processor = None
        self._product = None
        self._ram = None
        self._serial_number = None
        self._series = None
        self._storage_class = None

    @property
    def chassis(self):
        """
        Gets the chassis of this NodeHardwareNode.
        Name of this node's chassis.

        :return: The chassis of this NodeHardwareNode.
        :rtype: str
        """
        return self._chassis

    @chassis.setter
    def chassis(self, chassis):
        """
        Sets the chassis of this NodeHardwareNode.
        Name of this node's chassis.

        :param chassis: The chassis of this NodeHardwareNode.
        :type: str
        """
        
        self._chassis = chassis

    @property
    def chassis_code(self):
        """
        Gets the chassis_code of this NodeHardwareNode.
        Chassis code of this node (1U, 2U, etc.).

        :return: The chassis_code of this NodeHardwareNode.
        :rtype: str
        """
        return self._chassis_code

    @chassis_code.setter
    def chassis_code(self, chassis_code):
        """
        Sets the chassis_code of this NodeHardwareNode.
        Chassis code of this node (1U, 2U, etc.).

        :param chassis_code: The chassis_code of this NodeHardwareNode.
        :type: str
        """
        
        self._chassis_code = chassis_code

    @property
    def chassis_count(self):
        """
        Gets the chassis_count of this NodeHardwareNode.
        Number of chassis making up this node.

        :return: The chassis_count of this NodeHardwareNode.
        :rtype: str
        """
        return self._chassis_count

    @chassis_count.setter
    def chassis_count(self, chassis_count):
        """
        Sets the chassis_count of this NodeHardwareNode.
        Number of chassis making up this node.

        :param chassis_count: The chassis_count of this NodeHardwareNode.
        :type: str
        """
        
        self._chassis_count = chassis_count

    @property
    def _class(self):
        """
        Gets the _class of this NodeHardwareNode.
        Class of this node (storage, accelerator, etc.).

        :return: The _class of this NodeHardwareNode.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this NodeHardwareNode.
        Class of this node (storage, accelerator, etc.).

        :param _class: The _class of this NodeHardwareNode.
        :type: str
        """
        
        self.__class = _class

    @property
    def configuration_id(self):
        """
        Gets the configuration_id of this NodeHardwareNode.
        Node configuration ID.

        :return: The configuration_id of this NodeHardwareNode.
        :rtype: str
        """
        return self._configuration_id

    @configuration_id.setter
    def configuration_id(self, configuration_id):
        """
        Sets the configuration_id of this NodeHardwareNode.
        Node configuration ID.

        :param configuration_id: The configuration_id of this NodeHardwareNode.
        :type: str
        """
        
        self._configuration_id = configuration_id

    @property
    def cpu(self):
        """
        Gets the cpu of this NodeHardwareNode.
        Manufacturer and model of this node's CPU.

        :return: The cpu of this NodeHardwareNode.
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this NodeHardwareNode.
        Manufacturer and model of this node's CPU.

        :param cpu: The cpu of this NodeHardwareNode.
        :type: str
        """
        
        self._cpu = cpu

    @property
    def disk_controller(self):
        """
        Gets the disk_controller of this NodeHardwareNode.
        Manufacturer and model of this node's disk controller.

        :return: The disk_controller of this NodeHardwareNode.
        :rtype: str
        """
        return self._disk_controller

    @disk_controller.setter
    def disk_controller(self, disk_controller):
        """
        Sets the disk_controller of this NodeHardwareNode.
        Manufacturer and model of this node's disk controller.

        :param disk_controller: The disk_controller of this NodeHardwareNode.
        :type: str
        """
        
        self._disk_controller = disk_controller

    @property
    def disk_expander(self):
        """
        Gets the disk_expander of this NodeHardwareNode.
        Manufacturer and model of this node's disk expander.

        :return: The disk_expander of this NodeHardwareNode.
        :rtype: str
        """
        return self._disk_expander

    @disk_expander.setter
    def disk_expander(self, disk_expander):
        """
        Sets the disk_expander of this NodeHardwareNode.
        Manufacturer and model of this node's disk expander.

        :param disk_expander: The disk_expander of this NodeHardwareNode.
        :type: str
        """
        
        self._disk_expander = disk_expander

    @property
    def family_code(self):
        """
        Gets the family_code of this NodeHardwareNode.
        Family code of this node (X, S, NL, etc.).

        :return: The family_code of this NodeHardwareNode.
        :rtype: str
        """
        return self._family_code

    @family_code.setter
    def family_code(self, family_code):
        """
        Sets the family_code of this NodeHardwareNode.
        Family code of this node (X, S, NL, etc.).

        :param family_code: The family_code of this NodeHardwareNode.
        :type: str
        """
        
        self._family_code = family_code

    @property
    def flash_drive(self):
        """
        Gets the flash_drive of this NodeHardwareNode.
        Manufacturer, model, and device id of this node's flash drive.

        :return: The flash_drive of this NodeHardwareNode.
        :rtype: str
        """
        return self._flash_drive

    @flash_drive.setter
    def flash_drive(self, flash_drive):
        """
        Sets the flash_drive of this NodeHardwareNode.
        Manufacturer, model, and device id of this node's flash drive.

        :param flash_drive: The flash_drive of this NodeHardwareNode.
        :type: str
        """
        
        self._flash_drive = flash_drive

    @property
    def generation_code(self):
        """
        Gets the generation_code of this NodeHardwareNode.
        Generation code of this node.

        :return: The generation_code of this NodeHardwareNode.
        :rtype: str
        """
        return self._generation_code

    @generation_code.setter
    def generation_code(self, generation_code):
        """
        Sets the generation_code of this NodeHardwareNode.
        Generation code of this node.

        :param generation_code: The generation_code of this NodeHardwareNode.
        :type: str
        """
        
        self._generation_code = generation_code

    @property
    def hwgen(self):
        """
        Gets the hwgen of this NodeHardwareNode.
        Isilon hardware generation name.

        :return: The hwgen of this NodeHardwareNode.
        :rtype: str
        """
        return self._hwgen

    @hwgen.setter
    def hwgen(self, hwgen):
        """
        Sets the hwgen of this NodeHardwareNode.
        Isilon hardware generation name.

        :param hwgen: The hwgen of this NodeHardwareNode.
        :type: str
        """
        
        self._hwgen = hwgen

    @property
    def id(self):
        """
        Gets the id of this NodeHardwareNode.
        Node ID (Device Number) of this node.

        :return: The id of this NodeHardwareNode.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NodeHardwareNode.
        Node ID (Device Number) of this node.

        :param id: The id of this NodeHardwareNode.
        :type: int
        """
        
        self._id = id

    @property
    def imb_version(self):
        """
        Gets the imb_version of this NodeHardwareNode.
        Version of this node's Isilon Management Board.

        :return: The imb_version of this NodeHardwareNode.
        :rtype: str
        """
        return self._imb_version

    @imb_version.setter
    def imb_version(self, imb_version):
        """
        Sets the imb_version of this NodeHardwareNode.
        Version of this node's Isilon Management Board.

        :param imb_version: The imb_version of this NodeHardwareNode.
        :type: str
        """
        
        self._imb_version = imb_version

    @property
    def infiniband(self):
        """
        Gets the infiniband of this NodeHardwareNode.
        Infiniband card type.

        :return: The infiniband of this NodeHardwareNode.
        :rtype: str
        """
        return self._infiniband

    @infiniband.setter
    def infiniband(self, infiniband):
        """
        Sets the infiniband of this NodeHardwareNode.
        Infiniband card type.

        :param infiniband: The infiniband of this NodeHardwareNode.
        :type: str
        """
        
        self._infiniband = infiniband

    @property
    def lcd_version(self):
        """
        Gets the lcd_version of this NodeHardwareNode.
        Version of the LCD panel.

        :return: The lcd_version of this NodeHardwareNode.
        :rtype: str
        """
        return self._lcd_version

    @lcd_version.setter
    def lcd_version(self, lcd_version):
        """
        Sets the lcd_version of this NodeHardwareNode.
        Version of the LCD panel.

        :param lcd_version: The lcd_version of this NodeHardwareNode.
        :type: str
        """
        
        self._lcd_version = lcd_version

    @property
    def lnn(self):
        """
        Gets the lnn of this NodeHardwareNode.
        Logical Node Number (LNN) of this node.

        :return: The lnn of this NodeHardwareNode.
        :rtype: int
        """
        return self._lnn

    @lnn.setter
    def lnn(self, lnn):
        """
        Sets the lnn of this NodeHardwareNode.
        Logical Node Number (LNN) of this node.

        :param lnn: The lnn of this NodeHardwareNode.
        :type: int
        """
        
        self._lnn = lnn

    @property
    def motherboard(self):
        """
        Gets the motherboard of this NodeHardwareNode.
        Manufacturer and model of this node's motherboard.

        :return: The motherboard of this NodeHardwareNode.
        :rtype: str
        """
        return self._motherboard

    @motherboard.setter
    def motherboard(self, motherboard):
        """
        Sets the motherboard of this NodeHardwareNode.
        Manufacturer and model of this node's motherboard.

        :param motherboard: The motherboard of this NodeHardwareNode.
        :type: str
        """
        
        self._motherboard = motherboard

    @property
    def net_interfaces(self):
        """
        Gets the net_interfaces of this NodeHardwareNode.
        Description of all this node's network interfaces.

        :return: The net_interfaces of this NodeHardwareNode.
        :rtype: str
        """
        return self._net_interfaces

    @net_interfaces.setter
    def net_interfaces(self, net_interfaces):
        """
        Sets the net_interfaces of this NodeHardwareNode.
        Description of all this node's network interfaces.

        :param net_interfaces: The net_interfaces of this NodeHardwareNode.
        :type: str
        """
        
        self._net_interfaces = net_interfaces

    @property
    def nvram(self):
        """
        Gets the nvram of this NodeHardwareNode.
        Manufacturer and model of this node's NVRAM board.

        :return: The nvram of this NodeHardwareNode.
        :rtype: str
        """
        return self._nvram

    @nvram.setter
    def nvram(self, nvram):
        """
        Sets the nvram of this NodeHardwareNode.
        Manufacturer and model of this node's NVRAM board.

        :param nvram: The nvram of this NodeHardwareNode.
        :type: str
        """
        
        self._nvram = nvram

    @property
    def powersupplies(self):
        """
        Gets the powersupplies of this NodeHardwareNode.
        Description strings for each power supply on this node.

        :return: The powersupplies of this NodeHardwareNode.
        :rtype: list[str]
        """
        return self._powersupplies

    @powersupplies.setter
    def powersupplies(self, powersupplies):
        """
        Sets the powersupplies of this NodeHardwareNode.
        Description strings for each power supply on this node.

        :param powersupplies: The powersupplies of this NodeHardwareNode.
        :type: list[str]
        """
        
        self._powersupplies = powersupplies

    @property
    def processor(self):
        """
        Gets the processor of this NodeHardwareNode.
        Number of processors and cores on this node.

        :return: The processor of this NodeHardwareNode.
        :rtype: str
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """
        Sets the processor of this NodeHardwareNode.
        Number of processors and cores on this node.

        :param processor: The processor of this NodeHardwareNode.
        :type: str
        """
        
        self._processor = processor

    @property
    def product(self):
        """
        Gets the product of this NodeHardwareNode.
        Isilon product name.

        :return: The product of this NodeHardwareNode.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this NodeHardwareNode.
        Isilon product name.

        :param product: The product of this NodeHardwareNode.
        :type: str
        """
        
        self._product = product

    @property
    def ram(self):
        """
        Gets the ram of this NodeHardwareNode.
        Size of RAM in bytes.

        :return: The ram of this NodeHardwareNode.
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """
        Sets the ram of this NodeHardwareNode.
        Size of RAM in bytes.

        :param ram: The ram of this NodeHardwareNode.
        :type: int
        """
        
        self._ram = ram

    @property
    def serial_number(self):
        """
        Gets the serial_number of this NodeHardwareNode.
        Serial number of this node.

        :return: The serial_number of this NodeHardwareNode.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this NodeHardwareNode.
        Serial number of this node.

        :param serial_number: The serial_number of this NodeHardwareNode.
        :type: str
        """
        
        self._serial_number = serial_number

    @property
    def series(self):
        """
        Gets the series of this NodeHardwareNode.
        Series of this node (X, I, NL, etc.).

        :return: The series of this NodeHardwareNode.
        :rtype: str
        """
        return self._series

    @series.setter
    def series(self, series):
        """
        Sets the series of this NodeHardwareNode.
        Series of this node (X, I, NL, etc.).

        :param series: The series of this NodeHardwareNode.
        :type: str
        """
        
        self._series = series

    @property
    def storage_class(self):
        """
        Gets the storage_class of this NodeHardwareNode.
        Storage class of this node (storage or diskless).

        :return: The storage_class of this NodeHardwareNode.
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """
        Sets the storage_class of this NodeHardwareNode.
        Storage class of this node (storage or diskless).

        :param storage_class: The storage_class of this NodeHardwareNode.
        :type: str
        """
        
        self._storage_class = storage_class

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

