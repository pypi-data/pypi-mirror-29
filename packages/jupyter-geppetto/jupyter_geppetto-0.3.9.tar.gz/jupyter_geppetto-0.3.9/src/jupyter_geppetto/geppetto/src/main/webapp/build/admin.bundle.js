webpackJsonp([26],{

/***/ 1427:
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @class The Geppetto admin console\n */\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\twindow.$ = __webpack_require__(15);\n\tglobal.GEPPETTO_CONFIGURATION = __webpack_require__(396);\n\tvar React = __webpack_require__(0);\n\tvar ReactDOM = __webpack_require__(16);\n\tvar adminPanel = React.createFactory(__webpack_require__(1428));\n\n\tvar height = window.innerHeight - 100;\n\n\tReactDOM.render(React.createFactory(adminPanel)({ height: height }), document.getElementById('adminPanel'));\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/pages/admin/admin.js\n// module id = 1427\n// module chunks = 26\n\n//# sourceURL=webpack:///./js/pages/admin/admin.js?");

/***/ }),

/***/ 1428:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    __webpack_require__(1429);\n\n    var React = __webpack_require__(0);\n    var Griddle = __webpack_require__(391);\n\n    var LinkComponent = React.createClass({\n        displayName: 'LinkComponent',\n\n        render: function render() {\n\n            var displayText = this.props.data;\n            var that = this;\n\n            var action = function action(e) {\n                e.preventDefault();\n            };\n\n            var linkDisabled = \"\";\n            if (displayText != \"Show Size\" && displayText != \"ERROR\") {\n                linkDisabled = \"linkDisabled\";\n            }\n\n            return React.createElement(\n                'div',\n                null,\n                React.createElement(\n                    'a',\n                    { href: '#', onClick: action, className: linkDisabled },\n                    displayText\n                )\n            );\n        }\n    });\n\n    var ButtonComponent = React.createClass({\n        displayName: 'ButtonComponent',\n\n\n        render: function render() {\n            var addClass = \"\";\n            if (this.props.selectedState) {\n                addClass = \"selected \";\n            }\n            return React.createElement(\n                'button',\n                { id: this.props.id, type: 'button', className: addClass + \"button\",\n                    onClick: this.props.onClick },\n                this.props.id\n            );\n        }\n    });\n\n    var DateDisplay = React.createClass({\n        displayName: 'DateDisplay',\n\n        render: function render() {\n            var options = { year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC', timeZoneName: 'short' };\n            var formattedDate = new Date(this.props.data).toLocaleString('en-US', options);\n            return React.createElement(\n                'div',\n                null,\n                formattedDate\n            );\n        }\n    });\n\n    var adminPanelComponent = React.createClass({\n        displayName: 'adminPanelComponent',\n\n        user: \"admin\",\n        resultsPerPage: 20,\n        usersViewSelected: true,\n        simulationsViewSelected: false,\n        lastDaySelected: false,\n        lastWeekSelected: true,\n        lastMonthSelected: false,\n        allTimeSelected: false,\n        currentView: null,\n        timeFrame: \"week\",\n        storedData: [],\n        views: [\"Users\", \"Simulations\"],\n        usersColumnMeta: [{\n            \"columnName\": \"login\",\n            \"order\": 1,\n            \"locked\": false,\n            \"displayName\": \"User Name\"\n        }, {\n            \"columnName\": \"name\",\n            \"order\": 2,\n            \"locked\": false,\n            \"displayName\": \"Name\"\n        }, {\n            \"columnName\": \"loginCount\",\n            \"order\": 4,\n            \"locked\": false,\n            \"displayName\": \"Login Count\"\n        }, {\n            \"columnName\": \"lastLogin\",\n            \"order\": 3,\n            \"locked\": false,\n            \"sortDirectionCycle\": [\"desc\", \"asc\"],\n            \"displayName\": \"Last Login\"\n        }, {\n            \"columnName\": \"projects\",\n            \"order\": 5,\n            \"locked\": false,\n            \"displayName\": \"Number of Projects\"\n        }, {\n            \"columnName\": \"experiments\",\n            \"order\": 6,\n            \"locked\": false,\n            \"displayName\": \"Number of Experiments\"\n        }, {\n            \"columnName\": \"storage\",\n            \"customComponent\": LinkComponent,\n            \"order\": 7,\n            \"locked\": false,\n            \"displayName\": \"Storage Size\"\n        }],\n        simulationsColumnMeta: [{\n            \"columnName\": \"login\",\n            \"order\": 1,\n            \"locked\": false,\n            \"displayName\": \"Username\"\n        }, {\n            \"columnName\": \"name\",\n            \"order\": 2,\n            \"locked\": false,\n            \"displayName\": \"Name\"\n        }, {\n            \"columnName\": \"project\",\n            \"order\": 3,\n            \"locked\": false,\n            \"displayName\": \"Project Name\"\n        }, {\n            \"columnName\": \"experiment\",\n            \"order\": 4,\n            \"locked\": false,\n            \"displayName\": \"Experiment Name\"\n        }, {\n            \"columnName\": \"experimentLastRun\",\n            \"customComponent\": DateDisplay,\n            \"order\": 5,\n            \"locked\": false,\n            \"displayName\": \"Experiment Last Time Run\"\n        }, {\n            \"columnName\": \"simulator\",\n            \"order\": 6,\n            \"locked\": false,\n            \"displayName\": \"Simulator Name\"\n        }, {\n            \"columnName\": \"status\",\n            \"customComponent\": LinkComponent,\n            \"order\": 7,\n            \"locked\": false,\n            \"displayName\": \"Experiment Status\"\n        }, {\n            \"columnName\": \"error\",\n            \"order\": 8,\n            \"locked\": false,\n            \"visible\": false,\n            \"displayName\": \"Experiment Error\"\n        }],\n        errorColumns: ['login', 'name', 'project', 'experiment', 'experimentLastRun', 'simulator', 'status'],\n        columnMeta: [],\n\n        getInitialState: function getInitialState() {\n            return {\n                columns: [],\n                data: [],\n                loaded: false\n            };\n        },\n\n        setPanelView: function setPanelView() {\n            this.forceUpdate();\n        },\n\n        componentDidMount: function componentDidMount() {\n            this.setInitialData();\n        },\n\n        //sets initial data view when component mounts\n        setInitialData: function setInitialData() {\n            var that = this;\n            var urlData = window.location.href.replace(\"admin\", \"\");\n            urlData += \"user/admin/users/\" + this.timeFrame;\n            $.ajax({\n                url: urlData, success: function success(result) {\n                    that.setDataSet(that.views[0]);\n                }\n            });\n        },\n\n        //switches the data set to show in component\n        setDataSet: function setDataSet(mode) {\n            var that = this;\n            var urlData = window.location.href.replace(\"admin\", \"\");\n            var newColumns;\n\n            if (mode == this.views[0]) {\n                urlData += \"user/\" + this.user + \"/users/\" + this.timeFrame;\n                this.setDataViewFlags(true, false);\n                this.columnMeta = this.usersColumnMeta;\n                newColumns = [];\n            } else if (mode == this.views[1]) {\n                urlData += \"user/\" + this.user + \"/simulations/\" + this.timeFrame;\n                this.setDataViewFlags(false, true);\n                this.columnMeta = this.simulationsColumnMeta;\n                newColumns = this.errorColumns;\n            }\n\n            this.currentView = mode;\n            this.setState({ loaded: false });\n\n            var timeFrame = this.timeFrame;\n            if (this.storedData[this.currentView + \"/\" + timeFrame] == null) {\n                $.ajax({\n                    url: urlData, success: function success(result) {\n                        that.storedData[that.currentView + \"/\" + timeFrame] = result;\n                        that.setState({ data: result, columnMeta: that.columnMeta, loaded: true, columns: newColumns });\n                    }\n                });\n            } else {\n                this.setState({\n                    data: this.storedData[this.currentView + \"/\" + timeFrame],\n                    columnMeta: this.columnMeta,\n                    loaded: true,\n                    columns: newColumns\n                });\n            }\n        },\n\n        //toggle flags that keep track of what's being displayed\n        setDataViewFlags: function setDataViewFlags(user, simulation) {\n            this.usersViewSelected = user;\n            this.simulationsViewSelected = simulation;\n        },\n\n        //toggle flags that keep track of what's being displayed\n        setDataTimeFlags: function setDataTimeFlags(day, week, month, allTime) {\n            this.lastDaySelected = day;\n            this.lastWeekSelected = week;\n            this.lastMonthSelected = month;\n            this.allTimeSelected = allTime;\n        },\n\n        changeViewData: function changeViewData(view) {\n            this.setDataSet(view);\n        },\n\n        changeTimeData: function changeTimeData(timeFrame) {\n            this.timeFrame = timeFrame;\n            if (timeFrame == \"all\") {\n                this.setDataTimeFlags(false, false, false, true);\n            } else if (timeFrame == \"day\") {\n                this.setDataTimeFlags(true, false, false, false);\n            } else if (timeFrame == \"week\") {\n                this.setDataTimeFlags(false, true, false, false);\n            } else if (timeFrame == \"month\") {\n                this.setDataTimeFlags(false, false, true, false);\n            }\n\n            //uncheck all previously selected checked boxes\n            this.setDataSet(this.currentView);\n            // uncheck all other checked boxes\n            $(\"input:checkbox\").on('click', function () {\n                // in the handler, 'this' refers to the box clicked on\n                var $box = $(this);\n                if ($box.is(\":checked\")) {\n                    // the name of the box is retrieved using the .attr() method\n                    // as it is assumed and expected to be immutable\n                    var group = \"input:checkbox[name='\" + $box.attr(\"name\") + \"']\";\n                    // the checked state of the group/box on the other hand will change\n                    // and the current value is retrieved using .prop() method\n                    $(group).prop(\"checked\", false);\n                    $box.prop(\"checked\", true);\n                } else {\n                    $box.prop(\"checked\", false);\n                }\n                $box.prop(\"disabled\", true);\n            });\n        },\n\n        sortData: function sortData(sort, sortAscending, data) {\n            //sorting should generally happen wherever the data is coming from\n            sortedData = _.sortBy(data, function (item) {\n                return item[sort];\n            });\n\n            if (sortAscending === false) {\n                sortedData.reverse();\n            }\n            return {\n                \"currentPage\": 0,\n                \"externalSortColumn\": sort,\n                \"externalSortAscending\": sortAscending,\n                \"pretendServerData\": sortedData,\n                \"results\": sortedData.slice(0, this.state.externalResultsPerPage)\n            };\n        },\n\n        sort: function sort(_sort, sortAscending) {\n            this.setState(this.sortData(_sort, sortAscending, this.state.data));\n        },\n\n        onRowClick: function onRowClick(rowData, event) {\n            var td = event.target;\n            if (td.textContent == \"Show Size\") {\n                var login = rowData.props.data.login;\n\n                var urlData = window.location.href.replace(\"admin\", \"\");\n                urlData += \"user/\" + this.user + \"/storage/\" + login;\n\n                td.textContent = \"Fetching Data\";\n                var self = this;\n                $.ajax({\n                    url: urlData, success: function success(result) {\n                        var data = self.state.data;\n                        if (self.storedData[self.currentView + \"/\" + self.timeFrame] != null) {\n                            for (var key in data) {\n                                var object = data[key];\n                                if (object.login == login) {\n                                    object.storage = result;\n                                }\n                            }\n                        }\n                        td.textContent = result;\n                        self.setState({ data: data });\n                        alert(\"Storage size for user \" + login + \" is: \" + result);\n                    }\n                });\n            }\n            if (td.textContent == \"ERROR\") {\n                var login = rowData.props.data.login;\n                var project = rowData.props.data.project;\n                var experiment = rowData.props.data.experiment;\n                var data = this.state.data;\n                if (this.storedData[this.currentView + \"/\" + this.timeFrame] != null) {\n                    for (var key in data) {\n                        var object = data[key];\n                        if (object.login == login && object.project == project && object.experiment == experiment) {\n                            alert(object.error);\n                            break;\n                        }\n                    }\n                }\n            }\n        },\n\n        render: function render() {\n            return React.createElement(\n                'div',\n                null,\n                React.createElement(\n                    'div',\n                    { id: 'adminButtonHeader', className: 'adminButtonHeadverDiv' },\n                    React.createElement(ButtonComponent, { id: \"Users\", selectedState: this.usersViewSelected,\n                        onClick: this.changeViewData.bind(this, \"Users\") }),\n                    React.createElement(ButtonComponent, { id: \"Simulations\", selectedState: this.simulationsViewSelected,\n                        onClick: this.changeViewData.bind(this, \"Simulations\") })\n                ),\n                React.createElement(\n                    'div',\n                    { id: 'timeFrameButtonHeader', className: 'timeFrameButtonHeadverDiv' },\n                    React.createElement(\n                        'label',\n                        null,\n                        React.createElement('input', { type: 'checkbox', className: 'radio', name: 'checkbox', value: '1',\n                            disabled: this.lastDaySelected ? \"disabled\" : \"\",\n                            checked: this.lastDaySelected ? \"checked\" : \"\",\n                            onClick: this.changeTimeData.bind(this, \"day\") }),\n                        'Day'\n                    ),\n                    React.createElement(\n                        'label',\n                        null,\n                        React.createElement('input', { type: 'checkbox', className: 'radio', name: 'checkbox', value: '1',\n                            disabled: this.lastWeekSelected ? \"disabled\" : \"\",\n                            checked: this.lastWeekSelected ? \"checked\" : \"\",\n                            onClick: this.changeTimeData.bind(this, \"week\") }),\n                        'Week'\n                    ),\n                    React.createElement(\n                        'label',\n                        null,\n                        React.createElement('input', { type: 'checkbox', className: 'radio', name: 'checkbox', value: '1',\n                            disabled: this.lastMonthSelected ? \"disabled\" : \"\",\n                            checked: this.lastMonthSelected ? \"checked\" : \"\",\n                            onClick: this.changeTimeData.bind(this, \"month\") }),\n                        'Month'\n                    ),\n                    React.createElement(\n                        'label',\n                        null,\n                        React.createElement('input', { type: 'checkbox', className: 'radio', name: 'checkbox', value: '1',\n                            checked: this.allTimeSelected ? \"checked\" : \"\",\n                            disabled: this.allTimeSelected ? \"disabled\" : \"\",\n                            onClick: this.changeTimeData.bind(this, \"all\") }),\n                        'All Time'\n                    )\n                ),\n                this.state.loaded ? React.createElement(Griddle, { results: this.state.data, columnMetadata: this.state.columnMeta,\n                    bodyHeight: this.props.height,\n                    enableInfinteScroll: true, useGriddleStyles: false,\n                    resultsPerPage: this.resultsPerPage, showPager: false,\n                    showFilter: true, onRowClick: this.onRowClick, initialSort: \"lastLogin\",\n                    initialSortAscending: false,\n                    columns: this.state.columns }) : React.createElement(\n                    'div',\n                    { id: 'loading-container' },\n                    React.createElement('div', { className: 'gpt-gpt_logo fa-spin' }),\n                    React.createElement(\n                        'p',\n                        { className: 'orange loadingText' },\n                        'Fetching data (might take a few seconds depending on your network)'\n                    )\n                )\n            );\n        }\n    });\n\n    return adminPanelComponent;\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/pages/admin/AdminPanel.js\n// module id = 1428\n// module chunks = 26\n\n//# sourceURL=webpack:///./js/pages/admin/AdminPanel.js?");

/***/ }),

/***/ 1429:
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(1430);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(33)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js?{\\\"modifyVars\\\":{\\\"url\\\":\\\"'../../../extensions/geppetto-netpyne/css/colors'\\\"}}!./AdminPanel.less\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js?{\\\"modifyVars\\\":{\\\"url\\\":\\\"'../../../extensions/geppetto-netpyne/css/colors'\\\"}}!./AdminPanel.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/pages/admin/AdminPanel.less\n// module id = 1429\n// module chunks = 26\n\n//# sourceURL=webpack:///./js/pages/admin/AdminPanel.less?");

/***/ }),

/***/ 1430:
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(32)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \".dark-orange {\\n  color: #cc215a;\\n}\\n.orange {\\n  color: #f23d7a;\\n}\\n.orange-color {\\n  color: #f23d7a;\\n}\\n.orange-color-bg {\\n  background-color: #f23d7a;\\n}\\n#adminPanel {\\n  padding-top: 10px;\\n  width: 100%;\\n  height: 100%;\\n}\\n#adminButtonHeader {\\n  height: 70px;\\n  width: 350px;\\n  margin: 0 auto;\\n  text-align: center;\\n}\\n.timeFrameButtonHeadverDiv {\\n  height: 70px;\\n  width: 500px;\\n  margin: 0 auto;\\n  padding-left: 100px;\\n}\\n.griddle-filter input {\\n  height: 30px;\\n  font-size: 20px;\\n  width: 100%;\\n}\\n.timeFrameButtonHeadverDiv label {\\n  text-align: center;\\n  font-size: 18px;\\n  margin-right: 10px;\\n}\\nbody {\\n  background-color: #f5f5f5;\\n  font-family: Helvetica Neue;\\n  font-weight: 200;\\n}\\ntable {\\n  margin: 0 auto;\\n  margin-top: 10px;\\n  width: 100%;\\n  table-layout: fixed;\\n}\\n.button {\\n  margin-right: 10px;\\n  color: white;\\n  font-size: 18px;\\n  border-radius: 0px;\\n  border: 0;\\n  height: 40px;\\n  float: left;\\n  background: #3f3f3f;\\n  cursor: pointer;\\n  width: 120px;\\n}\\n.selected {\\n  background: #f23d7a;\\n}\\n.griddle th {\\n  background-color: rgba(173, 158, 158, 0.7);\\n  border: 0px;\\n  color: ##000;\\n  padding: 5px;\\n  text-align: center;\\n}\\n.griddle td {\\n  padding: 5px;\\n  background-color: rgba(204, 185, 185, 0.7);\\n  color: #000;\\n  border-bottom: 1px dashed;\\n  border-color: rgba(255, 255, 255, 0.2);\\n  text-align: center;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.griddle {\\n  width: 90%;\\n  margin: 0 auto;\\n}\\n.gpt-gpt_logo {\\n  width: 100px;\\n  font-size: 100px;\\n  margin: 0 auto;\\n  margin-bottom: 30px;\\n  color: #f23d7a;\\n}\\n.loadingText {\\n  text-align: center;\\n  font-size: 18px;\\n}\\n#loading-container {\\n  padding-top: 100px;\\n  padding-right: 100px;\\n}\\n.linkDisabled {\\n  pointer-events: none;\\n  text-decoration: none;\\n  color: black;\\n}\\n\", \"\"]);\n\n// exports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./node_modules/less-loader/dist/cjs.js?{\"modifyVars\":{\"url\":\"'../../../extensions/geppetto-netpyne/css/colors'\"}}!./js/pages/admin/AdminPanel.less\n// module id = 1430\n// module chunks = 26\n\n//# sourceURL=webpack:///./js/pages/admin/AdminPanel.less?./node_modules/css-loader!./node_modules/less-loader/dist/cjs.js?%7B%22modifyVars%22:%7B%22url%22:%22'../../../extensions/geppetto-netpyne/css/colors'%22%7D%7D");

/***/ })

},[1427]);