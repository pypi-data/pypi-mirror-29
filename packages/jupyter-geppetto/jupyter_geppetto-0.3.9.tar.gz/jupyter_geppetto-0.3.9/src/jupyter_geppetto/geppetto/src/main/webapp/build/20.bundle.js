webpackJsonp([20],{

/***/ 1442:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * React component for displaying a Project's experiments in a table.\n *\n * @author Jesus R. Martinez (jesus@metacell.us)\n */\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var React = __webpack_require__(0),\n        $ = __webpack_require__(15);\n    var GEPPETTO = __webpack_require__(84);\n\n    __webpack_require__(3121);\n\n    $.widget.bridge('uitooltip', $.ui.tooltip);\n\n    /**\n     * Creates a table row html element <tr>, used to display an Experiment's\n     * information (name, lastModified) and controls.\n     */\n    var ExperimentRow = React.createClass({\n        displayName: 'ExperimentRow',\n\n\n        getDefaultProps: function getDefaultProps() {\n            return {\n                suppressContentEditableWarning: true\n            };\n        },\n\n        updateIcons: function updateIcons(activeIconVisibility, visible) {\n            this.refs.icons.updateIconsState(activeIconVisibility, visible);\n        },\n\n        //Requests element with control icons to become visible\n        mouseOver: function mouseOver() {\n            this.refs.icons.show();\n        },\n\n        //Requests element with control icons to become invisible\n        mouseOut: function mouseOut() {\n            this.refs.icons.hide();\n        },\n\n        componentDidMount: function componentDidMount() {\n            var row = \"#\" + this.props.experiment.getId();\n            var that = this;\n\n            $(row).parent().find(\"td[contenteditable='true']\").keydown(function (e) {\n                if (e.keyCode == 13) {\n                    e.preventDefault();\n                    $(this).blur();\n\n                    // without this somehow the carriage return makes it into the field\n                    window.getSelection().removeAllRanges();\n                }\n            });\n\n            // Handle edits to editable name field\n            $(row).find(\"td[contenteditable='true']\").blur(function (e) {\n                //save if user hits enter key\n                // get experiment ID for the edited field\n                var val = $(this).html();\n                var field = $(this).attr(\"name\");\n\n                //remove empty spaces\n                val = val.replace(/&nbsp;/g, '').replace(/<br>/g, '').replace(/<br\\/>/g, '').trim();\n\n                var setterStr = \"setName\";\n\n                if (field == \"name\") {\n                    var expID = $(this).parent().attr(\"id\").replace('#', '');\n                    GEPPETTO.CommandController.execute(\"Project.getExperimentById(\" + expID + \").\" + setterStr + \"('\" + val + \"')\", true);\n                }\n            });\n        },\n\n        render: function render() {\n            var rowNumber = this.props.rowNumber;\n            var rowClasses = \"experimentsTableColumn accordion-toggle row-\" + this.props.experiment.getId();\n\n            //add different background to every even row\n            if (rowNumber % 2 == 1) {\n                rowClasses += \" nthTr\";\n            }\n\n            return React.createElement(\n                'tr',\n                { 'data-rowType': 'main', onClick: this.props.fnClick, onMouseOver: this.mouseOver, onMouseOut: this.mouseOut,\n                    className: rowClasses, id: this.props.experiment.getId() },\n                React.createElement(StatusElement, { experiment: this.props.experiment, key: this.props.experiment.name + \"-statusElement\" }),\n                React.createElement(\n                    'td',\n                    { className: 'configurationTD', name: 'name', contentEditable: this.props.editable, suppressContentEditableWarning: true },\n                    this.props.experiment.getName()\n                ),\n                React.createElement(\n                    'td',\n                    null,\n                    this.props.experiment.getLastModified()\n                ),\n                React.createElement(\n                    'td',\n                    null,\n                    React.createElement(IconsElement, { ref: 'icons', experiment: this.props.experiment, key: this.props.experiment.name + \"-iconsRow\" })\n                )\n            );\n        }\n    });\n\n    /**\n     * Creates a table row html element, <tr>, which can be collapsed.\n     * Used to display an experiment's simulator configurations\n     */\n    var ExperimentExpandableRow = React.createClass({\n        displayName: 'ExperimentExpandableRow',\n\n        render: function render() {\n            var id = \"collapsable-\" + this.props.experiment.getId();\n            var rowNumber = this.props.rowNumber;\n            var rowClasses = \"nested-experiment-info\";\n\n            //add different background to every even row\n            if (rowNumber % 2 == 1) {\n                rowClasses += \" nthTr\";\n            }\n            var rows = [];\n            var simulatorConfigurations = [];\n            var index = 0;\n\n            //make simulator configurations to array\n            for (var key in this.props.experiment.simulatorConfigurations) {\n                simulatorConfigurations[index] = this.props.experiment.simulatorConfigurations[key];\n                index++;\n            }\n\n            //create array of table row elements of type SimulatorRow\n            simulatorConfigurations.forEach(function (simulator) {\n                if (simulator != null) {\n                    var index = 1;\n                    rows.push(React.createElement(SimulatorRow, { simulator: simulator, experiment: this.props.experiment,\n                        editable: this.props.editable, key: \"simulatorRow\" + index + \"-\" + simulator.aspectInstancePath }));\n                    index++;\n                }\n            }.bind(this));\n\n            var collapseClass = \"collapse accordian-body collapsable-\" + this.props.experiment.getId();\n\n            return React.createElement(\n                'tr',\n                { className: rowClasses, id: id },\n                React.createElement(\n                    'td',\n                    { colSpan: '12', className: 'hiddenRow' },\n                    React.createElement(\n                        'div',\n                        { className: collapseClass },\n                        React.createElement(\n                            'table',\n                            { className: 'table-condensed expandableTable' },\n                            React.createElement(\n                                'thead',\n                                { className: 'experimentsTableColumn' },\n                                React.createElement(\n                                    'tr',\n                                    null,\n                                    React.createElement('th', { className: 'nameHeader' }),\n                                    React.createElement(\n                                        'th',\n                                        null,\n                                        'Aspect'\n                                    ),\n                                    React.createElement(\n                                        'th',\n                                        null,\n                                        'Simulator'\n                                    ),\n                                    React.createElement(\n                                        'th',\n                                        null,\n                                        'Recorded variables'\n                                    ),\n                                    React.createElement(\n                                        'th',\n                                        null,\n                                        'Set parameters'\n                                    ),\n                                    React.createElement(\n                                        'th',\n                                        null,\n                                        'Timestep (s)'\n                                    ),\n                                    React.createElement(\n                                        'th',\n                                        null,\n                                        'Length (s)'\n                                    )\n                                )\n                            ),\n                            React.createElement(\n                                'tbody',\n                                null,\n                                rows\n                            )\n                        )\n                    )\n                )\n            );\n        }\n    });\n\n    /**\n     * Creates table row for displaying an experiment's simulator configurations\n     */\n    var SimulatorRow = React.createClass({\n        displayName: 'SimulatorRow',\n\n        refresh: function refresh() {\n            if (window.Project.getActiveExperiment()) {\n                if (this.props.experiment.getId() == window.Project.getActiveExperiment().getId()) {\n                    this.forceUpdate();\n                }\n            } else {\n                this.forceUpdate();\n            }\n        },\n\n        componentWillUnmount: function componentWillUnmount() {\n            GEPPETTO.off(GEPPETTO.Events.Experiment_updated, this.refresh, this);\n        },\n\n        componentDidMount: function componentDidMount() {\n            var row = \"#simulatorRowId-\" + this.props.experiment.getId();\n\n            GEPPETTO.on(GEPPETTO.Events.Experiment_updated, this.refresh, this);\n\n            // Handle edits to editable fields\n            $(row).parent().find(\"td[contenteditable='true']\").keydown(function (e) {\n                if (e.keyCode == 13) {\n                    e.preventDefault();\n                    $(this).blur();\n\n                    // without this somehow the carriage return makes it into the field\n                    window.getSelection().removeAllRanges();\n                }\n            });\n\n            $(row).parent().find(\"td[contenteditable='true']\").blur(function (e) {\n                // get experiment ID for the edited field\n                var val = $(this).html();\n                var field = $(this).attr(\"name\");\n\n                //remove empty spaces\n                val = val.replace(/&nbsp;/g, '').replace(/<br>/g, '').replace(/<br\\/>/g, '').trim();\n\n                var setterStr = \"\";\n\n                switch (field) {\n                    case \"simulatorId\":\n                        setterStr = \"setSimulator\";\n                        break;\n                    case \"timeStep\":\n                        setterStr = \"setTimeStep\";\n                        break;\n                    case \"length\":\n                        setterStr = \"setLength\";\n                        break;\n                    case \"conversionId\":\n                        setterStr = \"setConversionService\";\n                        break;\n                    default:\n                        break;\n                }\n\n                if (setterStr != \"\") {\n                    var expID = $(this).parents().closest(\"tr.nested-experiment-info\").attr(\"id\").replace('collapsable-', '');\n\n                    // get aspect instance path\n                    var aspect = $(this).parent().find(\"td[name='aspect']\").html();\n                    GEPPETTO.CommandController.execute(\"Project.getExperimentById(\" + expID + \").simulatorConfigurations['\" + aspect + \"'].\" + setterStr + \"('\" + val + \"')\", true);\n                }\n            });\n        },\n\n        watchedVariablesWindow: function watchedVariablesWindow() {\n            if (this.props.experiment.getWatchedVariables() != null || undefined) {\n                var watchedVariables = \"<ul class='listVariables'>\";\n\n                for (var i = 0; i < this.props.experiment.getWatchedVariables().length; i++) {\n                    watchedVariables = watchedVariables + '<li>' + this.props.experiment.getWatchedVariables()[i] + '</li>';\n                }\n\n                watchedVariables += \"</ul>\";\n\n                GEPPETTO.ModalFactory.infoDialog(\"Recorded variables \", watchedVariables);\n            }\n        },\n\n        parametersWindow: function parametersWindow() {\n            var modifiedParameters = \"<ul class='listVariables'>\";\n            var parameters = this.props.experiment.getSetParameters();\n\n            for (var key in parameters) {\n                if (parameters.hasOwnProperty(key)) {\n                    modifiedParameters += '<li>' + key + \"=\" + parameters[key] + '</li>';\n                }\n            }\n\n            modifiedParameters += \"</ul>\";\n            GEPPETTO.ModalFactory.infoDialog(\"Set Parameters \", modifiedParameters);\n        },\n\n        render: function render() {\n            var editable = false;\n\n            var writePermission = GEPPETTO.UserController.hasPermission(GEPPETTO.Resources.WRITE_PROJECT);\n            var projectPersisted = this.props.experiment.getParent().persisted;\n            var readOnly = window.Project.isReadOnly();\n\n            if (!writePermission || !projectPersisted || readOnly || !(GEPPETTO.UserController.isLoggedIn() && GEPPETTO.UserController.hasPersistence())) {\n                editable = false;\n            } else {\n                if (this.props.experiment.getStatus() == GEPPETTO.Resources.ExperimentStatus.DESIGN || this.props.experiment.getStatus() == GEPPETTO.Resources.ExperimentStatus.ERROR) {\n                    editable = true;\n                }\n            }\n\n            var watchedVariables = this.props.experiment.getWatchedVariables();\n            var watchedVariablesClick = null;\n            var variablesMessage = \"None\";\n            if (watchedVariables.length > 0) {\n                variablesMessage = watchedVariables.length + \" variables recorded\";\n                watchedVariablesClick = this.watchedVariablesWindow;\n            }\n\n            var parameterMessage = \"None\";\n            var parametersClick = null;\n            var modifiedParameters = Object.keys(this.props.experiment.getSetParameters()).length;\n\n            if (modifiedParameters > 0) {\n                parameterMessage = modifiedParameters + \" parameters set\";\n                parametersClick = this.parametersWindow;\n            }\n\n            var simulatorRowId = \"simulatorRowId-\" + this.props.experiment.getId();\n            return React.createElement(\n                'tr',\n                { id: simulatorRowId },\n                React.createElement('td', null),\n                React.createElement(\n                    'td',\n                    { className: 'configurationTD', name: 'aspect' },\n                    this.props.simulator[\"aspectInstancePath\"]\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'configurationTD', name: 'simulatorId', contentEditable: editable, suppressContentEditableWarning: true },\n                    this.props.simulator[\"simulatorId\"]\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'configurationTDLink', name: 'variables', onClick: watchedVariablesClick },\n                    variablesMessage\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'configurationTDLink', name: 'parameters', onClick: parametersClick },\n                    parameterMessage\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'configurationTD', name: 'timeStep', contentEditable: editable, suppressContentEditableWarning: true },\n                    this.props.simulator[\"timeStep\"]\n                ),\n                React.createElement(\n                    'td',\n                    { className: 'configurationTD', name: 'length', contentEditable: editable, suppressContentEditableWarning: true },\n                    this.props.simulator[\"length\"]\n                )\n            );\n        }\n    });\n\n    /**\n     * Creates <td> element to display the status of an experiment\n     */\n    var StatusElement = React.createClass({\n        displayName: 'StatusElement',\n\n        attachTooltip: function attachTooltip() {\n            $('div.circle[rel=\"tooltip\"]').uitooltip({\n                position: { my: \"left+15 center\", at: \"right center\" },\n                tooltipClass: \"tooltip-container-status\",\n                show: {\n                    effect: \"slide\",\n                    direction: \"left\",\n                    delay: 200\n                },\n                hide: {\n                    effect: \"slide\",\n                    direction: \"left\",\n                    delay: 200\n                },\n                content: function content() {\n                    return $(this).attr(\"data-custom-title\");\n                },\n                relative: true\n            });\n        },\n\n        componentDidMount: function componentDidMount() {\n            this.attachTooltip();\n        },\n\n        clickStatus: function clickStatus(e) {\n            if (this.props.experiment.getStatus() == GEPPETTO.Resources.ExperimentStatus.ERROR || this.props.experiment.getStatus() == GEPPETTO.Resources.ExperimentStatus.DESIGN) {\n                var error = this.props.experiment.getDetails();\n                if (error != null || undefined) {\n                    e.stopPropagation();\n                    e.nativeEvent.stopImmediatePropagation();\n                    GEPPETTO.ModalFactory.infoDialog(\"Experiment Failed \", error.exception);\n                }\n            }\n        },\n\n        render: function render() {\n            var experiment = this.props.experiment;\n\n            // IMPORTANT NOTE: empty title tag in the markup below is needed or the tooltip stops working\n            var tdStatus = React.createElement(\n                'td',\n                { className: 'statusIcon' },\n                React.createElement('div', { className: \"circle center-block \" + experiment.getStatus(),\n                    'data-status': experiment.getStatus(),\n                    title: '', onClick: this.clickStatus,\n                    'data-custom-title': GEPPETTO.Resources.ExperimentStatus.Descriptions[experiment.getStatus()],\n                    rel: 'tooltip' })\n            );\n\n            return tdStatus;\n        }\n    });\n\n    /**\n     * Creates html element holding set of icons used for experiment controls within table\n     */\n    var IconsElement = React.createClass({\n        displayName: 'IconsElement',\n\n        getInitialState: function getInitialState() {\n            return {\n                rowVisible: false,\n                cloneIconVisible: true,\n                deleteIconVisible: true,\n                activeIconVisible: true\n            };\n        },\n\n        show: function show() {\n            this.setState({ rowVisible: true });\n        },\n\n        hide: function hide() {\n            this.setState({ rowVisible: false });\n        },\n\n        activeExperiment: function activeExperiment(e) {\n            var experiment = this.props.experiment;\n            var index = window.Project.getExperiments().indexOf(experiment);\n            GEPPETTO.CommandController.execute(\"Project.getExperiments()[\" + index + \"].setActive();\", true);\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n\n            var login = GEPPETTO.UserController.isLoggedIn();\n            if (login) {\n                GEPPETTO.trigger(GEPPETTO.Events.Show_spinner, GEPPETTO.Resources.LOADING_EXPERIMENT);\n            } else {\n                GEPPETTO.ModalFactory.infoDialog(GEPPETTO.Resources.ERROR, GEPPETTO.Resources.OPERATION_NOT_SUPPORTED + GEPPETTO.Resources.USER_NOT_LOGIN);\n            }\n        },\n\n        deleteExperiment: function deleteExperiment(e) {\n            var experiment = this.props.experiment;\n            var index = window.Project.getExperiments().indexOf(experiment);\n            GEPPETTO.ModalFactory.inputDialog(\"Are you sure?\", \"Delete \" + experiment.name + \"?\", \"Yes\", function () {\n                GEPPETTO.CommandController.execute(\"Project.getExperiments()[\" + index + \"].deleteExperiment();\", true);\n            }, \"Cancel\", function () {});\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n        },\n\n        cloneExperiment: function cloneExperiment(e) {\n            var experiment = this.props.experiment;\n            var index = window.Project.getExperiments().indexOf(experiment);\n            GEPPETTO.CommandController.execute(\"Project.getExperiments()[\" + index + \"].clone();\", true);\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n        },\n        downloadModels: function downloadModels(e) {\n            var experiment = this.props.experiment;\n\n            var simulatorConfigurations = experiment.simulatorConfigurations;\n            for (var config in simulatorConfigurations) {\n                var simulatorConfig = simulatorConfigurations[config];\n                GEPPETTO.CommandController.execute('Project.downloadModel(\"' + simulatorConfig[\"aspectInstancePath\"] + '\");', true);\n            }\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n        },\n\n        downloadResults: function downloadResults(e) {\n            var experiment = this.props.experiment;\n            var index = window.Project.getExperiments().indexOf(experiment);\n            var simulatorConfigurations = experiment.simulatorConfigurations;\n            for (var config in simulatorConfigurations) {\n                var simulatorConfig = simulatorConfigurations[config];\n                GEPPETTO.CommandController.execute(\"Project.getExperiments()[\" + index + \"].downloadResults('\" + simulatorConfig[\"aspectInstancePath\"] + \"',\" + \"'RAW');\", true);\n            }\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n        },\n\n        updateIconsState: function updateIconsState(activeIconVisibility, visible) {\n            this.setState({ activeIconVisible: activeIconVisibility, deleteIconVisible: visible, cloneIconVisible: visible });\n        },\n\n        componentDidMount: function componentDidMount() {\n            //hide download icons \n            $(\".downloadModelsIcon\").hide();\n            $(\".downloadResultsIcon\").hide();\n        },\n\n        render: function render() {\n            //Create IDs for icons\n            var activeIconId = \"activeIcon-\" + this.props.experiment.getId();\n            var deleteIconId = \"deleteIcon-\" + this.props.experiment.getId();\n            var downloadResultsIconId = \"downloadResultsIcon-\" + this.props.experiment.getId();\n            var downloadModelsIconId = \"downloadModelsIcon-\" + this.props.experiment.getId();\n            var cloneIconId = \"cloneIcon-\" + this.props.experiment.getId();\n\n            return React.createElement(\n                'div',\n                { className: (this.state.rowVisible ? \"visible \" : \"\") + 'iconsDiv' },\n                React.createElement(\n                    'a',\n                    { className: (this.state.activeIconVisible ? \"enabled \" : \"hide \") + 'activeIcon', onClick: this.activeExperiment,\n                        'data-experimentId': this.props.experiment.getId(), id: activeIconId },\n                    React.createElement('i', { className: 'fa fa-check-circle fa-lg', rel: 'tooltip', title: 'Activate experiment' })\n                ),\n                React.createElement(\n                    'a',\n                    { className: (this.state.deleteIconVisible ? \"enabled \" : \"hide \") + 'deleteIcon', onClick: this.deleteExperiment,\n                        'data-experimentId': this.props.experiment.getId(), id: deleteIconId },\n                    React.createElement('i', { className: 'fa fa-remove fa-lg', rel: 'tooltip', title: 'Delete Experiment' })\n                ),\n                React.createElement(\n                    'a',\n                    { className: 'downloadResultsIcon', onClick: this.downloadResults, 'data-experimentId': this.props.experiment.getId(), id: downloadResultsIconId },\n                    React.createElement('i', { className: 'fa fa-download fa-lg', rel: 'tooltip', title: 'Download Results' })\n                ),\n                React.createElement(\n                    'a',\n                    { className: 'downloadModelsIcon', onClick: this.downloadModels, 'data-experimentId': this.props.experiment.getId(), id: downloadModelsIconId },\n                    React.createElement('i', { className: 'fa fa-cloud-download fa-lg', rel: 'tooltip', title: 'Download Models' })\n                ),\n                React.createElement(\n                    'a',\n                    { className: (this.state.cloneIconVisible ? \"enabled \" : \"hide \") + 'cloneIcon', onClick: this.cloneExperiment,\n                        'data-experimentId': this.props.experiment.getId(), id: cloneIconId },\n                    React.createElement('i', { className: 'fa fa-clone fa-lg', rel: 'tooltip', title: 'Clone Experiment' })\n                )\n            );\n        }\n    });\n\n    /**\n     * Creates a table html component used to dipslay the experiments\n     */\n    var ExperimentsTable = React.createClass({\n        displayName: 'ExperimentsTable',\n\n        componentDidMount: function componentDidMount() {\n            var self = this;\n            // Handles new experiment button click\n            $(\"#new_experiment\").click(function () {\n                //retrieve last created experiment and used it to clone new one\n                var experiments = window.Project.getExperiments();\n                var experiment = window.Project.getActiveExperiment();\n                if (experiments.length == 0) {\n                    GEPPETTO.CommandController.execute(\"Project.newExperiment();\", true);\n                } else {\n                    var index = 0;\n                    if (experiment != null || undefined) {\n                        for (var e in experiments) {\n                            if (experiments[e].getId() > experiment.getId()) {\n                                experiment = experiments[e];\n                            }\n                        }\n                        index = window.Project.getExperiments().indexOf(experiment);\n                    }\n                    GEPPETTO.CommandController.execute(\"Project.getExperiments()[\" + index + \"].clone();\", true);\n                }\n            });\n\n            GEPPETTO.on(GEPPETTO.Events.Project_loaded, function () {\n                self.populate();\n                self.updateStatus();\n            });\n\n            GEPPETTO.on(GEPPETTO.Events.Project_persisted, function () {\n                self.refresh();\n            });\n\n            GEPPETTO.on(GEPPETTO.Events.Experiment_status_check, function () {\n                self.updateExperimentsTableStatus();\n            });\n\n            GEPPETTO.on(GEPPETTO.Events.Experiment_loaded, function () {\n                self.updateExperimentStatus();\n            });\n\n            GEPPETTO.on(GEPPETTO.Events.Experiment_created, function (experiment) {\n                self.newExperiment(experiment);\n            });\n\n            GEPPETTO.on(GEPPETTO.Events.Experiment_renamed, function (experiment) {\n                self.refresh();\n            });\n\n            GEPPETTO.on(GEPPETTO.Events.Experiment_deleted, function (experiment) {\n                self.deleteExperiment(experiment);\n                if (!GEPPETTO.ExperimentsController.suppressDeleteExperimentConfirmation) {\n                    GEPPETTO.ModalFactory.infoDialog(GEPPETTO.Resources.EXPERIMENT_DELETED, \"Experiment \" + experiment.name + \" with id \" + experiment.id + \" was deleted successfully\");\n                }\n            });\n\n            $(\"#experiments\").resizable({\n                handles: 'n',\n                minHeight: 100,\n                autoHide: true,\n                maxHeight: 400,\n                resize: function (event, ui) {\n                    if (ui.size.height > $(\"#footerHeader\").height() * .75) {\n                        $(\"#experiments\").height($(\"#footerHeader\").height() * .75);\n                        event.preventDefault();\n                    }\n                    $('#experiments').resize();\n                    $(\"#experiments\").get(0).style.top = \"0px\";\n                }.bind(this)\n            });\n\n            //As every other component this could be loaded after the project has been loaded so when we mount it we populate it with whatever is present\n            if (window.Project != undefined) {\n                this.populate();\n                this.updateStatus();\n            }\n\n            $(\"#experimentsButton\").show();\n        },\n\n        refresh: function refresh() {\n            this.forceUpdate();\n            this.updateExperimentStatus();\n            this.updateStatus();\n        },\n\n        updateStatus: function updateStatus() {\n            var visible = true;\n            if (!GEPPETTO.UserController.hasPermission(GEPPETTO.Resources.WRITE_PROJECT) || !window.Project.persisted || !GEPPETTO.UserController.isLoggedIn() || window.Project.isReadOnly()) {\n                visible = false;\n            }\n\n            this.setState({ newExperimentIconVisible: visible });\n            for (var property in this.refs) {\n                if (this.refs.hasOwnProperty(property)) {\n                    this.refs[property].updateIcons(GEPPETTO.UserController.isLoggedIn(), visible);\n                }\n            }\n        },\n\n        newExperiment: function newExperiment(experiment) {\n            var experiments = this.state.experiments;\n            var rows = [];\n            rows[0] = experiment;\n\n            var index = 1;\n            for (var key in experiments) {\n                rows[index] = experiments[key];\n                index++;\n            }\n\n            this.setState({ experiments: rows });\n            this.state.counter++;\n        },\n\n        deleteExperiment: function deleteExperiment(experiment) {\n            //this.state.experiments.pop(experiment);\n\n            var experiments = this.state.experiments;\n            var rows = [];\n\n            var index = 0;\n            for (var key in experiments) {\n                if (experiment.getId() != experiments[key].getId()) {\n                    rows[index] = experiments[key];\n                    index++;\n                }\n            }\n\n            this.state.counter--;\n\n            this.setState({\n                experiments: rows\n            });\n\n            // loop through each row of experiments table and remove\n            $('#experimentsTable tbody tr').each(function () {\n                // id of row that matches experiment to be deleted\n                if (this.id == experiment.getId() || this.id == \"collapsable-\" + experiment.getId() || this.id == \"#\" + experiment.getId() || this.id == \"#collapsable-\" + experiment.getId()) {\n                    $(this).remove();\n                }\n            });\n        },\n\n        updateExperimentStatus: function updateExperimentStatus() {\n            var experiment = window.Project.getActiveExperiment();\n\n            $(\".activeIcon\").show();\n            // hide download icons for non active experiments\n            $(\".downloadModelsIcon\").hide();\n            $(\".downloadResultsIcon\").hide();\n\n            if (experiment != null || undefined) {\n                $(\"#activeIcon-\" + experiment.getId()).hide();\n\n                var downloadPermission = GEPPETTO.UserController.hasPermission(GEPPETTO.Resources.DOWNLOAD);\n\n                if (downloadPermission) {\n                    $(\"#downloadModelsIcon-\" + experiment.getId()).show();\n                    if (experiment.getStatus() == \"COMPLETED\") {\n                        $(\"#downloadResultsIcon-\" + experiment.getId()).show();\n                    }\n                }\n\n                // loop through each row of experiments table\n                $('#experimentsTable tbody tr').each(function () {\n                    // id of row matches that of active experiment\n                    if (this.id == experiment.getId() || this.id == \"collapsable-\" + experiment.getId()) {\n                        // add class to make it clear it's active\n                        $(this).addClass(\"activeExperiment\");\n                    } else {\n                        // remove class from active experiment\n                        $(this).removeClass(\"activeExperiment\");\n                    }\n                });\n            }\n        },\n\n        //Determines if an element inside the experiments table is in view\n        isInView: function isInView(el) {\n            // grab vanilla dom element from jquery element\n            el = el[0];\n            var rect = el.getBoundingClientRect(),\n                top = rect.top,\n                height = rect.height,\n                el = el.parentNode;\n            do {\n                rect = el.getBoundingClientRect();\n                if (top <= rect.bottom === false) return false;\n                // Check if the element is out of view due to a container scrolling\n                if (top + height <= rect.top) return false;\n                el = el.parentNode;\n            } while (el != document.body);\n            // Check its within the document viewport\n            return top <= document.documentElement.clientHeight;\n        },\n\n        /**\n         * Update experiment status of those in table\n         */\n        updateExperimentsTableStatus: function updateExperimentsTableStatus() {\n            var self = this;\n            // loop through each row of experiments table\n            $('#experimentsTable tbody tr').each(function () {\n                var experiments = window.Project.getExperiments();\n                var active = window.Project.getActiveExperiment();\n                for (var e in experiments) {\n                    var experiment = experiments[e];\n                    if (this.id == \"#\" + experiment.getId() || this.id == experiment.getId()) {\n                        var tdStatus = $(this).find(\".circle\");\n                        var tdStatusId = tdStatus.attr(\"data-status\");\n\n                        if (tdStatusId != experiment.getStatus()) {\n                            tdStatus.removeClass(tdStatusId);\n                            tdStatus.addClass(experiment.getStatus());\n                            tdStatus.attr(\"data-status\", experiment.getStatus());\n                            tdStatus.attr(\"data-custom-title\", GEPPETTO.Resources.ExperimentStatus.Descriptions[experiment.getStatus()]);\n\n                            if (self.isInView(tdStatus)) {\n                                // make the tooltip pop-out for a bit to attract attention\n                                tdStatus.mouseover().delay(2000).queue(function () {\n                                    $(this).mouseout().dequeue();\n                                });\n                            }\n\n                            if (experiment.getStatus() == GEPPETTO.Resources.ExperimentStatus.COMPLETED) {\n                                if (active != null) {\n                                    if (active.getId() == experiment.getId()) {\n                                        var downloadPermission = GEPPETTO.UserController.hasPermission(GEPPETTO.Resources.DOWNLOAD);\n                                        if (downloadPermission) {\n                                            $(\"#downloadResultsIcon-\" + experiment.getId()).show();\n                                        }\n                                    }\n                                }\n                                var editableFields = $(this).find(\".configurationTD\");\n                                for (var i = 0; i < editableFields.length; i++) {\n                                    if (editableFields[i].getAttribute(\"contentEditable\") != \"false\") {\n                                        var td = editableFields[i].setAttribute(\"contentEditable\", false);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (this.id == \"#simulatorRowId-\" + experiment.getId() || this.id == \"simulatorRowId-\" + experiment.getId()) {\n                        if (experiment.getStatus() == GEPPETTO.Resources.ExperimentStatus.COMPLETED) {\n                            var editableFields = $(this).find(\".configurationTD\");\n                            for (var i = 0; i < editableFields.length; i++) {\n                                if (editableFields[i].getAttribute(\"contentEditable\") != \"false\") {\n                                    var td = editableFields[i].setAttribute(\"contentEditable\", false);\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        },\n\n        populate: function populate() {\n            var self = this;\n            var experiments = window.Project.getExperiments();\n            var rows = [];\n\n            var index = 0;\n            for (var key in experiments) {\n                var experiment = experiments[key];\n                rows[index] = experiment;\n                index++;\n            }\n\n            self.state.counter = rows.length;\n\n            self.setState({ experiments: rows });\n        },\n\n        getInitialState: function getInitialState() {\n            var tabledata = [];\n            return { experiments: tabledata, counter: 1, newExperimentIconVisible: true };\n        },\n\n        onClick: function onClick(rowID, e) {\n            var targetRowId = \".\" + rowID;\n            if ($(targetRowId).is(':visible')) {\n                $(targetRowId).hide();\n            } else {\n                $(targetRowId).show();\n            }\n        },\n\n        render: function render() {\n            var rows = [];\n            var rownumber = 1;\n            this.state.experiments.forEach(function (experiment) {\n                if (experiment != null) {\n                    var editablePermissions = GEPPETTO.UserController.hasWritePermissions();\n                    var editable = false;\n\n                    if (!editablePermissions) {\n                        editable = false;\n                    } else {\n                        if (experiment.getStatus() == GEPPETTO.Resources.ExperimentStatus.DESIGN || experiment.getStatus() == GEPPETTO.Resources.ExperimentStatus.ERROR) {\n                            editable = true;\n                        }\n                    }\n\n                    var expandableRowId = \"collapsable-\" + experiment.getId();\n                    rows.push(React.createElement(ExperimentRow, { experiment: experiment, rowNumber: rownumber, editable: editable,\n                        ref: expandableRowId, key: experiment.name + \"-\" + experiment.getId(), fnClick: this.onClick.bind(this, expandableRowId) }));\n                    rows.push(React.createElement(ExperimentExpandableRow, { experiment: experiment, rowNumber: rownumber,\n                        key: expandableRowId, editable: editable }));\n                    rownumber++;\n                }\n            }.bind(this));\n\n            return React.createElement(\n                'div',\n                { className: 'col-lg-6 experimentsResults panel-body experimentsResultsOutput', id: 'experimentsOutput' },\n                React.createElement(\n                    'table',\n                    { id: 'experimentsTable', className: 'table table-condensed experimentsTable',\n                        style: { borderCollapse: \"collapse\" } },\n                    React.createElement(\n                        'thead',\n                        { className: 'experimentsTableColumn' },\n                        React.createElement(\n                            'tr',\n                            null,\n                            React.createElement(\n                                'th',\n                                { className: 'statusHeader' },\n                                'Status'\n                            ),\n                            React.createElement(\n                                'th',\n                                { className: 'tableHeader' },\n                                'Name'\n                            ),\n                            React.createElement(\n                                'th',\n                                { className: 'tableHeader' },\n                                'Date'\n                            ),\n                            React.createElement(\n                                'th',\n                                { className: 'tableHeader' },\n                                React.createElement(\n                                    'div',\n                                    { className: (this.state.newExperimentIconVisible ? \"visible \" : \"hide \") + \"new_experiment\", id: 'new_experiment', title: 'New experiment' },\n                                    React.createElement('i', { className: 'new_experiment_icon fa fa-plus fa-lg' })\n                                )\n                            )\n                        )\n                    ),\n                    React.createElement(\n                        'tbody',\n                        null,\n                        rows\n                    )\n                )\n            );\n        }\n    });\n\n    return ExperimentsTable;\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/components/interface/experimentsTable/ExperimentsTable.js\n// module id = 1442\n// module chunks = 20\n\n//# sourceURL=webpack:///./js/components/interface/experimentsTable/ExperimentsTable.js?");

/***/ }),

/***/ 3121:
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(3122);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(33)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/less-loader/dist/cjs.js?{\\\"modifyVars\\\":{\\\"url\\\":\\\"'../../../extensions/geppetto-netpyne/css/colors'\\\"}}!./ExperimentsTable.less\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/less-loader/dist/cjs.js?{\\\"modifyVars\\\":{\\\"url\\\":\\\"'../../../extensions/geppetto-netpyne/css/colors'\\\"}}!./ExperimentsTable.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/components/interface/experimentsTable/ExperimentsTable.less\n// module id = 3121\n// module chunks = 20\n\n//# sourceURL=webpack:///./js/components/interface/experimentsTable/ExperimentsTable.less?");

/***/ }),

/***/ 3122:
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(32)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \".dark-orange {\\n  color: #cc215a;\\n}\\n.orange {\\n  color: #f23d7a;\\n}\\n.orange-color {\\n  color: #f23d7a;\\n}\\n.orange-color-bg {\\n  background-color: #f23d7a;\\n}\\n#experimentsButton {\\n  margin: 0 auto;\\n  margin-bottom: 26px;\\n  position: relative;\\n  border-width: 1px;\\n  border-bottom: 0;\\n  border-left: 0;\\n  border-style: solid;\\n  cursor: pointer!important;\\n  box-shadow: none;\\n  text-shadow: none;\\n  width: 140px;\\n  height: 35px;\\n  z-index: 3;\\n}\\n#experimentsButton > a::-moz-focus-inner {\\n  border: 0;\\n}\\n.experimentsResults {\\n  background: transparent;\\n  color: #ccc;\\n  width: 100%;\\n  max-height: 90%;\\n  height: 87%;\\n  border: 0;\\n  padding: 0!important;\\n  padding-top: 2px!important;\\n}\\n.experimentsResultsOutput {\\n  background: transparent;\\n  color: #ccc;\\n  height: 100%;\\n  width: 100%;\\n  max-height: 100%;\\n  border: 0;\\n  padding: 0!important;\\n  padding-top: 2px!important;\\n  overflow-y: auto;\\n}\\n#experiments {\\n  background: rgba(255, 255, 255, 0.8) !important;\\n  color: #ccc;\\n  height: 250px;\\n  width: 100%;\\n  max-height: 100%;\\n  padding: 0px;\\n  border: 0;\\n  top: 0px;\\n  z-index: 1;\\n  margin-bottom: 0px;\\n  cursor: pointer;\\n  border-radius: 0;\\n}\\n#experiments th {\\n  cursor: default;\\n}\\n.experimentsTable {\\n  font-weight: 100;\\n}\\n.expandableTable {\\n  margin-bottom: 7px;\\n  width: 100%;\\n}\\n.expandableTable td {\\n  border: 0;\\n}\\n.expandableTable th {\\n  border: 0;\\n  font-weight: 200!important;\\n}\\n.configurationTD {\\n  width: 300px;\\n}\\n.configurationTDLink {\\n  width: 300px;\\n  color: #f23d7a;\\n  cursor: pointer;\\n}\\n.configurationTDLink:hover {\\n  color: #cc215a;\\n}\\n#experimentsTable td {\\n  border: 0;\\n  padding-bottom: 0px;\\n}\\n#experimentsTable th {\\n  border: 0;\\n  color: #f23d7a;\\n  font-weight: 200!important;\\n}\\n.nthTr {\\n  background: #1c1d1f82;\\n}\\n.experimentsTableColumn {\\n  color: white;\\n}\\n#experimentsButton .glyphicon {\\n  font-size: 50px;\\n}\\n.activeExpLabel {\\n  color: #30BDBD;\\n  font-weight: 200;\\n  font-size: 15px;\\n  text-align: right;\\n  text-transform: capitalize;\\n  position: absolute;\\n  right: 500px;\\n  top: 3px;\\n  width: 350px;\\n  display: none;\\n}\\n.activeExperiment {\\n  background-color: #1c1d1f  !important;\\n}\\n.newExperimentFocus {\\n  background: lightslategrey !important;\\n}\\n.white {\\n  color: white;\\n}\\n.circle {\\n  position: relative;\\n  width: 16px;\\n  height: 16px;\\n  border-radius: 50%;\\n  background: #f23d7a;\\n  margin-top: 2px;\\n}\\n.QUEUED {\\n  background: #0CB0DA;\\n}\\n.RUNNING {\\n  background: #ffd800;\\n}\\n.ERROR {\\n  background: red;\\n}\\n.COMPLETED {\\n  background: #7EC113;\\n}\\n.iconsDiv {\\n  display: none;\\n  float: right;\\n  padding-right: 12px;\\n}\\n.visible {\\n  display: block;\\n}\\n.iconsDiv > a > i:hover {\\n  color: white;\\n}\\n.iconsDiv > a > i {\\n  padding-right: 10px;\\n  padding-top: 5px;\\n  color: #FF6700;\\n  padding-left: 10px;\\n  margin-bottom: -3px;\\n  cursor: pointer;\\n}\\n#deleteRow {\\n  float: right;\\n  padding-right: 20px;\\n  color: #FF6700;\\n  padding-left: 10px;\\n}\\n#deleteRow:hover {\\n  color: white;\\n}\\n.new_experiment_icon {\\n  margin-top: -3px;\\n}\\n.new_experiment {\\n  width: 40px;\\n  cursor: pointer;\\n  position: absolute;\\n  right: 0px;\\n  top: 5px;\\n  height: 22px;\\n  padding-top: 8px;\\n  text-decoration: none!important;\\n}\\n.new_experiment:hover {\\n  color: white;\\n}\\n.new_experiment > i {\\n  padding-right: 10px;\\n}\\n.collapse {\\n  display: none;\\n}\\n.extend {\\n  display: block;\\n}\\n.statusHeader {\\n  text-align: center;\\n  width: 10%;\\n}\\n.tableHeader {\\n  width: 30%;\\n}\\n.nameHeader {\\n  width: 215px;\\n}\\n.activeIcon > i {\\n  padding-right: 10px;\\n}\\n.enabled {\\n  display: inline;\\n}\\n.tooltip-container-status {\\n  height: 25px;\\n  max-width: 800px;\\n  border-radius: 5px;\\n  border: 1px solid black;\\n  padding: 2px 4px 2px 4px;\\n  background: white;\\n  opacity: 1;\\n}\\n.listVariables {\\n  padding-bottom: 5px;\\n}\\n\", \"\"]);\n\n// exports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./node_modules/less-loader/dist/cjs.js?{\"modifyVars\":{\"url\":\"'../../../extensions/geppetto-netpyne/css/colors'\"}}!./js/components/interface/experimentsTable/ExperimentsTable.less\n// module id = 3122\n// module chunks = 20\n\n//# sourceURL=webpack:///./js/components/interface/experimentsTable/ExperimentsTable.less?./node_modules/css-loader!./node_modules/less-loader/dist/cjs.js?%7B%22modifyVars%22:%7B%22url%22:%22'../../../extensions/geppetto-netpyne/css/colors'%22%7D%7D");

/***/ })

});