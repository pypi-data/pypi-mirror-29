# coding: utf-8

"""
FsaApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class FsaApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_fsa_result(self, fsa_result_id, **kwargs):
        """
        
        Delete the result set.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fsa_result(fsa_result_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fsa_result_id: Delete the result set. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fsa_result_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fsa_result" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'fsa_result_id' is set
        if ('fsa_result_id' not in params) or (params['fsa_result_id'] is None):
            raise ValueError("Missing the required parameter `fsa_result_id` when calling `delete_fsa_result`")


        resource_path = '/platform/1/fsa/results/{FsaResultId}'.replace('{format}', 'json')
        path_params = {}
        if 'fsa_result_id' in params:
            path_params['FsaResultId'] = params['fsa_result_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_fsa_settings(self, **kwargs):
        """
        
        Revert all settings to their defaults.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fsa_settings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fsa_settings" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/fsa/settings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_fsa_result(self, fsa_result_id, **kwargs):
        """
        
        Retrieve result set information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fsa_result(fsa_result_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fsa_result_id: Retrieve result set information. (required)
        :return: FsaResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fsa_result_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fsa_result" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'fsa_result_id' is set
        if ('fsa_result_id' not in params) or (params['fsa_result_id'] is None):
            raise ValueError("Missing the required parameter `fsa_result_id` when calling `get_fsa_result`")


        resource_path = '/platform/1/fsa/results/{FsaResultId}'.replace('{format}', 'json')
        path_params = {}
        if 'fsa_result_id' in params:
            path_params['FsaResultId'] = params['fsa_result_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FsaResults',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_fsa_results(self, **kwargs):
        """
        
        List all results.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fsa_results(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: FsaResultsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fsa_results" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/fsa/results'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FsaResultsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_fsa_settings(self, **kwargs):
        """
        
        List all settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fsa_settings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: FsaSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fsa_settings" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/fsa/settings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FsaSettings',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_fsa_result(self, fsa_result, fsa_result_id, **kwargs):
        """
        
        Modify result set. Only the pinned property can be changed at this time.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fsa_result(fsa_result, fsa_result_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FsaResult fsa_result:  (required)
        :param str fsa_result_id: Modify result set. Only the pinned property can be changed at this time. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fsa_result', 'fsa_result_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fsa_result" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'fsa_result' is set
        if ('fsa_result' not in params) or (params['fsa_result'] is None):
            raise ValueError("Missing the required parameter `fsa_result` when calling `update_fsa_result`")
        # verify the required parameter 'fsa_result_id' is set
        if ('fsa_result_id' not in params) or (params['fsa_result_id'] is None):
            raise ValueError("Missing the required parameter `fsa_result_id` when calling `update_fsa_result`")


        resource_path = '/platform/1/fsa/results/{FsaResultId}'.replace('{format}', 'json')
        path_params = {}
        if 'fsa_result_id' in params:
            path_params['FsaResultId'] = params['fsa_result_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'fsa_result' in params:
            body_params = params['fsa_result']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_fsa_settings(self, fsa_settings, **kwargs):
        """
        
        Modify one or more settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fsa_settings(fsa_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FsaSettingsSettings fsa_settings:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fsa_settings']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fsa_settings" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'fsa_settings' is set
        if ('fsa_settings' not in params) or (params['fsa_settings'] is None):
            raise ValueError("Missing the required parameter `fsa_settings` when calling `update_fsa_settings`")


        resource_path = '/platform/1/fsa/settings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'fsa_settings' in params:
            body_params = params['fsa_settings']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
