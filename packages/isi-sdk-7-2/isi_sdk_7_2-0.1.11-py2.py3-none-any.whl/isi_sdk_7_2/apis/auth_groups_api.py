# coding: utf-8

"""
AuthGroupsApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AuthGroupsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_group_member(self, group_member, group, **kwargs):
        """
        
        Add a member to the group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_group_member(group_member, group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupMember group_member:  (required)
        :param str group:  (required)
        :param str zone: Filter group members by zone.
        :param str provider: Filter group members by provider.
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_member', 'group', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_group_member" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'group_member' is set
        if ('group_member' not in params) or (params['group_member'] is None):
            raise ValueError("Missing the required parameter `group_member` when calling `create_group_member`")
        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `create_group_member`")


        resource_path = '/platform/1/auth/groups/{Group}/members'.replace('{format}', 'json')
        path_params = {}
        if 'group' in params:
            path_params['Group'] = params['group']

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_member' in params:
            body_params = params['group_member']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_group_member(self, group_member_id, group, **kwargs):
        """
        
        Remove the member from the group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_group_member(group_member_id, group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_member_id: Remove the member from the group. (required)
        :param str group:  (required)
        :param str zone: Filter group members by zone.
        :param str provider: Filter group members by provider.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_member_id', 'group', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_group_member" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'group_member_id' is set
        if ('group_member_id' not in params) or (params['group_member_id'] is None):
            raise ValueError("Missing the required parameter `group_member_id` when calling `delete_group_member`")
        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `delete_group_member`")


        resource_path = '/platform/1/auth/groups/{Group}/members/{GroupMemberId}'.replace('{format}', 'json')
        path_params = {}
        if 'group_member_id' in params:
            path_params['GroupMemberId'] = params['group_member_id']
        if 'group' in params:
            path_params['Group'] = params['group']

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_group_members(self, group, **kwargs):
        """
        
        List all the members of the group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_group_members(group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group:  (required)
        :param bool resolve_names: Resolve names of personas.
        :param int limit: Return no more than this many results at once (see resume).
        :param str zone: Filter group members by zone.
        :param str provider: Filter group members by provider.
        :return: GroupMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group', 'resolve_names', 'limit', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_group_members" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `list_group_members`")

        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_group_members`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/auth/groups/{Group}/members'.replace('{format}', 'json')
        path_params = {}
        if 'group' in params:
            path_params['Group'] = params['group']

        query_params = {}
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GroupMembers',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
