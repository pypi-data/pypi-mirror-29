# coding: utf-8

"""
SyncApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SyncApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_sync_job(self, sync_job, **kwargs):
        """
        
        Start a SyncIQ job.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sync_job(sync_job, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SyncJobCreateParams sync_job:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_job']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sync_job" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_job' is set
        if ('sync_job' not in params) or (params['sync_job'] is None):
            raise ValueError("Missing the required parameter `sync_job` when calling `create_sync_job`")


        resource_path = '/platform/1/sync/jobs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sync_job' in params:
            body_params = params['sync_job']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_sync_policy(self, sync_policy, **kwargs):
        """
        
        Create a SyncIQ policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sync_policy(sync_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SyncPolicyCreateParams sync_policy:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_policy']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sync_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_policy' is set
        if ('sync_policy' not in params) or (params['sync_policy'] is None):
            raise ValueError("Missing the required parameter `sync_policy` when calling `create_sync_policy`")


        resource_path = '/platform/1/sync/policies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sync_policy' in params:
            body_params = params['sync_policy']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_sync_reports_rotate_item(self, sync_reports_rotate_item, **kwargs):
        """
        
        Rotate the records in the database(s).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sync_reports_rotate_item(sync_reports_rotate_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Empty sync_reports_rotate_item:  (required)
        :return: CreateSyncReportsRotateItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_reports_rotate_item']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sync_reports_rotate_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_reports_rotate_item' is set
        if ('sync_reports_rotate_item' not in params) or (params['sync_reports_rotate_item'] is None):
            raise ValueError("Missing the required parameter `sync_reports_rotate_item` when calling `create_sync_reports_rotate_item`")


        resource_path = '/platform/1/sync/reports-rotate'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sync_reports_rotate_item' in params:
            body_params = params['sync_reports_rotate_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateSyncReportsRotateItemResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_sync_rule(self, sync_rule, **kwargs):
        """
        
        Create a new SyncIQ performance rule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sync_rule(sync_rule, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SyncRuleCreateParams sync_rule:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_rule']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sync_rule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_rule' is set
        if ('sync_rule' not in params) or (params['sync_rule'] is None):
            raise ValueError("Missing the required parameter `sync_rule` when calling `create_sync_rule`")


        resource_path = '/platform/1/sync/rules'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sync_rule' in params:
            body_params = params['sync_rule']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_sync_policies(self, **kwargs):
        """
        
        Delete all SyncIQ policies.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_sync_policies(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool local_only: Skip deleting the policy association on the target.
        :param bool force: Ignore any running jobs when preparing to delete a policy.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['local_only', 'force']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sync_policies" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/sync/policies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'local_only' in params:
            query_params['local_only'] = params['local_only']
        if 'force' in params:
            query_params['force'] = params['force']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_sync_policy(self, sync_policy_id, **kwargs):
        """
        
        Delete a single SyncIQ policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_sync_policy(sync_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sync_policy_id: Delete a single SyncIQ policy. (required)
        :param bool local_only: Skip deleting the policy association on the target.
        :param bool force: Ignore any running jobs when preparing to delete a policy.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_policy_id', 'local_only', 'force']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sync_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_policy_id' is set
        if ('sync_policy_id' not in params) or (params['sync_policy_id'] is None):
            raise ValueError("Missing the required parameter `sync_policy_id` when calling `delete_sync_policy`")


        resource_path = '/platform/1/sync/policies/{SyncPolicyId}'.replace('{format}', 'json')
        path_params = {}
        if 'sync_policy_id' in params:
            path_params['SyncPolicyId'] = params['sync_policy_id']

        query_params = {}
        if 'local_only' in params:
            query_params['local_only'] = params['local_only']
        if 'force' in params:
            query_params['force'] = params['force']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_sync_rule(self, sync_rule_id, **kwargs):
        """
        
        Delete a single SyncIQ performance rule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_sync_rule(sync_rule_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sync_rule_id: Delete a single SyncIQ performance rule. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_rule_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sync_rule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_rule_id' is set
        if ('sync_rule_id' not in params) or (params['sync_rule_id'] is None):
            raise ValueError("Missing the required parameter `sync_rule_id` when calling `delete_sync_rule`")


        resource_path = '/platform/1/sync/rules/{SyncRuleId}'.replace('{format}', 'json')
        path_params = {}
        if 'sync_rule_id' in params:
            path_params['SyncRuleId'] = params['sync_rule_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_sync_rules(self, **kwargs):
        """
        
        Delete all SyncIQ performance rules or all rules of a specified type.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_sync_rules(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str type: Delete all rules of the specified rule type only.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sync_rules" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/sync/rules'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_target_policy(self, target_policy_id, **kwargs):
        """
        
        Break the target association with this cluster for this policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_target_policy(target_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str target_policy_id: Break the target association with this cluster for this policy. (required)
        :param bool force: Ignore any running jobs when preparing to delete the policy target association.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_policy_id', 'force']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_target_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'target_policy_id' is set
        if ('target_policy_id' not in params) or (params['target_policy_id'] is None):
            raise ValueError("Missing the required parameter `target_policy_id` when calling `delete_target_policy`")


        resource_path = '/platform/1/sync/target/policies/{TargetPolicyId}'.replace('{format}', 'json')
        path_params = {}
        if 'target_policy_id' in params:
            path_params['TargetPolicyId'] = params['target_policy_id']

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_history_file(self, **kwargs):
        """
        
        List file operations performance data.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_history_file(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int begin: Begin timestamp for time-series report.
        :param int end: End timestamp for time-series report.
        :return: HistoryFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['begin', 'end']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_history_file" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/sync/history/file'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'begin' in params:
            query_params['begin'] = params['begin']
        if 'end' in params:
            query_params['end'] = params['end']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HistoryFile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_history_network(self, **kwargs):
        """
        
        List network operations performance data.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_history_network(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int begin: Begin timestamp for time-series report.
        :param int end: End timestamp for time-series report.
        :return: HistoryFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['begin', 'end']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_history_network" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/sync/history/network'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'begin' in params:
            query_params['begin'] = params['begin']
        if 'end' in params:
            query_params['end'] = params['end']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HistoryFile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sync_job(self, sync_job_id, **kwargs):
        """
        
        View a single SyncIQ job.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_job(sync_job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sync_job_id: View a single SyncIQ job. (required)
        :return: SyncJobs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_job_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_job" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_job_id' is set
        if ('sync_job_id' not in params) or (params['sync_job_id'] is None):
            raise ValueError("Missing the required parameter `sync_job_id` when calling `get_sync_job`")


        resource_path = '/platform/1/sync/jobs/{SyncJobId}'.replace('{format}', 'json')
        path_params = {}
        if 'sync_job_id' in params:
            path_params['SyncJobId'] = params['sync_job_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SyncJobs',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sync_license(self, **kwargs):
        """
        
        Retrieve license information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_license(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: LicenseLicense
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_license" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/sync/license'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LicenseLicense',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sync_policy(self, sync_policy_id, **kwargs):
        """
        
        View a single SyncIQ policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_policy(sync_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sync_policy_id: View a single SyncIQ policy. (required)
        :return: SyncPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_policy_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_policy_id' is set
        if ('sync_policy_id' not in params) or (params['sync_policy_id'] is None):
            raise ValueError("Missing the required parameter `sync_policy_id` when calling `get_sync_policy`")


        resource_path = '/platform/1/sync/policies/{SyncPolicyId}'.replace('{format}', 'json')
        path_params = {}
        if 'sync_policy_id' in params:
            path_params['SyncPolicyId'] = params['sync_policy_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SyncPolicies',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sync_report(self, sync_report_id, **kwargs):
        """
        
        View a single SyncIQ report.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_report(sync_report_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sync_report_id: View a single SyncIQ report. (required)
        :return: SyncReports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_report_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_report" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_report_id' is set
        if ('sync_report_id' not in params) or (params['sync_report_id'] is None):
            raise ValueError("Missing the required parameter `sync_report_id` when calling `get_sync_report`")


        resource_path = '/platform/1/sync/reports/{SyncReportId}'.replace('{format}', 'json')
        path_params = {}
        if 'sync_report_id' in params:
            path_params['SyncReportId'] = params['sync_report_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SyncReports',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sync_reports(self, **kwargs):
        """
        
        Get a list of SyncIQ reports.  By default 10 reports are returned per policy, unless otherwise specified by 'reports_per_policy'.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_reports(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param int newer_than: Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago.
        :param str policy_name: Filter the returned reports to include only those with this policy name.
        :param str state: Filter the returned reports to include only those whose jobs are in this state.
        :param int limit: Return no more than this many results at once (see resume).
        :param int reports_per_policy: If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10. 
        :param str dir: The direction of the sort.
        :return: SyncReportsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'resume', 'newer_than', 'policy_name', 'state', 'limit', 'reports_per_policy', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_reports" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_sync_reports`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/sync/reports'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'newer_than' in params:
            query_params['newer_than'] = params['newer_than']
        if 'policy_name' in params:
            query_params['policy_name'] = params['policy_name']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'reports_per_policy' in params:
            query_params['reports_per_policy'] = params['reports_per_policy']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SyncReportsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sync_rule(self, sync_rule_id, **kwargs):
        """
        
        View a single SyncIQ performance rule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_rule(sync_rule_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sync_rule_id: View a single SyncIQ performance rule. (required)
        :return: SyncRules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_rule_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_rule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_rule_id' is set
        if ('sync_rule_id' not in params) or (params['sync_rule_id'] is None):
            raise ValueError("Missing the required parameter `sync_rule_id` when calling `get_sync_rule`")


        resource_path = '/platform/1/sync/rules/{SyncRuleId}'.replace('{format}', 'json')
        path_params = {}
        if 'sync_rule_id' in params:
            path_params['SyncRuleId'] = params['sync_rule_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SyncRules',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sync_settings(self, **kwargs):
        """
        
        Retrieve the global SyncIQ settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_settings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SyncSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_settings" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/sync/settings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SyncSettings',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_target_policies(self, **kwargs):
        """
        
        List all SyncIQ target policies.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_target_policies(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str target_path: Filter the returned policies to include only those with this target path.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: TargetPoliciesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'target_path', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_policies" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_target_policies`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/sync/target/policies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'target_path' in params:
            query_params['target_path'] = params['target_path']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TargetPoliciesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_target_policy(self, target_policy_id, **kwargs):
        """
        
        View a single SyncIQ target policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_target_policy(target_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str target_policy_id: View a single SyncIQ target policy. (required)
        :return: TargetPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_policy_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'target_policy_id' is set
        if ('target_policy_id' not in params) or (params['target_policy_id'] is None):
            raise ValueError("Missing the required parameter `target_policy_id` when calling `get_target_policy`")


        resource_path = '/platform/1/sync/target/policies/{TargetPolicyId}'.replace('{format}', 'json')
        path_params = {}
        if 'target_policy_id' in params:
            path_params['TargetPolicyId'] = params['target_policy_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TargetPolicies',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_target_report(self, target_report_id, **kwargs):
        """
        
        View a single SyncIQ target report.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_target_report(target_report_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str target_report_id: View a single SyncIQ target report. (required)
        :return: TargetReports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_report_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_report" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'target_report_id' is set
        if ('target_report_id' not in params) or (params['target_report_id'] is None):
            raise ValueError("Missing the required parameter `target_report_id` when calling `get_target_report`")


        resource_path = '/platform/1/sync/target/reports/{TargetReportId}'.replace('{format}', 'json')
        path_params = {}
        if 'target_report_id' in params:
            path_params['TargetReportId'] = params['target_report_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TargetReports',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_target_reports(self, **kwargs):
        """
        
        Get a list of SyncIQ target reports.  By default 10 reports are returned per policy, unless otherwise specified by 'reports_per_policy'.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_target_reports(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param int newer_than: Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago.
        :param str policy_name: Filter the returned reports to include only those with this policy name.
        :param str state: Filter the returned reports to include only those whose jobs are in this state.
        :param int limit: Return no more than this many results at once (see resume).
        :param int reports_per_policy: If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10. 
        :param str dir: The direction of the sort.
        :return: TargetReportsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'resume', 'newer_than', 'policy_name', 'state', 'limit', 'reports_per_policy', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_reports" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_target_reports`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/sync/target/reports'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'newer_than' in params:
            query_params['newer_than'] = params['newer_than']
        if 'policy_name' in params:
            query_params['policy_name'] = params['policy_name']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'reports_per_policy' in params:
            query_params['reports_per_policy'] = params['reports_per_policy']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TargetReportsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_sync_jobs(self, **kwargs):
        """
        
        Get a list of SyncIQ jobs.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_sync_jobs(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str state: The state of the job.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: SyncJobsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'state', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sync_jobs" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_sync_jobs`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/sync/jobs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SyncJobsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_sync_policies(self, **kwargs):
        """
        
        List all SyncIQ policies.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_sync_policies(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param bool summary: Show only summary properties
        :param int limit: Return no more than this many results at once (see resume).
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :param str dir: The direction of the sort.
        :return: SyncPoliciesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'resume', 'summary', 'limit', 'scope', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sync_policies" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_sync_policies`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/sync/policies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'summary' in params:
            query_params['summary'] = params['summary']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'scope' in params:
            query_params['scope'] = params['scope']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SyncPoliciesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_sync_reports_rotate(self, **kwargs):
        """
        
        Whether the rotation is still running or not.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_sync_reports_rotate(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SyncReportsRotate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sync_reports_rotate" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/sync/reports-rotate'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SyncReportsRotate',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_sync_rules(self, **kwargs):
        """
        
        List all SyncIQ performance rules.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_sync_rules(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str type: Filter the returned rules to include only those with this rule type.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: SyncRulesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'type', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sync_rules" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_sync_rules`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/sync/rules'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'type' in params:
            query_params['type'] = params['type']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SyncRulesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_sync_job(self, sync_job, sync_job_id, **kwargs):
        """
        
        Perform an action (pause, cancel, etc...) on a single job.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_sync_job(sync_job, sync_job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SyncJob sync_job:  (required)
        :param str sync_job_id: Perform an action (pause, cancel, etc...) on a single job. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_job', 'sync_job_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sync_job" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_job' is set
        if ('sync_job' not in params) or (params['sync_job'] is None):
            raise ValueError("Missing the required parameter `sync_job` when calling `update_sync_job`")
        # verify the required parameter 'sync_job_id' is set
        if ('sync_job_id' not in params) or (params['sync_job_id'] is None):
            raise ValueError("Missing the required parameter `sync_job_id` when calling `update_sync_job`")


        resource_path = '/platform/1/sync/jobs/{SyncJobId}'.replace('{format}', 'json')
        path_params = {}
        if 'sync_job_id' in params:
            path_params['SyncJobId'] = params['sync_job_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sync_job' in params:
            body_params = params['sync_job']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_sync_policy(self, sync_policy, sync_policy_id, **kwargs):
        """
        
        Modify a single SyncIQ policy.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_sync_policy(sync_policy, sync_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SyncPolicy sync_policy:  (required)
        :param str sync_policy_id: Modify a single SyncIQ policy. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_policy', 'sync_policy_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sync_policy" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_policy' is set
        if ('sync_policy' not in params) or (params['sync_policy'] is None):
            raise ValueError("Missing the required parameter `sync_policy` when calling `update_sync_policy`")
        # verify the required parameter 'sync_policy_id' is set
        if ('sync_policy_id' not in params) or (params['sync_policy_id'] is None):
            raise ValueError("Missing the required parameter `sync_policy_id` when calling `update_sync_policy`")


        resource_path = '/platform/1/sync/policies/{SyncPolicyId}'.replace('{format}', 'json')
        path_params = {}
        if 'sync_policy_id' in params:
            path_params['SyncPolicyId'] = params['sync_policy_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sync_policy' in params:
            body_params = params['sync_policy']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_sync_rule(self, sync_rule, sync_rule_id, **kwargs):
        """
        
        Modify a single SyncIQ performance rule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_sync_rule(sync_rule, sync_rule_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SyncRule sync_rule:  (required)
        :param str sync_rule_id: Modify a single SyncIQ performance rule. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_rule', 'sync_rule_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sync_rule" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_rule' is set
        if ('sync_rule' not in params) or (params['sync_rule'] is None):
            raise ValueError("Missing the required parameter `sync_rule` when calling `update_sync_rule`")
        # verify the required parameter 'sync_rule_id' is set
        if ('sync_rule_id' not in params) or (params['sync_rule_id'] is None):
            raise ValueError("Missing the required parameter `sync_rule_id` when calling `update_sync_rule`")


        resource_path = '/platform/1/sync/rules/{SyncRuleId}'.replace('{format}', 'json')
        path_params = {}
        if 'sync_rule_id' in params:
            path_params['SyncRuleId'] = params['sync_rule_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sync_rule' in params:
            body_params = params['sync_rule']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_sync_settings(self, sync_settings, **kwargs):
        """
        
        Modify the global SyncIQ settings.  All input fields are optional, but one or more must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_sync_settings(sync_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SyncSettingsSettings sync_settings:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sync_settings']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sync_settings" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sync_settings' is set
        if ('sync_settings' not in params) or (params['sync_settings'] is None):
            raise ValueError("Missing the required parameter `sync_settings` when calling `update_sync_settings`")


        resource_path = '/platform/1/sync/settings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sync_settings' in params:
            body_params = params['sync_settings']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
