# coding: utf-8

"""
QuotaApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class QuotaApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_quota_quota(self, quota_quota, **kwargs):
        """
        
        Create a new quota.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_quota_quota(quota_quota, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param QuotaQuotaCreateParams quota_quota:  (required)
        :param str zone: Optional named zone to use for user and group resolution.
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quota_quota', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_quota_quota" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'quota_quota' is set
        if ('quota_quota' not in params) or (params['quota_quota'] is None):
            raise ValueError("Missing the required parameter `quota_quota` when calling `create_quota_quota`")


        resource_path = '/platform/1/quota/quotas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'quota_quota' in params:
            body_params = params['quota_quota']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_quota_report(self, quota_report, **kwargs):
        """
        
        Create a new report. The type of this report is 'manual'; it is also sometimes called 'live' or 'ad-hoc'.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_quota_report(quota_report, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Empty quota_report:  (required)
        :return: CreateQuotaReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quota_report']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_quota_report" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'quota_report' is set
        if ('quota_report' not in params) or (params['quota_report'] is None):
            raise ValueError("Missing the required parameter `quota_report` when calling `create_quota_report`")


        resource_path = '/platform/1/quota/reports'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'quota_report' in params:
            body_params = params['quota_report']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateQuotaReportResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_settings_mapping(self, settings_mapping, **kwargs):
        """
        
        Create a new rule. The new rule must not conflict with an existing rule (e.g. match both the type and domain fields).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_settings_mapping(settings_mapping, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsMappingExtendedExtended settings_mapping:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_mapping']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_settings_mapping" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_mapping' is set
        if ('settings_mapping' not in params) or (params['settings_mapping'] is None):
            raise ValueError("Missing the required parameter `settings_mapping` when calling `create_settings_mapping`")


        resource_path = '/platform/1/quota/settings/mappings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_mapping' in params:
            body_params = params['settings_mapping']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_settings_notification(self, settings_notification, **kwargs):
        """
        
        Create a new global notification rule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_settings_notification(settings_notification, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param QuotaNotificationCreateParams settings_notification:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_notification']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_settings_notification" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_notification' is set
        if ('settings_notification' not in params) or (params['settings_notification'] is None):
            raise ValueError("Missing the required parameter `settings_notification` when calling `create_settings_notification`")


        resource_path = '/platform/1/quota/settings/notifications'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_notification' in params:
            body_params = params['settings_notification']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_quota_quota(self, quota_quota_id, **kwargs):
        """
        
        Delete the quota.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_quota_quota(quota_quota_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str quota_quota_id: Delete the quota. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quota_quota_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_quota_quota" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'quota_quota_id' is set
        if ('quota_quota_id' not in params) or (params['quota_quota_id'] is None):
            raise ValueError("Missing the required parameter `quota_quota_id` when calling `delete_quota_quota`")


        resource_path = '/platform/1/quota/quotas/{QuotaQuotaId}'.replace('{format}', 'json')
        path_params = {}
        if 'quota_quota_id' in params:
            path_params['QuotaQuotaId'] = params['quota_quota_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_quota_quotas(self, **kwargs):
        """
        
        Delete all or matching quotas.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_quota_quotas(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enforced: Only delete quotas with this enforcement (non-accounting).
        :param bool include_snapshots: Only delete quotas with this setting for include_snapshots.
        :param bool recurse_path_children: If used with the path argument, delete all quotas at that path or any descendent sub-directory.
        :param bool recurse_path_parents: If used with the path argument, delete all quotas at that path or any parent directory.
        :param str persona: Only delete user or group quotas matching this persona (must be used with the corresponding type argument).  Format is <PERSONA_TYPE>:<string/integer>, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID.
        :param str path: Only delete quotas matching this path (see also recurse_path_*).
        :param str type: Only delete quotas matching this type.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enforced', 'include_snapshots', 'recurse_path_children', 'recurse_path_parents', 'persona', 'path', 'type']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_quota_quotas" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/quota/quotas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'enforced' in params:
            query_params['enforced'] = params['enforced']
        if 'include_snapshots' in params:
            query_params['include_snapshots'] = params['include_snapshots']
        if 'recurse_path_children' in params:
            query_params['recurse_path_children'] = params['recurse_path_children']
        if 'recurse_path_parents' in params:
            query_params['recurse_path_parents'] = params['recurse_path_parents']
        if 'persona' in params:
            query_params['persona'] = params['persona']
        if 'path' in params:
            query_params['path'] = params['path']
        if 'type' in params:
            query_params['type'] = params['type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_quota_report(self, quota_report_id, **kwargs):
        """
        
        Delete the report.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_quota_report(quota_report_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str quota_report_id: Delete the report. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quota_report_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_quota_report" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'quota_report_id' is set
        if ('quota_report_id' not in params) or (params['quota_report_id'] is None):
            raise ValueError("Missing the required parameter `quota_report_id` when calling `delete_quota_report`")


        resource_path = '/platform/1/quota/reports/{QuotaReportId}'.replace('{format}', 'json')
        path_params = {}
        if 'quota_report_id' in params:
            path_params['QuotaReportId'] = params['quota_report_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_settings_mapping(self, settings_mapping_id, **kwargs):
        """
        
        Delete the mapping.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_settings_mapping(settings_mapping_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str settings_mapping_id: Delete the mapping. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_mapping_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_settings_mapping" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_mapping_id' is set
        if ('settings_mapping_id' not in params) or (params['settings_mapping_id'] is None):
            raise ValueError("Missing the required parameter `settings_mapping_id` when calling `delete_settings_mapping`")


        resource_path = '/platform/1/quota/settings/mappings/{SettingsMappingId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_mapping_id' in params:
            path_params['SettingsMappingId'] = params['settings_mapping_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_settings_mappings(self, **kwargs):
        """
        
        Delete all rules.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_settings_mappings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_settings_mappings" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/quota/settings/mappings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_settings_notification(self, settings_notification_id, **kwargs):
        """
        
        Delete the notification rule.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_settings_notification(settings_notification_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str settings_notification_id: Delete the notification rule. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_notification_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_settings_notification" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_notification_id' is set
        if ('settings_notification_id' not in params) or (params['settings_notification_id'] is None):
            raise ValueError("Missing the required parameter `settings_notification_id` when calling `delete_settings_notification`")


        resource_path = '/platform/1/quota/settings/notifications/{SettingsNotificationId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_notification_id' in params:
            path_params['SettingsNotificationId'] = params['settings_notification_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_settings_notifications(self, **kwargs):
        """
        
        Delete all rules.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_settings_notifications(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_settings_notifications" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/quota/settings/notifications'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_quota_license(self, **kwargs):
        """
        
        Retrieve license information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_quota_license(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: LicenseLicense
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quota_license" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/quota/license'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LicenseLicense',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_quota_quota(self, quota_quota_id, **kwargs):
        """
        
        Retrieve quota information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_quota_quota(quota_quota_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str quota_quota_id: Retrieve quota information. (required)
        :param bool resolve_names: If true, resolve group and user names in personas.
        :param str zone: Optional named zone to use for user and group resolution.
        :return: QuotaQuotas
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quota_quota_id', 'resolve_names', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quota_quota" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'quota_quota_id' is set
        if ('quota_quota_id' not in params) or (params['quota_quota_id'] is None):
            raise ValueError("Missing the required parameter `quota_quota_id` when calling `get_quota_quota`")


        resource_path = '/platform/1/quota/quotas/{QuotaQuotaId}'.replace('{format}', 'json')
        path_params = {}
        if 'quota_quota_id' in params:
            path_params['QuotaQuotaId'] = params['quota_quota_id']

        query_params = {}
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='QuotaQuotas',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_quota_quotas_summary(self, **kwargs):
        """
        
        Return summary information about quotas.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_quota_quotas_summary(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: QuotaQuotasSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quota_quotas_summary" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/quota/quotas-summary'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='QuotaQuotasSummary',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_quota_report(self, quota_report_id, **kwargs):
        """
        
        Retrieve report data (XML) or contents (meta-data).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_quota_report(quota_report_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str quota_report_id: Retrieve report data (XML) or contents (meta-data). (required)
        :param bool contents: Display JSON meta-data contents instead of report data.
        :return: ReportAbout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quota_report_id', 'contents']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quota_report" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'quota_report_id' is set
        if ('quota_report_id' not in params) or (params['quota_report_id'] is None):
            raise ValueError("Missing the required parameter `quota_report_id` when calling `get_quota_report`")


        resource_path = '/platform/1/quota/reports/{QuotaReportId}'.replace('{format}', 'json')
        path_params = {}
        if 'quota_report_id' in params:
            path_params['QuotaReportId'] = params['quota_report_id']

        query_params = {}
        if 'contents' in params:
            query_params['contents'] = params['contents']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReportAbout',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_settings_mapping(self, settings_mapping_id, **kwargs):
        """
        
        Retrieve the mapping information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_settings_mapping(settings_mapping_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str settings_mapping_id: Retrieve the mapping information. (required)
        :return: SettingsMappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_mapping_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_mapping" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_mapping_id' is set
        if ('settings_mapping_id' not in params) or (params['settings_mapping_id'] is None):
            raise ValueError("Missing the required parameter `settings_mapping_id` when calling `get_settings_mapping`")


        resource_path = '/platform/1/quota/settings/mappings/{SettingsMappingId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_mapping_id' in params:
            path_params['SettingsMappingId'] = params['settings_mapping_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingsMappings',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_settings_notification(self, settings_notification_id, **kwargs):
        """
        
        Retrieve notification rule information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_settings_notification(settings_notification_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str settings_notification_id: Retrieve notification rule information. (required)
        :return: QuotaNotifications
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_notification_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_notification" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_notification_id' is set
        if ('settings_notification_id' not in params) or (params['settings_notification_id'] is None):
            raise ValueError("Missing the required parameter `settings_notification_id` when calling `get_settings_notification`")


        resource_path = '/platform/1/quota/settings/notifications/{SettingsNotificationId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_notification_id' in params:
            path_params['SettingsNotificationId'] = params['settings_notification_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='QuotaNotifications',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_settings_reports(self, **kwargs):
        """
        
        List all settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_settings_reports(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SettingsReports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_reports" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/quota/settings/reports'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingsReports',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_quota_quotas(self, **kwargs):
        """
        
        List all or matching quotas. Can also be used to retrieve quota state from existing reports. For any query argument not supplied, the default behavior is return all.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_quota_quotas(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool enforced: Only list quotas with this enforcement (non-accounting).
        :param bool include_snapshots: Only list quotas with this setting for include_snapshots.
        :param str zone: Optional named zone to use for user and group resolution.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param bool recurse_path_children: If used with the path argument, match all quotas at that path or any descendent sub-directory.
        :param bool resolve_names: If true, resolve group and user names in personas.
        :param bool recurse_path_parents: If used with the path argument, match all quotas at that path or any parent directory.
        :param str persona: Only list user or group quotas matching this persona (must be used with the corresponding type argument).  Format is <PERSONA_TYPE>:<string/integer>, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID.
        :param bool exceeded: Set to true to only list quotas which have exceeded one or more of their thresholds.
        :param str path: Only list quotas matching this path (see also recurse_path_*).
        :param str type: Only list quotas matching this type.
        :param str dir: The direction of the sort.
        :param str report_id: Use the named report as a source rather than the live quotas. See the /q/quota/reports resource for a list of valid reports.
        :return: QuotaQuotasExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enforced', 'include_snapshots', 'zone', 'resume', 'recurse_path_children', 'resolve_names', 'recurse_path_parents', 'persona', 'exceeded', 'path', 'type', 'dir', 'report_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_quota_quotas" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/quota/quotas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'enforced' in params:
            query_params['enforced'] = params['enforced']
        if 'include_snapshots' in params:
            query_params['include_snapshots'] = params['include_snapshots']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'recurse_path_children' in params:
            query_params['recurse_path_children'] = params['recurse_path_children']
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']
        if 'recurse_path_parents' in params:
            query_params['recurse_path_parents'] = params['recurse_path_parents']
        if 'persona' in params:
            query_params['persona'] = params['persona']
        if 'exceeded' in params:
            query_params['exceeded'] = params['exceeded']
        if 'path' in params:
            query_params['path'] = params['path']
        if 'type' in params:
            query_params['type'] = params['type']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'report_id' in params:
            query_params['report_id'] = params['report_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='QuotaQuotasExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_quota_reports(self, **kwargs):
        """
        
        List all or matching reports.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_quota_reports(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: Order results by this field.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param str generated: Only list reports matching this source.
        :param int limit: Return no more than this many results at once (see resume).
        :param str type: Only list reports matching this type.
        :param str dir: The direction of the sort.
        :return: QuotaReports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'resume', 'generated', 'limit', 'type', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_quota_reports" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_quota_reports`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/quota/reports'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'generated' in params:
            query_params['generated'] = params['generated']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'type' in params:
            query_params['type'] = params['type']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='QuotaReports',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_settings_mappings(self, **kwargs):
        """
        
        List all rules.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_settings_mappings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SettingsMappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_settings_mappings" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/quota/settings/mappings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingsMappings',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_settings_notifications(self, **kwargs):
        """
        
        List all rules.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_settings_notifications(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: QuotaNotificationsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_settings_notifications" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/quota/settings/notifications'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='QuotaNotificationsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_quota_quota(self, quota_quota, quota_quota_id, **kwargs):
        """
        
        Modify quota. All input fields are optional, but one or more must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_quota_quota(quota_quota, quota_quota_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param QuotaQuota quota_quota:  (required)
        :param str quota_quota_id: Modify quota. All input fields are optional, but one or more must be supplied. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quota_quota', 'quota_quota_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_quota_quota" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'quota_quota' is set
        if ('quota_quota' not in params) or (params['quota_quota'] is None):
            raise ValueError("Missing the required parameter `quota_quota` when calling `update_quota_quota`")
        # verify the required parameter 'quota_quota_id' is set
        if ('quota_quota_id' not in params) or (params['quota_quota_id'] is None):
            raise ValueError("Missing the required parameter `quota_quota_id` when calling `update_quota_quota`")


        resource_path = '/platform/1/quota/quotas/{QuotaQuotaId}'.replace('{format}', 'json')
        path_params = {}
        if 'quota_quota_id' in params:
            path_params['QuotaQuotaId'] = params['quota_quota_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'quota_quota' in params:
            body_params = params['quota_quota']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_settings_mapping(self, settings_mapping, settings_mapping_id, **kwargs):
        """
        
        Modify the mapping.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_settings_mapping(settings_mapping, settings_mapping_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsMappingExtended settings_mapping:  (required)
        :param str settings_mapping_id: Modify the mapping. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_mapping', 'settings_mapping_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_settings_mapping" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_mapping' is set
        if ('settings_mapping' not in params) or (params['settings_mapping'] is None):
            raise ValueError("Missing the required parameter `settings_mapping` when calling `update_settings_mapping`")
        # verify the required parameter 'settings_mapping_id' is set
        if ('settings_mapping_id' not in params) or (params['settings_mapping_id'] is None):
            raise ValueError("Missing the required parameter `settings_mapping_id` when calling `update_settings_mapping`")


        resource_path = '/platform/1/quota/settings/mappings/{SettingsMappingId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_mapping_id' in params:
            path_params['SettingsMappingId'] = params['settings_mapping_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_mapping' in params:
            body_params = params['settings_mapping']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_settings_notification(self, settings_notification, settings_notification_id, **kwargs):
        """
        
        Modify notification rule. All input fields are optional, but one or must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_settings_notification(settings_notification, settings_notification_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param QuotaNotification settings_notification:  (required)
        :param str settings_notification_id: Modify notification rule. All input fields are optional, but one or must be supplied. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_notification', 'settings_notification_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_settings_notification" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_notification' is set
        if ('settings_notification' not in params) or (params['settings_notification'] is None):
            raise ValueError("Missing the required parameter `settings_notification` when calling `update_settings_notification`")
        # verify the required parameter 'settings_notification_id' is set
        if ('settings_notification_id' not in params) or (params['settings_notification_id'] is None):
            raise ValueError("Missing the required parameter `settings_notification_id` when calling `update_settings_notification`")


        resource_path = '/platform/1/quota/settings/notifications/{SettingsNotificationId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_notification_id' in params:
            path_params['SettingsNotificationId'] = params['settings_notification_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_notification' in params:
            body_params = params['settings_notification']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_settings_reports(self, settings_reports, **kwargs):
        """
        
        Modify one or more settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_settings_reports(settings_reports, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsReportsExtended settings_reports:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_reports']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_settings_reports" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_reports' is set
        if ('settings_reports' not in params) or (params['settings_reports'] is None):
            raise ValueError("Missing the required parameter `settings_reports` when calling `update_settings_reports`")


        resource_path = '/platform/1/quota/settings/reports'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_reports' in params:
            body_params = params['settings_reports']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
