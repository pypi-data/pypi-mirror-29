# coding: utf-8

"""
ProtocolsApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ProtocolsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_hdfs_proxyuser(self, hdfs_proxyuser, **kwargs):
        """
        
        Create a new HDFS proxyuser.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_hdfs_proxyuser(hdfs_proxyuser, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HdfsProxyuserCreateParams hdfs_proxyuser:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hdfs_proxyuser']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_hdfs_proxyuser" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'hdfs_proxyuser' is set
        if ('hdfs_proxyuser' not in params) or (params['hdfs_proxyuser'] is None):
            raise ValueError("Missing the required parameter `hdfs_proxyuser` when calling `create_hdfs_proxyuser`")


        resource_path = '/platform/1/protocols/hdfs/proxyusers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'hdfs_proxyuser' in params:
            body_params = params['hdfs_proxyuser']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_hdfs_rack(self, hdfs_rack, **kwargs):
        """
        
        Create a new HDFS rack.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_hdfs_rack(hdfs_rack, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HdfsRackCreateParams hdfs_rack:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hdfs_rack']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_hdfs_rack" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'hdfs_rack' is set
        if ('hdfs_rack' not in params) or (params['hdfs_rack'] is None):
            raise ValueError("Missing the required parameter `hdfs_rack` when calling `create_hdfs_rack`")


        resource_path = '/platform/1/protocols/hdfs/racks'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'hdfs_rack' in params:
            body_params = params['hdfs_rack']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_nfs_aliase(self, nfs_aliase, **kwargs):
        """
        
        Create a new NFS alias.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_nfs_aliase(nfs_aliase, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NfsAliaseCreateParams nfs_aliase:  (required)
        :param str zone: Access zone
        :return: CreateNfsAliaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_aliase', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nfs_aliase" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_aliase' is set
        if ('nfs_aliase' not in params) or (params['nfs_aliase'] is None):
            raise ValueError("Missing the required parameter `nfs_aliase` when calling `create_nfs_aliase`")


        resource_path = '/platform/2/protocols/nfs/aliases'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nfs_aliase' in params:
            body_params = params['nfs_aliase']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateNfsAliaseResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_nfs_export(self, nfs_export, **kwargs):
        """
        
        Create a new NFS export.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_nfs_export(nfs_export, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NfsExportCreateParams nfs_export:  (required)
        :param bool force: If true, the export will be created even if it conflicts with another export.
        :param str zone: Access zone
        :return: CreateQuotaReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_export', 'force', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nfs_export" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_export' is set
        if ('nfs_export' not in params) or (params['nfs_export'] is None):
            raise ValueError("Missing the required parameter `nfs_export` when calling `create_nfs_export`")


        resource_path = '/platform/2/protocols/nfs/exports'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nfs_export' in params:
            body_params = params['nfs_export']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateQuotaReportResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_nfs_reload_item(self, nfs_reload_item, **kwargs):
        """
        
        Reload default NFS export configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_nfs_reload_item(nfs_reload_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Empty nfs_reload_item:  (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_reload_item']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nfs_reload_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_reload_item' is set
        if ('nfs_reload_item' not in params) or (params['nfs_reload_item'] is None):
            raise ValueError("Missing the required parameter `nfs_reload_item` when calling `create_nfs_reload_item`")


        resource_path = '/platform/2/protocols/nfs/reload'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nfs_reload_item' in params:
            body_params = params['nfs_reload_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Empty',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_smb_share(self, smb_share, **kwargs):
        """
        
        Create a new share.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_smb_share(smb_share, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SmbShareCreateParams smb_share:  (required)
        :param str zone: Zone which contains this share.
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['smb_share', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_smb_share" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'smb_share' is set
        if ('smb_share' not in params) or (params['smb_share'] is None):
            raise ValueError("Missing the required parameter `smb_share` when calling `create_smb_share`")


        resource_path = '/platform/1/protocols/smb/shares'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'smb_share' in params:
            body_params = params['smb_share']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_hdfs_proxyuser(self, hdfs_proxyuser_id, **kwargs):
        """
        
        Delete a a HDFS proxyuser.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_hdfs_proxyuser(hdfs_proxyuser_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hdfs_proxyuser_id: Delete a a HDFS proxyuser. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hdfs_proxyuser_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hdfs_proxyuser" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'hdfs_proxyuser_id' is set
        if ('hdfs_proxyuser_id' not in params) or (params['hdfs_proxyuser_id'] is None):
            raise ValueError("Missing the required parameter `hdfs_proxyuser_id` when calling `delete_hdfs_proxyuser`")


        resource_path = '/platform/1/protocols/hdfs/proxyusers/{HdfsProxyuserId}'.replace('{format}', 'json')
        path_params = {}
        if 'hdfs_proxyuser_id' in params:
            path_params['HdfsProxyuserId'] = params['hdfs_proxyuser_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_hdfs_rack(self, hdfs_rack_id, **kwargs):
        """
        
        Delete the HDFS rack.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_hdfs_rack(hdfs_rack_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hdfs_rack_id: Delete the HDFS rack. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hdfs_rack_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_hdfs_rack" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'hdfs_rack_id' is set
        if ('hdfs_rack_id' not in params) or (params['hdfs_rack_id'] is None):
            raise ValueError("Missing the required parameter `hdfs_rack_id` when calling `delete_hdfs_rack`")


        resource_path = '/platform/1/protocols/hdfs/racks/{HdfsRackId}'.replace('{format}', 'json')
        path_params = {}
        if 'hdfs_rack_id' in params:
            path_params['HdfsRackId'] = params['hdfs_rack_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_nfs_aliase(self, nfs_aliase_id, **kwargs):
        """
        
        Delete the export.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_nfs_aliase(nfs_aliase_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nfs_aliase_id: Delete the export. (required)
        :param str zone: Access zone
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_aliase_id', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_nfs_aliase" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_aliase_id' is set
        if ('nfs_aliase_id' not in params) or (params['nfs_aliase_id'] is None):
            raise ValueError("Missing the required parameter `nfs_aliase_id` when calling `delete_nfs_aliase`")

        if 'nfs_aliase_id' in params:
            # tag this parameter so that it can be url encoded with quote_plus
            # by the api_client code because it contains a '/' character that
            # needs to be url encoded.
            params['nfs_aliase_id'] = "__x-isi-url-encode-path-param__{0}".format(params['nfs_aliase_id'])

        resource_path = '/platform/2/protocols/nfs/aliases/{NfsAliaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'nfs_aliase_id' in params:
            path_params['NfsAliaseId'] = params['nfs_aliase_id']

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_nfs_export(self, nfs_export_id, **kwargs):
        """
        
        Delete the export.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_nfs_export(nfs_export_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nfs_export_id: Delete the export. (required)
        :param str zone: Access zone
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_export_id', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_nfs_export" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_export_id' is set
        if ('nfs_export_id' not in params) or (params['nfs_export_id'] is None):
            raise ValueError("Missing the required parameter `nfs_export_id` when calling `delete_nfs_export`")


        resource_path = '/platform/2/protocols/nfs/exports/{NfsExportId}'.replace('{format}', 'json')
        path_params = {}
        if 'nfs_export_id' in params:
            path_params['NfsExportId'] = params['nfs_export_id']

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_nfs_nlm_session(self, nfs_nlm_session_id, **kwargs):
        """
        
        Delete an NLM session.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_nfs_nlm_session(nfs_nlm_session_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nfs_nlm_session_id: Delete an NLM session. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_nlm_session_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_nfs_nlm_session" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_nlm_session_id' is set
        if ('nfs_nlm_session_id' not in params) or (params['nfs_nlm_session_id'] is None):
            raise ValueError("Missing the required parameter `nfs_nlm_session_id` when calling `delete_nfs_nlm_session`")


        resource_path = '/platform/2/protocols/nfs/nlm/sessions/{NfsNlmSessionId}'.replace('{format}', 'json')
        path_params = {}
        if 'nfs_nlm_session_id' in params:
            path_params['NfsNlmSessionId'] = params['nfs_nlm_session_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_smb_openfile(self, smb_openfile_id, **kwargs):
        """
        
        Close the file in the SMB server.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_smb_openfile(smb_openfile_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str smb_openfile_id: Close the file in the SMB server. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['smb_openfile_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_smb_openfile" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'smb_openfile_id' is set
        if ('smb_openfile_id' not in params) or (params['smb_openfile_id'] is None):
            raise ValueError("Missing the required parameter `smb_openfile_id` when calling `delete_smb_openfile`")


        resource_path = '/platform/1/protocols/smb/openfiles/{SmbOpenfileId}'.replace('{format}', 'json')
        path_params = {}
        if 'smb_openfile_id' in params:
            path_params['SmbOpenfileId'] = params['smb_openfile_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_smb_session(self, smb_session_id, **kwargs):
        """
        
        Close the SMB session.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_smb_session(smb_session_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str smb_session_id: Close the SMB session. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['smb_session_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_smb_session" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'smb_session_id' is set
        if ('smb_session_id' not in params) or (params['smb_session_id'] is None):
            raise ValueError("Missing the required parameter `smb_session_id` when calling `delete_smb_session`")


        resource_path = '/platform/1/protocols/smb/sessions/{SmbSessionId}'.replace('{format}', 'json')
        path_params = {}
        if 'smb_session_id' in params:
            path_params['SmbSessionId'] = params['smb_session_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_smb_sessions_computer_user(self, smb_sessions_computer_user, computer, **kwargs):
        """
        
        Close the SMB session.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_smb_sessions_computer_user(smb_sessions_computer_user, computer, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str smb_sessions_computer_user: Close the SMB session. (required)
        :param str computer:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['smb_sessions_computer_user', 'computer']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_smb_sessions_computer_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'smb_sessions_computer_user' is set
        if ('smb_sessions_computer_user' not in params) or (params['smb_sessions_computer_user'] is None):
            raise ValueError("Missing the required parameter `smb_sessions_computer_user` when calling `delete_smb_sessions_computer_user`")
        # verify the required parameter 'computer' is set
        if ('computer' not in params) or (params['computer'] is None):
            raise ValueError("Missing the required parameter `computer` when calling `delete_smb_sessions_computer_user`")


        resource_path = '/platform/1/protocols/smb/sessions/{Computer}/{SmbSessionsComputerUser}'.replace('{format}', 'json')
        path_params = {}
        if 'smb_sessions_computer_user' in params:
            path_params['SmbSessionsComputerUser'] = params['smb_sessions_computer_user']
        if 'computer' in params:
            path_params['Computer'] = params['computer']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_smb_share(self, smb_share_id, **kwargs):
        """
        
        Delete the share.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_smb_share(smb_share_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str smb_share_id: Delete the share. (required)
        :param str zone: Zone which contains this share.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['smb_share_id', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_smb_share" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'smb_share_id' is set
        if ('smb_share_id' not in params) or (params['smb_share_id'] is None):
            raise ValueError("Missing the required parameter `smb_share_id` when calling `delete_smb_share`")


        resource_path = '/platform/1/protocols/smb/shares/{SmbShareId}'.replace('{format}', 'json')
        path_params = {}
        if 'smb_share_id' in params:
            path_params['SmbShareId'] = params['smb_share_id']

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_smb_shares(self, **kwargs):
        """
        
        Delete multiple smb shares.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_smb_shares(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_smb_shares" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/protocols/smb/shares'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_hdfs_proxyuser(self, hdfs_proxyuser_id, **kwargs):
        """
        
        List all proxyusers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_hdfs_proxyuser(hdfs_proxyuser_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hdfs_proxyuser_id: List all proxyusers. (required)
        :return: HdfsProxyusers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hdfs_proxyuser_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hdfs_proxyuser" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'hdfs_proxyuser_id' is set
        if ('hdfs_proxyuser_id' not in params) or (params['hdfs_proxyuser_id'] is None):
            raise ValueError("Missing the required parameter `hdfs_proxyuser_id` when calling `get_hdfs_proxyuser`")


        resource_path = '/platform/1/protocols/hdfs/proxyusers/{HdfsProxyuserId}'.replace('{format}', 'json')
        path_params = {}
        if 'hdfs_proxyuser_id' in params:
            path_params['HdfsProxyuserId'] = params['hdfs_proxyuser_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HdfsProxyusers',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_hdfs_rack(self, hdfs_rack_id, **kwargs):
        """
        
        Retrieve the HDFS rack.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_hdfs_rack(hdfs_rack_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str hdfs_rack_id: Retrieve the HDFS rack. (required)
        :return: HdfsRacks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hdfs_rack_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hdfs_rack" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'hdfs_rack_id' is set
        if ('hdfs_rack_id' not in params) or (params['hdfs_rack_id'] is None):
            raise ValueError("Missing the required parameter `hdfs_rack_id` when calling `get_hdfs_rack`")


        resource_path = '/platform/1/protocols/hdfs/racks/{HdfsRackId}'.replace('{format}', 'json')
        path_params = {}
        if 'hdfs_rack_id' in params:
            path_params['HdfsRackId'] = params['hdfs_rack_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HdfsRacks',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_hdfs_settings(self, **kwargs):
        """
        
        Retrieve HDFS properties.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_hdfs_settings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: HdfsSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hdfs_settings" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/protocols/hdfs/settings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HdfsSettings',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_nfs_aliase(self, nfs_aliase_id, **kwargs):
        """
        
        Retrieve export information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nfs_aliase(nfs_aliase_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nfs_aliase_id: Retrieve export information. (required)
        :param str scope: If specified as effective or not specified, all export fields are shown.  If specified as user, only fields with non-default values are shown.
        :param str zone: Access zone
        :return: NfsAliases
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_aliase_id', 'scope', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nfs_aliase" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_aliase_id' is set
        if ('nfs_aliase_id' not in params) or (params['nfs_aliase_id'] is None):
            raise ValueError("Missing the required parameter `nfs_aliase_id` when calling `get_nfs_aliase`")

        if 'nfs_aliase_id' in params:
            # tag this parameter so that it can be url encoded with quote_plus
            # by the api_client code because it contains a '/' character that
            # needs to be url encoded.
            params['nfs_aliase_id'] = "__x-isi-url-encode-path-param__{0}".format(params['nfs_aliase_id'])

        resource_path = '/platform/2/protocols/nfs/aliases/{NfsAliaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'nfs_aliase_id' in params:
            path_params['NfsAliaseId'] = params['nfs_aliase_id']

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsAliases',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_nfs_check(self, **kwargs):
        """
        
        Retrieve NFS export validation information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nfs_check(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str zone: Access zone
        :return: NfsCheckExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nfs_check" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/2/protocols/nfs/check'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsCheckExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_nfs_export(self, nfs_export_id, **kwargs):
        """
        
        Retrieve export information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nfs_export(nfs_export_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nfs_export_id: Retrieve export information. (required)
        :param str scope: If specified as effective or not specified, all export fields are shown.  If specified as user, only fields with non-default values are shown.
        :param str zone: Access zone
        :return: NfsExports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_export_id', 'scope', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nfs_export" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_export_id' is set
        if ('nfs_export_id' not in params) or (params['nfs_export_id'] is None):
            raise ValueError("Missing the required parameter `nfs_export_id` when calling `get_nfs_export`")


        resource_path = '/platform/2/protocols/nfs/exports/{NfsExportId}'.replace('{format}', 'json')
        path_params = {}
        if 'nfs_export_id' in params:
            path_params['NfsExportId'] = params['nfs_export_id']

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsExports',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_nfs_exports_summary(self, **kwargs):
        """
        
        Retrieve NFS export summary information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nfs_exports_summary(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str zone: Access zone
        :return: NfsExportsSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nfs_exports_summary" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/2/protocols/nfs/exports-summary'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsExportsSummary',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_nfs_nlm_locks(self, **kwargs):
        """
        
        List all NLM locks.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nfs_nlm_locks(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: NfsNlmLocks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nfs_nlm_locks" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_nfs_nlm_locks`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/2/protocols/nfs/nlm/locks'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsNlmLocks',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_nfs_nlm_sessions(self, **kwargs):
        """
        
        List all NLM sessions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nfs_nlm_sessions(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: NfsNlmSessions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nfs_nlm_sessions" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_nfs_nlm_sessions`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/2/protocols/nfs/nlm/sessions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsNlmSessions',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_nfs_nlm_waiters(self, **kwargs):
        """
        
        List all NLM lock waiters.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nfs_nlm_waiters(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: NfsNlmWaiters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nfs_nlm_waiters" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_nfs_nlm_waiters`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/2/protocols/nfs/nlm/waiters'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsNlmWaiters',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_nfs_settings_export(self, **kwargs):
        """
        
        Retrieve export information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nfs_settings_export(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :param str zone: Access zone
        :return: NfsSettingsExport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nfs_settings_export" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/2/protocols/nfs/settings/export'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsSettingsExport',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_nfs_settings_global(self, **kwargs):
        """
        
        Retrieve the NFS configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nfs_settings_global(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: NfsSettingsGlobal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nfs_settings_global" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/2/protocols/nfs/settings/global'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsSettingsGlobal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_nfs_settings_zone(self, **kwargs):
        """
        
        Retrieve the NFS server settings for this zone.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_nfs_settings_zone(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: NfsSettingsZone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nfs_settings_zone" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/2/protocols/nfs/settings/zone'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsSettingsZone',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_smb_openfiles(self, **kwargs):
        """
        
        List open files.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_smb_openfiles(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: Order results by this field. Default is id.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: SmbOpenfiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_smb_openfiles" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_smb_openfiles`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/protocols/smb/openfiles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SmbOpenfiles',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_smb_sessions(self, **kwargs):
        """
        
        List open sessions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_smb_sessions(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: Order results by this field.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: SmbSessions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_smb_sessions" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_smb_sessions`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/protocols/smb/sessions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SmbSessions',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_smb_settings_global(self, **kwargs):
        """
        
        List all settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_smb_settings_global(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: SmbSettingsGlobal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_smb_settings_global" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/protocols/smb/settings/global'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SmbSettingsGlobal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_smb_settings_share(self, **kwargs):
        """
        
        List all settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_smb_settings_share(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :param str zone: Zone which contains these share settings.
        :return: SmbSettingsShare
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_smb_settings_share" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/protocols/smb/settings/share'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SmbSettingsShare',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_smb_share(self, smb_share_id, **kwargs):
        """
        
        Retrieve share.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_smb_share(smb_share_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str smb_share_id: Retrieve share. (required)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :param bool resolve_names: If true, resolve group and user names in personas.
        :param str zone: Zone which contains this share.
        :return: SmbShares
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['smb_share_id', 'scope', 'resolve_names', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_smb_share" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'smb_share_id' is set
        if ('smb_share_id' not in params) or (params['smb_share_id'] is None):
            raise ValueError("Missing the required parameter `smb_share_id` when calling `get_smb_share`")


        resource_path = '/platform/1/protocols/smb/shares/{SmbShareId}'.replace('{format}', 'json')
        path_params = {}
        if 'smb_share_id' in params:
            path_params['SmbShareId'] = params['smb_share_id']

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SmbShares',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_smb_shares_summary(self, **kwargs):
        """
        
        Return summary information about shares.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_smb_shares_summary(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SmbSharesSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_smb_shares_summary" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/protocols/smb/shares-summary'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SmbSharesSummary',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_hdfs_proxyusers(self, **kwargs):
        """
        
        List all proxyusers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_hdfs_proxyusers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: HdfsProxyusers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_hdfs_proxyusers" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/protocols/hdfs/proxyusers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HdfsProxyusers',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_hdfs_racks(self, **kwargs):
        """
        
        List all racks.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_hdfs_racks(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: HdfsRacksExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_hdfs_racks" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/protocols/hdfs/racks'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HdfsRacksExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_nfs_aliases(self, **kwargs):
        """
        
        List all NFS aliases.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_nfs_aliases(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str zone: Access zone
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param int limit: Return no more than this many results at once (see resume).
        :param bool check: Check for conflicts when listing exports.
        :param str dir: The direction of the sort.
        :return: NfsAliasesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'zone', 'resume', 'limit', 'check', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_nfs_aliases" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_nfs_aliases`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/2/protocols/nfs/aliases'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'check' in params:
            query_params['check'] = params['check']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsAliasesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_nfs_exports(self, **kwargs):
        """
        
        List all NFS exports.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_nfs_exports(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param str zone: Access zone
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param int limit: Return no more than this many results at once (see resume).
        :param str scope: If specified as effective or not specified, all export fields are shown.  If specified as user, only fields with non-default values are shown.
        :param bool check: Check for conflicts when listing exports.
        :param str dir: The direction of the sort.
        :return: NfsExportsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'zone', 'resume', 'limit', 'scope', 'check', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_nfs_exports" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_nfs_exports`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/2/protocols/nfs/exports'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'scope' in params:
            query_params['scope'] = params['scope']
        if 'check' in params:
            query_params['check'] = params['check']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NfsExportsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_smb_shares(self, **kwargs):
        """
        
        List all shares.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_smb_shares(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: Order results by this field. Default is id.
        :param str zone: Zone which contains this share.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param bool resolve_names: If true, resolve group and user names in personas.
        :param int limit: Return no more than this many results at once (see resume).
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :param str dir: The direction of the sort.
        :return: SmbSharesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'zone', 'resume', 'resolve_names', 'limit', 'scope', 'dir']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_smb_shares" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_smb_shares`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/protocols/smb/shares'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'scope' in params:
            query_params['scope'] = params['scope']
        if 'dir' in params:
            query_params['dir'] = params['dir']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SmbSharesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_hdfs_proxyuser(self, hdfs_proxyuser, hdfs_proxyuser_id, **kwargs):
        """
        
        Create a new HDFS proxyuser.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_hdfs_proxyuser(hdfs_proxyuser, hdfs_proxyuser_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Empty hdfs_proxyuser:  (required)
        :param str hdfs_proxyuser_id: Create a new HDFS proxyuser. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hdfs_proxyuser', 'hdfs_proxyuser_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_hdfs_proxyuser" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'hdfs_proxyuser' is set
        if ('hdfs_proxyuser' not in params) or (params['hdfs_proxyuser'] is None):
            raise ValueError("Missing the required parameter `hdfs_proxyuser` when calling `update_hdfs_proxyuser`")
        # verify the required parameter 'hdfs_proxyuser_id' is set
        if ('hdfs_proxyuser_id' not in params) or (params['hdfs_proxyuser_id'] is None):
            raise ValueError("Missing the required parameter `hdfs_proxyuser_id` when calling `update_hdfs_proxyuser`")


        resource_path = '/platform/1/protocols/hdfs/proxyusers/{HdfsProxyuserId}'.replace('{format}', 'json')
        path_params = {}
        if 'hdfs_proxyuser_id' in params:
            path_params['HdfsProxyuserId'] = params['hdfs_proxyuser_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'hdfs_proxyuser' in params:
            body_params = params['hdfs_proxyuser']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_hdfs_rack(self, hdfs_rack, hdfs_rack_id, **kwargs):
        """
        
        Modify the HDFS rack

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_hdfs_rack(hdfs_rack, hdfs_rack_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HdfsRack hdfs_rack:  (required)
        :param str hdfs_rack_id: Modify the HDFS rack (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hdfs_rack', 'hdfs_rack_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_hdfs_rack" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'hdfs_rack' is set
        if ('hdfs_rack' not in params) or (params['hdfs_rack'] is None):
            raise ValueError("Missing the required parameter `hdfs_rack` when calling `update_hdfs_rack`")
        # verify the required parameter 'hdfs_rack_id' is set
        if ('hdfs_rack_id' not in params) or (params['hdfs_rack_id'] is None):
            raise ValueError("Missing the required parameter `hdfs_rack_id` when calling `update_hdfs_rack`")


        resource_path = '/platform/1/protocols/hdfs/racks/{HdfsRackId}'.replace('{format}', 'json')
        path_params = {}
        if 'hdfs_rack_id' in params:
            path_params['HdfsRackId'] = params['hdfs_rack_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'hdfs_rack' in params:
            body_params = params['hdfs_rack']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_hdfs_settings(self, hdfs_settings, **kwargs):
        """
        
        Modify HDFS properties.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_hdfs_settings(hdfs_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HdfsSettingsSettings hdfs_settings:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hdfs_settings']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_hdfs_settings" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'hdfs_settings' is set
        if ('hdfs_settings' not in params) or (params['hdfs_settings'] is None):
            raise ValueError("Missing the required parameter `hdfs_settings` when calling `update_hdfs_settings`")


        resource_path = '/platform/1/protocols/hdfs/settings'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'hdfs_settings' in params:
            body_params = params['hdfs_settings']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_nfs_aliase(self, nfs_aliase, nfs_aliase_id, **kwargs):
        """
        
        Modify the alias. All input fields are optional, but one or more must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_nfs_aliase(nfs_aliase, nfs_aliase_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NfsAliase nfs_aliase:  (required)
        :param str nfs_aliase_id: Modify the alias. All input fields are optional, but one or more must be supplied. (required)
        :param str zone: Access zone
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_aliase', 'nfs_aliase_id', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_nfs_aliase" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_aliase' is set
        if ('nfs_aliase' not in params) or (params['nfs_aliase'] is None):
            raise ValueError("Missing the required parameter `nfs_aliase` when calling `update_nfs_aliase`")
        # verify the required parameter 'nfs_aliase_id' is set
        if ('nfs_aliase_id' not in params) or (params['nfs_aliase_id'] is None):
            raise ValueError("Missing the required parameter `nfs_aliase_id` when calling `update_nfs_aliase`")

        if 'nfs_aliase_id' in params:
            # tag this parameter so that it can be url encoded with quote_plus
            # by the api_client code because it contains a '/' character that
            # needs to be url encoded.
            params['nfs_aliase_id'] = "__x-isi-url-encode-path-param__{0}".format(params['nfs_aliase_id'])

        resource_path = '/platform/2/protocols/nfs/aliases/{NfsAliaseId}'.replace('{format}', 'json')
        path_params = {}
        if 'nfs_aliase_id' in params:
            path_params['NfsAliaseId'] = params['nfs_aliase_id']

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nfs_aliase' in params:
            body_params = params['nfs_aliase']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_nfs_export(self, nfs_export, nfs_export_id, **kwargs):
        """
        
        Modify the export. All input fields are optional, but one or more must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_nfs_export(nfs_export, nfs_export_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NfsExport nfs_export:  (required)
        :param str nfs_export_id: Modify the export. All input fields are optional, but one or more must be supplied. (required)
        :param bool force: If true, the export will be updated even if that change conflicts with another export.
        :param str zone: Access zone
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_export', 'nfs_export_id', 'force', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_nfs_export" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_export' is set
        if ('nfs_export' not in params) or (params['nfs_export'] is None):
            raise ValueError("Missing the required parameter `nfs_export` when calling `update_nfs_export`")
        # verify the required parameter 'nfs_export_id' is set
        if ('nfs_export_id' not in params) or (params['nfs_export_id'] is None):
            raise ValueError("Missing the required parameter `nfs_export_id` when calling `update_nfs_export`")


        resource_path = '/platform/2/protocols/nfs/exports/{NfsExportId}'.replace('{format}', 'json')
        path_params = {}
        if 'nfs_export_id' in params:
            path_params['NfsExportId'] = params['nfs_export_id']

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nfs_export' in params:
            body_params = params['nfs_export']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_nfs_settings_export(self, nfs_settings_export, **kwargs):
        """
        
        Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_nfs_settings_export(nfs_settings_export, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NfsSettingsExportSettings nfs_settings_export:  (required)
        :param str zone: Access zone
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_settings_export', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_nfs_settings_export" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_settings_export' is set
        if ('nfs_settings_export' not in params) or (params['nfs_settings_export'] is None):
            raise ValueError("Missing the required parameter `nfs_settings_export` when calling `update_nfs_settings_export`")


        resource_path = '/platform/2/protocols/nfs/settings/export'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nfs_settings_export' in params:
            body_params = params['nfs_settings_export']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_nfs_settings_global(self, nfs_settings_global, **kwargs):
        """
        
        Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_nfs_settings_global(nfs_settings_global, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NfsSettingsGlobalSettings nfs_settings_global:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_settings_global']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_nfs_settings_global" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_settings_global' is set
        if ('nfs_settings_global' not in params) or (params['nfs_settings_global'] is None):
            raise ValueError("Missing the required parameter `nfs_settings_global` when calling `update_nfs_settings_global`")


        resource_path = '/platform/2/protocols/nfs/settings/global'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nfs_settings_global' in params:
            body_params = params['nfs_settings_global']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_nfs_settings_zone(self, nfs_settings_zone, **kwargs):
        """
        
        Modify the NFS server settings for this zone.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_nfs_settings_zone(nfs_settings_zone, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NfsSettingsZoneSettings nfs_settings_zone:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nfs_settings_zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_nfs_settings_zone" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nfs_settings_zone' is set
        if ('nfs_settings_zone' not in params) or (params['nfs_settings_zone'] is None):
            raise ValueError("Missing the required parameter `nfs_settings_zone` when calling `update_nfs_settings_zone`")


        resource_path = '/platform/2/protocols/nfs/settings/zone'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nfs_settings_zone' in params:
            body_params = params['nfs_settings_zone']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_smb_settings_global(self, smb_settings_global, **kwargs):
        """
        
        Modify one or more settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_smb_settings_global(smb_settings_global, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SmbSettingsGlobalSettings smb_settings_global:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['smb_settings_global']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_smb_settings_global" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'smb_settings_global' is set
        if ('smb_settings_global' not in params) or (params['smb_settings_global'] is None):
            raise ValueError("Missing the required parameter `smb_settings_global` when calling `update_smb_settings_global`")


        resource_path = '/platform/1/protocols/smb/settings/global'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'smb_settings_global' in params:
            body_params = params['smb_settings_global']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_smb_settings_share(self, smb_settings_share, **kwargs):
        """
        
        Modify one or more settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_smb_settings_share(smb_settings_share, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SmbSettingsShareSettings smb_settings_share:  (required)
        :param str zone: Zone which contains these share settings.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['smb_settings_share', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_smb_settings_share" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'smb_settings_share' is set
        if ('smb_settings_share' not in params) or (params['smb_settings_share'] is None):
            raise ValueError("Missing the required parameter `smb_settings_share` when calling `update_smb_settings_share`")


        resource_path = '/platform/1/protocols/smb/settings/share'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'smb_settings_share' in params:
            body_params = params['smb_settings_share']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_smb_share(self, smb_share, smb_share_id, **kwargs):
        """
        
        Modify share. All input fields are optional, but one or must be supplied.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_smb_share(smb_share, smb_share_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SmbShare smb_share:  (required)
        :param str smb_share_id: Modify share. All input fields are optional, but one or must be supplied. (required)
        :param str zone: Zone which contains this share.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['smb_share', 'smb_share_id', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_smb_share" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'smb_share' is set
        if ('smb_share' not in params) or (params['smb_share'] is None):
            raise ValueError("Missing the required parameter `smb_share` when calling `update_smb_share`")
        # verify the required parameter 'smb_share_id' is set
        if ('smb_share_id' not in params) or (params['smb_share_id'] is None):
            raise ValueError("Missing the required parameter `smb_share_id` when calling `update_smb_share`")


        resource_path = '/platform/1/protocols/smb/shares/{SmbShareId}'.replace('{format}', 'json')
        path_params = {}
        if 'smb_share_id' in params:
            path_params['SmbShareId'] = params['smb_share_id']

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'smb_share' in params:
            body_params = params['smb_share']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
