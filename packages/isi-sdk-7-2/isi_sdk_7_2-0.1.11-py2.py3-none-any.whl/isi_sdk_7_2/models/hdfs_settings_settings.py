# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class HdfsSettingsSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HdfsSettingsSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'default_block_size': 'int',
            'default_checksum_type': 'str',
            'default_sendbuf_size': 'int',
            'server_log_level': 'str',
            'server_threads': 'int'
        }

        self.attribute_map = {
            'default_block_size': 'default_block_size',
            'default_checksum_type': 'default_checksum_type',
            'default_sendbuf_size': 'default_sendbuf_size',
            'server_log_level': 'server_log_level',
            'server_threads': 'server_threads'
        }

        self._default_block_size = None
        self._default_checksum_type = None
        self._default_sendbuf_size = None
        self._server_log_level = None
        self._server_threads = None

    @property
    def default_block_size(self):
        """
        Gets the default_block_size of this HdfsSettingsSettings.
        Block size (size=2**value) reported by HDFS server.

        :return: The default_block_size of this HdfsSettingsSettings.
        :rtype: int
        """
        return self._default_block_size

    @default_block_size.setter
    def default_block_size(self, default_block_size):
        """
        Sets the default_block_size of this HdfsSettingsSettings.
        Block size (size=2**value) reported by HDFS server.

        :param default_block_size: The default_block_size of this HdfsSettingsSettings.
        :type: int
        """
        
        self._default_block_size = default_block_size

    @property
    def default_checksum_type(self):
        """
        Gets the default_checksum_type of this HdfsSettingsSettings.
        Checksum type reported by HDFS server.

        :return: The default_checksum_type of this HdfsSettingsSettings.
        :rtype: str
        """
        return self._default_checksum_type

    @default_checksum_type.setter
    def default_checksum_type(self, default_checksum_type):
        """
        Sets the default_checksum_type of this HdfsSettingsSettings.
        Checksum type reported by HDFS server.

        :param default_checksum_type: The default_checksum_type of this HdfsSettingsSettings.
        :type: str
        """
        allowed_values = ["none", "crc32", "crc32c"]
        if default_checksum_type is not None and default_checksum_type not in allowed_values:
            raise ValueError(
                "Invalid value for `default_checksum_type`, must be one of {0}"
                .format(allowed_values)
            )

        self._default_checksum_type = default_checksum_type

    @property
    def default_sendbuf_size(self):
        """
        Gets the default_sendbuf_size of this HdfsSettingsSettings.
        Send Buffer size used by HDFS server.

        :return: The default_sendbuf_size of this HdfsSettingsSettings.
        :rtype: int
        """
        return self._default_sendbuf_size

    @default_sendbuf_size.setter
    def default_sendbuf_size(self, default_sendbuf_size):
        """
        Sets the default_sendbuf_size of this HdfsSettingsSettings.
        Send Buffer size used by HDFS server.

        :param default_sendbuf_size: The default_sendbuf_size of this HdfsSettingsSettings.
        :type: int
        """
        
        self._default_sendbuf_size = default_sendbuf_size

    @property
    def server_log_level(self):
        """
        Gets the server_log_level of this HdfsSettingsSettings.
        Log level for HDFS daemon.

        :return: The server_log_level of this HdfsSettingsSettings.
        :rtype: str
        """
        return self._server_log_level

    @server_log_level.setter
    def server_log_level(self, server_log_level):
        """
        Sets the server_log_level of this HdfsSettingsSettings.
        Log level for HDFS daemon.

        :param server_log_level: The server_log_level of this HdfsSettingsSettings.
        :type: str
        """
        allowed_values = ["emerg", "alert", "crit", "err", "warning", "notice", "info", "debug"]
        if server_log_level is not None and server_log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `server_log_level`, must be one of {0}"
                .format(allowed_values)
            )

        self._server_log_level = server_log_level

    @property
    def server_threads(self):
        """
        Gets the server_threads of this HdfsSettingsSettings.
        Number of worker threads for HDFS daemon.

        :return: The server_threads of this HdfsSettingsSettings.
        :rtype: int
        """
        return self._server_threads

    @server_threads.setter
    def server_threads(self, server_threads):
        """
        Sets the server_threads of this HdfsSettingsSettings.
        Number of worker threads for HDFS daemon.

        :param server_threads: The server_threads of this HdfsSettingsSettings.
        :type: int
        """
        
        self._server_threads = server_threads

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

