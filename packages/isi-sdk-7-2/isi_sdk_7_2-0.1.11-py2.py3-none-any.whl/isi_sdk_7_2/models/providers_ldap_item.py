# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ProvidersLdapItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProvidersLdapItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alternate_security_identities_attribute': 'str',
            'authentication': 'bool',
            'balance_servers': 'bool',
            'base_dn': 'str',
            'bind_dn': 'str',
            'bind_mechanism': 'str',
            'bind_password': 'str',
            'bind_timeout': 'int',
            'cache_entry_expiry': 'int',
            'certificate_authority_file': 'str',
            'check_online_interval': 'int',
            'cn_attribute': 'str',
            'create_home_directory': 'bool',
            'crypt_password_attribute': 'str',
            'email_attribute': 'str',
            'enabled': 'bool',
            'enumerate_groups': 'bool',
            'enumerate_users': 'bool',
            'findable_groups': 'list[str]',
            'findable_users': 'list[str]',
            'gecos_attribute': 'str',
            'gid_attribute': 'str',
            'group_base_dn': 'str',
            'group_domain': 'str',
            'group_filter': 'str',
            'group_members_attribute': 'str',
            'group_search_scope': 'str',
            'home_directory_template': 'str',
            'homedir_attribute': 'str',
            'ignore_tls_errors': 'bool',
            'listable_groups': 'list[str]',
            'listable_users': 'list[str]',
            'login_shell': 'str',
            'member_of_attribute': 'str',
            'name': 'str',
            'name_attribute': 'str',
            'netgroup_base_dn': 'str',
            'netgroup_filter': 'str',
            'netgroup_members_attribute': 'str',
            'netgroup_search_scope': 'str',
            'netgroup_triple_attribute': 'str',
            'normalize_groups': 'bool',
            'normalize_users': 'bool',
            'nt_password_attribute': 'str',
            'ntlm_support': 'str',
            'provider_domain': 'str',
            'require_secure_connection': 'bool',
            'restrict_findable': 'bool',
            'restrict_listable': 'bool',
            'search_scope': 'str',
            'search_timeout': 'int',
            'server_uris': 'list[str]',
            'shell_attribute': 'str',
            'uid_attribute': 'str',
            'unfindable_groups': 'list[str]',
            'unfindable_users': 'list[str]',
            'unique_group_members_attribute': 'str',
            'unlistable_groups': 'list[str]',
            'unlistable_users': 'list[str]',
            'user_base_dn': 'str',
            'user_domain': 'str',
            'user_filter': 'str',
            'user_search_scope': 'str'
        }

        self.attribute_map = {
            'alternate_security_identities_attribute': 'alternate_security_identities_attribute',
            'authentication': 'authentication',
            'balance_servers': 'balance_servers',
            'base_dn': 'base_dn',
            'bind_dn': 'bind_dn',
            'bind_mechanism': 'bind_mechanism',
            'bind_password': 'bind_password',
            'bind_timeout': 'bind_timeout',
            'cache_entry_expiry': 'cache_entry_expiry',
            'certificate_authority_file': 'certificate_authority_file',
            'check_online_interval': 'check_online_interval',
            'cn_attribute': 'cn_attribute',
            'create_home_directory': 'create_home_directory',
            'crypt_password_attribute': 'crypt_password_attribute',
            'email_attribute': 'email_attribute',
            'enabled': 'enabled',
            'enumerate_groups': 'enumerate_groups',
            'enumerate_users': 'enumerate_users',
            'findable_groups': 'findable_groups',
            'findable_users': 'findable_users',
            'gecos_attribute': 'gecos_attribute',
            'gid_attribute': 'gid_attribute',
            'group_base_dn': 'group_base_dn',
            'group_domain': 'group_domain',
            'group_filter': 'group_filter',
            'group_members_attribute': 'group_members_attribute',
            'group_search_scope': 'group_search_scope',
            'home_directory_template': 'home_directory_template',
            'homedir_attribute': 'homedir_attribute',
            'ignore_tls_errors': 'ignore_tls_errors',
            'listable_groups': 'listable_groups',
            'listable_users': 'listable_users',
            'login_shell': 'login_shell',
            'member_of_attribute': 'member_of_attribute',
            'name': 'name',
            'name_attribute': 'name_attribute',
            'netgroup_base_dn': 'netgroup_base_dn',
            'netgroup_filter': 'netgroup_filter',
            'netgroup_members_attribute': 'netgroup_members_attribute',
            'netgroup_search_scope': 'netgroup_search_scope',
            'netgroup_triple_attribute': 'netgroup_triple_attribute',
            'normalize_groups': 'normalize_groups',
            'normalize_users': 'normalize_users',
            'nt_password_attribute': 'nt_password_attribute',
            'ntlm_support': 'ntlm_support',
            'provider_domain': 'provider_domain',
            'require_secure_connection': 'require_secure_connection',
            'restrict_findable': 'restrict_findable',
            'restrict_listable': 'restrict_listable',
            'search_scope': 'search_scope',
            'search_timeout': 'search_timeout',
            'server_uris': 'server_uris',
            'shell_attribute': 'shell_attribute',
            'uid_attribute': 'uid_attribute',
            'unfindable_groups': 'unfindable_groups',
            'unfindable_users': 'unfindable_users',
            'unique_group_members_attribute': 'unique_group_members_attribute',
            'unlistable_groups': 'unlistable_groups',
            'unlistable_users': 'unlistable_users',
            'user_base_dn': 'user_base_dn',
            'user_domain': 'user_domain',
            'user_filter': 'user_filter',
            'user_search_scope': 'user_search_scope'
        }

        self._alternate_security_identities_attribute = None
        self._authentication = None
        self._balance_servers = None
        self._base_dn = None
        self._bind_dn = None
        self._bind_mechanism = None
        self._bind_password = None
        self._bind_timeout = None
        self._cache_entry_expiry = None
        self._certificate_authority_file = None
        self._check_online_interval = None
        self._cn_attribute = None
        self._create_home_directory = None
        self._crypt_password_attribute = None
        self._email_attribute = None
        self._enabled = None
        self._enumerate_groups = None
        self._enumerate_users = None
        self._findable_groups = None
        self._findable_users = None
        self._gecos_attribute = None
        self._gid_attribute = None
        self._group_base_dn = None
        self._group_domain = None
        self._group_filter = None
        self._group_members_attribute = None
        self._group_search_scope = None
        self._home_directory_template = None
        self._homedir_attribute = None
        self._ignore_tls_errors = None
        self._listable_groups = None
        self._listable_users = None
        self._login_shell = None
        self._member_of_attribute = None
        self._name = None
        self._name_attribute = None
        self._netgroup_base_dn = None
        self._netgroup_filter = None
        self._netgroup_members_attribute = None
        self._netgroup_search_scope = None
        self._netgroup_triple_attribute = None
        self._normalize_groups = None
        self._normalize_users = None
        self._nt_password_attribute = None
        self._ntlm_support = None
        self._provider_domain = None
        self._require_secure_connection = None
        self._restrict_findable = None
        self._restrict_listable = None
        self._search_scope = None
        self._search_timeout = None
        self._server_uris = None
        self._shell_attribute = None
        self._uid_attribute = None
        self._unfindable_groups = None
        self._unfindable_users = None
        self._unique_group_members_attribute = None
        self._unlistable_groups = None
        self._unlistable_users = None
        self._user_base_dn = None
        self._user_domain = None
        self._user_filter = None
        self._user_search_scope = None

    @property
    def alternate_security_identities_attribute(self):
        """
        Gets the alternate_security_identities_attribute of this ProvidersLdapItem.
        Specifies attribute name used when searching for alternate security identities.

        :return: The alternate_security_identities_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._alternate_security_identities_attribute

    @alternate_security_identities_attribute.setter
    def alternate_security_identities_attribute(self, alternate_security_identities_attribute):
        """
        Sets the alternate_security_identities_attribute of this ProvidersLdapItem.
        Specifies attribute name used when searching for alternate security identities.

        :param alternate_security_identities_attribute: The alternate_security_identities_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._alternate_security_identities_attribute = alternate_security_identities_attribute

    @property
    def authentication(self):
        """
        Gets the authentication of this ProvidersLdapItem.
        Enables use of provider for authentication as well as identity.

        :return: The authentication of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """
        Sets the authentication of this ProvidersLdapItem.
        Enables use of provider for authentication as well as identity.

        :param authentication: The authentication of this ProvidersLdapItem.
        :type: bool
        """
        
        self._authentication = authentication

    @property
    def balance_servers(self):
        """
        Gets the balance_servers of this ProvidersLdapItem.
        Makes provider connect to a random server.

        :return: The balance_servers of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._balance_servers

    @balance_servers.setter
    def balance_servers(self, balance_servers):
        """
        Sets the balance_servers of this ProvidersLdapItem.
        Makes provider connect to a random server.

        :param balance_servers: The balance_servers of this ProvidersLdapItem.
        :type: bool
        """
        
        self._balance_servers = balance_servers

    @property
    def base_dn(self):
        """
        Gets the base_dn of this ProvidersLdapItem.
        Sets root of tree in which to search identities.

        :return: The base_dn of this ProvidersLdapItem.
        :rtype: str
        """
        return self._base_dn

    @base_dn.setter
    def base_dn(self, base_dn):
        """
        Sets the base_dn of this ProvidersLdapItem.
        Sets root of tree in which to search identities.

        :param base_dn: The base_dn of this ProvidersLdapItem.
        :type: str
        """
        
        self._base_dn = base_dn

    @property
    def bind_dn(self):
        """
        Gets the bind_dn of this ProvidersLdapItem.
        Sets distinguished name used when binding to LDAP server.

        :return: The bind_dn of this ProvidersLdapItem.
        :rtype: str
        """
        return self._bind_dn

    @bind_dn.setter
    def bind_dn(self, bind_dn):
        """
        Sets the bind_dn of this ProvidersLdapItem.
        Sets distinguished name used when binding to LDAP server.

        :param bind_dn: The bind_dn of this ProvidersLdapItem.
        :type: str
        """
        
        self._bind_dn = bind_dn

    @property
    def bind_mechanism(self):
        """
        Gets the bind_mechanism of this ProvidersLdapItem.
        Bind mechanism to use when connecting to an LDAP server; 'simple' is the only supported option.

        :return: The bind_mechanism of this ProvidersLdapItem.
        :rtype: str
        """
        return self._bind_mechanism

    @bind_mechanism.setter
    def bind_mechanism(self, bind_mechanism):
        """
        Sets the bind_mechanism of this ProvidersLdapItem.
        Bind mechanism to use when connecting to an LDAP server; 'simple' is the only supported option.

        :param bind_mechanism: The bind_mechanism of this ProvidersLdapItem.
        :type: str
        """
        allowed_values = ["simple", "gssapi", "digest-md5"]
        if bind_mechanism is not None and bind_mechanism not in allowed_values:
            raise ValueError(
                "Invalid value for `bind_mechanism`, must be one of {0}"
                .format(allowed_values)
            )

        self._bind_mechanism = bind_mechanism

    @property
    def bind_password(self):
        """
        Gets the bind_password of this ProvidersLdapItem.
        Sets password for distinguished name used when binding to the LDAP server.

        :return: The bind_password of this ProvidersLdapItem.
        :rtype: str
        """
        return self._bind_password

    @bind_password.setter
    def bind_password(self, bind_password):
        """
        Sets the bind_password of this ProvidersLdapItem.
        Sets password for distinguished name used when binding to the LDAP server.

        :param bind_password: The bind_password of this ProvidersLdapItem.
        :type: str
        """
        
        self._bind_password = bind_password

    @property
    def bind_timeout(self):
        """
        Gets the bind_timeout of this ProvidersLdapItem.
        Sets timeout in seconds when binding to LDAP server.

        :return: The bind_timeout of this ProvidersLdapItem.
        :rtype: int
        """
        return self._bind_timeout

    @bind_timeout.setter
    def bind_timeout(self, bind_timeout):
        """
        Sets the bind_timeout of this ProvidersLdapItem.
        Sets timeout in seconds when binding to LDAP server.

        :param bind_timeout: The bind_timeout of this ProvidersLdapItem.
        :type: int
        """
        
        self._bind_timeout = bind_timeout

    @property
    def cache_entry_expiry(self):
        """
        Gets the cache_entry_expiry of this ProvidersLdapItem.
        Specifies amount of time in seconds to cache a user/group.

        :return: The cache_entry_expiry of this ProvidersLdapItem.
        :rtype: int
        """
        return self._cache_entry_expiry

    @cache_entry_expiry.setter
    def cache_entry_expiry(self, cache_entry_expiry):
        """
        Sets the cache_entry_expiry of this ProvidersLdapItem.
        Specifies amount of time in seconds to cache a user/group.

        :param cache_entry_expiry: The cache_entry_expiry of this ProvidersLdapItem.
        :type: int
        """
        
        self._cache_entry_expiry = cache_entry_expiry

    @property
    def certificate_authority_file(self):
        """
        Gets the certificate_authority_file of this ProvidersLdapItem.
        Sets path to root certificates file.

        :return: The certificate_authority_file of this ProvidersLdapItem.
        :rtype: str
        """
        return self._certificate_authority_file

    @certificate_authority_file.setter
    def certificate_authority_file(self, certificate_authority_file):
        """
        Sets the certificate_authority_file of this ProvidersLdapItem.
        Sets path to root certificates file.

        :param certificate_authority_file: The certificate_authority_file of this ProvidersLdapItem.
        :type: str
        """
        
        self._certificate_authority_file = certificate_authority_file

    @property
    def check_online_interval(self):
        """
        Gets the check_online_interval of this ProvidersLdapItem.
        Specifies time in seconds between provider online checks.

        :return: The check_online_interval of this ProvidersLdapItem.
        :rtype: int
        """
        return self._check_online_interval

    @check_online_interval.setter
    def check_online_interval(self, check_online_interval):
        """
        Sets the check_online_interval of this ProvidersLdapItem.
        Specifies time in seconds between provider online checks.

        :param check_online_interval: The check_online_interval of this ProvidersLdapItem.
        :type: int
        """
        
        self._check_online_interval = check_online_interval

    @property
    def cn_attribute(self):
        """
        Gets the cn_attribute of this ProvidersLdapItem.
        Specifies canonical name.

        :return: The cn_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._cn_attribute

    @cn_attribute.setter
    def cn_attribute(self, cn_attribute):
        """
        Sets the cn_attribute of this ProvidersLdapItem.
        Specifies canonical name.

        :param cn_attribute: The cn_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._cn_attribute = cn_attribute

    @property
    def create_home_directory(self):
        """
        Gets the create_home_directory of this ProvidersLdapItem.
        Automatically create home directory on first login.

        :return: The create_home_directory of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._create_home_directory

    @create_home_directory.setter
    def create_home_directory(self, create_home_directory):
        """
        Sets the create_home_directory of this ProvidersLdapItem.
        Automatically create home directory on first login.

        :param create_home_directory: The create_home_directory of this ProvidersLdapItem.
        :type: bool
        """
        
        self._create_home_directory = create_home_directory

    @property
    def crypt_password_attribute(self):
        """
        Gets the crypt_password_attribute of this ProvidersLdapItem.
        Sets hashed password value.

        :return: The crypt_password_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._crypt_password_attribute

    @crypt_password_attribute.setter
    def crypt_password_attribute(self, crypt_password_attribute):
        """
        Sets the crypt_password_attribute of this ProvidersLdapItem.
        Sets hashed password value.

        :param crypt_password_attribute: The crypt_password_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._crypt_password_attribute = crypt_password_attribute

    @property
    def email_attribute(self):
        """
        Gets the email_attribute of this ProvidersLdapItem.
        Sets the LDAP Email attribute.

        :return: The email_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._email_attribute

    @email_attribute.setter
    def email_attribute(self, email_attribute):
        """
        Sets the email_attribute of this ProvidersLdapItem.
        Sets the LDAP Email attribute.

        :param email_attribute: The email_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._email_attribute = email_attribute

    @property
    def enabled(self):
        """
        Gets the enabled of this ProvidersLdapItem.
        Enables the LDAP provider.

        :return: The enabled of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ProvidersLdapItem.
        Enables the LDAP provider.

        :param enabled: The enabled of this ProvidersLdapItem.
        :type: bool
        """
        
        self._enabled = enabled

    @property
    def enumerate_groups(self):
        """
        Gets the enumerate_groups of this ProvidersLdapItem.
        Enables provider to enumerate groups.

        :return: The enumerate_groups of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._enumerate_groups

    @enumerate_groups.setter
    def enumerate_groups(self, enumerate_groups):
        """
        Sets the enumerate_groups of this ProvidersLdapItem.
        Enables provider to enumerate groups.

        :param enumerate_groups: The enumerate_groups of this ProvidersLdapItem.
        :type: bool
        """
        
        self._enumerate_groups = enumerate_groups

    @property
    def enumerate_users(self):
        """
        Gets the enumerate_users of this ProvidersLdapItem.
        Enables provider to enumerate users.

        :return: The enumerate_users of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._enumerate_users

    @enumerate_users.setter
    def enumerate_users(self, enumerate_users):
        """
        Sets the enumerate_users of this ProvidersLdapItem.
        Enables provider to enumerate users.

        :param enumerate_users: The enumerate_users of this ProvidersLdapItem.
        :type: bool
        """
        
        self._enumerate_users = enumerate_users

    @property
    def findable_groups(self):
        """
        Gets the findable_groups of this ProvidersLdapItem.
        Sets list of groups that can be resolved.

        :return: The findable_groups of this ProvidersLdapItem.
        :rtype: list[str]
        """
        return self._findable_groups

    @findable_groups.setter
    def findable_groups(self, findable_groups):
        """
        Sets the findable_groups of this ProvidersLdapItem.
        Sets list of groups that can be resolved.

        :param findable_groups: The findable_groups of this ProvidersLdapItem.
        :type: list[str]
        """
        
        self._findable_groups = findable_groups

    @property
    def findable_users(self):
        """
        Gets the findable_users of this ProvidersLdapItem.
        Sets list of users that can be resolved.

        :return: The findable_users of this ProvidersLdapItem.
        :rtype: list[str]
        """
        return self._findable_users

    @findable_users.setter
    def findable_users(self, findable_users):
        """
        Sets the findable_users of this ProvidersLdapItem.
        Sets list of users that can be resolved.

        :param findable_users: The findable_users of this ProvidersLdapItem.
        :type: list[str]
        """
        
        self._findable_users = findable_users

    @property
    def gecos_attribute(self):
        """
        Gets the gecos_attribute of this ProvidersLdapItem.
        Sets the LDAP GECOS attribute.

        :return: The gecos_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._gecos_attribute

    @gecos_attribute.setter
    def gecos_attribute(self, gecos_attribute):
        """
        Sets the gecos_attribute of this ProvidersLdapItem.
        Sets the LDAP GECOS attribute.

        :param gecos_attribute: The gecos_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._gecos_attribute = gecos_attribute

    @property
    def gid_attribute(self):
        """
        Gets the gid_attribute of this ProvidersLdapItem.
        Sets the LDAP GID attribute.

        :return: The gid_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._gid_attribute

    @gid_attribute.setter
    def gid_attribute(self, gid_attribute):
        """
        Sets the gid_attribute of this ProvidersLdapItem.
        Sets the LDAP GID attribute.

        :param gid_attribute: The gid_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._gid_attribute = gid_attribute

    @property
    def group_base_dn(self):
        """
        Gets the group_base_dn of this ProvidersLdapItem.
        Sets distinguished name of the entry at which to start LDAP searches for groups.

        :return: The group_base_dn of this ProvidersLdapItem.
        :rtype: str
        """
        return self._group_base_dn

    @group_base_dn.setter
    def group_base_dn(self, group_base_dn):
        """
        Sets the group_base_dn of this ProvidersLdapItem.
        Sets distinguished name of the entry at which to start LDAP searches for groups.

        :param group_base_dn: The group_base_dn of this ProvidersLdapItem.
        :type: str
        """
        
        self._group_base_dn = group_base_dn

    @property
    def group_domain(self):
        """
        Gets the group_domain of this ProvidersLdapItem.
        Domain used to qualify groups for this provider.

        :return: The group_domain of this ProvidersLdapItem.
        :rtype: str
        """
        return self._group_domain

    @group_domain.setter
    def group_domain(self, group_domain):
        """
        Sets the group_domain of this ProvidersLdapItem.
        Domain used to qualify groups for this provider.

        :param group_domain: The group_domain of this ProvidersLdapItem.
        :type: str
        """
        
        self._group_domain = group_domain

    @property
    def group_filter(self):
        """
        Gets the group_filter of this ProvidersLdapItem.
        Sets LDAP filter for group objects.

        :return: The group_filter of this ProvidersLdapItem.
        :rtype: str
        """
        return self._group_filter

    @group_filter.setter
    def group_filter(self, group_filter):
        """
        Sets the group_filter of this ProvidersLdapItem.
        Sets LDAP filter for group objects.

        :param group_filter: The group_filter of this ProvidersLdapItem.
        :type: str
        """
        
        self._group_filter = group_filter

    @property
    def group_members_attribute(self):
        """
        Gets the group_members_attribute of this ProvidersLdapItem.
        Sets the LDAP Group Members attribute.

        :return: The group_members_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._group_members_attribute

    @group_members_attribute.setter
    def group_members_attribute(self, group_members_attribute):
        """
        Sets the group_members_attribute of this ProvidersLdapItem.
        Sets the LDAP Group Members attribute.

        :param group_members_attribute: The group_members_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._group_members_attribute = group_members_attribute

    @property
    def group_search_scope(self):
        """
        Gets the group_search_scope of this ProvidersLdapItem.
        Defines the depth from the base DN to perform LDAP searches.

        :return: The group_search_scope of this ProvidersLdapItem.
        :rtype: str
        """
        return self._group_search_scope

    @group_search_scope.setter
    def group_search_scope(self, group_search_scope):
        """
        Sets the group_search_scope of this ProvidersLdapItem.
        Defines the depth from the base DN to perform LDAP searches.

        :param group_search_scope: The group_search_scope of this ProvidersLdapItem.
        :type: str
        """
        allowed_values = ["default", "base", "onelevel", "subtree", "children"]
        if group_search_scope is not None and group_search_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `group_search_scope`, must be one of {0}"
                .format(allowed_values)
            )

        self._group_search_scope = group_search_scope

    @property
    def home_directory_template(self):
        """
        Gets the home_directory_template of this ProvidersLdapItem.
        Specifies home directory template path.

        :return: The home_directory_template of this ProvidersLdapItem.
        :rtype: str
        """
        return self._home_directory_template

    @home_directory_template.setter
    def home_directory_template(self, home_directory_template):
        """
        Sets the home_directory_template of this ProvidersLdapItem.
        Specifies home directory template path.

        :param home_directory_template: The home_directory_template of this ProvidersLdapItem.
        :type: str
        """
        
        self._home_directory_template = home_directory_template

    @property
    def homedir_attribute(self):
        """
        Gets the homedir_attribute of this ProvidersLdapItem.
        Sets the LDAP Homedir attribute.

        :return: The homedir_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._homedir_attribute

    @homedir_attribute.setter
    def homedir_attribute(self, homedir_attribute):
        """
        Sets the homedir_attribute of this ProvidersLdapItem.
        Sets the LDAP Homedir attribute.

        :param homedir_attribute: The homedir_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._homedir_attribute = homedir_attribute

    @property
    def ignore_tls_errors(self):
        """
        Gets the ignore_tls_errors of this ProvidersLdapItem.
        Continues over secure connection even if identity checks fail.

        :return: The ignore_tls_errors of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._ignore_tls_errors

    @ignore_tls_errors.setter
    def ignore_tls_errors(self, ignore_tls_errors):
        """
        Sets the ignore_tls_errors of this ProvidersLdapItem.
        Continues over secure connection even if identity checks fail.

        :param ignore_tls_errors: The ignore_tls_errors of this ProvidersLdapItem.
        :type: bool
        """
        
        self._ignore_tls_errors = ignore_tls_errors

    @property
    def listable_groups(self):
        """
        Gets the listable_groups of this ProvidersLdapItem.
        Specifies groups that can be viewed in the provider.

        :return: The listable_groups of this ProvidersLdapItem.
        :rtype: list[str]
        """
        return self._listable_groups

    @listable_groups.setter
    def listable_groups(self, listable_groups):
        """
        Sets the listable_groups of this ProvidersLdapItem.
        Specifies groups that can be viewed in the provider.

        :param listable_groups: The listable_groups of this ProvidersLdapItem.
        :type: list[str]
        """
        
        self._listable_groups = listable_groups

    @property
    def listable_users(self):
        """
        Gets the listable_users of this ProvidersLdapItem.
        Specifies users that can be viewed in the provider.

        :return: The listable_users of this ProvidersLdapItem.
        :rtype: list[str]
        """
        return self._listable_users

    @listable_users.setter
    def listable_users(self, listable_users):
        """
        Sets the listable_users of this ProvidersLdapItem.
        Specifies users that can be viewed in the provider.

        :param listable_users: The listable_users of this ProvidersLdapItem.
        :type: list[str]
        """
        
        self._listable_users = listable_users

    @property
    def login_shell(self):
        """
        Gets the login_shell of this ProvidersLdapItem.
        Sets login shell path.

        :return: The login_shell of this ProvidersLdapItem.
        :rtype: str
        """
        return self._login_shell

    @login_shell.setter
    def login_shell(self, login_shell):
        """
        Sets the login_shell of this ProvidersLdapItem.
        Sets login shell path.

        :param login_shell: The login_shell of this ProvidersLdapItem.
        :type: str
        """
        
        self._login_shell = login_shell

    @property
    def member_of_attribute(self):
        """
        Gets the member_of_attribute of this ProvidersLdapItem.
        Sets the LDAP Query Member Of attribute, which is used for reverse membership queries

        :return: The member_of_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._member_of_attribute

    @member_of_attribute.setter
    def member_of_attribute(self, member_of_attribute):
        """
        Sets the member_of_attribute of this ProvidersLdapItem.
        Sets the LDAP Query Member Of attribute, which is used for reverse membership queries

        :param member_of_attribute: The member_of_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._member_of_attribute = member_of_attribute

    @property
    def name(self):
        """
        Gets the name of this ProvidersLdapItem.
        Specifies the name of the LDAP provider.

        :return: The name of this ProvidersLdapItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProvidersLdapItem.
        Specifies the name of the LDAP provider.

        :param name: The name of this ProvidersLdapItem.
        :type: str
        """
        
        self._name = name

    @property
    def name_attribute(self):
        """
        Gets the name_attribute of this ProvidersLdapItem.
        Sets the LDAP UID attribute, which is used as the login name.

        :return: The name_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._name_attribute

    @name_attribute.setter
    def name_attribute(self, name_attribute):
        """
        Sets the name_attribute of this ProvidersLdapItem.
        Sets the LDAP UID attribute, which is used as the login name.

        :param name_attribute: The name_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._name_attribute = name_attribute

    @property
    def netgroup_base_dn(self):
        """
        Gets the netgroup_base_dn of this ProvidersLdapItem.
        Sets distinguished name of the entry at which to start the LDAP search for netgroups.

        :return: The netgroup_base_dn of this ProvidersLdapItem.
        :rtype: str
        """
        return self._netgroup_base_dn

    @netgroup_base_dn.setter
    def netgroup_base_dn(self, netgroup_base_dn):
        """
        Sets the netgroup_base_dn of this ProvidersLdapItem.
        Sets distinguished name of the entry at which to start the LDAP search for netgroups.

        :param netgroup_base_dn: The netgroup_base_dn of this ProvidersLdapItem.
        :type: str
        """
        
        self._netgroup_base_dn = netgroup_base_dn

    @property
    def netgroup_filter(self):
        """
        Gets the netgroup_filter of this ProvidersLdapItem.
        Sets LDAP filter for netgroup objects.

        :return: The netgroup_filter of this ProvidersLdapItem.
        :rtype: str
        """
        return self._netgroup_filter

    @netgroup_filter.setter
    def netgroup_filter(self, netgroup_filter):
        """
        Sets the netgroup_filter of this ProvidersLdapItem.
        Sets LDAP filter for netgroup objects.

        :param netgroup_filter: The netgroup_filter of this ProvidersLdapItem.
        :type: str
        """
        
        self._netgroup_filter = netgroup_filter

    @property
    def netgroup_members_attribute(self):
        """
        Gets the netgroup_members_attribute of this ProvidersLdapItem.
        Sets the LDAP Netgroup Members attribute.

        :return: The netgroup_members_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._netgroup_members_attribute

    @netgroup_members_attribute.setter
    def netgroup_members_attribute(self, netgroup_members_attribute):
        """
        Sets the netgroup_members_attribute of this ProvidersLdapItem.
        Sets the LDAP Netgroup Members attribute.

        :param netgroup_members_attribute: The netgroup_members_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._netgroup_members_attribute = netgroup_members_attribute

    @property
    def netgroup_search_scope(self):
        """
        Gets the netgroup_search_scope of this ProvidersLdapItem.
        Defines the depth from the base DN to perform LDAP searches.

        :return: The netgroup_search_scope of this ProvidersLdapItem.
        :rtype: str
        """
        return self._netgroup_search_scope

    @netgroup_search_scope.setter
    def netgroup_search_scope(self, netgroup_search_scope):
        """
        Sets the netgroup_search_scope of this ProvidersLdapItem.
        Defines the depth from the base DN to perform LDAP searches.

        :param netgroup_search_scope: The netgroup_search_scope of this ProvidersLdapItem.
        :type: str
        """
        allowed_values = ["default", "base", "onelevel", "subtree", "children"]
        if netgroup_search_scope is not None and netgroup_search_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `netgroup_search_scope`, must be one of {0}"
                .format(allowed_values)
            )

        self._netgroup_search_scope = netgroup_search_scope

    @property
    def netgroup_triple_attribute(self):
        """
        Gets the netgroup_triple_attribute of this ProvidersLdapItem.
        Sets the LDAP Netgroup Triple attribute.

        :return: The netgroup_triple_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._netgroup_triple_attribute

    @netgroup_triple_attribute.setter
    def netgroup_triple_attribute(self, netgroup_triple_attribute):
        """
        Sets the netgroup_triple_attribute of this ProvidersLdapItem.
        Sets the LDAP Netgroup Triple attribute.

        :param netgroup_triple_attribute: The netgroup_triple_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._netgroup_triple_attribute = netgroup_triple_attribute

    @property
    def normalize_groups(self):
        """
        Gets the normalize_groups of this ProvidersLdapItem.
        Normalizes group name to lowercase before lookup.

        :return: The normalize_groups of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._normalize_groups

    @normalize_groups.setter
    def normalize_groups(self, normalize_groups):
        """
        Sets the normalize_groups of this ProvidersLdapItem.
        Normalizes group name to lowercase before lookup.

        :param normalize_groups: The normalize_groups of this ProvidersLdapItem.
        :type: bool
        """
        
        self._normalize_groups = normalize_groups

    @property
    def normalize_users(self):
        """
        Gets the normalize_users of this ProvidersLdapItem.
        Normalizes user name to lowercase before lookup.

        :return: The normalize_users of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._normalize_users

    @normalize_users.setter
    def normalize_users(self, normalize_users):
        """
        Sets the normalize_users of this ProvidersLdapItem.
        Normalizes user name to lowercase before lookup.

        :param normalize_users: The normalize_users of this ProvidersLdapItem.
        :type: bool
        """
        
        self._normalize_users = normalize_users

    @property
    def nt_password_attribute(self):
        """
        Gets the nt_password_attribute of this ProvidersLdapItem.
        Sets the LDAP NT Password attribute.

        :return: The nt_password_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._nt_password_attribute

    @nt_password_attribute.setter
    def nt_password_attribute(self, nt_password_attribute):
        """
        Sets the nt_password_attribute of this ProvidersLdapItem.
        Sets the LDAP NT Password attribute.

        :param nt_password_attribute: The nt_password_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._nt_password_attribute = nt_password_attribute

    @property
    def ntlm_support(self):
        """
        Gets the ntlm_support of this ProvidersLdapItem.
        For users with NTLM-compatible credentials, specify what NTLM versions to support.

        :return: The ntlm_support of this ProvidersLdapItem.
        :rtype: str
        """
        return self._ntlm_support

    @ntlm_support.setter
    def ntlm_support(self, ntlm_support):
        """
        Sets the ntlm_support of this ProvidersLdapItem.
        For users with NTLM-compatible credentials, specify what NTLM versions to support.

        :param ntlm_support: The ntlm_support of this ProvidersLdapItem.
        :type: str
        """
        allowed_values = ["all", "v2only", "none"]
        if ntlm_support is not None and ntlm_support not in allowed_values:
            raise ValueError(
                "Invalid value for `ntlm_support`, must be one of {0}"
                .format(allowed_values)
            )

        self._ntlm_support = ntlm_support

    @property
    def provider_domain(self):
        """
        Gets the provider_domain of this ProvidersLdapItem.
        Specifies the provider domain.

        :return: The provider_domain of this ProvidersLdapItem.
        :rtype: str
        """
        return self._provider_domain

    @provider_domain.setter
    def provider_domain(self, provider_domain):
        """
        Sets the provider_domain of this ProvidersLdapItem.
        Specifies the provider domain.

        :param provider_domain: The provider_domain of this ProvidersLdapItem.
        :type: str
        """
        
        self._provider_domain = provider_domain

    @property
    def require_secure_connection(self):
        """
        Gets the require_secure_connection of this ProvidersLdapItem.
        Specifies whether to continue over non-TLS connection.

        :return: The require_secure_connection of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._require_secure_connection

    @require_secure_connection.setter
    def require_secure_connection(self, require_secure_connection):
        """
        Sets the require_secure_connection of this ProvidersLdapItem.
        Specifies whether to continue over non-TLS connection.

        :param require_secure_connection: The require_secure_connection of this ProvidersLdapItem.
        :type: bool
        """
        
        self._require_secure_connection = require_secure_connection

    @property
    def restrict_findable(self):
        """
        Gets the restrict_findable of this ProvidersLdapItem.
        Check the provider for filtered lists of findable and unfindable users and groups.

        :return: The restrict_findable of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._restrict_findable

    @restrict_findable.setter
    def restrict_findable(self, restrict_findable):
        """
        Sets the restrict_findable of this ProvidersLdapItem.
        Check the provider for filtered lists of findable and unfindable users and groups.

        :param restrict_findable: The restrict_findable of this ProvidersLdapItem.
        :type: bool
        """
        
        self._restrict_findable = restrict_findable

    @property
    def restrict_listable(self):
        """
        Gets the restrict_listable of this ProvidersLdapItem.
        Check the provider for filtered lists of listable and unlistable users and groups.

        :return: The restrict_listable of this ProvidersLdapItem.
        :rtype: bool
        """
        return self._restrict_listable

    @restrict_listable.setter
    def restrict_listable(self, restrict_listable):
        """
        Sets the restrict_listable of this ProvidersLdapItem.
        Check the provider for filtered lists of listable and unlistable users and groups.

        :param restrict_listable: The restrict_listable of this ProvidersLdapItem.
        :type: bool
        """
        
        self._restrict_listable = restrict_listable

    @property
    def search_scope(self):
        """
        Gets the search_scope of this ProvidersLdapItem.
        Defines the default depth from the base DN to perform LDAP searches.

        :return: The search_scope of this ProvidersLdapItem.
        :rtype: str
        """
        return self._search_scope

    @search_scope.setter
    def search_scope(self, search_scope):
        """
        Sets the search_scope of this ProvidersLdapItem.
        Defines the default depth from the base DN to perform LDAP searches.

        :param search_scope: The search_scope of this ProvidersLdapItem.
        :type: str
        """
        allowed_values = ["base", "onelevel", "subtree", "children"]
        if search_scope is not None and search_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `search_scope`, must be one of {0}"
                .format(allowed_values)
            )

        self._search_scope = search_scope

    @property
    def search_timeout(self):
        """
        Gets the search_timeout of this ProvidersLdapItem.
        Sets search timeout period in seconds.

        :return: The search_timeout of this ProvidersLdapItem.
        :rtype: int
        """
        return self._search_timeout

    @search_timeout.setter
    def search_timeout(self, search_timeout):
        """
        Sets the search_timeout of this ProvidersLdapItem.
        Sets search timeout period in seconds.

        :param search_timeout: The search_timeout of this ProvidersLdapItem.
        :type: int
        """
        
        self._search_timeout = search_timeout

    @property
    def server_uris(self):
        """
        Gets the server_uris of this ProvidersLdapItem.
        Sets server URIs.

        :return: The server_uris of this ProvidersLdapItem.
        :rtype: list[str]
        """
        return self._server_uris

    @server_uris.setter
    def server_uris(self, server_uris):
        """
        Sets the server_uris of this ProvidersLdapItem.
        Sets server URIs.

        :param server_uris: The server_uris of this ProvidersLdapItem.
        :type: list[str]
        """
        
        self._server_uris = server_uris

    @property
    def shell_attribute(self):
        """
        Gets the shell_attribute of this ProvidersLdapItem.
        Sets the LDAP Shell attribute.

        :return: The shell_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._shell_attribute

    @shell_attribute.setter
    def shell_attribute(self, shell_attribute):
        """
        Sets the shell_attribute of this ProvidersLdapItem.
        Sets the LDAP Shell attribute.

        :param shell_attribute: The shell_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._shell_attribute = shell_attribute

    @property
    def uid_attribute(self):
        """
        Gets the uid_attribute of this ProvidersLdapItem.
        Sets the LDAP UID Number attribute.

        :return: The uid_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._uid_attribute

    @uid_attribute.setter
    def uid_attribute(self, uid_attribute):
        """
        Sets the uid_attribute of this ProvidersLdapItem.
        Sets the LDAP UID Number attribute.

        :param uid_attribute: The uid_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._uid_attribute = uid_attribute

    @property
    def unfindable_groups(self):
        """
        Gets the unfindable_groups of this ProvidersLdapItem.
        Specifies groups that cannot be resolved by the provider.

        :return: The unfindable_groups of this ProvidersLdapItem.
        :rtype: list[str]
        """
        return self._unfindable_groups

    @unfindable_groups.setter
    def unfindable_groups(self, unfindable_groups):
        """
        Sets the unfindable_groups of this ProvidersLdapItem.
        Specifies groups that cannot be resolved by the provider.

        :param unfindable_groups: The unfindable_groups of this ProvidersLdapItem.
        :type: list[str]
        """
        
        self._unfindable_groups = unfindable_groups

    @property
    def unfindable_users(self):
        """
        Gets the unfindable_users of this ProvidersLdapItem.
        Specifies users that cannot be resolved by the provider.

        :return: The unfindable_users of this ProvidersLdapItem.
        :rtype: list[str]
        """
        return self._unfindable_users

    @unfindable_users.setter
    def unfindable_users(self, unfindable_users):
        """
        Sets the unfindable_users of this ProvidersLdapItem.
        Specifies users that cannot be resolved by the provider.

        :param unfindable_users: The unfindable_users of this ProvidersLdapItem.
        :type: list[str]
        """
        
        self._unfindable_users = unfindable_users

    @property
    def unique_group_members_attribute(self):
        """
        Gets the unique_group_members_attribute of this ProvidersLdapItem.
        Sets the LDAP Unique Group Members attribute.

        :return: The unique_group_members_attribute of this ProvidersLdapItem.
        :rtype: str
        """
        return self._unique_group_members_attribute

    @unique_group_members_attribute.setter
    def unique_group_members_attribute(self, unique_group_members_attribute):
        """
        Sets the unique_group_members_attribute of this ProvidersLdapItem.
        Sets the LDAP Unique Group Members attribute.

        :param unique_group_members_attribute: The unique_group_members_attribute of this ProvidersLdapItem.
        :type: str
        """
        
        self._unique_group_members_attribute = unique_group_members_attribute

    @property
    def unlistable_groups(self):
        """
        Gets the unlistable_groups of this ProvidersLdapItem.
        Specifies a group that cannot be listed by the provider.

        :return: The unlistable_groups of this ProvidersLdapItem.
        :rtype: list[str]
        """
        return self._unlistable_groups

    @unlistable_groups.setter
    def unlistable_groups(self, unlistable_groups):
        """
        Sets the unlistable_groups of this ProvidersLdapItem.
        Specifies a group that cannot be listed by the provider.

        :param unlistable_groups: The unlistable_groups of this ProvidersLdapItem.
        :type: list[str]
        """
        
        self._unlistable_groups = unlistable_groups

    @property
    def unlistable_users(self):
        """
        Gets the unlistable_users of this ProvidersLdapItem.
        Specifies a user that cannot be listed by the provider.

        :return: The unlistable_users of this ProvidersLdapItem.
        :rtype: list[str]
        """
        return self._unlistable_users

    @unlistable_users.setter
    def unlistable_users(self, unlistable_users):
        """
        Sets the unlistable_users of this ProvidersLdapItem.
        Specifies a user that cannot be listed by the provider.

        :param unlistable_users: The unlistable_users of this ProvidersLdapItem.
        :type: list[str]
        """
        
        self._unlistable_users = unlistable_users

    @property
    def user_base_dn(self):
        """
        Gets the user_base_dn of this ProvidersLdapItem.
        Sets distinguished name of the entry at which to start LDAP searches for users.

        :return: The user_base_dn of this ProvidersLdapItem.
        :rtype: str
        """
        return self._user_base_dn

    @user_base_dn.setter
    def user_base_dn(self, user_base_dn):
        """
        Sets the user_base_dn of this ProvidersLdapItem.
        Sets distinguished name of the entry at which to start LDAP searches for users.

        :param user_base_dn: The user_base_dn of this ProvidersLdapItem.
        :type: str
        """
        
        self._user_base_dn = user_base_dn

    @property
    def user_domain(self):
        """
        Gets the user_domain of this ProvidersLdapItem.
        Domain used to qualify users for this provider.

        :return: The user_domain of this ProvidersLdapItem.
        :rtype: str
        """
        return self._user_domain

    @user_domain.setter
    def user_domain(self, user_domain):
        """
        Sets the user_domain of this ProvidersLdapItem.
        Domain used to qualify users for this provider.

        :param user_domain: The user_domain of this ProvidersLdapItem.
        :type: str
        """
        
        self._user_domain = user_domain

    @property
    def user_filter(self):
        """
        Gets the user_filter of this ProvidersLdapItem.
        Sets LDAP filter for user objects.

        :return: The user_filter of this ProvidersLdapItem.
        :rtype: str
        """
        return self._user_filter

    @user_filter.setter
    def user_filter(self, user_filter):
        """
        Sets the user_filter of this ProvidersLdapItem.
        Sets LDAP filter for user objects.

        :param user_filter: The user_filter of this ProvidersLdapItem.
        :type: str
        """
        
        self._user_filter = user_filter

    @property
    def user_search_scope(self):
        """
        Gets the user_search_scope of this ProvidersLdapItem.
        Defines the depth from the base DN to perform LDAP searches.

        :return: The user_search_scope of this ProvidersLdapItem.
        :rtype: str
        """
        return self._user_search_scope

    @user_search_scope.setter
    def user_search_scope(self, user_search_scope):
        """
        Sets the user_search_scope of this ProvidersLdapItem.
        Defines the depth from the base DN to perform LDAP searches.

        :param user_search_scope: The user_search_scope of this ProvidersLdapItem.
        :type: str
        """
        allowed_values = ["default", "base", "onelevel", "subtree", "children"]
        if user_search_scope is not None and user_search_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `user_search_scope`, must be one of {0}"
                .format(allowed_values)
            )

        self._user_search_scope = user_search_scope

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

