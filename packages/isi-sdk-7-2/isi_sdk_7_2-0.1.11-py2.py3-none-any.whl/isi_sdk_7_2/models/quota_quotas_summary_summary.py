# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class QuotaQuotasSummarySummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        QuotaQuotasSummarySummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'count': 'int',
            'default_group_quotas_count': 'int',
            'default_user_quotas_count': 'int',
            'directory_quotas_count': 'int',
            'group_quotas_count': 'int',
            'linked_quotas_count': 'int',
            'user_quotas_count': 'int'
        }

        self.attribute_map = {
            'count': 'count',
            'default_group_quotas_count': 'default_group_quotas_count',
            'default_user_quotas_count': 'default_user_quotas_count',
            'directory_quotas_count': 'directory_quotas_count',
            'group_quotas_count': 'group_quotas_count',
            'linked_quotas_count': 'linked_quotas_count',
            'user_quotas_count': 'user_quotas_count'
        }

        self._count = None
        self._default_group_quotas_count = None
        self._default_user_quotas_count = None
        self._directory_quotas_count = None
        self._group_quotas_count = None
        self._linked_quotas_count = None
        self._user_quotas_count = None

    @property
    def count(self):
        """
        Gets the count of this QuotaQuotasSummarySummary.
        Total number of quotas.

        :return: The count of this QuotaQuotasSummarySummary.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this QuotaQuotasSummarySummary.
        Total number of quotas.

        :param count: The count of this QuotaQuotasSummarySummary.
        :type: int
        """
        
        self._count = count

    @property
    def default_group_quotas_count(self):
        """
        Gets the default_group_quotas_count of this QuotaQuotasSummarySummary.
        Total number of default-group quotas.

        :return: The default_group_quotas_count of this QuotaQuotasSummarySummary.
        :rtype: int
        """
        return self._default_group_quotas_count

    @default_group_quotas_count.setter
    def default_group_quotas_count(self, default_group_quotas_count):
        """
        Sets the default_group_quotas_count of this QuotaQuotasSummarySummary.
        Total number of default-group quotas.

        :param default_group_quotas_count: The default_group_quotas_count of this QuotaQuotasSummarySummary.
        :type: int
        """
        
        self._default_group_quotas_count = default_group_quotas_count

    @property
    def default_user_quotas_count(self):
        """
        Gets the default_user_quotas_count of this QuotaQuotasSummarySummary.
        Total number of default-user quotas.

        :return: The default_user_quotas_count of this QuotaQuotasSummarySummary.
        :rtype: int
        """
        return self._default_user_quotas_count

    @default_user_quotas_count.setter
    def default_user_quotas_count(self, default_user_quotas_count):
        """
        Sets the default_user_quotas_count of this QuotaQuotasSummarySummary.
        Total number of default-user quotas.

        :param default_user_quotas_count: The default_user_quotas_count of this QuotaQuotasSummarySummary.
        :type: int
        """
        
        self._default_user_quotas_count = default_user_quotas_count

    @property
    def directory_quotas_count(self):
        """
        Gets the directory_quotas_count of this QuotaQuotasSummarySummary.
        Total number of directory quotas.

        :return: The directory_quotas_count of this QuotaQuotasSummarySummary.
        :rtype: int
        """
        return self._directory_quotas_count

    @directory_quotas_count.setter
    def directory_quotas_count(self, directory_quotas_count):
        """
        Sets the directory_quotas_count of this QuotaQuotasSummarySummary.
        Total number of directory quotas.

        :param directory_quotas_count: The directory_quotas_count of this QuotaQuotasSummarySummary.
        :type: int
        """
        
        self._directory_quotas_count = directory_quotas_count

    @property
    def group_quotas_count(self):
        """
        Gets the group_quotas_count of this QuotaQuotasSummarySummary.
        Total number of -group quotas.

        :return: The group_quotas_count of this QuotaQuotasSummarySummary.
        :rtype: int
        """
        return self._group_quotas_count

    @group_quotas_count.setter
    def group_quotas_count(self, group_quotas_count):
        """
        Sets the group_quotas_count of this QuotaQuotasSummarySummary.
        Total number of -group quotas.

        :param group_quotas_count: The group_quotas_count of this QuotaQuotasSummarySummary.
        :type: int
        """
        
        self._group_quotas_count = group_quotas_count

    @property
    def linked_quotas_count(self):
        """
        Gets the linked_quotas_count of this QuotaQuotasSummarySummary.
        Total number of user and group totals that are linked.

        :return: The linked_quotas_count of this QuotaQuotasSummarySummary.
        :rtype: int
        """
        return self._linked_quotas_count

    @linked_quotas_count.setter
    def linked_quotas_count(self, linked_quotas_count):
        """
        Sets the linked_quotas_count of this QuotaQuotasSummarySummary.
        Total number of user and group totals that are linked.

        :param linked_quotas_count: The linked_quotas_count of this QuotaQuotasSummarySummary.
        :type: int
        """
        
        self._linked_quotas_count = linked_quotas_count

    @property
    def user_quotas_count(self):
        """
        Gets the user_quotas_count of this QuotaQuotasSummarySummary.
        Total number of user quotas.

        :return: The user_quotas_count of this QuotaQuotasSummarySummary.
        :rtype: int
        """
        return self._user_quotas_count

    @user_quotas_count.setter
    def user_quotas_count(self, user_quotas_count):
        """
        Sets the user_quotas_count of this QuotaQuotasSummarySummary.
        Total number of user quotas.

        :param user_quotas_count: The user_quotas_count of this QuotaQuotasSummarySummary.
        :type: int
        """
        
        self._user_quotas_count = user_quotas_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

