# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SyncJobWorker(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SyncJobWorker - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'connected': 'bool',
            'last_split': 'int',
            'last_work': 'int',
            'lin': 'int',
            'process_id': 'int',
            'source_host': 'str',
            'target_host': 'str',
            'worker_id': 'int'
        }

        self.attribute_map = {
            'connected': 'connected',
            'last_split': 'last_split',
            'last_work': 'last_work',
            'lin': 'lin',
            'process_id': 'process_id',
            'source_host': 'source_host',
            'target_host': 'target_host',
            'worker_id': 'worker_id'
        }

        self._connected = None
        self._last_split = None
        self._last_work = None
        self._lin = None
        self._process_id = None
        self._source_host = None
        self._target_host = None
        self._worker_id = None

    @property
    def connected(self):
        """
        Gets the connected of this SyncJobWorker.
        Whether there is a connection between the source and target.

        :return: The connected of this SyncJobWorker.
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """
        Sets the connected of this SyncJobWorker.
        Whether there is a connection between the source and target.

        :param connected: The connected of this SyncJobWorker.
        :type: bool
        """
        
        self._connected = connected

    @property
    def last_split(self):
        """
        Gets the last_split of this SyncJobWorker.
        The last time a network split occurred.

        :return: The last_split of this SyncJobWorker.
        :rtype: int
        """
        return self._last_split

    @last_split.setter
    def last_split(self, last_split):
        """
        Sets the last_split of this SyncJobWorker.
        The last time a network split occurred.

        :param last_split: The last_split of this SyncJobWorker.
        :type: int
        """
        
        self._last_split = last_split

    @property
    def last_work(self):
        """
        Gets the last_work of this SyncJobWorker.
        The last time the worker performed work.

        :return: The last_work of this SyncJobWorker.
        :rtype: int
        """
        return self._last_work

    @last_work.setter
    def last_work(self, last_work):
        """
        Sets the last_work of this SyncJobWorker.
        The last time the worker performed work.

        :param last_work: The last_work of this SyncJobWorker.
        :type: int
        """
        
        self._last_work = last_work

    @property
    def lin(self):
        """
        Gets the lin of this SyncJobWorker.
        The LIN being worked on.

        :return: The lin of this SyncJobWorker.
        :rtype: int
        """
        return self._lin

    @lin.setter
    def lin(self, lin):
        """
        Sets the lin of this SyncJobWorker.
        The LIN being worked on.

        :param lin: The lin of this SyncJobWorker.
        :type: int
        """
        
        self._lin = lin

    @property
    def process_id(self):
        """
        Gets the process_id of this SyncJobWorker.
        The process ID of the worker.

        :return: The process_id of this SyncJobWorker.
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """
        Sets the process_id of this SyncJobWorker.
        The process ID of the worker.

        :param process_id: The process_id of this SyncJobWorker.
        :type: int
        """
        
        self._process_id = process_id

    @property
    def source_host(self):
        """
        Gets the source_host of this SyncJobWorker.
        The source host for this worker.

        :return: The source_host of this SyncJobWorker.
        :rtype: str
        """
        return self._source_host

    @source_host.setter
    def source_host(self, source_host):
        """
        Sets the source_host of this SyncJobWorker.
        The source host for this worker.

        :param source_host: The source_host of this SyncJobWorker.
        :type: str
        """
        
        self._source_host = source_host

    @property
    def target_host(self):
        """
        Gets the target_host of this SyncJobWorker.
        The target host for this worker.

        :return: The target_host of this SyncJobWorker.
        :rtype: str
        """
        return self._target_host

    @target_host.setter
    def target_host(self, target_host):
        """
        Sets the target_host of this SyncJobWorker.
        The target host for this worker.

        :param target_host: The target_host of this SyncJobWorker.
        :type: str
        """
        
        self._target_host = target_host

    @property
    def worker_id(self):
        """
        Gets the worker_id of this SyncJobWorker.
        The ID of the worker.

        :return: The worker_id of this SyncJobWorker.
        :rtype: int
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """
        Sets the worker_id of this SyncJobWorker.
        The ID of the worker.

        :param worker_id: The worker_id of this SyncJobWorker.
        :type: int
        """
        
        self._worker_id = worker_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

