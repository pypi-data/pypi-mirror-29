# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SmbSharePermission(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SmbSharePermission - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'permission': 'str',
            'permission_type': 'str',
            'trustee': 'GroupMember'
        }

        self.attribute_map = {
            'permission': 'permission',
            'permission_type': 'permission_type',
            'trustee': 'trustee'
        }

        self._permission = None
        self._permission_type = None
        self._trustee = None

    @property
    def permission(self):
        """
        Gets the permission of this SmbSharePermission.
        Filesystem rights governed.

        :return: The permission of this SmbSharePermission.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """
        Sets the permission of this SmbSharePermission.
        Filesystem rights governed.

        :param permission: The permission of this SmbSharePermission.
        :type: str
        """
        allowed_values = ["full", "change", "read"]
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission`, must be one of {0}"
                .format(allowed_values)
            )

        self._permission = permission

    @property
    def permission_type(self):
        """
        Gets the permission_type of this SmbSharePermission.
        Filesystem rights modification.

        :return: The permission_type of this SmbSharePermission.
        :rtype: str
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """
        Sets the permission_type of this SmbSharePermission.
        Filesystem rights modification.

        :param permission_type: The permission_type of this SmbSharePermission.
        :type: str
        """
        allowed_values = ["allow", "deny"]
        if permission_type not in allowed_values:
            raise ValueError(
                "Invalid value for `permission_type`, must be one of {0}"
                .format(allowed_values)
            )

        self._permission_type = permission_type

    @property
    def trustee(self):
        """
        Gets the trustee of this SmbSharePermission.
        A persona consists of either a 'type' and 'name' or a 'ID'.

        :return: The trustee of this SmbSharePermission.
        :rtype: GroupMember
        """
        return self._trustee

    @trustee.setter
    def trustee(self, trustee):
        """
        Sets the trustee of this SmbSharePermission.
        A persona consists of either a 'type' and 'name' or a 'ID'.

        :param trustee: The trustee of this SmbSharePermission.
        :type: GroupMember
        """
        
        self._trustee = trustee

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

