# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NfsExportMapAll(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NfsExportMapAll - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enabled': 'bool',
            'primary_group': 'GroupMember',
            'secondary_groups': 'list[NfsExportMapAllSecondaryGroups]',
            'user': 'GroupMember'
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'primary_group': 'primary_group',
            'secondary_groups': 'secondary_groups',
            'user': 'user'
        }

        self._enabled = None
        self._primary_group = None
        self._secondary_groups = None
        self._user = None

    @property
    def enabled(self):
        """
        Gets the enabled of this NfsExportMapAll.
        Should this user mapping be applied

        :return: The enabled of this NfsExportMapAll.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this NfsExportMapAll.
        Should this user mapping be applied

        :param enabled: The enabled of this NfsExportMapAll.
        :type: bool
        """
        
        self._enabled = enabled

    @property
    def primary_group(self):
        """
        Gets the primary_group of this NfsExportMapAll.
        A persona consists of either a 'type' and 'name' or a 'ID'.

        :return: The primary_group of this NfsExportMapAll.
        :rtype: GroupMember
        """
        return self._primary_group

    @primary_group.setter
    def primary_group(self, primary_group):
        """
        Sets the primary_group of this NfsExportMapAll.
        A persona consists of either a 'type' and 'name' or a 'ID'.

        :param primary_group: The primary_group of this NfsExportMapAll.
        :type: GroupMember
        """
        
        self._primary_group = primary_group

    @property
    def secondary_groups(self):
        """
        Gets the secondary_groups of this NfsExportMapAll.


        :return: The secondary_groups of this NfsExportMapAll.
        :rtype: list[NfsExportMapAllSecondaryGroups]
        """
        return self._secondary_groups

    @secondary_groups.setter
    def secondary_groups(self, secondary_groups):
        """
        Sets the secondary_groups of this NfsExportMapAll.


        :param secondary_groups: The secondary_groups of this NfsExportMapAll.
        :type: list[NfsExportMapAllSecondaryGroups]
        """
        
        self._secondary_groups = secondary_groups

    @property
    def user(self):
        """
        Gets the user of this NfsExportMapAll.
        A persona consists of either a 'type' and 'name' or a 'ID'.

        :return: The user of this NfsExportMapAll.
        :rtype: GroupMember
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this NfsExportMapAll.
        A persona consists of either a 'type' and 'name' or a 'ID'.

        :param user: The user of this NfsExportMapAll.
        :type: GroupMember
        """
        
        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

