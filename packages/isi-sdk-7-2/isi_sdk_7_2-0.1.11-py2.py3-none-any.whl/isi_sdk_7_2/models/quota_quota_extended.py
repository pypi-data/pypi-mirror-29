# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class QuotaQuotaExtended(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        QuotaQuotaExtended - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'container': 'bool',
            'enforced': 'bool',
            'id': 'str',
            'include_snapshots': 'bool',
            'linked': 'bool',
            'notifications': 'str',
            'path': 'str',
            'persona': 'GroupMember',
            'ready': 'bool',
            'thresholds': 'QuotaQuotaThresholdsExtended',
            'thresholds_include_overhead': 'bool',
            'type': 'str',
            'usage': 'QuotaQuotaUsage'
        }

        self.attribute_map = {
            'container': 'container',
            'enforced': 'enforced',
            'id': 'id',
            'include_snapshots': 'include_snapshots',
            'linked': 'linked',
            'notifications': 'notifications',
            'path': 'path',
            'persona': 'persona',
            'ready': 'ready',
            'thresholds': 'thresholds',
            'thresholds_include_overhead': 'thresholds_include_overhead',
            'type': 'type',
            'usage': 'usage'
        }

        self._container = None
        self._enforced = None
        self._id = None
        self._include_snapshots = None
        self._linked = None
        self._notifications = None
        self._path = None
        self._persona = None
        self._ready = None
        self._thresholds = None
        self._thresholds_include_overhead = None
        self._type = None
        self._usage = None

    @property
    def container(self):
        """
        Gets the container of this QuotaQuotaExtended.
        If true, SMB shares using the quota directory see the quota thresholds as share size.

        :return: The container of this QuotaQuotaExtended.
        :rtype: bool
        """
        return self._container

    @container.setter
    def container(self, container):
        """
        Sets the container of this QuotaQuotaExtended.
        If true, SMB shares using the quota directory see the quota thresholds as share size.

        :param container: The container of this QuotaQuotaExtended.
        :type: bool
        """
        
        self._container = container

    @property
    def enforced(self):
        """
        Gets the enforced of this QuotaQuotaExtended.
        True if the quota provides enforcement, otherwise a accounting quota.

        :return: The enforced of this QuotaQuotaExtended.
        :rtype: bool
        """
        return self._enforced

    @enforced.setter
    def enforced(self, enforced):
        """
        Sets the enforced of this QuotaQuotaExtended.
        True if the quota provides enforcement, otherwise a accounting quota.

        :param enforced: The enforced of this QuotaQuotaExtended.
        :type: bool
        """
        
        self._enforced = enforced

    @property
    def id(self):
        """
        Gets the id of this QuotaQuotaExtended.
        The system ID given to the quota.

        :return: The id of this QuotaQuotaExtended.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this QuotaQuotaExtended.
        The system ID given to the quota.

        :param id: The id of this QuotaQuotaExtended.
        :type: str
        """
        
        self._id = id

    @property
    def include_snapshots(self):
        """
        Gets the include_snapshots of this QuotaQuotaExtended.
        If true, quota governs snapshot data as well as head data.

        :return: The include_snapshots of this QuotaQuotaExtended.
        :rtype: bool
        """
        return self._include_snapshots

    @include_snapshots.setter
    def include_snapshots(self, include_snapshots):
        """
        Sets the include_snapshots of this QuotaQuotaExtended.
        If true, quota governs snapshot data as well as head data.

        :param include_snapshots: The include_snapshots of this QuotaQuotaExtended.
        :type: bool
        """
        
        self._include_snapshots = include_snapshots

    @property
    def linked(self):
        """
        Gets the linked of this QuotaQuotaExtended.
        For user and group quotas, true if the quota is linked and controlled by a parent default-* quota. Linked quotas cannot be modified until they are unlinked.

        :return: The linked of this QuotaQuotaExtended.
        :rtype: bool
        """
        return self._linked

    @linked.setter
    def linked(self, linked):
        """
        Sets the linked of this QuotaQuotaExtended.
        For user and group quotas, true if the quota is linked and controlled by a parent default-* quota. Linked quotas cannot be modified until they are unlinked.

        :param linked: The linked of this QuotaQuotaExtended.
        :type: bool
        """
        
        self._linked = linked

    @property
    def notifications(self):
        """
        Gets the notifications of this QuotaQuotaExtended.
        Summary of notifications: 'custom' indicates one or more notification rules available from the notifications sub-resource; 'default' indicates system default rules are used; 'disabled' indicates that no notifications will be used for this quota.

        :return: The notifications of this QuotaQuotaExtended.
        :rtype: str
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """
        Sets the notifications of this QuotaQuotaExtended.
        Summary of notifications: 'custom' indicates one or more notification rules available from the notifications sub-resource; 'default' indicates system default rules are used; 'disabled' indicates that no notifications will be used for this quota.

        :param notifications: The notifications of this QuotaQuotaExtended.
        :type: str
        """
        allowed_values = ["custom", "default", "disabled"]
        if notifications not in allowed_values:
            raise ValueError(
                "Invalid value for `notifications`, must be one of {0}"
                .format(allowed_values)
            )

        self._notifications = notifications

    @property
    def path(self):
        """
        Gets the path of this QuotaQuotaExtended.
        The /ifs path governed.

        :return: The path of this QuotaQuotaExtended.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this QuotaQuotaExtended.
        The /ifs path governed.

        :param path: The path of this QuotaQuotaExtended.
        :type: str
        """
        
        self._path = path

    @property
    def persona(self):
        """
        Gets the persona of this QuotaQuotaExtended.
        A persona consists of either a 'type' and 'name' or a 'ID'.

        :return: The persona of this QuotaQuotaExtended.
        :rtype: GroupMember
        """
        return self._persona

    @persona.setter
    def persona(self, persona):
        """
        Sets the persona of this QuotaQuotaExtended.
        A persona consists of either a 'type' and 'name' or a 'ID'.

        :param persona: The persona of this QuotaQuotaExtended.
        :type: GroupMember
        """
        
        self._persona = persona

    @property
    def ready(self):
        """
        Gets the ready of this QuotaQuotaExtended.
        True if the accounting is accurate on the quota.  If false, this quota is waiting on completion of a QuotaScan job.

        :return: The ready of this QuotaQuotaExtended.
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """
        Sets the ready of this QuotaQuotaExtended.
        True if the accounting is accurate on the quota.  If false, this quota is waiting on completion of a QuotaScan job.

        :param ready: The ready of this QuotaQuotaExtended.
        :type: bool
        """
        
        self._ready = ready

    @property
    def thresholds(self):
        """
        Gets the thresholds of this QuotaQuotaExtended.
        

        :return: The thresholds of this QuotaQuotaExtended.
        :rtype: QuotaQuotaThresholdsExtended
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """
        Sets the thresholds of this QuotaQuotaExtended.
        

        :param thresholds: The thresholds of this QuotaQuotaExtended.
        :type: QuotaQuotaThresholdsExtended
        """
        
        self._thresholds = thresholds

    @property
    def thresholds_include_overhead(self):
        """
        Gets the thresholds_include_overhead of this QuotaQuotaExtended.
        If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).

        :return: The thresholds_include_overhead of this QuotaQuotaExtended.
        :rtype: bool
        """
        return self._thresholds_include_overhead

    @thresholds_include_overhead.setter
    def thresholds_include_overhead(self, thresholds_include_overhead):
        """
        Sets the thresholds_include_overhead of this QuotaQuotaExtended.
        If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).

        :param thresholds_include_overhead: The thresholds_include_overhead of this QuotaQuotaExtended.
        :type: bool
        """
        
        self._thresholds_include_overhead = thresholds_include_overhead

    @property
    def type(self):
        """
        Gets the type of this QuotaQuotaExtended.
        The type of quota.

        :return: The type of this QuotaQuotaExtended.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this QuotaQuotaExtended.
        The type of quota.

        :param type: The type of this QuotaQuotaExtended.
        :type: str
        """
        allowed_values = ["directory", "user", "group", "default-user", "default-group"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )

        self._type = type

    @property
    def usage(self):
        """
        Gets the usage of this QuotaQuotaExtended.
        

        :return: The usage of this QuotaQuotaExtended.
        :rtype: QuotaQuotaUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """
        Sets the usage of this QuotaQuotaExtended.
        

        :param usage: The usage of this QuotaQuotaExtended.
        :type: QuotaQuotaUsage
        """
        
        self._usage = usage

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

