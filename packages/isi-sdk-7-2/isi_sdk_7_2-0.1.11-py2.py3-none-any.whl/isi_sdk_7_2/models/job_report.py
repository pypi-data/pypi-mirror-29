# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class JobReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        JobReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'job_id': 'int',
            'job_type': 'str',
            'phase': 'int',
            'results': 'str',
            'time': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'job_id': 'job_id',
            'job_type': 'job_type',
            'phase': 'phase',
            'results': 'results',
            'time': 'time'
        }

        self._id = None
        self._job_id = None
        self._job_type = None
        self._phase = None
        self._results = None
        self._time = None

    @property
    def id(self):
        """
        Gets the id of this JobReport.
        Job event ID.

        :return: The id of this JobReport.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this JobReport.
        Job event ID.

        :param id: The id of this JobReport.
        :type: str
        """
        
        self._id = id

    @property
    def job_id(self):
        """
        Gets the job_id of this JobReport.
        Job ID.

        :return: The job_id of this JobReport.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this JobReport.
        Job ID.

        :param job_id: The job_id of this JobReport.
        :type: int
        """
        
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")
        if job_id < 1.0:
            raise ValueError("Invalid value for `job_id`, must be a value greater than or equal to `1.0`")

        self._job_id = job_id

    @property
    def job_type(self):
        """
        Gets the job_type of this JobReport.
        Job Type.

        :return: The job_type of this JobReport.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """
        Sets the job_type of this JobReport.
        Job Type.

        :param job_type: The job_type of this JobReport.
        :type: str
        """
        
        self._job_type = job_type

    @property
    def phase(self):
        """
        Gets the phase of this JobReport.
        Job phase number at time of event.

        :return: The phase of this JobReport.
        :rtype: int
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """
        Sets the phase of this JobReport.
        Job phase number at time of event.

        :param phase: The phase of this JobReport.
        :type: int
        """
        
        self._phase = phase

    @property
    def results(self):
        """
        Gets the results of this JobReport.
        Job results, if applicable.

        :return: The results of this JobReport.
        :rtype: str
        """
        return self._results

    @results.setter
    def results(self, results):
        """
        Sets the results of this JobReport.
        Job results, if applicable.

        :param results: The results of this JobReport.
        :type: str
        """
        
        self._results = results

    @property
    def time(self):
        """
        Gets the time of this JobReport.
        Time of event in Unix epoch seconds.

        :return: The time of this JobReport.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this JobReport.
        Time of event in Unix epoch seconds.

        :param time: The time of this JobReport.
        :type: int
        """
        
        self._time = time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

