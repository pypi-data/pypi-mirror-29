# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NfsExportCreateParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NfsExportCreateParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'all_dirs': 'bool',
            'block_size': 'int',
            'can_set_time': 'bool',
            'case_insensitive': 'bool',
            'case_preserving': 'bool',
            'chown_restricted': 'bool',
            'clients': 'list[str]',
            'commit_asynchronous': 'bool',
            'description': 'str',
            'directory_transfer_size': 'int',
            'encoding': 'str',
            'link_max': 'int',
            'map_all': 'NfsExportMapAll',
            'map_failure': 'NfsExportMapAll',
            'map_full': 'bool',
            'map_lookup_uid': 'bool',
            'map_non_root': 'NfsExportMapAll',
            'map_retry': 'bool',
            'map_root': 'NfsExportMapAll',
            'max_file_size': 'int',
            'name_max_size': 'int',
            'no_truncate': 'bool',
            'paths': 'list[str]',
            'read_only': 'bool',
            'read_only_clients': 'list[str]',
            'read_transfer_max_size': 'int',
            'read_transfer_multiple': 'int',
            'read_transfer_size': 'int',
            'read_write_clients': 'list[str]',
            'readdirplus': 'bool',
            'readdirplus_prefetch': 'int',
            'return_32bit_file_ids': 'bool',
            'root_clients': 'list[str]',
            'security_flavors': 'list[str]',
            'setattr_asynchronous': 'bool',
            'snapshot': 'str',
            'symlinks': 'bool',
            'time_delta': 'float',
            'write_datasync_action': 'str',
            'write_datasync_reply': 'str',
            'write_filesync_action': 'str',
            'write_filesync_reply': 'str',
            'write_transfer_max_size': 'int',
            'write_transfer_multiple': 'int',
            'write_transfer_size': 'int',
            'write_unstable_action': 'str',
            'write_unstable_reply': 'str',
            'zone': 'str'
        }

        self.attribute_map = {
            'all_dirs': 'all_dirs',
            'block_size': 'block_size',
            'can_set_time': 'can_set_time',
            'case_insensitive': 'case_insensitive',
            'case_preserving': 'case_preserving',
            'chown_restricted': 'chown_restricted',
            'clients': 'clients',
            'commit_asynchronous': 'commit_asynchronous',
            'description': 'description',
            'directory_transfer_size': 'directory_transfer_size',
            'encoding': 'encoding',
            'link_max': 'link_max',
            'map_all': 'map_all',
            'map_failure': 'map_failure',
            'map_full': 'map_full',
            'map_lookup_uid': 'map_lookup_uid',
            'map_non_root': 'map_non_root',
            'map_retry': 'map_retry',
            'map_root': 'map_root',
            'max_file_size': 'max_file_size',
            'name_max_size': 'name_max_size',
            'no_truncate': 'no_truncate',
            'paths': 'paths',
            'read_only': 'read_only',
            'read_only_clients': 'read_only_clients',
            'read_transfer_max_size': 'read_transfer_max_size',
            'read_transfer_multiple': 'read_transfer_multiple',
            'read_transfer_size': 'read_transfer_size',
            'read_write_clients': 'read_write_clients',
            'readdirplus': 'readdirplus',
            'readdirplus_prefetch': 'readdirplus_prefetch',
            'return_32bit_file_ids': 'return_32bit_file_ids',
            'root_clients': 'root_clients',
            'security_flavors': 'security_flavors',
            'setattr_asynchronous': 'setattr_asynchronous',
            'snapshot': 'snapshot',
            'symlinks': 'symlinks',
            'time_delta': 'time_delta',
            'write_datasync_action': 'write_datasync_action',
            'write_datasync_reply': 'write_datasync_reply',
            'write_filesync_action': 'write_filesync_action',
            'write_filesync_reply': 'write_filesync_reply',
            'write_transfer_max_size': 'write_transfer_max_size',
            'write_transfer_multiple': 'write_transfer_multiple',
            'write_transfer_size': 'write_transfer_size',
            'write_unstable_action': 'write_unstable_action',
            'write_unstable_reply': 'write_unstable_reply',
            'zone': 'zone'
        }

        self._all_dirs = None
        self._block_size = None
        self._can_set_time = None
        self._case_insensitive = None
        self._case_preserving = None
        self._chown_restricted = None
        self._clients = None
        self._commit_asynchronous = None
        self._description = None
        self._directory_transfer_size = None
        self._encoding = None
        self._link_max = None
        self._map_all = None
        self._map_failure = None
        self._map_full = None
        self._map_lookup_uid = None
        self._map_non_root = None
        self._map_retry = None
        self._map_root = None
        self._max_file_size = None
        self._name_max_size = None
        self._no_truncate = None
        self._paths = None
        self._read_only = None
        self._read_only_clients = None
        self._read_transfer_max_size = None
        self._read_transfer_multiple = None
        self._read_transfer_size = None
        self._read_write_clients = None
        self._readdirplus = None
        self._readdirplus_prefetch = None
        self._return_32bit_file_ids = None
        self._root_clients = None
        self._security_flavors = None
        self._setattr_asynchronous = None
        self._snapshot = None
        self._symlinks = None
        self._time_delta = None
        self._write_datasync_action = None
        self._write_datasync_reply = None
        self._write_filesync_action = None
        self._write_filesync_reply = None
        self._write_transfer_max_size = None
        self._write_transfer_multiple = None
        self._write_transfer_size = None
        self._write_unstable_action = None
        self._write_unstable_reply = None
        self._zone = None

    @property
    def all_dirs(self):
        """
        Gets the all_dirs of this NfsExportCreateParams.
        If true, all directories under the specified paths are mountable.

        :return: The all_dirs of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._all_dirs

    @all_dirs.setter
    def all_dirs(self, all_dirs):
        """
        Sets the all_dirs of this NfsExportCreateParams.
        If true, all directories under the specified paths are mountable.

        :param all_dirs: The all_dirs of this NfsExportCreateParams.
        :type: bool
        """
        
        self._all_dirs = all_dirs

    @property
    def block_size(self):
        """
        Gets the block_size of this NfsExportCreateParams.
        The block size returned by the NFS STATFS procedure.

        :return: The block_size of this NfsExportCreateParams.
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """
        Sets the block_size of this NfsExportCreateParams.
        The block size returned by the NFS STATFS procedure.

        :param block_size: The block_size of this NfsExportCreateParams.
        :type: int
        """
        
        self._block_size = block_size

    @property
    def can_set_time(self):
        """
        Gets the can_set_time of this NfsExportCreateParams.
        If true, the client may  set file  times using the NFS SETATTR request.  This  option is advisory and the server always behaves as if it is true.

        :return: The can_set_time of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._can_set_time

    @can_set_time.setter
    def can_set_time(self, can_set_time):
        """
        Sets the can_set_time of this NfsExportCreateParams.
        If true, the client may  set file  times using the NFS SETATTR request.  This  option is advisory and the server always behaves as if it is true.

        :param can_set_time: The can_set_time of this NfsExportCreateParams.
        :type: bool
        """
        
        self._can_set_time = can_set_time

    @property
    def case_insensitive(self):
        """
        Gets the case_insensitive of this NfsExportCreateParams.
        If true, the server will report that it ignores case for file names.

        :return: The case_insensitive of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._case_insensitive

    @case_insensitive.setter
    def case_insensitive(self, case_insensitive):
        """
        Sets the case_insensitive of this NfsExportCreateParams.
        If true, the server will report that it ignores case for file names.

        :param case_insensitive: The case_insensitive of this NfsExportCreateParams.
        :type: bool
        """
        
        self._case_insensitive = case_insensitive

    @property
    def case_preserving(self):
        """
        Gets the case_preserving of this NfsExportCreateParams.
        If true, the server will report that it always preserves case for file names.

        :return: The case_preserving of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._case_preserving

    @case_preserving.setter
    def case_preserving(self, case_preserving):
        """
        Sets the case_preserving of this NfsExportCreateParams.
        If true, the server will report that it always preserves case for file names.

        :param case_preserving: The case_preserving of this NfsExportCreateParams.
        :type: bool
        """
        
        self._case_preserving = case_preserving

    @property
    def chown_restricted(self):
        """
        Gets the chown_restricted of this NfsExportCreateParams.
        If true, the server will report that only the superuser may change file ownership.

        :return: The chown_restricted of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._chown_restricted

    @chown_restricted.setter
    def chown_restricted(self, chown_restricted):
        """
        Sets the chown_restricted of this NfsExportCreateParams.
        If true, the server will report that only the superuser may change file ownership.

        :param chown_restricted: The chown_restricted of this NfsExportCreateParams.
        :type: bool
        """
        
        self._chown_restricted = chown_restricted

    @property
    def clients(self):
        """
        Gets the clients of this NfsExportCreateParams.
        Clients that have access to the export.

        :return: The clients of this NfsExportCreateParams.
        :rtype: list[str]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """
        Sets the clients of this NfsExportCreateParams.
        Clients that have access to the export.

        :param clients: The clients of this NfsExportCreateParams.
        :type: list[str]
        """
        
        self._clients = clients

    @property
    def commit_asynchronous(self):
        """
        Gets the commit_asynchronous of this NfsExportCreateParams.
        If true, allows NFS  commit  requests to  execute asynchronously.

        :return: The commit_asynchronous of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._commit_asynchronous

    @commit_asynchronous.setter
    def commit_asynchronous(self, commit_asynchronous):
        """
        Sets the commit_asynchronous of this NfsExportCreateParams.
        If true, allows NFS  commit  requests to  execute asynchronously.

        :param commit_asynchronous: The commit_asynchronous of this NfsExportCreateParams.
        :type: bool
        """
        
        self._commit_asynchronous = commit_asynchronous

    @property
    def description(self):
        """
        Gets the description of this NfsExportCreateParams.
        A human readable description of the export.

        :return: The description of this NfsExportCreateParams.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this NfsExportCreateParams.
        A human readable description of the export.

        :param description: The description of this NfsExportCreateParams.
        :type: str
        """
        
        self._description = description

    @property
    def directory_transfer_size(self):
        """
        Gets the directory_transfer_size of this NfsExportCreateParams.
        The preferred size for directory read operations.  This option is advisory.

        :return: The directory_transfer_size of this NfsExportCreateParams.
        :rtype: int
        """
        return self._directory_transfer_size

    @directory_transfer_size.setter
    def directory_transfer_size(self, directory_transfer_size):
        """
        Sets the directory_transfer_size of this NfsExportCreateParams.
        The preferred size for directory read operations.  This option is advisory.

        :param directory_transfer_size: The directory_transfer_size of this NfsExportCreateParams.
        :type: int
        """
        
        self._directory_transfer_size = directory_transfer_size

    @property
    def encoding(self):
        """
        Gets the encoding of this NfsExportCreateParams.
        The character encoding of clients connecting to the export.

        :return: The encoding of this NfsExportCreateParams.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """
        Sets the encoding of this NfsExportCreateParams.
        The character encoding of clients connecting to the export.

        :param encoding: The encoding of this NfsExportCreateParams.
        :type: str
        """
        
        self._encoding = encoding

    @property
    def link_max(self):
        """
        Gets the link_max of this NfsExportCreateParams.
        The reported maximum number of links to a file.

        :return: The link_max of this NfsExportCreateParams.
        :rtype: int
        """
        return self._link_max

    @link_max.setter
    def link_max(self, link_max):
        """
        Sets the link_max of this NfsExportCreateParams.
        The reported maximum number of links to a file.

        :param link_max: The link_max of this NfsExportCreateParams.
        :type: int
        """
        
        self._link_max = link_max

    @property
    def map_all(self):
        """
        Gets the map_all of this NfsExportCreateParams.
        User and group mapping.

        :return: The map_all of this NfsExportCreateParams.
        :rtype: NfsExportMapAll
        """
        return self._map_all

    @map_all.setter
    def map_all(self, map_all):
        """
        Sets the map_all of this NfsExportCreateParams.
        User and group mapping.

        :param map_all: The map_all of this NfsExportCreateParams.
        :type: NfsExportMapAll
        """
        
        self._map_all = map_all

    @property
    def map_failure(self):
        """
        Gets the map_failure of this NfsExportCreateParams.
        User and group mapping.

        :return: The map_failure of this NfsExportCreateParams.
        :rtype: NfsExportMapAll
        """
        return self._map_failure

    @map_failure.setter
    def map_failure(self, map_failure):
        """
        Sets the map_failure of this NfsExportCreateParams.
        User and group mapping.

        :param map_failure: The map_failure of this NfsExportCreateParams.
        :type: NfsExportMapAll
        """
        
        self._map_failure = map_failure

    @property
    def map_full(self):
        """
        Gets the map_full of this NfsExportCreateParams.
        If true, user mappings queries the OneFS user database.  If false, only local authentication is queried.

        :return: The map_full of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._map_full

    @map_full.setter
    def map_full(self, map_full):
        """
        Sets the map_full of this NfsExportCreateParams.
        If true, user mappings queries the OneFS user database.  If false, only local authentication is queried.

        :param map_full: The map_full of this NfsExportCreateParams.
        :type: bool
        """
        
        self._map_full = map_full

    @property
    def map_lookup_uid(self):
        """
        Gets the map_lookup_uid of this NfsExportCreateParams.
        If true, incoming UIDs are mapped to users in the OneFS user database.  If false, incoming UIDs are applied directly to file operations.

        :return: The map_lookup_uid of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._map_lookup_uid

    @map_lookup_uid.setter
    def map_lookup_uid(self, map_lookup_uid):
        """
        Sets the map_lookup_uid of this NfsExportCreateParams.
        If true, incoming UIDs are mapped to users in the OneFS user database.  If false, incoming UIDs are applied directly to file operations.

        :param map_lookup_uid: The map_lookup_uid of this NfsExportCreateParams.
        :type: bool
        """
        
        self._map_lookup_uid = map_lookup_uid

    @property
    def map_non_root(self):
        """
        Gets the map_non_root of this NfsExportCreateParams.
        User and group mapping.

        :return: The map_non_root of this NfsExportCreateParams.
        :rtype: NfsExportMapAll
        """
        return self._map_non_root

    @map_non_root.setter
    def map_non_root(self, map_non_root):
        """
        Sets the map_non_root of this NfsExportCreateParams.
        User and group mapping.

        :param map_non_root: The map_non_root of this NfsExportCreateParams.
        :type: NfsExportMapAll
        """
        
        self._map_non_root = map_non_root

    @property
    def map_retry(self):
        """
        Gets the map_retry of this NfsExportCreateParams.
        Determines whether lookups for users specified in map_all, map_root or map_nonroot are retried if the look fails.

        :return: The map_retry of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._map_retry

    @map_retry.setter
    def map_retry(self, map_retry):
        """
        Sets the map_retry of this NfsExportCreateParams.
        Determines whether lookups for users specified in map_all, map_root or map_nonroot are retried if the look fails.

        :param map_retry: The map_retry of this NfsExportCreateParams.
        :type: bool
        """
        
        self._map_retry = map_retry

    @property
    def map_root(self):
        """
        Gets the map_root of this NfsExportCreateParams.
        User and group mapping.

        :return: The map_root of this NfsExportCreateParams.
        :rtype: NfsExportMapAll
        """
        return self._map_root

    @map_root.setter
    def map_root(self, map_root):
        """
        Sets the map_root of this NfsExportCreateParams.
        User and group mapping.

        :param map_root: The map_root of this NfsExportCreateParams.
        :type: NfsExportMapAll
        """
        
        self._map_root = map_root

    @property
    def max_file_size(self):
        """
        Gets the max_file_size of this NfsExportCreateParams.
        The maximum file size in the export.

        :return: The max_file_size of this NfsExportCreateParams.
        :rtype: int
        """
        return self._max_file_size

    @max_file_size.setter
    def max_file_size(self, max_file_size):
        """
        Sets the max_file_size of this NfsExportCreateParams.
        The maximum file size in the export.

        :param max_file_size: The max_file_size of this NfsExportCreateParams.
        :type: int
        """
        
        self._max_file_size = max_file_size

    @property
    def name_max_size(self):
        """
        Gets the name_max_size of this NfsExportCreateParams.
        The reported maximum length of a file name.

        :return: The name_max_size of this NfsExportCreateParams.
        :rtype: int
        """
        return self._name_max_size

    @name_max_size.setter
    def name_max_size(self, name_max_size):
        """
        Sets the name_max_size of this NfsExportCreateParams.
        The reported maximum length of a file name.

        :param name_max_size: The name_max_size of this NfsExportCreateParams.
        :type: int
        """
        
        self._name_max_size = name_max_size

    @property
    def no_truncate(self):
        """
        Gets the no_truncate of this NfsExportCreateParams.
        If true, report that too-long file names result in an error

        :return: The no_truncate of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._no_truncate

    @no_truncate.setter
    def no_truncate(self, no_truncate):
        """
        Sets the no_truncate of this NfsExportCreateParams.
        If true, report that too-long file names result in an error

        :param no_truncate: The no_truncate of this NfsExportCreateParams.
        :type: bool
        """
        
        self._no_truncate = no_truncate

    @property
    def paths(self):
        """
        Gets the paths of this NfsExportCreateParams.
        The paths under /ifs that are exported.

        :return: The paths of this NfsExportCreateParams.
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """
        Sets the paths of this NfsExportCreateParams.
        The paths under /ifs that are exported.

        :param paths: The paths of this NfsExportCreateParams.
        :type: list[str]
        """
        
        self._paths = paths

    @property
    def read_only(self):
        """
        Gets the read_only of this NfsExportCreateParams.
        If true, the export is read-only.

        :return: The read_only of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """
        Sets the read_only of this NfsExportCreateParams.
        If true, the export is read-only.

        :param read_only: The read_only of this NfsExportCreateParams.
        :type: bool
        """
        
        self._read_only = read_only

    @property
    def read_only_clients(self):
        """
        Gets the read_only_clients of this NfsExportCreateParams.
        Clients that have read only access to the export.

        :return: The read_only_clients of this NfsExportCreateParams.
        :rtype: list[str]
        """
        return self._read_only_clients

    @read_only_clients.setter
    def read_only_clients(self, read_only_clients):
        """
        Sets the read_only_clients of this NfsExportCreateParams.
        Clients that have read only access to the export.

        :param read_only_clients: The read_only_clients of this NfsExportCreateParams.
        :type: list[str]
        """
        
        self._read_only_clients = read_only_clients

    @property
    def read_transfer_max_size(self):
        """
        Gets the read_transfer_max_size of this NfsExportCreateParams.
        The maximum buffer size that clients should use on NFS read requests.  This option is advisory.

        :return: The read_transfer_max_size of this NfsExportCreateParams.
        :rtype: int
        """
        return self._read_transfer_max_size

    @read_transfer_max_size.setter
    def read_transfer_max_size(self, read_transfer_max_size):
        """
        Sets the read_transfer_max_size of this NfsExportCreateParams.
        The maximum buffer size that clients should use on NFS read requests.  This option is advisory.

        :param read_transfer_max_size: The read_transfer_max_size of this NfsExportCreateParams.
        :type: int
        """
        
        self._read_transfer_max_size = read_transfer_max_size

    @property
    def read_transfer_multiple(self):
        """
        Gets the read_transfer_multiple of this NfsExportCreateParams.
        The preferred multiple size for NFS read requests.  This option is advisory.

        :return: The read_transfer_multiple of this NfsExportCreateParams.
        :rtype: int
        """
        return self._read_transfer_multiple

    @read_transfer_multiple.setter
    def read_transfer_multiple(self, read_transfer_multiple):
        """
        Sets the read_transfer_multiple of this NfsExportCreateParams.
        The preferred multiple size for NFS read requests.  This option is advisory.

        :param read_transfer_multiple: The read_transfer_multiple of this NfsExportCreateParams.
        :type: int
        """
        
        self._read_transfer_multiple = read_transfer_multiple

    @property
    def read_transfer_size(self):
        """
        Gets the read_transfer_size of this NfsExportCreateParams.
        The optimal size for NFS read requests.  This option is advisory.

        :return: The read_transfer_size of this NfsExportCreateParams.
        :rtype: int
        """
        return self._read_transfer_size

    @read_transfer_size.setter
    def read_transfer_size(self, read_transfer_size):
        """
        Sets the read_transfer_size of this NfsExportCreateParams.
        The optimal size for NFS read requests.  This option is advisory.

        :param read_transfer_size: The read_transfer_size of this NfsExportCreateParams.
        :type: int
        """
        
        self._read_transfer_size = read_transfer_size

    @property
    def read_write_clients(self):
        """
        Gets the read_write_clients of this NfsExportCreateParams.
        Clients that have read and write access to the export, even if the export is read-only.

        :return: The read_write_clients of this NfsExportCreateParams.
        :rtype: list[str]
        """
        return self._read_write_clients

    @read_write_clients.setter
    def read_write_clients(self, read_write_clients):
        """
        Sets the read_write_clients of this NfsExportCreateParams.
        Clients that have read and write access to the export, even if the export is read-only.

        :param read_write_clients: The read_write_clients of this NfsExportCreateParams.
        :type: list[str]
        """
        
        self._read_write_clients = read_write_clients

    @property
    def readdirplus(self):
        """
        Gets the readdirplus of this NfsExportCreateParams.
        If true, readdirplus requests are enabled.

        :return: The readdirplus of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._readdirplus

    @readdirplus.setter
    def readdirplus(self, readdirplus):
        """
        Sets the readdirplus of this NfsExportCreateParams.
        If true, readdirplus requests are enabled.

        :param readdirplus: The readdirplus of this NfsExportCreateParams.
        :type: bool
        """
        
        self._readdirplus = readdirplus

    @property
    def readdirplus_prefetch(self):
        """
        Gets the readdirplus_prefetch of this NfsExportCreateParams.
        This field is deprecated and does not do anything.

        :return: The readdirplus_prefetch of this NfsExportCreateParams.
        :rtype: int
        """
        return self._readdirplus_prefetch

    @readdirplus_prefetch.setter
    def readdirplus_prefetch(self, readdirplus_prefetch):
        """
        Sets the readdirplus_prefetch of this NfsExportCreateParams.
        This field is deprecated and does not do anything.

        :param readdirplus_prefetch: The readdirplus_prefetch of this NfsExportCreateParams.
        :type: int
        """
        
        self._readdirplus_prefetch = readdirplus_prefetch

    @property
    def return_32bit_file_ids(self):
        """
        Gets the return_32bit_file_ids of this NfsExportCreateParams.
        Limits the size of file identifiers returned by NFSv3+ to 32-bit values.

        :return: The return_32bit_file_ids of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._return_32bit_file_ids

    @return_32bit_file_ids.setter
    def return_32bit_file_ids(self, return_32bit_file_ids):
        """
        Sets the return_32bit_file_ids of this NfsExportCreateParams.
        Limits the size of file identifiers returned by NFSv3+ to 32-bit values.

        :param return_32bit_file_ids: The return_32bit_file_ids of this NfsExportCreateParams.
        :type: bool
        """
        
        self._return_32bit_file_ids = return_32bit_file_ids

    @property
    def root_clients(self):
        """
        Gets the root_clients of this NfsExportCreateParams.
        Clients that have root access to the export.

        :return: The root_clients of this NfsExportCreateParams.
        :rtype: list[str]
        """
        return self._root_clients

    @root_clients.setter
    def root_clients(self, root_clients):
        """
        Sets the root_clients of this NfsExportCreateParams.
        Clients that have root access to the export.

        :param root_clients: The root_clients of this NfsExportCreateParams.
        :type: list[str]
        """
        
        self._root_clients = root_clients

    @property
    def security_flavors(self):
        """
        Gets the security_flavors of this NfsExportCreateParams.
        The authentication flavors that are supported for this export.

        :return: The security_flavors of this NfsExportCreateParams.
        :rtype: list[str]
        """
        return self._security_flavors

    @security_flavors.setter
    def security_flavors(self, security_flavors):
        """
        Sets the security_flavors of this NfsExportCreateParams.
        The authentication flavors that are supported for this export.

        :param security_flavors: The security_flavors of this NfsExportCreateParams.
        :type: list[str]
        """
        
        self._security_flavors = security_flavors

    @property
    def setattr_asynchronous(self):
        """
        Gets the setattr_asynchronous of this NfsExportCreateParams.
        If true, allows setattr operations to execute asynchronously.

        :return: The setattr_asynchronous of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._setattr_asynchronous

    @setattr_asynchronous.setter
    def setattr_asynchronous(self, setattr_asynchronous):
        """
        Sets the setattr_asynchronous of this NfsExportCreateParams.
        If true, allows setattr operations to execute asynchronously.

        :param setattr_asynchronous: The setattr_asynchronous of this NfsExportCreateParams.
        :type: bool
        """
        
        self._setattr_asynchronous = setattr_asynchronous

    @property
    def snapshot(self):
        """
        Gets the snapshot of this NfsExportCreateParams.
        Use this snapshot for all mounts.

        :return: The snapshot of this NfsExportCreateParams.
        :rtype: str
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """
        Sets the snapshot of this NfsExportCreateParams.
        Use this snapshot for all mounts.

        :param snapshot: The snapshot of this NfsExportCreateParams.
        :type: str
        """
        
        self._snapshot = snapshot

    @property
    def symlinks(self):
        """
        Gets the symlinks of this NfsExportCreateParams.
        If true, paths reachable by symlinks are exported.

        :return: The symlinks of this NfsExportCreateParams.
        :rtype: bool
        """
        return self._symlinks

    @symlinks.setter
    def symlinks(self, symlinks):
        """
        Sets the symlinks of this NfsExportCreateParams.
        If true, paths reachable by symlinks are exported.

        :param symlinks: The symlinks of this NfsExportCreateParams.
        :type: bool
        """
        
        self._symlinks = symlinks

    @property
    def time_delta(self):
        """
        Gets the time_delta of this NfsExportCreateParams.
        The resolution of all time values that are returned to clients.

        :return: The time_delta of this NfsExportCreateParams.
        :rtype: float
        """
        return self._time_delta

    @time_delta.setter
    def time_delta(self, time_delta):
        """
        Sets the time_delta of this NfsExportCreateParams.
        The resolution of all time values that are returned to clients.

        :param time_delta: The time_delta of this NfsExportCreateParams.
        :type: float
        """
        
        self._time_delta = time_delta

    @property
    def write_datasync_action(self):
        """
        Gets the write_datasync_action of this NfsExportCreateParams.
        The synchronization type.

        :return: The write_datasync_action of this NfsExportCreateParams.
        :rtype: str
        """
        return self._write_datasync_action

    @write_datasync_action.setter
    def write_datasync_action(self, write_datasync_action):
        """
        Sets the write_datasync_action of this NfsExportCreateParams.
        The synchronization type.

        :param write_datasync_action: The write_datasync_action of this NfsExportCreateParams.
        :type: str
        """
        allowed_values = ["DATASYNC", "FILESYNC", "UNSTABLE"]
        if write_datasync_action is not None and write_datasync_action not in allowed_values:
            raise ValueError(
                "Invalid value for `write_datasync_action`, must be one of {0}"
                .format(allowed_values)
            )

        self._write_datasync_action = write_datasync_action

    @property
    def write_datasync_reply(self):
        """
        Gets the write_datasync_reply of this NfsExportCreateParams.
        The synchronization type.

        :return: The write_datasync_reply of this NfsExportCreateParams.
        :rtype: str
        """
        return self._write_datasync_reply

    @write_datasync_reply.setter
    def write_datasync_reply(self, write_datasync_reply):
        """
        Sets the write_datasync_reply of this NfsExportCreateParams.
        The synchronization type.

        :param write_datasync_reply: The write_datasync_reply of this NfsExportCreateParams.
        :type: str
        """
        allowed_values = ["DATASYNC", "FILESYNC", "UNSTABLE"]
        if write_datasync_reply is not None and write_datasync_reply not in allowed_values:
            raise ValueError(
                "Invalid value for `write_datasync_reply`, must be one of {0}"
                .format(allowed_values)
            )

        self._write_datasync_reply = write_datasync_reply

    @property
    def write_filesync_action(self):
        """
        Gets the write_filesync_action of this NfsExportCreateParams.
        The synchronization type.

        :return: The write_filesync_action of this NfsExportCreateParams.
        :rtype: str
        """
        return self._write_filesync_action

    @write_filesync_action.setter
    def write_filesync_action(self, write_filesync_action):
        """
        Sets the write_filesync_action of this NfsExportCreateParams.
        The synchronization type.

        :param write_filesync_action: The write_filesync_action of this NfsExportCreateParams.
        :type: str
        """
        allowed_values = ["DATASYNC", "FILESYNC", "UNSTABLE"]
        if write_filesync_action is not None and write_filesync_action not in allowed_values:
            raise ValueError(
                "Invalid value for `write_filesync_action`, must be one of {0}"
                .format(allowed_values)
            )

        self._write_filesync_action = write_filesync_action

    @property
    def write_filesync_reply(self):
        """
        Gets the write_filesync_reply of this NfsExportCreateParams.
        The synchronization type.

        :return: The write_filesync_reply of this NfsExportCreateParams.
        :rtype: str
        """
        return self._write_filesync_reply

    @write_filesync_reply.setter
    def write_filesync_reply(self, write_filesync_reply):
        """
        Sets the write_filesync_reply of this NfsExportCreateParams.
        The synchronization type.

        :param write_filesync_reply: The write_filesync_reply of this NfsExportCreateParams.
        :type: str
        """
        allowed_values = ["DATASYNC", "FILESYNC", "UNSTABLE"]
        if write_filesync_reply is not None and write_filesync_reply not in allowed_values:
            raise ValueError(
                "Invalid value for `write_filesync_reply`, must be one of {0}"
                .format(allowed_values)
            )

        self._write_filesync_reply = write_filesync_reply

    @property
    def write_transfer_max_size(self):
        """
        Gets the write_transfer_max_size of this NfsExportCreateParams.
        The maximum buffer size that clients should use on NFS write requests.  This option is advisory.

        :return: The write_transfer_max_size of this NfsExportCreateParams.
        :rtype: int
        """
        return self._write_transfer_max_size

    @write_transfer_max_size.setter
    def write_transfer_max_size(self, write_transfer_max_size):
        """
        Sets the write_transfer_max_size of this NfsExportCreateParams.
        The maximum buffer size that clients should use on NFS write requests.  This option is advisory.

        :param write_transfer_max_size: The write_transfer_max_size of this NfsExportCreateParams.
        :type: int
        """
        
        self._write_transfer_max_size = write_transfer_max_size

    @property
    def write_transfer_multiple(self):
        """
        Gets the write_transfer_multiple of this NfsExportCreateParams.
        The preferred multiple size for NFS write requests.  This option is advisory.

        :return: The write_transfer_multiple of this NfsExportCreateParams.
        :rtype: int
        """
        return self._write_transfer_multiple

    @write_transfer_multiple.setter
    def write_transfer_multiple(self, write_transfer_multiple):
        """
        Sets the write_transfer_multiple of this NfsExportCreateParams.
        The preferred multiple size for NFS write requests.  This option is advisory.

        :param write_transfer_multiple: The write_transfer_multiple of this NfsExportCreateParams.
        :type: int
        """
        
        self._write_transfer_multiple = write_transfer_multiple

    @property
    def write_transfer_size(self):
        """
        Gets the write_transfer_size of this NfsExportCreateParams.
        The optimal size for NFS read requests.  This option is advisory.

        :return: The write_transfer_size of this NfsExportCreateParams.
        :rtype: int
        """
        return self._write_transfer_size

    @write_transfer_size.setter
    def write_transfer_size(self, write_transfer_size):
        """
        Sets the write_transfer_size of this NfsExportCreateParams.
        The optimal size for NFS read requests.  This option is advisory.

        :param write_transfer_size: The write_transfer_size of this NfsExportCreateParams.
        :type: int
        """
        
        self._write_transfer_size = write_transfer_size

    @property
    def write_unstable_action(self):
        """
        Gets the write_unstable_action of this NfsExportCreateParams.
        The synchronization type.

        :return: The write_unstable_action of this NfsExportCreateParams.
        :rtype: str
        """
        return self._write_unstable_action

    @write_unstable_action.setter
    def write_unstable_action(self, write_unstable_action):
        """
        Sets the write_unstable_action of this NfsExportCreateParams.
        The synchronization type.

        :param write_unstable_action: The write_unstable_action of this NfsExportCreateParams.
        :type: str
        """
        allowed_values = ["DATASYNC", "FILESYNC", "UNSTABLE"]
        if write_unstable_action is not None and write_unstable_action not in allowed_values:
            raise ValueError(
                "Invalid value for `write_unstable_action`, must be one of {0}"
                .format(allowed_values)
            )

        self._write_unstable_action = write_unstable_action

    @property
    def write_unstable_reply(self):
        """
        Gets the write_unstable_reply of this NfsExportCreateParams.
        The synchronization type.

        :return: The write_unstable_reply of this NfsExportCreateParams.
        :rtype: str
        """
        return self._write_unstable_reply

    @write_unstable_reply.setter
    def write_unstable_reply(self, write_unstable_reply):
        """
        Sets the write_unstable_reply of this NfsExportCreateParams.
        The synchronization type.

        :param write_unstable_reply: The write_unstable_reply of this NfsExportCreateParams.
        :type: str
        """
        allowed_values = ["DATASYNC", "FILESYNC", "UNSTABLE"]
        if write_unstable_reply is not None and write_unstable_reply not in allowed_values:
            raise ValueError(
                "Invalid value for `write_unstable_reply`, must be one of {0}"
                .format(allowed_values)
            )

        self._write_unstable_reply = write_unstable_reply

    @property
    def zone(self):
        """
        Gets the zone of this NfsExportCreateParams.
        The zone in which the export is valid

        :return: The zone of this NfsExportCreateParams.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """
        Sets the zone of this NfsExportCreateParams.
        The zone in which the export is valid

        :param zone: The zone of this NfsExportCreateParams.
        :type: str
        """
        
        self._zone = zone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

