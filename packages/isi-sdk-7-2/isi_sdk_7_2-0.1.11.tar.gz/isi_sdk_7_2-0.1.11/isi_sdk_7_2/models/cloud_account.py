# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class CloudAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CloudAccount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_username': 'str',
            'enabled': 'bool',
            'key': 'str',
            'name': 'str',
            'uri': 'str'
        }

        self.attribute_map = {
            'account_username': 'account_username',
            'enabled': 'enabled',
            'key': 'key',
            'name': 'name',
            'uri': 'uri'
        }

        self._account_username = None
        self._enabled = None
        self._key = None
        self._name = None
        self._uri = None

    @property
    def account_username(self):
        """
        Gets the account_username of this CloudAccount.
        The username required to authenticate against the cloud service

        :return: The account_username of this CloudAccount.
        :rtype: str
        """
        return self._account_username

    @account_username.setter
    def account_username(self, account_username):
        """
        Sets the account_username of this CloudAccount.
        The username required to authenticate against the cloud service

        :param account_username: The account_username of this CloudAccount.
        :type: str
        """
        
        self._account_username = account_username

    @property
    def enabled(self):
        """
        Gets the enabled of this CloudAccount.
        Whether or not this account should be used for cloud storage

        :return: The enabled of this CloudAccount.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this CloudAccount.
        Whether or not this account should be used for cloud storage

        :param enabled: The enabled of this CloudAccount.
        :type: bool
        """
        
        self._enabled = enabled

    @property
    def key(self):
        """
        Gets the key of this CloudAccount.
        A valid authentication key for connecting to the cloud

        :return: The key of this CloudAccount.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this CloudAccount.
        A valid authentication key for connecting to the cloud

        :param key: The key of this CloudAccount.
        :type: str
        """
        
        self._key = key

    @property
    def name(self):
        """
        Gets the name of this CloudAccount.
        A unique name for this account

        :return: The name of this CloudAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CloudAccount.
        A unique name for this account

        :param name: The name of this CloudAccount.
        :type: str
        """
        
        self._name = name

    @property
    def uri(self):
        """
        Gets the uri of this CloudAccount.
        A valid URI pointing to the location of the cloud storage

        :return: The uri of this CloudAccount.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this CloudAccount.
        A valid URI pointing to the location of the cloud storage

        :param uri: The uri of this CloudAccount.
        :type: str
        """
        
        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

