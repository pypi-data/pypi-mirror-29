# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ProvidersNisIdParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProvidersNisIdParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'authentication': 'bool',
            'balance_servers': 'bool',
            'cache_entry_expiry': 'int',
            'check_online_interval': 'int',
            'create_home_directory': 'bool',
            'enabled': 'bool',
            'enumerate_groups': 'bool',
            'enumerate_users': 'bool',
            'findable_groups': 'list[str]',
            'findable_users': 'list[str]',
            'group_domain': 'str',
            'home_directory_template': 'str',
            'hostname_lookup': 'bool',
            'listable_groups': 'list[str]',
            'listable_users': 'list[str]',
            'login_shell': 'str',
            'name': 'str',
            'nis_domain': 'str',
            'normalize_groups': 'bool',
            'normalize_users': 'bool',
            'ntlm_support': 'str',
            'provider_domain': 'str',
            'request_timeout': 'int',
            'restrict_findable': 'bool',
            'restrict_listable': 'bool',
            'retry_time': 'int',
            'servers': 'list[str]',
            'unfindable_groups': 'list[str]',
            'unfindable_users': 'list[str]',
            'unlistable_groups': 'list[str]',
            'unlistable_users': 'list[str]',
            'user_domain': 'str',
            'ypmatch_using_tcp': 'bool'
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'balance_servers': 'balance_servers',
            'cache_entry_expiry': 'cache_entry_expiry',
            'check_online_interval': 'check_online_interval',
            'create_home_directory': 'create_home_directory',
            'enabled': 'enabled',
            'enumerate_groups': 'enumerate_groups',
            'enumerate_users': 'enumerate_users',
            'findable_groups': 'findable_groups',
            'findable_users': 'findable_users',
            'group_domain': 'group_domain',
            'home_directory_template': 'home_directory_template',
            'hostname_lookup': 'hostname_lookup',
            'listable_groups': 'listable_groups',
            'listable_users': 'listable_users',
            'login_shell': 'login_shell',
            'name': 'name',
            'nis_domain': 'nis_domain',
            'normalize_groups': 'normalize_groups',
            'normalize_users': 'normalize_users',
            'ntlm_support': 'ntlm_support',
            'provider_domain': 'provider_domain',
            'request_timeout': 'request_timeout',
            'restrict_findable': 'restrict_findable',
            'restrict_listable': 'restrict_listable',
            'retry_time': 'retry_time',
            'servers': 'servers',
            'unfindable_groups': 'unfindable_groups',
            'unfindable_users': 'unfindable_users',
            'unlistable_groups': 'unlistable_groups',
            'unlistable_users': 'unlistable_users',
            'user_domain': 'user_domain',
            'ypmatch_using_tcp': 'ypmatch_using_tcp'
        }

        self._authentication = None
        self._balance_servers = None
        self._cache_entry_expiry = None
        self._check_online_interval = None
        self._create_home_directory = None
        self._enabled = None
        self._enumerate_groups = None
        self._enumerate_users = None
        self._findable_groups = None
        self._findable_users = None
        self._group_domain = None
        self._home_directory_template = None
        self._hostname_lookup = None
        self._listable_groups = None
        self._listable_users = None
        self._login_shell = None
        self._name = None
        self._nis_domain = None
        self._normalize_groups = None
        self._normalize_users = None
        self._ntlm_support = None
        self._provider_domain = None
        self._request_timeout = None
        self._restrict_findable = None
        self._restrict_listable = None
        self._retry_time = None
        self._servers = None
        self._unfindable_groups = None
        self._unfindable_users = None
        self._unlistable_groups = None
        self._unlistable_users = None
        self._user_domain = None
        self._ypmatch_using_tcp = None

    @property
    def authentication(self):
        """
        Gets the authentication of this ProvidersNisIdParams.
        Enables use of provider for authentication as well as identity.

        :return: The authentication of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """
        Sets the authentication of this ProvidersNisIdParams.
        Enables use of provider for authentication as well as identity.

        :param authentication: The authentication of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._authentication = authentication

    @property
    def balance_servers(self):
        """
        Gets the balance_servers of this ProvidersNisIdParams.
        Makes provider connect to a random server.

        :return: The balance_servers of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._balance_servers

    @balance_servers.setter
    def balance_servers(self, balance_servers):
        """
        Sets the balance_servers of this ProvidersNisIdParams.
        Makes provider connect to a random server.

        :param balance_servers: The balance_servers of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._balance_servers = balance_servers

    @property
    def cache_entry_expiry(self):
        """
        Gets the cache_entry_expiry of this ProvidersNisIdParams.
        Specifies amount of time in seconds to cache a user/group.

        :return: The cache_entry_expiry of this ProvidersNisIdParams.
        :rtype: int
        """
        return self._cache_entry_expiry

    @cache_entry_expiry.setter
    def cache_entry_expiry(self, cache_entry_expiry):
        """
        Sets the cache_entry_expiry of this ProvidersNisIdParams.
        Specifies amount of time in seconds to cache a user/group.

        :param cache_entry_expiry: The cache_entry_expiry of this ProvidersNisIdParams.
        :type: int
        """
        
        self._cache_entry_expiry = cache_entry_expiry

    @property
    def check_online_interval(self):
        """
        Gets the check_online_interval of this ProvidersNisIdParams.
        Specifies time in seconds between provider online checks.

        :return: The check_online_interval of this ProvidersNisIdParams.
        :rtype: int
        """
        return self._check_online_interval

    @check_online_interval.setter
    def check_online_interval(self, check_online_interval):
        """
        Sets the check_online_interval of this ProvidersNisIdParams.
        Specifies time in seconds between provider online checks.

        :param check_online_interval: The check_online_interval of this ProvidersNisIdParams.
        :type: int
        """
        
        self._check_online_interval = check_online_interval

    @property
    def create_home_directory(self):
        """
        Gets the create_home_directory of this ProvidersNisIdParams.
        Automatically create home directory on first login.

        :return: The create_home_directory of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._create_home_directory

    @create_home_directory.setter
    def create_home_directory(self, create_home_directory):
        """
        Sets the create_home_directory of this ProvidersNisIdParams.
        Automatically create home directory on first login.

        :param create_home_directory: The create_home_directory of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._create_home_directory = create_home_directory

    @property
    def enabled(self):
        """
        Gets the enabled of this ProvidersNisIdParams.
        Enables NIS provider.

        :return: The enabled of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ProvidersNisIdParams.
        Enables NIS provider.

        :param enabled: The enabled of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._enabled = enabled

    @property
    def enumerate_groups(self):
        """
        Gets the enumerate_groups of this ProvidersNisIdParams.
        Enables provider to enumerate groups.

        :return: The enumerate_groups of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._enumerate_groups

    @enumerate_groups.setter
    def enumerate_groups(self, enumerate_groups):
        """
        Sets the enumerate_groups of this ProvidersNisIdParams.
        Enables provider to enumerate groups.

        :param enumerate_groups: The enumerate_groups of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._enumerate_groups = enumerate_groups

    @property
    def enumerate_users(self):
        """
        Gets the enumerate_users of this ProvidersNisIdParams.
        Enables provider to enumerate users.

        :return: The enumerate_users of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._enumerate_users

    @enumerate_users.setter
    def enumerate_users(self, enumerate_users):
        """
        Sets the enumerate_users of this ProvidersNisIdParams.
        Enables provider to enumerate users.

        :param enumerate_users: The enumerate_users of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._enumerate_users = enumerate_users

    @property
    def findable_groups(self):
        """
        Gets the findable_groups of this ProvidersNisIdParams.
        Sets list of groups that can be resolved.

        :return: The findable_groups of this ProvidersNisIdParams.
        :rtype: list[str]
        """
        return self._findable_groups

    @findable_groups.setter
    def findable_groups(self, findable_groups):
        """
        Sets the findable_groups of this ProvidersNisIdParams.
        Sets list of groups that can be resolved.

        :param findable_groups: The findable_groups of this ProvidersNisIdParams.
        :type: list[str]
        """
        
        self._findable_groups = findable_groups

    @property
    def findable_users(self):
        """
        Gets the findable_users of this ProvidersNisIdParams.
        Sets list of users that can be resolved.

        :return: The findable_users of this ProvidersNisIdParams.
        :rtype: list[str]
        """
        return self._findable_users

    @findable_users.setter
    def findable_users(self, findable_users):
        """
        Sets the findable_users of this ProvidersNisIdParams.
        Sets list of users that can be resolved.

        :param findable_users: The findable_users of this ProvidersNisIdParams.
        :type: list[str]
        """
        
        self._findable_users = findable_users

    @property
    def group_domain(self):
        """
        Gets the group_domain of this ProvidersNisIdParams.
        Domain used to qualify groups for this provider.

        :return: The group_domain of this ProvidersNisIdParams.
        :rtype: str
        """
        return self._group_domain

    @group_domain.setter
    def group_domain(self, group_domain):
        """
        Sets the group_domain of this ProvidersNisIdParams.
        Domain used to qualify groups for this provider.

        :param group_domain: The group_domain of this ProvidersNisIdParams.
        :type: str
        """
        
        self._group_domain = group_domain

    @property
    def home_directory_template(self):
        """
        Gets the home_directory_template of this ProvidersNisIdParams.
        Specifies home directory template path.

        :return: The home_directory_template of this ProvidersNisIdParams.
        :rtype: str
        """
        return self._home_directory_template

    @home_directory_template.setter
    def home_directory_template(self, home_directory_template):
        """
        Sets the home_directory_template of this ProvidersNisIdParams.
        Specifies home directory template path.

        :param home_directory_template: The home_directory_template of this ProvidersNisIdParams.
        :type: str
        """
        
        self._home_directory_template = home_directory_template

    @property
    def hostname_lookup(self):
        """
        Gets the hostname_lookup of this ProvidersNisIdParams.
        Enables host name lookups.

        :return: The hostname_lookup of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._hostname_lookup

    @hostname_lookup.setter
    def hostname_lookup(self, hostname_lookup):
        """
        Sets the hostname_lookup of this ProvidersNisIdParams.
        Enables host name lookups.

        :param hostname_lookup: The hostname_lookup of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._hostname_lookup = hostname_lookup

    @property
    def listable_groups(self):
        """
        Gets the listable_groups of this ProvidersNisIdParams.
        Specifies groups that can be viewed in the provider.

        :return: The listable_groups of this ProvidersNisIdParams.
        :rtype: list[str]
        """
        return self._listable_groups

    @listable_groups.setter
    def listable_groups(self, listable_groups):
        """
        Sets the listable_groups of this ProvidersNisIdParams.
        Specifies groups that can be viewed in the provider.

        :param listable_groups: The listable_groups of this ProvidersNisIdParams.
        :type: list[str]
        """
        
        self._listable_groups = listable_groups

    @property
    def listable_users(self):
        """
        Gets the listable_users of this ProvidersNisIdParams.
        Specifies users that can be viewed in the provider.

        :return: The listable_users of this ProvidersNisIdParams.
        :rtype: list[str]
        """
        return self._listable_users

    @listable_users.setter
    def listable_users(self, listable_users):
        """
        Sets the listable_users of this ProvidersNisIdParams.
        Specifies users that can be viewed in the provider.

        :param listable_users: The listable_users of this ProvidersNisIdParams.
        :type: list[str]
        """
        
        self._listable_users = listable_users

    @property
    def login_shell(self):
        """
        Gets the login_shell of this ProvidersNisIdParams.
        Sets login shell path.

        :return: The login_shell of this ProvidersNisIdParams.
        :rtype: str
        """
        return self._login_shell

    @login_shell.setter
    def login_shell(self, login_shell):
        """
        Sets the login_shell of this ProvidersNisIdParams.
        Sets login shell path.

        :param login_shell: The login_shell of this ProvidersNisIdParams.
        :type: str
        """
        
        self._login_shell = login_shell

    @property
    def name(self):
        """
        Gets the name of this ProvidersNisIdParams.
        Specifies NIS provider name.

        :return: The name of this ProvidersNisIdParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProvidersNisIdParams.
        Specifies NIS provider name.

        :param name: The name of this ProvidersNisIdParams.
        :type: str
        """
        
        self._name = name

    @property
    def nis_domain(self):
        """
        Gets the nis_domain of this ProvidersNisIdParams.
        Specifies NIS domain name.

        :return: The nis_domain of this ProvidersNisIdParams.
        :rtype: str
        """
        return self._nis_domain

    @nis_domain.setter
    def nis_domain(self, nis_domain):
        """
        Sets the nis_domain of this ProvidersNisIdParams.
        Specifies NIS domain name.

        :param nis_domain: The nis_domain of this ProvidersNisIdParams.
        :type: str
        """
        
        self._nis_domain = nis_domain

    @property
    def normalize_groups(self):
        """
        Gets the normalize_groups of this ProvidersNisIdParams.
        Normalizes group name to lowercase before lookup.

        :return: The normalize_groups of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._normalize_groups

    @normalize_groups.setter
    def normalize_groups(self, normalize_groups):
        """
        Sets the normalize_groups of this ProvidersNisIdParams.
        Normalizes group name to lowercase before lookup.

        :param normalize_groups: The normalize_groups of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._normalize_groups = normalize_groups

    @property
    def normalize_users(self):
        """
        Gets the normalize_users of this ProvidersNisIdParams.
        Normalizes user name to lowercase before lookup.

        :return: The normalize_users of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._normalize_users

    @normalize_users.setter
    def normalize_users(self, normalize_users):
        """
        Sets the normalize_users of this ProvidersNisIdParams.
        Normalizes user name to lowercase before lookup.

        :param normalize_users: The normalize_users of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._normalize_users = normalize_users

    @property
    def ntlm_support(self):
        """
        Gets the ntlm_support of this ProvidersNisIdParams.
        For users with NTLM-compatible credentials, specify what NTLM versions to support.

        :return: The ntlm_support of this ProvidersNisIdParams.
        :rtype: str
        """
        return self._ntlm_support

    @ntlm_support.setter
    def ntlm_support(self, ntlm_support):
        """
        Sets the ntlm_support of this ProvidersNisIdParams.
        For users with NTLM-compatible credentials, specify what NTLM versions to support.

        :param ntlm_support: The ntlm_support of this ProvidersNisIdParams.
        :type: str
        """
        allowed_values = ["all", "v2only", "none"]
        if ntlm_support is not None and ntlm_support not in allowed_values:
            raise ValueError(
                "Invalid value for `ntlm_support`, must be one of {0}"
                .format(allowed_values)
            )

        self._ntlm_support = ntlm_support

    @property
    def provider_domain(self):
        """
        Gets the provider_domain of this ProvidersNisIdParams.
        Specifies the provider domain.

        :return: The provider_domain of this ProvidersNisIdParams.
        :rtype: str
        """
        return self._provider_domain

    @provider_domain.setter
    def provider_domain(self, provider_domain):
        """
        Sets the provider_domain of this ProvidersNisIdParams.
        Specifies the provider domain.

        :param provider_domain: The provider_domain of this ProvidersNisIdParams.
        :type: str
        """
        
        self._provider_domain = provider_domain

    @property
    def request_timeout(self):
        """
        Gets the request_timeout of this ProvidersNisIdParams.
        Specifies the request timeout interval in seconds.

        :return: The request_timeout of this ProvidersNisIdParams.
        :rtype: int
        """
        return self._request_timeout

    @request_timeout.setter
    def request_timeout(self, request_timeout):
        """
        Sets the request_timeout of this ProvidersNisIdParams.
        Specifies the request timeout interval in seconds.

        :param request_timeout: The request_timeout of this ProvidersNisIdParams.
        :type: int
        """
        
        self._request_timeout = request_timeout

    @property
    def restrict_findable(self):
        """
        Gets the restrict_findable of this ProvidersNisIdParams.
        Check the provider for filtered lists of findable and unfindable users and groups.

        :return: The restrict_findable of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._restrict_findable

    @restrict_findable.setter
    def restrict_findable(self, restrict_findable):
        """
        Sets the restrict_findable of this ProvidersNisIdParams.
        Check the provider for filtered lists of findable and unfindable users and groups.

        :param restrict_findable: The restrict_findable of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._restrict_findable = restrict_findable

    @property
    def restrict_listable(self):
        """
        Gets the restrict_listable of this ProvidersNisIdParams.
        Check the provider for filtered lists of listable and unlistable users and groups.

        :return: The restrict_listable of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._restrict_listable

    @restrict_listable.setter
    def restrict_listable(self, restrict_listable):
        """
        Sets the restrict_listable of this ProvidersNisIdParams.
        Check the provider for filtered lists of listable and unlistable users and groups.

        :param restrict_listable: The restrict_listable of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._restrict_listable = restrict_listable

    @property
    def retry_time(self):
        """
        Gets the retry_time of this ProvidersNisIdParams.
        Sets timeout period in seconds after which a request will be retried.

        :return: The retry_time of this ProvidersNisIdParams.
        :rtype: int
        """
        return self._retry_time

    @retry_time.setter
    def retry_time(self, retry_time):
        """
        Sets the retry_time of this ProvidersNisIdParams.
        Sets timeout period in seconds after which a request will be retried.

        :param retry_time: The retry_time of this ProvidersNisIdParams.
        :type: int
        """
        
        self._retry_time = retry_time

    @property
    def servers(self):
        """
        Gets the servers of this ProvidersNisIdParams.
        Adds a NIS server to be used by this provider.

        :return: The servers of this ProvidersNisIdParams.
        :rtype: list[str]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """
        Sets the servers of this ProvidersNisIdParams.
        Adds a NIS server to be used by this provider.

        :param servers: The servers of this ProvidersNisIdParams.
        :type: list[str]
        """
        
        self._servers = servers

    @property
    def unfindable_groups(self):
        """
        Gets the unfindable_groups of this ProvidersNisIdParams.
        Specifies a group that cannot be resolved by the provider.

        :return: The unfindable_groups of this ProvidersNisIdParams.
        :rtype: list[str]
        """
        return self._unfindable_groups

    @unfindable_groups.setter
    def unfindable_groups(self, unfindable_groups):
        """
        Sets the unfindable_groups of this ProvidersNisIdParams.
        Specifies a group that cannot be resolved by the provider.

        :param unfindable_groups: The unfindable_groups of this ProvidersNisIdParams.
        :type: list[str]
        """
        
        self._unfindable_groups = unfindable_groups

    @property
    def unfindable_users(self):
        """
        Gets the unfindable_users of this ProvidersNisIdParams.
        Specifies a group that cannot be resolved by the provider.

        :return: The unfindable_users of this ProvidersNisIdParams.
        :rtype: list[str]
        """
        return self._unfindable_users

    @unfindable_users.setter
    def unfindable_users(self, unfindable_users):
        """
        Sets the unfindable_users of this ProvidersNisIdParams.
        Specifies a group that cannot be resolved by the provider.

        :param unfindable_users: The unfindable_users of this ProvidersNisIdParams.
        :type: list[str]
        """
        
        self._unfindable_users = unfindable_users

    @property
    def unlistable_groups(self):
        """
        Gets the unlistable_groups of this ProvidersNisIdParams.
        Specifies a group that cannot be listed by the provider.

        :return: The unlistable_groups of this ProvidersNisIdParams.
        :rtype: list[str]
        """
        return self._unlistable_groups

    @unlistable_groups.setter
    def unlistable_groups(self, unlistable_groups):
        """
        Sets the unlistable_groups of this ProvidersNisIdParams.
        Specifies a group that cannot be listed by the provider.

        :param unlistable_groups: The unlistable_groups of this ProvidersNisIdParams.
        :type: list[str]
        """
        
        self._unlistable_groups = unlistable_groups

    @property
    def unlistable_users(self):
        """
        Gets the unlistable_users of this ProvidersNisIdParams.
        Specifies a user that cannot be listed by the provider.

        :return: The unlistable_users of this ProvidersNisIdParams.
        :rtype: list[str]
        """
        return self._unlistable_users

    @unlistable_users.setter
    def unlistable_users(self, unlistable_users):
        """
        Sets the unlistable_users of this ProvidersNisIdParams.
        Specifies a user that cannot be listed by the provider.

        :param unlistable_users: The unlistable_users of this ProvidersNisIdParams.
        :type: list[str]
        """
        
        self._unlistable_users = unlistable_users

    @property
    def user_domain(self):
        """
        Gets the user_domain of this ProvidersNisIdParams.
        Domain used to qualify users for this provider.

        :return: The user_domain of this ProvidersNisIdParams.
        :rtype: str
        """
        return self._user_domain

    @user_domain.setter
    def user_domain(self, user_domain):
        """
        Sets the user_domain of this ProvidersNisIdParams.
        Domain used to qualify users for this provider.

        :param user_domain: The user_domain of this ProvidersNisIdParams.
        :type: str
        """
        
        self._user_domain = user_domain

    @property
    def ypmatch_using_tcp(self):
        """
        Gets the ypmatch_using_tcp of this ProvidersNisIdParams.
        Uses TCP for YP Match operations.

        :return: The ypmatch_using_tcp of this ProvidersNisIdParams.
        :rtype: bool
        """
        return self._ypmatch_using_tcp

    @ypmatch_using_tcp.setter
    def ypmatch_using_tcp(self, ypmatch_using_tcp):
        """
        Sets the ypmatch_using_tcp of this ProvidersNisIdParams.
        Uses TCP for YP Match operations.

        :param ypmatch_using_tcp: The ypmatch_using_tcp of this ProvidersNisIdParams.
        :type: bool
        """
        
        self._ypmatch_using_tcp = ypmatch_using_tcp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

