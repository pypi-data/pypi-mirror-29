# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class CloudJobCreateParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CloudJobCreateParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'directories': 'list[str]',
            'file_matching_pattern': 'Empty',
            'files': 'list[str]',
            'policy': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'directories': 'directories',
            'file_matching_pattern': 'file_matching_pattern',
            'files': 'files',
            'policy': 'policy',
            'type': 'type'
        }

        self._directories = None
        self._file_matching_pattern = None
        self._files = None
        self._policy = None
        self._type = None

    @property
    def directories(self):
        """
        Gets the directories of this CloudJobCreateParams.
        Directories addressed by this job

        :return: The directories of this CloudJobCreateParams.
        :rtype: list[str]
        """
        return self._directories

    @directories.setter
    def directories(self, directories):
        """
        Sets the directories of this CloudJobCreateParams.
        Directories addressed by this job

        :param directories: The directories of this CloudJobCreateParams.
        :type: list[str]
        """
        
        self._directories = directories

    @property
    def file_matching_pattern(self):
        """
        Gets the file_matching_pattern of this CloudJobCreateParams.
        The file filtering logic to find files for this job. (Only applicable for 'recall' jobs)

        :return: The file_matching_pattern of this CloudJobCreateParams.
        :rtype: Empty
        """
        return self._file_matching_pattern

    @file_matching_pattern.setter
    def file_matching_pattern(self, file_matching_pattern):
        """
        Sets the file_matching_pattern of this CloudJobCreateParams.
        The file filtering logic to find files for this job. (Only applicable for 'recall' jobs)

        :param file_matching_pattern: The file_matching_pattern of this CloudJobCreateParams.
        :type: Empty
        """
        
        self._file_matching_pattern = file_matching_pattern

    @property
    def files(self):
        """
        Gets the files of this CloudJobCreateParams.
        Filenames addressed by this job

        :return: The files of this CloudJobCreateParams.
        :rtype: list[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """
        Sets the files of this CloudJobCreateParams.
        Filenames addressed by this job

        :param files: The files of this CloudJobCreateParams.
        :type: list[str]
        """
        
        self._files = files

    @property
    def policy(self):
        """
        Gets the policy of this CloudJobCreateParams.
        The name of an existing cloudpool policy to apply to this job. (Only applicable for 'archive' jobs)

        :return: The policy of this CloudJobCreateParams.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """
        Sets the policy of this CloudJobCreateParams.
        The name of an existing cloudpool policy to apply to this job. (Only applicable for 'archive' jobs)

        :param policy: The policy of this CloudJobCreateParams.
        :type: str
        """
        
        self._policy = policy

    @property
    def type(self):
        """
        Gets the type of this CloudJobCreateParams.
        The type of cloud action to be performed by this job.

        :return: The type of this CloudJobCreateParams.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CloudJobCreateParams.
        The type of cloud action to be performed by this job.

        :param type: The type of this CloudJobCreateParams.
        :type: str
        """
        allowed_values = ["archive", "recall", "local-garbage-collection", "cloud-garbage-collection", "cache-writeback", "cache-on-access", "cache-invalidation"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

