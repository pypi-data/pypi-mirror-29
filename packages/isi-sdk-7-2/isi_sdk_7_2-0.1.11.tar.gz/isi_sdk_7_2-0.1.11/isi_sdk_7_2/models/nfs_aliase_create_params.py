# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NfsAliaseCreateParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NfsAliaseCreateParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'health': 'str',
            'name': 'str',
            'path': 'str',
            'zone': 'str'
        }

        self.attribute_map = {
            'health': 'health',
            'name': 'name',
            'path': 'path',
            'zone': 'zone'
        }

        self._health = None
        self._name = None
        self._path = None
        self._zone = None

    @property
    def health(self):
        """
        Gets the health of this NfsAliaseCreateParams.
        The health of the alias.

        :return: The health of this NfsAliaseCreateParams.
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """
        Sets the health of this NfsAliaseCreateParams.
        The health of the alias.

        :param health: The health of this NfsAliaseCreateParams.
        :type: str
        """
        allowed_values = ["good", "illegal file type", "illegal path", "name conflict", "not exported", "path not found", "unknown"]
        if health is not None and health not in allowed_values:
            raise ValueError(
                "Invalid value for `health`, must be one of {0}"
                .format(allowed_values)
            )

        self._health = health

    @property
    def name(self):
        """
        Gets the name of this NfsAliaseCreateParams.
        The name by which the alias can be referenced

        :return: The name of this NfsAliaseCreateParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NfsAliaseCreateParams.
        The name by which the alias can be referenced

        :param name: The name of this NfsAliaseCreateParams.
        :type: str
        """
        
        self._name = name

    @property
    def path(self):
        """
        Gets the path of this NfsAliaseCreateParams.
        The path to which the alias points

        :return: The path of this NfsAliaseCreateParams.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this NfsAliaseCreateParams.
        The path to which the alias points

        :param path: The path of this NfsAliaseCreateParams.
        :type: str
        """
        
        self._path = path

    @property
    def zone(self):
        """
        Gets the zone of this NfsAliaseCreateParams.
        The zone in which the alias is valid

        :return: The zone of this NfsAliaseCreateParams.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """
        Sets the zone of this NfsAliaseCreateParams.
        The zone in which the alias is valid

        :param zone: The zone of this NfsAliaseCreateParams.
        :type: str
        """
        
        self._zone = zone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

