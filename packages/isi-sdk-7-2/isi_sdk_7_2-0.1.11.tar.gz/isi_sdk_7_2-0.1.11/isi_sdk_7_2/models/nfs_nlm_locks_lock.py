# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NfsNlmLocksLock(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NfsNlmLocksLock - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'client': 'str',
            'client_id': 'str',
            'created': 'int',
            'id': 'str',
            'lin': 'str',
            'lock_type': 'str',
            'path': 'str',
            'range': 'list[int]'
        }

        self.attribute_map = {
            'client': 'client',
            'client_id': 'client_id',
            'created': 'created',
            'id': 'id',
            'lin': 'lin',
            'lock_type': 'lock_type',
            'path': 'path',
            'range': 'range'
        }

        self._client = None
        self._client_id = None
        self._created = None
        self._id = None
        self._lin = None
        self._lock_type = None
        self._path = None
        self._range = None

    @property
    def client(self):
        """
        Gets the client of this NfsNlmLocksLock.
        The client host name.

        :return: The client of this NfsNlmLocksLock.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """
        Sets the client of this NfsNlmLocksLock.
        The client host name.

        :param client: The client of this NfsNlmLocksLock.
        :type: str
        """
        
        self._client = client

    @property
    def client_id(self):
        """
        Gets the client_id of this NfsNlmLocksLock.
        The client ID.

        :return: The client_id of this NfsNlmLocksLock.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this NfsNlmLocksLock.
        The client ID.

        :param client_id: The client_id of this NfsNlmLocksLock.
        :type: str
        """
        
        self._client_id = client_id

    @property
    def created(self):
        """
        Gets the created of this NfsNlmLocksLock.
        Time of lock creation.

        :return: The created of this NfsNlmLocksLock.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this NfsNlmLocksLock.
        Time of lock creation.

        :param created: The created of this NfsNlmLocksLock.
        :type: int
        """
        
        self._created = created

    @property
    def id(self):
        """
        Gets the id of this NfsNlmLocksLock.
        The lock ID.

        :return: The id of this NfsNlmLocksLock.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NfsNlmLocksLock.
        The lock ID.

        :param id: The id of this NfsNlmLocksLock.
        :type: str
        """
        
        self._id = id

    @property
    def lin(self):
        """
        Gets the lin of this NfsNlmLocksLock.
        The LIN in ifs that is locked.

        :return: The lin of this NfsNlmLocksLock.
        :rtype: str
        """
        return self._lin

    @lin.setter
    def lin(self, lin):
        """
        Sets the lin of this NfsNlmLocksLock.
        The LIN in ifs that is locked.

        :param lin: The lin of this NfsNlmLocksLock.
        :type: str
        """
        
        self._lin = lin

    @property
    def lock_type(self):
        """
        Gets the lock_type of this NfsNlmLocksLock.
        The type of lock.

        :return: The lock_type of this NfsNlmLocksLock.
        :rtype: str
        """
        return self._lock_type

    @lock_type.setter
    def lock_type(self, lock_type):
        """
        Sets the lock_type of this NfsNlmLocksLock.
        The type of lock.

        :param lock_type: The lock_type of this NfsNlmLocksLock.
        :type: str
        """
        
        self._lock_type = lock_type

    @property
    def path(self):
        """
        Gets the path of this NfsNlmLocksLock.
        The path in ifs that is locked.

        :return: The path of this NfsNlmLocksLock.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this NfsNlmLocksLock.
        The path in ifs that is locked.

        :param path: The path of this NfsNlmLocksLock.
        :type: str
        """
        
        self._path = path

    @property
    def range(self):
        """
        Gets the range of this NfsNlmLocksLock.
        The byte range within the file that is locked.

        :return: The range of this NfsNlmLocksLock.
        :rtype: list[int]
        """
        return self._range

    @range.setter
    def range(self, range):
        """
        Sets the range of this NfsNlmLocksLock.
        The byte range within the file that is locked.

        :param range: The range of this NfsNlmLocksLock.
        :type: list[int]
        """
        
        self._range = range

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

