# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NfsSettingsZoneSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NfsSettingsZoneSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'nfsv4_allow_numeric_ids': 'bool',
            'nfsv4_domain': 'str',
            'nfsv4_no_domain': 'bool',
            'nfsv4_no_domain_uids': 'bool',
            'nfsv4_no_names': 'bool',
            'nfsv4_replace_domain': 'bool',
            'zone': 'str'
        }

        self.attribute_map = {
            'nfsv4_allow_numeric_ids': 'nfsv4_allow_numeric_ids',
            'nfsv4_domain': 'nfsv4_domain',
            'nfsv4_no_domain': 'nfsv4_no_domain',
            'nfsv4_no_domain_uids': 'nfsv4_no_domain_uids',
            'nfsv4_no_names': 'nfsv4_no_names',
            'nfsv4_replace_domain': 'nfsv4_replace_domain',
            'zone': 'zone'
        }

        self._nfsv4_allow_numeric_ids = None
        self._nfsv4_domain = None
        self._nfsv4_no_domain = None
        self._nfsv4_no_domain_uids = None
        self._nfsv4_no_names = None
        self._nfsv4_replace_domain = None
        self._zone = None

    @property
    def nfsv4_allow_numeric_ids(self):
        """
        Gets the nfsv4_allow_numeric_ids of this NfsSettingsZoneSettings.
        Send owners/groups as UIDs/GIDs when lookups fail or if no_names=1 (v4)

        :return: The nfsv4_allow_numeric_ids of this NfsSettingsZoneSettings.
        :rtype: bool
        """
        return self._nfsv4_allow_numeric_ids

    @nfsv4_allow_numeric_ids.setter
    def nfsv4_allow_numeric_ids(self, nfsv4_allow_numeric_ids):
        """
        Sets the nfsv4_allow_numeric_ids of this NfsSettingsZoneSettings.
        Send owners/groups as UIDs/GIDs when lookups fail or if no_names=1 (v4)

        :param nfsv4_allow_numeric_ids: The nfsv4_allow_numeric_ids of this NfsSettingsZoneSettings.
        :type: bool
        """
        
        self._nfsv4_allow_numeric_ids = nfsv4_allow_numeric_ids

    @property
    def nfsv4_domain(self):
        """
        Gets the nfsv4_domain of this NfsSettingsZoneSettings.
        The domain or realm used to associate users and groups.

        :return: The nfsv4_domain of this NfsSettingsZoneSettings.
        :rtype: str
        """
        return self._nfsv4_domain

    @nfsv4_domain.setter
    def nfsv4_domain(self, nfsv4_domain):
        """
        Sets the nfsv4_domain of this NfsSettingsZoneSettings.
        The domain or realm used to associate users and groups.

        :param nfsv4_domain: The nfsv4_domain of this NfsSettingsZoneSettings.
        :type: str
        """
        
        self._nfsv4_domain = nfsv4_domain

    @property
    def nfsv4_no_domain(self):
        """
        Gets the nfsv4_no_domain of this NfsSettingsZoneSettings.
        Send owners/groups without domainname (v4)

        :return: The nfsv4_no_domain of this NfsSettingsZoneSettings.
        :rtype: bool
        """
        return self._nfsv4_no_domain

    @nfsv4_no_domain.setter
    def nfsv4_no_domain(self, nfsv4_no_domain):
        """
        Sets the nfsv4_no_domain of this NfsSettingsZoneSettings.
        Send owners/groups without domainname (v4)

        :param nfsv4_no_domain: The nfsv4_no_domain of this NfsSettingsZoneSettings.
        :type: bool
        """
        
        self._nfsv4_no_domain = nfsv4_no_domain

    @property
    def nfsv4_no_domain_uids(self):
        """
        Gets the nfsv4_no_domain_uids of this NfsSettingsZoneSettings.
        Send UIDs/GIDs without domainname (v4)

        :return: The nfsv4_no_domain_uids of this NfsSettingsZoneSettings.
        :rtype: bool
        """
        return self._nfsv4_no_domain_uids

    @nfsv4_no_domain_uids.setter
    def nfsv4_no_domain_uids(self, nfsv4_no_domain_uids):
        """
        Sets the nfsv4_no_domain_uids of this NfsSettingsZoneSettings.
        Send UIDs/GIDs without domainname (v4)

        :param nfsv4_no_domain_uids: The nfsv4_no_domain_uids of this NfsSettingsZoneSettings.
        :type: bool
        """
        
        self._nfsv4_no_domain_uids = nfsv4_no_domain_uids

    @property
    def nfsv4_no_names(self):
        """
        Gets the nfsv4_no_names of this NfsSettingsZoneSettings.
        Always send owners/groups as UIDs/GIDs (v4)

        :return: The nfsv4_no_names of this NfsSettingsZoneSettings.
        :rtype: bool
        """
        return self._nfsv4_no_names

    @nfsv4_no_names.setter
    def nfsv4_no_names(self, nfsv4_no_names):
        """
        Sets the nfsv4_no_names of this NfsSettingsZoneSettings.
        Always send owners/groups as UIDs/GIDs (v4)

        :param nfsv4_no_names: The nfsv4_no_names of this NfsSettingsZoneSettings.
        :type: bool
        """
        
        self._nfsv4_no_names = nfsv4_no_names

    @property
    def nfsv4_replace_domain(self):
        """
        Gets the nfsv4_replace_domain of this NfsSettingsZoneSettings.
        Replace owner/group domain with nfs domainname. (v4)

        :return: The nfsv4_replace_domain of this NfsSettingsZoneSettings.
        :rtype: bool
        """
        return self._nfsv4_replace_domain

    @nfsv4_replace_domain.setter
    def nfsv4_replace_domain(self, nfsv4_replace_domain):
        """
        Sets the nfsv4_replace_domain of this NfsSettingsZoneSettings.
        Replace owner/group domain with nfs domainname. (v4)

        :param nfsv4_replace_domain: The nfsv4_replace_domain of this NfsSettingsZoneSettings.
        :type: bool
        """
        
        self._nfsv4_replace_domain = nfsv4_replace_domain

    @property
    def zone(self):
        """
        Gets the zone of this NfsSettingsZoneSettings.
        The zone in which these settings apply

        :return: The zone of this NfsSettingsZoneSettings.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """
        Sets the zone of this NfsSettingsZoneSettings.
        The zone in which these settings apply

        :param zone: The zone of this NfsSettingsZoneSettings.
        :type: str
        """
        
        self._zone = zone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

