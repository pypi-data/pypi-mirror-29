# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class WormDomainExtended(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        WormDomainExtended - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'autocommit_offset': 'int',
            'default_retention': 'int',
            'max_retention': 'int',
            'min_retention': 'int',
            'override_date': 'int',
            'privileged_delete': 'str',
            'type': 'str',
            'id': 'int',
            'incomplete': 'bool',
            'lin': 'int',
            'max_modifies': 'int',
            'path': 'str',
            'total_modifies': 'int'
        }

        self.attribute_map = {
            'autocommit_offset': 'autocommit_offset',
            'default_retention': 'default_retention',
            'max_retention': 'max_retention',
            'min_retention': 'min_retention',
            'override_date': 'override_date',
            'privileged_delete': 'privileged_delete',
            'type': 'type',
            'id': 'id',
            'incomplete': 'incomplete',
            'lin': 'lin',
            'max_modifies': 'max_modifies',
            'path': 'path',
            'total_modifies': 'total_modifies'
        }

        self._autocommit_offset = None
        self._default_retention = None
        self._max_retention = None
        self._min_retention = None
        self._override_date = None
        self._privileged_delete = None
        self._type = None
        self._id = None
        self._incomplete = None
        self._lin = None
        self._max_modifies = None
        self._path = None
        self._total_modifies = None

    @property
    def autocommit_offset(self):
        """
        Gets the autocommit_offset of this WormDomainExtended.
        The autocommit time period in seconds for the domain.  After a file exists in this domain without being modified for the specified time period, the file is automatically committed the next time the file is accessed.  If null, there is no autocommit time so files must be manually committed.

        :return: The autocommit_offset of this WormDomainExtended.
        :rtype: int
        """
        return self._autocommit_offset

    @autocommit_offset.setter
    def autocommit_offset(self, autocommit_offset):
        """
        Sets the autocommit_offset of this WormDomainExtended.
        The autocommit time period in seconds for the domain.  After a file exists in this domain without being modified for the specified time period, the file is automatically committed the next time the file is accessed.  If null, there is no autocommit time so files must be manually committed.

        :param autocommit_offset: The autocommit_offset of this WormDomainExtended.
        :type: int
        """
        
        if autocommit_offset is not None and autocommit_offset < 0.0:
            raise ValueError("Invalid value for `autocommit_offset`, must be a value greater than or equal to `0.0`")

        self._autocommit_offset = autocommit_offset

    @property
    def default_retention(self):
        """
        Gets the default_retention of this WormDomainExtended.
        The default amount of time, in seconds, that a file in this domain will be protected for.  This default is applied to a file if it is committed to the domain before being assigned its own expiration date.  Value can also be null (expire right away), 'forever', 'use_min' (use the 'min_retention' value), or 'use_max' (use the 'max_retention' value).

        :return: The default_retention of this WormDomainExtended.
        :rtype: int
        """
        return self._default_retention

    @default_retention.setter
    def default_retention(self, default_retention):
        """
        Sets the default_retention of this WormDomainExtended.
        The default amount of time, in seconds, that a file in this domain will be protected for.  This default is applied to a file if it is committed to the domain before being assigned its own expiration date.  Value can also be null (expire right away), 'forever', 'use_min' (use the 'min_retention' value), or 'use_max' (use the 'max_retention' value).

        :param default_retention: The default_retention of this WormDomainExtended.
        :type: int
        """
        
        if default_retention is not None and default_retention < 0.0:
            raise ValueError("Invalid value for `default_retention`, must be a value greater than or equal to `0.0`")

        self._default_retention = default_retention

    @property
    def max_retention(self):
        """
        Gets the max_retention of this WormDomainExtended.
        The maximum amount of time, in seconds, that a file in this domain will be protected for.  This will override the retention period of any file committed with a longer retention period.  Value can also be null (allow an infinite length retention period).

        :return: The max_retention of this WormDomainExtended.
        :rtype: int
        """
        return self._max_retention

    @max_retention.setter
    def max_retention(self, max_retention):
        """
        Sets the max_retention of this WormDomainExtended.
        The maximum amount of time, in seconds, that a file in this domain will be protected for.  This will override the retention period of any file committed with a longer retention period.  Value can also be null (allow an infinite length retention period).

        :param max_retention: The max_retention of this WormDomainExtended.
        :type: int
        """
        
        if max_retention is not None and max_retention < 0.0:
            raise ValueError("Invalid value for `max_retention`, must be a value greater than or equal to `0.0`")

        self._max_retention = max_retention

    @property
    def min_retention(self):
        """
        Gets the min_retention of this WormDomainExtended.
        The minimum amount of time, in seconds, that a file in this domain will be protected for.  This will override the retention period of any file committed with a shorter retention period.  Value can also be null (expire right away), or 'forever'.

        :return: The min_retention of this WormDomainExtended.
        :rtype: int
        """
        return self._min_retention

    @min_retention.setter
    def min_retention(self, min_retention):
        """
        Sets the min_retention of this WormDomainExtended.
        The minimum amount of time, in seconds, that a file in this domain will be protected for.  This will override the retention period of any file committed with a shorter retention period.  Value can also be null (expire right away), or 'forever'.

        :param min_retention: The min_retention of this WormDomainExtended.
        :type: int
        """
        
        if min_retention is not None and min_retention < 0.0:
            raise ValueError("Invalid value for `min_retention`, must be a value greater than or equal to `0.0`")

        self._min_retention = min_retention

    @property
    def override_date(self):
        """
        Gets the override_date of this WormDomainExtended.
        Override retention date for the domain.  If this date is later than any committed file's own retention date, that file will remain protected beyond its own retention date until this date.

        :return: The override_date of this WormDomainExtended.
        :rtype: int
        """
        return self._override_date

    @override_date.setter
    def override_date(self, override_date):
        """
        Sets the override_date of this WormDomainExtended.
        Override retention date for the domain.  If this date is later than any committed file's own retention date, that file will remain protected beyond its own retention date until this date.

        :param override_date: The override_date of this WormDomainExtended.
        :type: int
        """
        
        if override_date is not None and override_date < 0.0:
            raise ValueError("Invalid value for `override_date`, must be a value greater than or equal to `0.0`")

        self._override_date = override_date

    @property
    def privileged_delete(self):
        """
        Gets the privileged_delete of this WormDomainExtended.
        If 'on', files in this domain can be deleted using the privileged delete feature.  Otherwise, they can't be deleted even with privileged delete.  If 'disabled', privileged file deletes are permanently disabled and cannot be turned back on again.

        :return: The privileged_delete of this WormDomainExtended.
        :rtype: str
        """
        return self._privileged_delete

    @privileged_delete.setter
    def privileged_delete(self, privileged_delete):
        """
        Sets the privileged_delete of this WormDomainExtended.
        If 'on', files in this domain can be deleted using the privileged delete feature.  Otherwise, they can't be deleted even with privileged delete.  If 'disabled', privileged file deletes are permanently disabled and cannot be turned back on again.

        :param privileged_delete: The privileged_delete of this WormDomainExtended.
        :type: str
        """
        allowed_values = ["on", "off", "disabled"]
        if privileged_delete is not None and privileged_delete not in allowed_values:
            raise ValueError(
                "Invalid value for `privileged_delete`, must be one of {0}"
                .format(allowed_values)
            )

        self._privileged_delete = privileged_delete

    @property
    def type(self):
        """
        Gets the type of this WormDomainExtended.
        Whether this is an enterprise domain or this is a compliance domain. Compliance domains may not be created on enterprise clusters. Enterprise and compliance domains may be created on compliance clusters.

        :return: The type of this WormDomainExtended.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this WormDomainExtended.
        Whether this is an enterprise domain or this is a compliance domain. Compliance domains may not be created on enterprise clusters. Enterprise and compliance domains may be created on compliance clusters.

        :param type: The type of this WormDomainExtended.
        :type: str
        """
        allowed_values = ["enterprise", "compliance"]
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """
        Gets the id of this WormDomainExtended.
        System-assigned ID of this protection domain.

        :return: The id of this WormDomainExtended.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WormDomainExtended.
        System-assigned ID of this protection domain.

        :param id: The id of this WormDomainExtended.
        :type: int
        """
        
        self._id = id

    @property
    def incomplete(self):
        """
        Gets the incomplete of this WormDomainExtended.
        If true, OneFS is still in the process of creating this domain and it is not yet preventing files from being modified or deleted.  If false, the domain is fully created and operational.

        :return: The incomplete of this WormDomainExtended.
        :rtype: bool
        """
        return self._incomplete

    @incomplete.setter
    def incomplete(self, incomplete):
        """
        Sets the incomplete of this WormDomainExtended.
        If true, OneFS is still in the process of creating this domain and it is not yet preventing files from being modified or deleted.  If false, the domain is fully created and operational.

        :param incomplete: The incomplete of this WormDomainExtended.
        :type: bool
        """
        
        self._incomplete = incomplete

    @property
    def lin(self):
        """
        Gets the lin of this WormDomainExtended.
        Logical inode number (LIN) for the root of this domain.

        :return: The lin of this WormDomainExtended.
        :rtype: int
        """
        return self._lin

    @lin.setter
    def lin(self, lin):
        """
        Sets the lin of this WormDomainExtended.
        Logical inode number (LIN) for the root of this domain.

        :param lin: The lin of this WormDomainExtended.
        :type: int
        """
        
        self._lin = lin

    @property
    def max_modifies(self):
        """
        Gets the max_modifies of this WormDomainExtended.
        Maximum number of times a WORM domain can be modified over its lifetime.

        :return: The max_modifies of this WormDomainExtended.
        :rtype: int
        """
        return self._max_modifies

    @max_modifies.setter
    def max_modifies(self, max_modifies):
        """
        Sets the max_modifies of this WormDomainExtended.
        Maximum number of times a WORM domain can be modified over its lifetime.

        :param max_modifies: The max_modifies of this WormDomainExtended.
        :type: int
        """
        
        self._max_modifies = max_modifies

    @property
    def path(self):
        """
        Gets the path of this WormDomainExtended.
        Root path of this domain.  Files in this directory and all sub-directories will be protected.

        :return: The path of this WormDomainExtended.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this WormDomainExtended.
        Root path of this domain.  Files in this directory and all sub-directories will be protected.

        :param path: The path of this WormDomainExtended.
        :type: str
        """
        
        self._path = path

    @property
    def total_modifies(self):
        """
        Gets the total_modifies of this WormDomainExtended.
        The number of times this domain has been modified (had its domain attributes changed) so far.  A WORM domain can be modified a fixed number of times over its lifetime defined by max_modifies.

        :return: The total_modifies of this WormDomainExtended.
        :rtype: int
        """
        return self._total_modifies

    @total_modifies.setter
    def total_modifies(self, total_modifies):
        """
        Sets the total_modifies of this WormDomainExtended.
        The number of times this domain has been modified (had its domain attributes changed) so far.  A WORM domain can be modified a fixed number of times over its lifetime defined by max_modifies.

        :param total_modifies: The total_modifies of this WormDomainExtended.
        :type: int
        """
        
        self._total_modifies = total_modifies

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

