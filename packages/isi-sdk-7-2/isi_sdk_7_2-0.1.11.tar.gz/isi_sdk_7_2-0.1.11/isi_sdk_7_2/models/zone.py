# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class Zone(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Zone - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'all_auth_providers': 'bool',
            'alternate_system_provider': 'str',
            'audit_failure': 'list[str]',
            'audit_success': 'list[str]',
            'auth_providers': 'list[str]',
            'cache_size': 'int',
            'create_path': 'bool',
            'hdfs_ambari_namenode': 'str',
            'hdfs_ambari_server': 'str',
            'hdfs_authentication': 'str',
            'hdfs_odp_version': 'str',
            'hdfs_root_directory': 'str',
            'home_directory_umask': 'int',
            'ifs_restricted': 'list[GroupMember]',
            'map_untrusted': 'str',
            'name': 'str',
            'netbios_name': 'str',
            'path': 'str',
            'protocol_audit_enabled': 'bool',
            'skeleton_directory': 'str',
            'syslog_audit_events': 'list[str]',
            'syslog_forwarding_enabled': 'bool',
            'system_provider': 'str',
            'user_mapping_rules': 'list[str]',
            'webhdfs_enabled': 'bool'
        }

        self.attribute_map = {
            'all_auth_providers': 'all_auth_providers',
            'alternate_system_provider': 'alternate_system_provider',
            'audit_failure': 'audit_failure',
            'audit_success': 'audit_success',
            'auth_providers': 'auth_providers',
            'cache_size': 'cache_size',
            'create_path': 'create_path',
            'hdfs_ambari_namenode': 'hdfs_ambari_namenode',
            'hdfs_ambari_server': 'hdfs_ambari_server',
            'hdfs_authentication': 'hdfs_authentication',
            'hdfs_odp_version': 'hdfs_odp_version',
            'hdfs_root_directory': 'hdfs_root_directory',
            'home_directory_umask': 'home_directory_umask',
            'ifs_restricted': 'ifs_restricted',
            'map_untrusted': 'map_untrusted',
            'name': 'name',
            'netbios_name': 'netbios_name',
            'path': 'path',
            'protocol_audit_enabled': 'protocol_audit_enabled',
            'skeleton_directory': 'skeleton_directory',
            'syslog_audit_events': 'syslog_audit_events',
            'syslog_forwarding_enabled': 'syslog_forwarding_enabled',
            'system_provider': 'system_provider',
            'user_mapping_rules': 'user_mapping_rules',
            'webhdfs_enabled': 'webhdfs_enabled'
        }

        self._all_auth_providers = None
        self._alternate_system_provider = None
        self._audit_failure = None
        self._audit_success = None
        self._auth_providers = None
        self._cache_size = None
        self._create_path = None
        self._hdfs_ambari_namenode = None
        self._hdfs_ambari_server = None
        self._hdfs_authentication = None
        self._hdfs_odp_version = None
        self._hdfs_root_directory = None
        self._home_directory_umask = None
        self._ifs_restricted = None
        self._map_untrusted = None
        self._name = None
        self._netbios_name = None
        self._path = None
        self._protocol_audit_enabled = None
        self._skeleton_directory = None
        self._syslog_audit_events = None
        self._syslog_forwarding_enabled = None
        self._system_provider = None
        self._user_mapping_rules = None
        self._webhdfs_enabled = None

    @property
    def all_auth_providers(self):
        """
        Gets the all_auth_providers of this Zone.
        Use all authentication providers available.

        :return: The all_auth_providers of this Zone.
        :rtype: bool
        """
        return self._all_auth_providers

    @all_auth_providers.setter
    def all_auth_providers(self, all_auth_providers):
        """
        Sets the all_auth_providers of this Zone.
        Use all authentication providers available.

        :param all_auth_providers: The all_auth_providers of this Zone.
        :type: bool
        """
        
        self._all_auth_providers = all_auth_providers

    @property
    def alternate_system_provider(self):
        """
        Gets the alternate_system_provider of this Zone.
        Alternate system provider.

        :return: The alternate_system_provider of this Zone.
        :rtype: str
        """
        return self._alternate_system_provider

    @alternate_system_provider.setter
    def alternate_system_provider(self, alternate_system_provider):
        """
        Sets the alternate_system_provider of this Zone.
        Alternate system provider.

        :param alternate_system_provider: The alternate_system_provider of this Zone.
        :type: str
        """
        
        self._alternate_system_provider = alternate_system_provider

    @property
    def audit_failure(self):
        """
        Gets the audit_failure of this Zone.
        List of failed operations to audit.

        :return: The audit_failure of this Zone.
        :rtype: list[str]
        """
        return self._audit_failure

    @audit_failure.setter
    def audit_failure(self, audit_failure):
        """
        Sets the audit_failure of this Zone.
        List of failed operations to audit.

        :param audit_failure: The audit_failure of this Zone.
        :type: list[str]
        """
        
        self._audit_failure = audit_failure

    @property
    def audit_success(self):
        """
        Gets the audit_success of this Zone.
        List of successful operations to audit.

        :return: The audit_success of this Zone.
        :rtype: list[str]
        """
        return self._audit_success

    @audit_success.setter
    def audit_success(self, audit_success):
        """
        Sets the audit_success of this Zone.
        List of successful operations to audit.

        :param audit_success: The audit_success of this Zone.
        :type: list[str]
        """
        
        self._audit_success = audit_success

    @property
    def auth_providers(self):
        """
        Gets the auth_providers of this Zone.
        List of authentication providers used on this zone.

        :return: The auth_providers of this Zone.
        :rtype: list[str]
        """
        return self._auth_providers

    @auth_providers.setter
    def auth_providers(self, auth_providers):
        """
        Sets the auth_providers of this Zone.
        List of authentication providers used on this zone.

        :param auth_providers: The auth_providers of this Zone.
        :type: list[str]
        """
        
        self._auth_providers = auth_providers

    @property
    def cache_size(self):
        """
        Gets the cache_size of this Zone.
        Specifies the maximum size of zone in-memory cache.

        :return: The cache_size of this Zone.
        :rtype: int
        """
        return self._cache_size

    @cache_size.setter
    def cache_size(self, cache_size):
        """
        Sets the cache_size of this Zone.
        Specifies the maximum size of zone in-memory cache.

        :param cache_size: The cache_size of this Zone.
        :type: int
        """
        
        self._cache_size = cache_size

    @property
    def create_path(self):
        """
        Gets the create_path of this Zone.
        Create path if it does not exist.

        :return: The create_path of this Zone.
        :rtype: bool
        """
        return self._create_path

    @create_path.setter
    def create_path(self, create_path):
        """
        Sets the create_path of this Zone.
        Create path if it does not exist.

        :param create_path: The create_path of this Zone.
        :type: bool
        """
        
        self._create_path = create_path

    @property
    def hdfs_ambari_namenode(self):
        """
        Gets the hdfs_ambari_namenode of this Zone.
        The SmartConnect name of this cluster that will be used for the HDFS service.

        :return: The hdfs_ambari_namenode of this Zone.
        :rtype: str
        """
        return self._hdfs_ambari_namenode

    @hdfs_ambari_namenode.setter
    def hdfs_ambari_namenode(self, hdfs_ambari_namenode):
        """
        Sets the hdfs_ambari_namenode of this Zone.
        The SmartConnect name of this cluster that will be used for the HDFS service.

        :param hdfs_ambari_namenode: The hdfs_ambari_namenode of this Zone.
        :type: str
        """
        
        self._hdfs_ambari_namenode = hdfs_ambari_namenode

    @property
    def hdfs_ambari_server(self):
        """
        Gets the hdfs_ambari_server of this Zone.
        A valid hostname, FQDN, IPv4, or IPv6 string of the Ambari server.

        :return: The hdfs_ambari_server of this Zone.
        :rtype: str
        """
        return self._hdfs_ambari_server

    @hdfs_ambari_server.setter
    def hdfs_ambari_server(self, hdfs_ambari_server):
        """
        Sets the hdfs_ambari_server of this Zone.
        A valid hostname, FQDN, IPv4, or IPv6 string of the Ambari server.

        :param hdfs_ambari_server: The hdfs_ambari_server of this Zone.
        :type: str
        """
        
        self._hdfs_ambari_server = hdfs_ambari_server

    @property
    def hdfs_authentication(self):
        """
        Gets the hdfs_authentication of this Zone.
        Authentication type for HDFS protocol.

        :return: The hdfs_authentication of this Zone.
        :rtype: str
        """
        return self._hdfs_authentication

    @hdfs_authentication.setter
    def hdfs_authentication(self, hdfs_authentication):
        """
        Sets the hdfs_authentication of this Zone.
        Authentication type for HDFS protocol.

        :param hdfs_authentication: The hdfs_authentication of this Zone.
        :type: str
        """
        allowed_values = ["all", "simple_only", "kerberos_only"]
        if hdfs_authentication is not None and hdfs_authentication not in allowed_values:
            raise ValueError(
                "Invalid value for `hdfs_authentication`, must be one of {0}"
                .format(allowed_values)
            )

        self._hdfs_authentication = hdfs_authentication

    @property
    def hdfs_odp_version(self):
        """
        Gets the hdfs_odp_version of this Zone.
        ODP stack repository version number.

        :return: The hdfs_odp_version of this Zone.
        :rtype: str
        """
        return self._hdfs_odp_version

    @hdfs_odp_version.setter
    def hdfs_odp_version(self, hdfs_odp_version):
        """
        Sets the hdfs_odp_version of this Zone.
        ODP stack repository version number.

        :param hdfs_odp_version: The hdfs_odp_version of this Zone.
        :type: str
        """
        
        self._hdfs_odp_version = hdfs_odp_version

    @property
    def hdfs_root_directory(self):
        """
        Gets the hdfs_root_directory of this Zone.
        Root directory for HDFS protocol.

        :return: The hdfs_root_directory of this Zone.
        :rtype: str
        """
        return self._hdfs_root_directory

    @hdfs_root_directory.setter
    def hdfs_root_directory(self, hdfs_root_directory):
        """
        Sets the hdfs_root_directory of this Zone.
        Root directory for HDFS protocol.

        :param hdfs_root_directory: The hdfs_root_directory of this Zone.
        :type: str
        """
        
        self._hdfs_root_directory = hdfs_root_directory

    @property
    def home_directory_umask(self):
        """
        Gets the home_directory_umask of this Zone.
        Permissions set on auto-created user home directories.

        :return: The home_directory_umask of this Zone.
        :rtype: int
        """
        return self._home_directory_umask

    @home_directory_umask.setter
    def home_directory_umask(self, home_directory_umask):
        """
        Sets the home_directory_umask of this Zone.
        Permissions set on auto-created user home directories.

        :param home_directory_umask: The home_directory_umask of this Zone.
        :type: int
        """
        
        self._home_directory_umask = home_directory_umask

    @property
    def ifs_restricted(self):
        """
        Gets the ifs_restricted of this Zone.
        User restrictions for this zone.

        :return: The ifs_restricted of this Zone.
        :rtype: list[GroupMember]
        """
        return self._ifs_restricted

    @ifs_restricted.setter
    def ifs_restricted(self, ifs_restricted):
        """
        Sets the ifs_restricted of this Zone.
        User restrictions for this zone.

        :param ifs_restricted: The ifs_restricted of this Zone.
        :type: list[GroupMember]
        """
        
        self._ifs_restricted = ifs_restricted

    @property
    def map_untrusted(self):
        """
        Gets the map_untrusted of this Zone.
        Maps untrusted domains to this NetBIOS domain during authentication.

        :return: The map_untrusted of this Zone.
        :rtype: str
        """
        return self._map_untrusted

    @map_untrusted.setter
    def map_untrusted(self, map_untrusted):
        """
        Sets the map_untrusted of this Zone.
        Maps untrusted domains to this NetBIOS domain during authentication.

        :param map_untrusted: The map_untrusted of this Zone.
        :type: str
        """
        
        self._map_untrusted = map_untrusted

    @property
    def name(self):
        """
        Gets the name of this Zone.
        Zone name.

        :return: The name of this Zone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Zone.
        Zone name.

        :param name: The name of this Zone.
        :type: str
        """
        
        self._name = name

    @property
    def netbios_name(self):
        """
        Gets the netbios_name of this Zone.
        NetBIOS name.

        :return: The netbios_name of this Zone.
        :rtype: str
        """
        return self._netbios_name

    @netbios_name.setter
    def netbios_name(self, netbios_name):
        """
        Sets the netbios_name of this Zone.
        NetBIOS name.

        :param netbios_name: The netbios_name of this Zone.
        :type: str
        """
        
        self._netbios_name = netbios_name

    @property
    def path(self):
        """
        Gets the path of this Zone.
        zone path.

        :return: The path of this Zone.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this Zone.
        zone path.

        :param path: The path of this Zone.
        :type: str
        """
        
        self._path = path

    @property
    def protocol_audit_enabled(self):
        """
        Gets the protocol_audit_enabled of this Zone.
        Indicates whether I/O auditing is set on this zone.

        :return: The protocol_audit_enabled of this Zone.
        :rtype: bool
        """
        return self._protocol_audit_enabled

    @protocol_audit_enabled.setter
    def protocol_audit_enabled(self, protocol_audit_enabled):
        """
        Sets the protocol_audit_enabled of this Zone.
        Indicates whether I/O auditing is set on this zone.

        :param protocol_audit_enabled: The protocol_audit_enabled of this Zone.
        :type: bool
        """
        
        self._protocol_audit_enabled = protocol_audit_enabled

    @property
    def skeleton_directory(self):
        """
        Gets the skeleton_directory of this Zone.
        Skeleton directory for user home directories.

        :return: The skeleton_directory of this Zone.
        :rtype: str
        """
        return self._skeleton_directory

    @skeleton_directory.setter
    def skeleton_directory(self, skeleton_directory):
        """
        Sets the skeleton_directory of this Zone.
        Skeleton directory for user home directories.

        :param skeleton_directory: The skeleton_directory of this Zone.
        :type: str
        """
        
        self._skeleton_directory = skeleton_directory

    @property
    def syslog_audit_events(self):
        """
        Gets the syslog_audit_events of this Zone.
        List of audit operations to forward to syslog.

        :return: The syslog_audit_events of this Zone.
        :rtype: list[str]
        """
        return self._syslog_audit_events

    @syslog_audit_events.setter
    def syslog_audit_events(self, syslog_audit_events):
        """
        Sets the syslog_audit_events of this Zone.
        List of audit operations to forward to syslog.

        :param syslog_audit_events: The syslog_audit_events of this Zone.
        :type: list[str]
        """
        
        self._syslog_audit_events = syslog_audit_events

    @property
    def syslog_forwarding_enabled(self):
        """
        Gets the syslog_forwarding_enabled of this Zone.
        Enable syslog forwarding of zone audit events.

        :return: The syslog_forwarding_enabled of this Zone.
        :rtype: bool
        """
        return self._syslog_forwarding_enabled

    @syslog_forwarding_enabled.setter
    def syslog_forwarding_enabled(self, syslog_forwarding_enabled):
        """
        Sets the syslog_forwarding_enabled of this Zone.
        Enable syslog forwarding of zone audit events.

        :param syslog_forwarding_enabled: The syslog_forwarding_enabled of this Zone.
        :type: bool
        """
        
        self._syslog_forwarding_enabled = syslog_forwarding_enabled

    @property
    def system_provider(self):
        """
        Gets the system_provider of this Zone.
        System provider.

        :return: The system_provider of this Zone.
        :rtype: str
        """
        return self._system_provider

    @system_provider.setter
    def system_provider(self, system_provider):
        """
        Sets the system_provider of this Zone.
        System provider.

        :param system_provider: The system_provider of this Zone.
        :type: str
        """
        
        self._system_provider = system_provider

    @property
    def user_mapping_rules(self):
        """
        Gets the user_mapping_rules of this Zone.
        Current ID mapping rules.

        :return: The user_mapping_rules of this Zone.
        :rtype: list[str]
        """
        return self._user_mapping_rules

    @user_mapping_rules.setter
    def user_mapping_rules(self, user_mapping_rules):
        """
        Sets the user_mapping_rules of this Zone.
        Current ID mapping rules.

        :param user_mapping_rules: The user_mapping_rules of this Zone.
        :type: list[str]
        """
        
        self._user_mapping_rules = user_mapping_rules

    @property
    def webhdfs_enabled(self):
        """
        Gets the webhdfs_enabled of this Zone.
        Indicates whether WebHDFS is enabled on this zone.

        :return: The webhdfs_enabled of this Zone.
        :rtype: bool
        """
        return self._webhdfs_enabled

    @webhdfs_enabled.setter
    def webhdfs_enabled(self, webhdfs_enabled):
        """
        Sets the webhdfs_enabled of this Zone.
        Indicates whether WebHDFS is enabled on this zone.

        :param webhdfs_enabled: The webhdfs_enabled of this Zone.
        :type: bool
        """
        
        self._webhdfs_enabled = webhdfs_enabled

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

