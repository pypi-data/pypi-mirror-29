# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ReportAboutReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ReportAboutReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'generated': 'str',
            'id': 'str',
            'time': 'int',
            'type': 'str'
        }

        self.attribute_map = {
            'generated': 'generated',
            'id': 'id',
            'time': 'time',
            'type': 'type'
        }

        self._generated = None
        self._id = None
        self._time = None
        self._type = None

    @property
    def generated(self):
        """
        Gets the generated of this ReportAboutReport.
        Whether report was manually requested (live) or scheduled.

        :return: The generated of this ReportAboutReport.
        :rtype: str
        """
        return self._generated

    @generated.setter
    def generated(self, generated):
        """
        Sets the generated of this ReportAboutReport.
        Whether report was manually requested (live) or scheduled.

        :param generated: The generated of this ReportAboutReport.
        :type: str
        """
        allowed_values = ["manual", "scheduled"]
        if generated not in allowed_values:
            raise ValueError(
                "Invalid value for `generated`, must be one of {0}"
                .format(allowed_values)
            )

        self._generated = generated

    @property
    def id(self):
        """
        Gets the id of this ReportAboutReport.
        The system ID given to the report.

        :return: The id of this ReportAboutReport.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ReportAboutReport.
        The system ID given to the report.

        :param id: The id of this ReportAboutReport.
        :type: str
        """
        
        self._id = id

    @property
    def time(self):
        """
        Gets the time of this ReportAboutReport.
        Unix epoch time the report was taken.

        :return: The time of this ReportAboutReport.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this ReportAboutReport.
        Unix epoch time the report was taken.

        :param time: The time of this ReportAboutReport.
        :type: int
        """
        
        self._time = time

    @property
    def type(self):
        """
        Gets the type of this ReportAboutReport.
        Whether this is a summary or detail report.

        :return: The type of this ReportAboutReport.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ReportAboutReport.
        Whether this is a summary or detail report.

        :param type: The type of this ReportAboutReport.
        :type: str
        """
        allowed_values = ["summary", "detail"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

