# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class StoragepoolTierExtended(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        StoragepoolTierExtended - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'children': 'list[str]',
            'name': 'str',
            'id': 'int',
            'lnns': 'list[int]',
            'usage': 'StoragepoolNodepoolUsage'
        }

        self.attribute_map = {
            'children': 'children',
            'name': 'name',
            'id': 'id',
            'lnns': 'lnns',
            'usage': 'usage'
        }

        self._children = None
        self._name = None
        self._id = None
        self._lnns = None
        self._usage = None

    @property
    def children(self):
        """
        Gets the children of this StoragepoolTierExtended.
        The names or IDs of the tier's children.

        :return: The children of this StoragepoolTierExtended.
        :rtype: list[str]
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this StoragepoolTierExtended.
        The names or IDs of the tier's children.

        :param children: The children of this StoragepoolTierExtended.
        :type: list[str]
        """
        
        self._children = children

    @property
    def name(self):
        """
        Gets the name of this StoragepoolTierExtended.
        The tier name.

        :return: The name of this StoragepoolTierExtended.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StoragepoolTierExtended.
        The tier name.

        :param name: The name of this StoragepoolTierExtended.
        :type: str
        """
        
        self._name = name

    @property
    def id(self):
        """
        Gets the id of this StoragepoolTierExtended.
        The system ID given to the tier.

        :return: The id of this StoragepoolTierExtended.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StoragepoolTierExtended.
        The system ID given to the tier.

        :param id: The id of this StoragepoolTierExtended.
        :type: int
        """
        
        self._id = id

    @property
    def lnns(self):
        """
        Gets the lnns of this StoragepoolTierExtended.
        The nodes that are part of this tier.

        :return: The lnns of this StoragepoolTierExtended.
        :rtype: list[int]
        """
        return self._lnns

    @lnns.setter
    def lnns(self, lnns):
        """
        Sets the lnns of this StoragepoolTierExtended.
        The nodes that are part of this tier.

        :param lnns: The lnns of this StoragepoolTierExtended.
        :type: list[int]
        """
        
        self._lnns = lnns

    @property
    def usage(self):
        """
        Gets the usage of this StoragepoolTierExtended.
        Total pool usage.

        :return: The usage of this StoragepoolTierExtended.
        :rtype: StoragepoolNodepoolUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """
        Sets the usage of this StoragepoolTierExtended.
        Total pool usage.

        :param usage: The usage of this StoragepoolTierExtended.
        :type: StoragepoolNodepoolUsage
        """
        
        self._usage = usage

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

