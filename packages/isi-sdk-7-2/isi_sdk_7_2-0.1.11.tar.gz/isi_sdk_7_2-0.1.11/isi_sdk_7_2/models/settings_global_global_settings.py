# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SettingsGlobalGlobalSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SettingsGlobalGlobalSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alloc_retries': 'int',
            'cache_cred_lifetime': 'int',
            'cache_id_lifetime': 'int',
            'gid_range_enabled': 'bool',
            'gid_range_max': 'int',
            'gid_range_min': 'int',
            'gid_range_next': 'int',
            'group_uid': 'int',
            'load_providers': 'list[str]',
            'min_mapped_rid': 'int',
            'null_gid': 'int',
            'null_uid': 'int',
            'on_disk_identity': 'str',
            'rpc_block_time': 'int',
            'rpc_max_requests': 'int',
            'rpc_timeout': 'int',
            'send_ntlmv2': 'bool',
            'space_replacement': 'str',
            'system_gid_threshold': 'int',
            'system_uid_threshold': 'int',
            'uid_range_enabled': 'bool',
            'uid_range_max': 'int',
            'uid_range_min': 'int',
            'uid_range_next': 'int',
            'unknown_gid': 'int',
            'unknown_uid': 'int',
            'workgroup': 'str'
        }

        self.attribute_map = {
            'alloc_retries': 'alloc_retries',
            'cache_cred_lifetime': 'cache_cred_lifetime',
            'cache_id_lifetime': 'cache_id_lifetime',
            'gid_range_enabled': 'gid_range_enabled',
            'gid_range_max': 'gid_range_max',
            'gid_range_min': 'gid_range_min',
            'gid_range_next': 'gid_range_next',
            'group_uid': 'group_uid',
            'load_providers': 'load_providers',
            'min_mapped_rid': 'min_mapped_rid',
            'null_gid': 'null_gid',
            'null_uid': 'null_uid',
            'on_disk_identity': 'on_disk_identity',
            'rpc_block_time': 'rpc_block_time',
            'rpc_max_requests': 'rpc_max_requests',
            'rpc_timeout': 'rpc_timeout',
            'send_ntlmv2': 'send_ntlmv2',
            'space_replacement': 'space_replacement',
            'system_gid_threshold': 'system_gid_threshold',
            'system_uid_threshold': 'system_uid_threshold',
            'uid_range_enabled': 'uid_range_enabled',
            'uid_range_max': 'uid_range_max',
            'uid_range_min': 'uid_range_min',
            'uid_range_next': 'uid_range_next',
            'unknown_gid': 'unknown_gid',
            'unknown_uid': 'unknown_uid',
            'workgroup': 'workgroup'
        }

        self._alloc_retries = None
        self._cache_cred_lifetime = None
        self._cache_id_lifetime = None
        self._gid_range_enabled = None
        self._gid_range_max = None
        self._gid_range_min = None
        self._gid_range_next = None
        self._group_uid = None
        self._load_providers = None
        self._min_mapped_rid = None
        self._null_gid = None
        self._null_uid = None
        self._on_disk_identity = None
        self._rpc_block_time = None
        self._rpc_max_requests = None
        self._rpc_timeout = None
        self._send_ntlmv2 = None
        self._space_replacement = None
        self._system_gid_threshold = None
        self._system_uid_threshold = None
        self._uid_range_enabled = None
        self._uid_range_max = None
        self._uid_range_min = None
        self._uid_range_next = None
        self._unknown_gid = None
        self._unknown_uid = None
        self._workgroup = None

    @property
    def alloc_retries(self):
        """
        Gets the alloc_retries of this SettingsGlobalGlobalSettings.
        Sets number of times to retry an ID allocation before failing.

        :return: The alloc_retries of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._alloc_retries

    @alloc_retries.setter
    def alloc_retries(self, alloc_retries):
        """
        Sets the alloc_retries of this SettingsGlobalGlobalSettings.
        Sets number of times to retry an ID allocation before failing.

        :param alloc_retries: The alloc_retries of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._alloc_retries = alloc_retries

    @property
    def cache_cred_lifetime(self):
        """
        Gets the cache_cred_lifetime of this SettingsGlobalGlobalSettings.
        Sets length of time in seconds to cache credential responses from the ID mapper.

        :return: The cache_cred_lifetime of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._cache_cred_lifetime

    @cache_cred_lifetime.setter
    def cache_cred_lifetime(self, cache_cred_lifetime):
        """
        Sets the cache_cred_lifetime of this SettingsGlobalGlobalSettings.
        Sets length of time in seconds to cache credential responses from the ID mapper.

        :param cache_cred_lifetime: The cache_cred_lifetime of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._cache_cred_lifetime = cache_cred_lifetime

    @property
    def cache_id_lifetime(self):
        """
        Gets the cache_id_lifetime of this SettingsGlobalGlobalSettings.
        Sets length of time in seconds to cache ID responses from the ID mapper.

        :return: The cache_id_lifetime of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._cache_id_lifetime

    @cache_id_lifetime.setter
    def cache_id_lifetime(self, cache_id_lifetime):
        """
        Sets the cache_id_lifetime of this SettingsGlobalGlobalSettings.
        Sets length of time in seconds to cache ID responses from the ID mapper.

        :param cache_id_lifetime: The cache_id_lifetime of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._cache_id_lifetime = cache_id_lifetime

    @property
    def gid_range_enabled(self):
        """
        Gets the gid_range_enabled of this SettingsGlobalGlobalSettings.
        Enables use of a fixed range for allocating GIDs.

        :return: The gid_range_enabled of this SettingsGlobalGlobalSettings.
        :rtype: bool
        """
        return self._gid_range_enabled

    @gid_range_enabled.setter
    def gid_range_enabled(self, gid_range_enabled):
        """
        Sets the gid_range_enabled of this SettingsGlobalGlobalSettings.
        Enables use of a fixed range for allocating GIDs.

        :param gid_range_enabled: The gid_range_enabled of this SettingsGlobalGlobalSettings.
        :type: bool
        """
        
        self._gid_range_enabled = gid_range_enabled

    @property
    def gid_range_max(self):
        """
        Gets the gid_range_max of this SettingsGlobalGlobalSettings.
        Specifies ending number for allocating GIDs.

        :return: The gid_range_max of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._gid_range_max

    @gid_range_max.setter
    def gid_range_max(self, gid_range_max):
        """
        Sets the gid_range_max of this SettingsGlobalGlobalSettings.
        Specifies ending number for allocating GIDs.

        :param gid_range_max: The gid_range_max of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._gid_range_max = gid_range_max

    @property
    def gid_range_min(self):
        """
        Gets the gid_range_min of this SettingsGlobalGlobalSettings.
        Specifies starting number for allocating GIDs.

        :return: The gid_range_min of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._gid_range_min

    @gid_range_min.setter
    def gid_range_min(self, gid_range_min):
        """
        Sets the gid_range_min of this SettingsGlobalGlobalSettings.
        Specifies starting number for allocating GIDs.

        :param gid_range_min: The gid_range_min of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._gid_range_min = gid_range_min

    @property
    def gid_range_next(self):
        """
        Gets the gid_range_next of this SettingsGlobalGlobalSettings.
        Specifies the next GID to be allocated.

        :return: The gid_range_next of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._gid_range_next

    @gid_range_next.setter
    def gid_range_next(self, gid_range_next):
        """
        Sets the gid_range_next of this SettingsGlobalGlobalSettings.
        Specifies the next GID to be allocated.

        :param gid_range_next: The gid_range_next of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._gid_range_next = gid_range_next

    @property
    def group_uid(self):
        """
        Gets the group_uid of this SettingsGlobalGlobalSettings.


        :return: The group_uid of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._group_uid

    @group_uid.setter
    def group_uid(self, group_uid):
        """
        Sets the group_uid of this SettingsGlobalGlobalSettings.


        :param group_uid: The group_uid of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._group_uid = group_uid

    @property
    def load_providers(self):
        """
        Gets the load_providers of this SettingsGlobalGlobalSettings.


        :return: The load_providers of this SettingsGlobalGlobalSettings.
        :rtype: list[str]
        """
        return self._load_providers

    @load_providers.setter
    def load_providers(self, load_providers):
        """
        Sets the load_providers of this SettingsGlobalGlobalSettings.


        :param load_providers: The load_providers of this SettingsGlobalGlobalSettings.
        :type: list[str]
        """
        
        self._load_providers = load_providers

    @property
    def min_mapped_rid(self):
        """
        Gets the min_mapped_rid of this SettingsGlobalGlobalSettings.


        :return: The min_mapped_rid of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._min_mapped_rid

    @min_mapped_rid.setter
    def min_mapped_rid(self, min_mapped_rid):
        """
        Sets the min_mapped_rid of this SettingsGlobalGlobalSettings.


        :param min_mapped_rid: The min_mapped_rid of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._min_mapped_rid = min_mapped_rid

    @property
    def null_gid(self):
        """
        Gets the null_gid of this SettingsGlobalGlobalSettings.


        :return: The null_gid of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._null_gid

    @null_gid.setter
    def null_gid(self, null_gid):
        """
        Sets the null_gid of this SettingsGlobalGlobalSettings.


        :param null_gid: The null_gid of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._null_gid = null_gid

    @property
    def null_uid(self):
        """
        Gets the null_uid of this SettingsGlobalGlobalSettings.


        :return: The null_uid of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._null_uid

    @null_uid.setter
    def null_uid(self, null_uid):
        """
        Sets the null_uid of this SettingsGlobalGlobalSettings.


        :param null_uid: The null_uid of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._null_uid = null_uid

    @property
    def on_disk_identity(self):
        """
        Gets the on_disk_identity of this SettingsGlobalGlobalSettings.
        Specifies type of identity stored on disk.

        :return: The on_disk_identity of this SettingsGlobalGlobalSettings.
        :rtype: str
        """
        return self._on_disk_identity

    @on_disk_identity.setter
    def on_disk_identity(self, on_disk_identity):
        """
        Sets the on_disk_identity of this SettingsGlobalGlobalSettings.
        Specifies type of identity stored on disk.

        :param on_disk_identity: The on_disk_identity of this SettingsGlobalGlobalSettings.
        :type: str
        """
        allowed_values = ["native", "unix", "sid"]
        if on_disk_identity is not None and on_disk_identity not in allowed_values:
            raise ValueError(
                "Invalid value for `on_disk_identity`, must be one of {0}"
                .format(allowed_values)
            )

        self._on_disk_identity = on_disk_identity

    @property
    def rpc_block_time(self):
        """
        Gets the rpc_block_time of this SettingsGlobalGlobalSettings.


        :return: The rpc_block_time of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._rpc_block_time

    @rpc_block_time.setter
    def rpc_block_time(self, rpc_block_time):
        """
        Sets the rpc_block_time of this SettingsGlobalGlobalSettings.


        :param rpc_block_time: The rpc_block_time of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._rpc_block_time = rpc_block_time

    @property
    def rpc_max_requests(self):
        """
        Gets the rpc_max_requests of this SettingsGlobalGlobalSettings.


        :return: The rpc_max_requests of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._rpc_max_requests

    @rpc_max_requests.setter
    def rpc_max_requests(self, rpc_max_requests):
        """
        Sets the rpc_max_requests of this SettingsGlobalGlobalSettings.


        :param rpc_max_requests: The rpc_max_requests of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._rpc_max_requests = rpc_max_requests

    @property
    def rpc_timeout(self):
        """
        Gets the rpc_timeout of this SettingsGlobalGlobalSettings.


        :return: The rpc_timeout of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._rpc_timeout

    @rpc_timeout.setter
    def rpc_timeout(self, rpc_timeout):
        """
        Sets the rpc_timeout of this SettingsGlobalGlobalSettings.


        :param rpc_timeout: The rpc_timeout of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._rpc_timeout = rpc_timeout

    @property
    def send_ntlmv2(self):
        """
        Gets the send_ntlmv2 of this SettingsGlobalGlobalSettings.
        Specifies whether to send NTLMv2 responses.

        :return: The send_ntlmv2 of this SettingsGlobalGlobalSettings.
        :rtype: bool
        """
        return self._send_ntlmv2

    @send_ntlmv2.setter
    def send_ntlmv2(self, send_ntlmv2):
        """
        Sets the send_ntlmv2 of this SettingsGlobalGlobalSettings.
        Specifies whether to send NTLMv2 responses.

        :param send_ntlmv2: The send_ntlmv2 of this SettingsGlobalGlobalSettings.
        :type: bool
        """
        
        self._send_ntlmv2 = send_ntlmv2

    @property
    def space_replacement(self):
        """
        Gets the space_replacement of this SettingsGlobalGlobalSettings.
        Sets space replacement.

        :return: The space_replacement of this SettingsGlobalGlobalSettings.
        :rtype: str
        """
        return self._space_replacement

    @space_replacement.setter
    def space_replacement(self, space_replacement):
        """
        Sets the space_replacement of this SettingsGlobalGlobalSettings.
        Sets space replacement.

        :param space_replacement: The space_replacement of this SettingsGlobalGlobalSettings.
        :type: str
        """
        
        self._space_replacement = space_replacement

    @property
    def system_gid_threshold(self):
        """
        Gets the system_gid_threshold of this SettingsGlobalGlobalSettings.


        :return: The system_gid_threshold of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._system_gid_threshold

    @system_gid_threshold.setter
    def system_gid_threshold(self, system_gid_threshold):
        """
        Sets the system_gid_threshold of this SettingsGlobalGlobalSettings.


        :param system_gid_threshold: The system_gid_threshold of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._system_gid_threshold = system_gid_threshold

    @property
    def system_uid_threshold(self):
        """
        Gets the system_uid_threshold of this SettingsGlobalGlobalSettings.


        :return: The system_uid_threshold of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._system_uid_threshold

    @system_uid_threshold.setter
    def system_uid_threshold(self, system_uid_threshold):
        """
        Sets the system_uid_threshold of this SettingsGlobalGlobalSettings.


        :param system_uid_threshold: The system_uid_threshold of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._system_uid_threshold = system_uid_threshold

    @property
    def uid_range_enabled(self):
        """
        Gets the uid_range_enabled of this SettingsGlobalGlobalSettings.
        Uses a fixed range for allocating UIDs.

        :return: The uid_range_enabled of this SettingsGlobalGlobalSettings.
        :rtype: bool
        """
        return self._uid_range_enabled

    @uid_range_enabled.setter
    def uid_range_enabled(self, uid_range_enabled):
        """
        Sets the uid_range_enabled of this SettingsGlobalGlobalSettings.
        Uses a fixed range for allocating UIDs.

        :param uid_range_enabled: The uid_range_enabled of this SettingsGlobalGlobalSettings.
        :type: bool
        """
        
        self._uid_range_enabled = uid_range_enabled

    @property
    def uid_range_max(self):
        """
        Gets the uid_range_max of this SettingsGlobalGlobalSettings.
        Specifies ending number for allocating UIDs.

        :return: The uid_range_max of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._uid_range_max

    @uid_range_max.setter
    def uid_range_max(self, uid_range_max):
        """
        Sets the uid_range_max of this SettingsGlobalGlobalSettings.
        Specifies ending number for allocating UIDs.

        :param uid_range_max: The uid_range_max of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._uid_range_max = uid_range_max

    @property
    def uid_range_min(self):
        """
        Gets the uid_range_min of this SettingsGlobalGlobalSettings.
        Specifies starting number for allocating UIDs.

        :return: The uid_range_min of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._uid_range_min

    @uid_range_min.setter
    def uid_range_min(self, uid_range_min):
        """
        Sets the uid_range_min of this SettingsGlobalGlobalSettings.
        Specifies starting number for allocating UIDs.

        :param uid_range_min: The uid_range_min of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._uid_range_min = uid_range_min

    @property
    def uid_range_next(self):
        """
        Gets the uid_range_next of this SettingsGlobalGlobalSettings.
        Specifies the next UID to be allocated.

        :return: The uid_range_next of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._uid_range_next

    @uid_range_next.setter
    def uid_range_next(self, uid_range_next):
        """
        Sets the uid_range_next of this SettingsGlobalGlobalSettings.
        Specifies the next UID to be allocated.

        :param uid_range_next: The uid_range_next of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._uid_range_next = uid_range_next

    @property
    def unknown_gid(self):
        """
        Gets the unknown_gid of this SettingsGlobalGlobalSettings.
        Specifies GID to use for the unknown (anonymous) group.

        :return: The unknown_gid of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._unknown_gid

    @unknown_gid.setter
    def unknown_gid(self, unknown_gid):
        """
        Sets the unknown_gid of this SettingsGlobalGlobalSettings.
        Specifies GID to use for the unknown (anonymous) group.

        :param unknown_gid: The unknown_gid of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._unknown_gid = unknown_gid

    @property
    def unknown_uid(self):
        """
        Gets the unknown_uid of this SettingsGlobalGlobalSettings.
        Specifies UID to use for the unknown (anonymous) user.

        :return: The unknown_uid of this SettingsGlobalGlobalSettings.
        :rtype: int
        """
        return self._unknown_uid

    @unknown_uid.setter
    def unknown_uid(self, unknown_uid):
        """
        Sets the unknown_uid of this SettingsGlobalGlobalSettings.
        Specifies UID to use for the unknown (anonymous) user.

        :param unknown_uid: The unknown_uid of this SettingsGlobalGlobalSettings.
        :type: int
        """
        
        self._unknown_uid = unknown_uid

    @property
    def workgroup(self):
        """
        Gets the workgroup of this SettingsGlobalGlobalSettings.
        Sets NetBIOS workgroup/domain.

        :return: The workgroup of this SettingsGlobalGlobalSettings.
        :rtype: str
        """
        return self._workgroup

    @workgroup.setter
    def workgroup(self, workgroup):
        """
        Sets the workgroup of this SettingsGlobalGlobalSettings.
        Sets NetBIOS workgroup/domain.

        :param workgroup: The workgroup of this SettingsGlobalGlobalSettings.
        :type: str
        """
        
        self._workgroup = workgroup

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

