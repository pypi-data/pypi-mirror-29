---

- name: Ensure that the required directories are present
  file:
    path: '{{ item }}'
    state: 'directory'
  with_flattened: '{{ [ kernel_module__blacklist_file, kernel_module__options_file, kernel_module__load_file ] | map("dirname") | unique | list }}'

- name: Blacklist kernel modules
  kernel_blacklist:
    name: '{{ item.name }}'
    state: '{{ "present" if (item.blacklist|d() | bool) else "absent" }}'
    blacklist_file: '{{ kernel_module__blacklist_file }}'
  with_items: '{{ kernel_module__combined_list }}'

- name: Save kernel modules which should be loaded on boot
  template:
    src: 'etc/modules-load.d/ansible-kernel_module-role.conf.j2'
    dest: '{{ kernel_module__load_file }}'

- name: Save kernel module parameters
  template:
    src: 'etc/modprobe.d/options-ansible-kernel_module-role.conf.j2'
    dest: '{{ kernel_module__options_file }}'
  register: kernel_module__options_template

## See http://unix.stackexchange.com/a/123050
## Could be handled by writing to '/sys/{{ item.name }}/parameters/{{ item.parm_name }}' but this should be handled by the modprobe module.
- name: Force module unload to apply different module parameters or if blacklisted
  modprobe:
    name: '{{ item.name }}'
    state: 'absent'
  when: (
          item.blacklist|d(False) or
          (
            (
              not (item.persistent|d(True) | bool) or
              kernel_module__options_template|changed
            ) and
            item.state|d('present') == 'present' and
            (item.params_force|d(kernel_module__params_force|d(False)) | bool) and
            not (item.blacklist|d(False) | bool)
          )
        )
  with_items: '{{ kernel_module__combined_list }}'

- name: Modprobe kernel modules
  modprobe:
    name: '{{ item.name }}'
    params: '{{ item.params | d(omit) }}'
    state: '{{ item.state | d("present") }}'
  when: (not (item.blacklist|d(False) | bool))
  with_items: '{{ kernel_module__combined_list }}'
