import re
from typing import Optional

import nbformat

from ..jupyter.exporter import run_and_export
from ..markdown.convert import fenced_code_convert
from ..utils import splitter


def convert(title: str) -> tuple:
    """Return (title=caption, content=source code)."""
    title = title.strip()
    if title.startswith('['):
        index = title.index(']')
        reference, title = title[1:index], title[index + 1:].strip()
        content = inspect_source(reference)
        return title, content
    else:
        return title, None


def inspect_source(reference: str, func='inspect.getsourcelines') -> str:
    """Inspect source code."""
    name, *options = reference.split(' ')  # `Options` is not implemented.
    name, *line_range = name.split(':')  # `line_range` is not implemented.

    cell = nbformat.v4.new_code_cell(f'{func}({name})')
    source = run_and_export(cell, inspect_render)
    print(cell)
    return format_source(source)


def inspect_render(cell) -> Optional[str]:
    """Convert a cell generated by inspection into markdown."""
    for output in cell['outputs']:
        if 'data' in output and 'text/plain' in output['data']:
            lines, lineno = eval(output['data']['text/plain'])
            source = ''.join(lines)
            return f'```python\n{source}```'


def format_source(source: str) -> str:
    """Highlight the source and add classes, begin, and end statements."""
    source = fenced_code_convert(source, only_code=True)
    cls = 'pheasant-markdown pheasant-code'
    content = f'<div class="codehilite {cls}"><pre>{source}</pre></div>'
    return f'#begin\n{content}\n#end'


def code_splitter(source):
    """Yield formatted fenced code and other normal part."""
    pattern = r'(```(.*?)```)|(~~~(.*?)~~~)'
    re_option = re.DOTALL | re.MULTILINE
    for splitted in splitter(pattern, source, option=re_option):
        if isinstance(splitted, str):
            splitted = splitted.strip()
            if splitted:
                yield splitted
        else:
            source = splitted.group(2) or splitted.group(4)
            source = source.strip()
            source = f'```{source}\n```'
            yield format_source(source)
