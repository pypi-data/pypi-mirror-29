<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classforpy_1_1_forest" kind="class" language="C++" prot="public">
    <compoundname>forpy::Forest</compoundname>
    <derivedcompoundref refid="classforpy_1_1_classification_forest" prot="public" virt="non-virtual">forpy::ClassificationForest</derivedcompoundref>
    <derivedcompoundref refid="classforpy_1_1_regression_forest" prot="public" virt="non-virtual">forpy::RegressionForest</derivedcompoundref>
    <includes refid="forest_8h" local="no">forest.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classforpy_1_1_forest_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class cereal::access</definition>
        <argsstring></argsstring>
        <name>cereal::access</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="235" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classforpy_1_1_forest_1a876fcf9d8d80ed02ee4f340d2567ece6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Forest &amp;self)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classforpy_1_1_forest" kindref="compound">Forest</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="228" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="228" bodyend="232"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classforpy_1_1_forest_1a6729d9158db3594237387a1fd5f4987c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classforpy_1_1_tree" kindref="compound">Tree</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Tree&gt; &gt; forpy::Forest::trees</definition>
        <argsstring></argsstring>
        <name>trees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="244" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classforpy_1_1_forest_1af46001e2d4aa46ed1ba7986945133ae6" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref></type>
        <definition>uint forpy::Forest::random_seed</definition>
        <argsstring></argsstring>
        <name>random_seed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="245" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classforpy_1_1_forest_1aedfec5b8670f3f76a643574cf7cde15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forpy::Forest::Forest</definition>
        <argsstring>(const uint &amp;n_trees=10, const uint &amp;max_depth=std::numeric_limits&lt; uint &gt;::max(), const uint &amp;min_samples_at_leaf=1, const uint &amp;min_samples_at_node=2, const std::shared_ptr&lt; IDecider &gt; &amp;decider_template=nullptr, const std::shared_ptr&lt; ILeaf &gt; &amp;leaf_manager_template=nullptr, const uint &amp;random_seed=1)</argsstring>
        <name>Forest</name>
        <param>
          <type>const <ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref> &amp;</type>
          <declname>n_trees</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref> &amp;</type>
          <declname>max_depth</declname>
          <defval>std::numeric_limits&lt; <ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref> &gt;::max()</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref> &amp;</type>
          <declname>min_samples_at_leaf</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref> &amp;</type>
          <declname>min_samples_at_node</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classforpy_1_1_i_decider" kindref="compound">IDecider</ref> &gt; &amp;</type>
          <declname>decider_template</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref> &gt; &amp;</type>
          <declname>leaf_manager_template</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref> &amp;</type>
          <declname>random_seed</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n_trees</parametername>
</parameternamelist>
<parameterdescription>
<para>uint&gt;1 The number of trees. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>uint &gt; 0 The maximum tree depth, including leafs (up to including). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_samples_at_leaf</parametername>
</parameternamelist>
<parameterdescription>
<para>uint &gt; 0 The minimum number of samples at a leaf (from including). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_samples_at_node</parametername>
</parameternamelist>
<parameterdescription>
<para>uint&gt;=2*min_samples_at_leaf The minimum number of samples at a node (from including). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decider_template</parametername>
</parameternamelist>
<parameterdescription>
<para>shared(IDecider) The decider configuration for the trees. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leaf_manager_template</parametername>
</parameternamelist>
<parameterdescription>
<para>shared(ILeafManager) The leaf manager template for the trees. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>random_seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The random seed to use to seed all trees. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a7f102b5b98beb69221c530a6e1bc7711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forpy::Forest::Forest</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; Tree &gt;&gt; &amp;trees)</argsstring>
        <name>Forest</name>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classforpy_1_1_tree" kindref="compound">Tree</ref> &gt;&gt; &amp;</type>
          <declname>trees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Combines TRAINED trees to a forest. !! Training is not possible any more !!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trees</parametername>
</parameternamelist>
<parameterdescription>
<para>vector(shared(Tree)) The trained trees to combine. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a5d567cd6164944f637929b27a263c578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forpy::Forest::Forest</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>Forest</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserializing constructor to load a forest from a file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>string The file to load the forest from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a921dde74a71ab99e94117949ac9126a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classforpy_1_1_forest" kindref="compound">Forest</ref> *</type>
        <definition>Forest* forpy::Forest::fit</definition>
        <argsstring>(const Data&lt; MatCRef &gt; &amp;data_v, const Data&lt; MatCRef &gt; &amp;annotation_v, const size_t &amp;num_threads=1, const bool &amp;bootstrap=true, const std::vector&lt; float &gt; &amp;weights=std::vector&lt; float &gt;())</argsstring>
        <name>fit</name>
        <param>
          <type>const <ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a4a9ac2f76a00cbaa27aa5c24ff4074a5" kindref="member">MatCRef</ref> &gt; &amp;</type>
          <declname>data_v</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a4a9ac2f76a00cbaa27aa5c24ff4074a5" kindref="member">MatCRef</ref> &gt; &amp;</type>
          <declname>annotation_v</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>bootstrap</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>weights</declname>
          <defval>std::vector&lt; float &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fit the forest on the given data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Variant of 2D array, col-major contiguous Col-wise data points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>annotation_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Variant of 2D array, row-major contiguous Row-wise annotations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>uint&gt;0 The number of threads to use for fitting. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bootstrap</parametername>
</parameternamelist>
<parameterdescription>
<para>bool If set to true, resample the training set for each tree. Default: true. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&lt;float&gt; A vector with positive weights for each sample. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a00157303fa85f51f93ed73666b74261f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; forpy::Forest::get_depths</definition>
        <argsstring>() const</argsstring>
        <name>get_depths</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the depths of all trees.</para><para>The depth is defined to be 0 for an &quot;empty&quot; tree (only a leaf/root node) and as the amount of edges on the longest path in the tree otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="94" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="94" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1ae84524c095dfa2c23501f4c96e4d8ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classforpy_1_1_forest" kindref="compound">Forest</ref> *</type>
        <definition>Forest* forpy::Forest::fit_dprov</definition>
        <argsstring>(const std::shared_ptr&lt; IDataProvider &gt; &amp;fdata_provider, const bool &amp;bootstrap=true)</argsstring>
        <name>fit_dprov</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classforpy_1_1_i_data_provider" kindref="compound">IDataProvider</ref> &gt; &amp;</type>
          <declname>fdata_provider</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>bootstrap</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>The fitting function for a forest. </para>        </briefdescription>
        <detaileddescription>
<para>Fits this forest to the data given by the data provider. Releases the GIL in Python!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fdata_provider</parametername>
</parameternamelist>
<parameterdescription>
<para>shared(IDataProvider) The data provider for the fitting process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bootstrap</parametername>
</parameternamelist>
<parameterdescription>
<para>bool Whether to resample the training set for each tree. Default: true. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a5347f23789a3d1a6e89a5b3df37b47b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref> &gt;</type>
        <definition>Data&lt;Mat&gt; forpy::Forest::predict</definition>
        <argsstring>(const Data&lt; MatCRef &gt; &amp;data_v, const int &amp;num_threads=1, const bool &amp;use_fast_prediction_if_available=true, const bool &amp;predict_proba=false)</argsstring>
        <name>predict</name>
        <param>
          <type>const <ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a4a9ac2f76a00cbaa27aa5c24ff4074a5" kindref="member">MatCRef</ref> &gt; &amp;</type>
          <declname>data_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>use_fast_prediction_if_available</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>predict_proba</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Predicts new data points.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Variant of 2D array, col-major contiguous The data predict with one sample per row.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>int&gt;=0 The number of threads to use for prediction. The number of samples should be at least three times larger than the number of threads to observe very good parallelization behaviour. If 0, then all available hardware threads are used. Default: 1.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_fast_prediction_if_available</parametername>
</parameternamelist>
<parameterdescription>
<para>bool Use or construct a fast prediction tree (a summarized version of the tree that is particularly fast to index) for making the predictions. Default: true.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predict_proba</parametername>
</parameternamelist>
<parameterdescription>
<para>bool Whether or not to provide the distribution of results instead of the mode. Default: false. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="140" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="140" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a304fe941cebad325ca60b8bceb7ab2ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref> &gt;</type>
        <definition>Data&lt;Mat&gt; forpy::Forest::predict_proba</definition>
        <argsstring>(const Data&lt; MatCRef &gt; &amp;data_v, const int &amp;num_threads=1, const bool &amp;use_fast_prediction_if_available=true)</argsstring>
        <name>predict_proba</name>
        <param>
          <type>const <ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a4a9ac2f76a00cbaa27aa5c24ff4074a5" kindref="member">MatCRef</ref> &gt; &amp;</type>
          <declname>data_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>use_fast_prediction_if_available</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Predict the distribution of results. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="158" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1ab96fc7de460300b4969a8ba12526bf96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t forpy::Forest::get_input_data_dimensions</definition>
        <argsstring>() const</argsstring>
        <name>get_input_data_dimensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the required input data dimension. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="165" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1ad3d1238b0a7591bf4ace2131d6d52f06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classforpy_1_1_i_decider" kindref="compound">IDecider</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const IDecider&gt; forpy::Forest::get_decider</definition>
        <argsstring>() const</argsstring>
        <name>get_decider</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the decider of the first tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="170" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a3358c450c612d1a526052b2420e1ecf7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classforpy_1_1_tree" kindref="compound">Tree</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Tree&gt; &gt; forpy::Forest::get_trees</definition>
        <argsstring>() const</argsstring>
        <name>get_trees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the tree vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="175" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1ae7d2aa97c0404e21210996f02c74c02b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void forpy::Forest::enable_fast_prediction</definition>
        <argsstring>()</argsstring>
        <name>enable_fast_prediction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable fast prediction for all trees. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="178" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a6c711252c6ffc0754226623ddb321a14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void forpy::Forest::disable_fast_prediction</definition>
        <argsstring>()</argsstring>
        <name>disable_fast_prediction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable fast prediction for all trees. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="183" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a0e8b80553e643ac3eb4de234bfa0dfe5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const ILeaf&gt; forpy::Forest::get_leaf_manager</definition>
        <argsstring>() const</argsstring>
        <name>get_leaf_manager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the leaf manager of the first tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="188" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1afaa517cf1c7bbf14bbc55ab3f757cd0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; forpy::Forest::get_tree_weights</definition>
        <argsstring>() const</argsstring>
        <name>get_tree_weights</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get all tree weights. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="193" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a21aa3cff3a22fd0feffa7331fd3bda5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void forpy::Forest::set_tree_weights</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;weights) const</argsstring>
        <name>set_tree_weights</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the tree weights. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="202" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="202" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a08772e8b9e5850140b39de064d23c805" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void forpy::Forest::save</definition>
        <argsstring>(const std::string &amp;filename) const</argsstring>
        <name>save</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves the forest to a file with the specified name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>string The filename to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a064e5c9fdd1c9c8d439df7cac77c6f97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool forpy::Forest::operator==</definition>
        <argsstring>(const Forest &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classforpy_1_1_forest" kindref="compound">Forest</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="219" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="219" bodyend="226"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classforpy_1_1_forest_1a84469d175fcc9100120a10eaa367a86e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void forpy::Forest::serialize</definition>
        <argsstring>(Archive &amp;ar, const uint &amp;)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="237" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="237" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_forest_1a6b3ef5b2d2322eacebf1b6e1cf2a33fd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forpy::Forest::DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(Forest)</argsstring>
        <name>DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classforpy_1_1_forest" kindref="compound">Forest</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="246" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Standard forest class of the library. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="80">
        <label>forpy::Forest</label>
        <link refid="classforpy_1_1_forest"/>
      </node>
      <node id="81">
        <label>forpy::ClassificationForest</label>
        <link refid="classforpy_1_1_classification_forest"/>
        <childnode refid="80" relation="public-inheritance">
        </childnode>
      </node>
      <node id="82">
        <label>forpy::RegressionForest</label>
        <link refid="classforpy_1_1_regression_forest"/>
        <childnode refid="80" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="84">
        <label>std::vector&lt; std::shared_ptr&lt; forpy::Tree &gt; &gt;</label>
      </node>
      <node id="83">
        <label>forpy::Forest</label>
        <link refid="classforpy_1_1_forest"/>
        <childnode refid="84" relation="usage">
          <edgelabel>trees</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/classner/git/forpy/include/forpy/forest.h" line="28" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/forest.h" bodystart="28" bodyend="247"/>
    <listofallmembers>
      <member refid="classforpy_1_1_forest_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>cereal::access</name></member>
      <member refid="classforpy_1_1_forest_1a6c711252c6ffc0754226623ddb321a14" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>disable_fast_prediction</name></member>
      <member refid="classforpy_1_1_forest_1a6b3ef5b2d2322eacebf1b6e1cf2a33fd" prot="private" virt="non-virtual"><scope>forpy::Forest</scope><name>DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classforpy_1_1_forest_1ae7d2aa97c0404e21210996f02c74c02b" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>enable_fast_prediction</name></member>
      <member refid="classforpy_1_1_forest_1a921dde74a71ab99e94117949ac9126a1" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>fit</name></member>
      <member refid="classforpy_1_1_forest_1ae84524c095dfa2c23501f4c96e4d8ab4" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>fit_dprov</name></member>
      <member refid="classforpy_1_1_forest_1aedfec5b8670f3f76a643574cf7cde15c" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>Forest</name></member>
      <member refid="classforpy_1_1_forest_1a7f102b5b98beb69221c530a6e1bc7711" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>Forest</name></member>
      <member refid="classforpy_1_1_forest_1a5d567cd6164944f637929b27a263c578" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>Forest</name></member>
      <member refid="classforpy_1_1_forest_1ad3d1238b0a7591bf4ace2131d6d52f06" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>get_decider</name></member>
      <member refid="classforpy_1_1_forest_1a00157303fa85f51f93ed73666b74261f" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>get_depths</name></member>
      <member refid="classforpy_1_1_forest_1ab96fc7de460300b4969a8ba12526bf96" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>get_input_data_dimensions</name></member>
      <member refid="classforpy_1_1_forest_1a0e8b80553e643ac3eb4de234bfa0dfe5" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>get_leaf_manager</name></member>
      <member refid="classforpy_1_1_forest_1afaa517cf1c7bbf14bbc55ab3f757cd0e" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>get_tree_weights</name></member>
      <member refid="classforpy_1_1_forest_1a3358c450c612d1a526052b2420e1ecf7" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>get_trees</name></member>
      <member refid="classforpy_1_1_forest_1a876fcf9d8d80ed02ee4f340d2567ece6" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>operator&lt;&lt;</name></member>
      <member refid="classforpy_1_1_forest_1a064e5c9fdd1c9c8d439df7cac77c6f97" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>operator==</name></member>
      <member refid="classforpy_1_1_forest_1a5347f23789a3d1a6e89a5b3df37b47b5" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>predict</name></member>
      <member refid="classforpy_1_1_forest_1a304fe941cebad325ca60b8bceb7ab2ab" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>predict_proba</name></member>
      <member refid="classforpy_1_1_forest_1af46001e2d4aa46ed1ba7986945133ae6" prot="private" virt="non-virtual"><scope>forpy::Forest</scope><name>random_seed</name></member>
      <member refid="classforpy_1_1_forest_1a08772e8b9e5850140b39de064d23c805" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>save</name></member>
      <member refid="classforpy_1_1_forest_1a84469d175fcc9100120a10eaa367a86e" prot="private" virt="non-virtual"><scope>forpy::Forest</scope><name>serialize</name></member>
      <member refid="classforpy_1_1_forest_1a21aa3cff3a22fd0feffa7331fd3bda5a" prot="public" virt="non-virtual"><scope>forpy::Forest</scope><name>set_tree_weights</name></member>
      <member refid="classforpy_1_1_forest_1a6729d9158db3594237387a1fd5f4987c" prot="private" virt="non-virtual"><scope>forpy::Forest</scope><name>trees</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
