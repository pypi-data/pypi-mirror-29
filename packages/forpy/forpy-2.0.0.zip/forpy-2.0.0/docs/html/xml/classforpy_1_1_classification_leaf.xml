<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classforpy_1_1_classification_leaf" kind="class" language="C++" prot="public">
    <compoundname>forpy::ClassificationLeaf</compoundname>
    <basecompoundref refid="classforpy_1_1_i_leaf" prot="public" virt="non-virtual">forpy::ILeaf</basecompoundref>
    <includes refid="classificationleaf_8h" local="no">classificationleaf.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1a1c3233dd4931db451bf6d33413e6810d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ILeaf&gt; forpy::ClassificationLeaf::create_duplicate</definition>
        <argsstring>() const</argsstring>
        <name>create_duplicate</name>
        <reimplements refid="classforpy_1_1_i_leaf_1a624665d009a72253b96a83058d08e42f">create_duplicate</reimplements>
        <briefdescription>
<para>Interface implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="40" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1a36e74b9993f59d2612e22370c6f0b911" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool forpy::ClassificationLeaf::is_compatible_with</definition>
        <argsstring>(const IDataProvider &amp;)</argsstring>
        <name>is_compatible_with</name>
        <reimplements refid="classforpy_1_1_i_leaf_1a5e5dfa9cdb34c445d00be4187eee832a">is_compatible_with</reimplements>
        <param>
          <type>const <ref refid="classforpy_1_1_i_data_provider" kindref="compound">IDataProvider</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Interface implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="43" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1a550dc6f665c971be1757afd951b941da" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool forpy::ClassificationLeaf::is_compatible_with</definition>
        <argsstring>(const IThreshOpt &amp;threshopt)</argsstring>
        <name>is_compatible_with</name>
        <reimplements refid="classforpy_1_1_i_leaf_1a515341f2744f8537ddaf542459e421dc">is_compatible_with</reimplements>
        <param>
          <type>const <ref refid="classforpy_1_1_i_thresh_opt" kindref="compound">IThreshOpt</ref> &amp;</type>
          <declname>threshopt</declname>
        </param>
        <briefdescription>
<para>Interface implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1a767bd3bc6afdc03711a3265693c435b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void forpy::ClassificationLeaf::transfer_or_run_check</definition>
        <argsstring>(ILeaf *other, IThreshOpt *thresh_opt, IDataProvider *dprov)</argsstring>
        <name>transfer_or_run_check</name>
        <reimplements refid="classforpy_1_1_i_leaf_1a1761f69b5d97451a1008c4f35759dc39">transfer_or_run_check</reimplements>
        <param>
          <type><ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classforpy_1_1_i_thresh_opt" kindref="compound">IThreshOpt</ref> *</type>
          <declname>thresh_opt</declname>
        </param>
        <param>
          <type><ref refid="classforpy_1_1_i_data_provider" kindref="compound">IDataProvider</ref> *</type>
          <declname>dprov</declname>
        </param>
        <briefdescription>
<para>Interface implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="47" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="47" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1ab5f04b67d484634301d0b681c4db3412" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void forpy::ClassificationLeaf::make_leaf</definition>
        <argsstring>(const TodoMark &amp;todo_info, const IDataProvider &amp;data_provider, Desk *desk) const</argsstring>
        <name>make_leaf</name>
        <reimplements refid="classforpy_1_1_i_leaf_1a3c5246ea62fceb6ca96ea669f0967fe4">make_leaf</reimplements>
        <param>
          <type>const <ref refid="structforpy_1_1_todo_mark" kindref="compound">TodoMark</ref> &amp;</type>
          <declname>todo_info</declname>
        </param>
        <param>
          <type>const <ref refid="classforpy_1_1_i_data_provider" kindref="compound">IDataProvider</ref> &amp;</type>
          <declname>data_provider</declname>
        </param>
        <param>
          <type><ref refid="structforpy_1_1_desk" kindref="compound">Desk</ref> *</type>
          <declname>desk</declname>
        </param>
        <briefdescription>
<para>Interface implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1a950b6612ecb8bbfdefd9783f821d4899" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t forpy::ClassificationLeaf::get_result_columns</definition>
        <argsstring>(const size_t &amp;n_trees=1, const bool &amp;predict_proba=false, const bool &amp;for_forest=false) const</argsstring>
        <name>get_result_columns</name>
        <reimplements refid="classforpy_1_1_i_leaf_1a4c4a3e07e6e7e683346dbaaa086444ae">get_result_columns</reimplements>
        <param>
          <type>const size_t &amp;</type>
          <declname>n_trees</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>predict_proba</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>for_forest</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Interface implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1ab495ca9402d64549209a42a286c5bb3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref> &gt;</type>
        <definition>Data&lt;Mat&gt; forpy::ClassificationLeaf::get_result_type</definition>
        <argsstring>(const bool &amp;predict_proba, const bool &amp;for_forest=false) const</argsstring>
        <name>get_result_type</name>
        <reimplements refid="classforpy_1_1_i_leaf_1a2113cd63cd4e723a0699edc8683e36a7">get_result_type</reimplements>
        <param>
          <type>const bool &amp;</type>
          <declname>predict_proba</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>for_forest</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Interface implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1a979b942934c8b487abccb2e0d8078ee9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void forpy::ClassificationLeaf::get_result</definition>
        <argsstring>(const id_t &amp;node_id, Data&lt; MatRef &gt; &amp;target_v, const bool &amp;predict_proba, const bool &amp;for_forest) const</argsstring>
        <name>get_result</name>
        <reimplements refid="classforpy_1_1_i_leaf_1ae05c309a58b401ee24fcbb803550fa2e">get_result</reimplements>
        <param>
          <type>const <ref refid="namespaceforpy_1a324c9643e02b76477c3a99a48773be8c" kindref="member">id_t</ref> &amp;</type>
          <declname>node_id</declname>
        </param>
        <param>
          <type><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1ac50f86d38ff96870f057147546b8ad26" kindref="member">MatRef</ref> &gt; &amp;</type>
          <declname>target_v</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>predict_proba</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>for_forest</declname>
        </param>
        <briefdescription>
<para>Interface implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1a5ecafb773c0b71a32f9d6046cfd124cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void forpy::ClassificationLeaf::get_result</definition>
        <argsstring>(const std::vector&lt; Data&lt; Mat &gt;&gt; &amp;leaf_results, Data&lt; MatRef &gt; &amp;target_v, const Vec&lt; float &gt; &amp;weights=Vec&lt; float &gt;(), const bool &amp;predict_proba=false) const</argsstring>
        <name>get_result</name>
        <reimplements refid="classforpy_1_1_i_leaf_1a85539dcbb494e9b8c426e79fd61f6cb5">get_result</reimplements>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref> &gt;&gt; &amp;</type>
          <declname>leaf_results</declname>
        </param>
        <param>
          <type><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1ac50f86d38ff96870f057147546b8ad26" kindref="member">MatRef</ref> &gt; &amp;</type>
          <declname>target_v</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec</ref>&lt; float &gt; &amp;</type>
          <declname>weights</declname>
          <defval><ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec</ref>&lt; float &gt;()</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>predict_proba</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Interface implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1a8ac3f32509d9caad64ef458c0884a30a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void forpy::ClassificationLeaf::ensure_capacity</definition>
        <argsstring>(const size_t &amp;n)</argsstring>
        <name>ensure_capacity</name>
        <reimplements refid="classforpy_1_1_i_leaf_1af4ceeb66a04547d71501c759c2d361ec">ensure_capacity</reimplements>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Interface implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="72" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1a61144f17050448997ea009887d62a9ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void forpy::ClassificationLeaf::finalize_capacity</definition>
        <argsstring>(const size_t &amp;n)</argsstring>
        <name>finalize_capacity</name>
        <reimplements refid="classforpy_1_1_i_leaf_1a5bae9feb177b3e981402ebd8fd24869d">finalize_capacity</reimplements>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Interface implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="75" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="75" bodyend="75"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classforpy_1_1_classification_leaf_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class cereal::access</definition>
        <argsstring></argsstring>
        <name>cereal::access</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="91" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classforpy_1_1_classification_leaf_1a335caddba2fed27f6033bd96ce56c36a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const ClassificationLeaf &amp;self)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classforpy_1_1_classification_leaf" kindref="compound">ClassificationLeaf</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="79" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="79" bodyend="84"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classforpy_1_1_classification_leaf_1ae5a92893224d575e96f24ea8aa5728d5" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref></type>
        <definition>uint forpy::ClassificationLeaf::n_classes</definition>
        <argsstring></argsstring>
        <name>n_classes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="98" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classforpy_1_1_classification_leaf_1adc8ff72e0c6e9a9a8fb8d7bf8a23cf37" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::vector&lt; <ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::vector&lt;uint&gt; &gt; forpy::ClassificationLeaf::class_transl_ptr</definition>
        <argsstring></argsstring>
        <name>class_transl_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="99" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classforpy_1_1_classification_leaf_1a2a0581398c367e490cbcb3e6d2a50a0b" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref></type>
        <definition>uint forpy::ClassificationLeaf::true_max_class</definition>
        <argsstring></argsstring>
        <name>true_max_class</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="100" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classforpy_1_1_classification_leaf_1a6d9ebb7aec987931f05161ae5cd58c27" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec</ref>&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;Vec&lt;float&gt; &gt; forpy::ClassificationLeaf::stored_distributions</definition>
        <argsstring></argsstring>
        <name>stored_distributions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="101" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1ae547b00850a1854c9ed7512bf7839a44" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>forpy::ClassificationLeaf::ClassificationLeaf</definition>
        <argsstring>(const uint &amp;n_classes=0)</argsstring>
        <name>ClassificationLeaf</name>
        <param>
          <type>const <ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref> &amp;</type>
          <declname>n_classes</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n_classes</parametername>
</parameternamelist>
<parameterdescription>
<para>uint The number of classes. If set to 0, they&apos;re automatically inferred. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="32" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1a4c5c9e02904ee0bf86b96569d6ae30b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool forpy::ClassificationLeaf::operator==</definition>
        <argsstring>(const ILeaf &amp;rhs) const</argsstring>
        <name>operator==</name>
        <reimplements refid="classforpy_1_1_i_leaf_1a411936d9f0759c509a7d648b1a5bd1be">operator==</reimplements>
        <param>
          <type>const <ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1ab61464e2db717e2bf986f98407eb7f83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec</ref>&lt; float &gt; &gt; &amp;</type>
        <definition>const std::vector&lt;Vec&lt;float&gt; &gt;&amp; forpy::ClassificationLeaf::get_stored_dists</definition>
        <argsstring>() const</argsstring>
        <name>get_stored_dists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1ac173386e1574d2a65c2f002a2589777f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const std::vector&lt; <ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref>&lt; float &gt; &gt; *</type>
        <definition>const std::vector&lt;Mat&lt;float&gt; &gt;* forpy::ClassificationLeaf::get_map</definition>
        <argsstring>() const</argsstring>
        <name>get_map</name>
        <reimplements refid="classforpy_1_1_i_leaf_1af67bf97754866e58154ae201e2ef4512">get_map</reimplements>
        <briefdescription>
<para>Get all leafs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="88" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="88" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classforpy_1_1_classification_leaf_1a139b6e7f472ee2d440ca794d6a300283" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void forpy::ClassificationLeaf::serialize</definition>
        <argsstring>(Archive &amp;ar, const uint)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="93" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="93" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Stores the probability distributions for n_classes at a leaf. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="13">
        <label>forpy::ILeaf</label>
        <link refid="classforpy_1_1_i_leaf"/>
      </node>
      <node id="12">
        <label>forpy::ClassificationLeaf</label>
        <link refid="classforpy_1_1_classification_leaf"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="15">
        <label>forpy::ILeaf</label>
        <link refid="classforpy_1_1_i_leaf"/>
      </node>
      <node id="16">
        <label>std::vector&lt; Vec&lt; float &gt; &gt;</label>
      </node>
      <node id="14">
        <label>forpy::ClassificationLeaf</label>
        <link refid="classforpy_1_1_classification_leaf"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>stored_distributions</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" line="26" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h" bodystart="26" bodyend="102"/>
    <listofallmembers>
      <member refid="classforpy_1_1_classification_leaf_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" virt="non-virtual"><scope>forpy::ClassificationLeaf</scope><name>cereal::access</name></member>
      <member refid="classforpy_1_1_classification_leaf_1adc8ff72e0c6e9a9a8fb8d7bf8a23cf37" prot="private" virt="non-virtual"><scope>forpy::ClassificationLeaf</scope><name>class_transl_ptr</name></member>
      <member refid="classforpy_1_1_classification_leaf_1ae547b00850a1854c9ed7512bf7839a44" prot="public" virt="non-virtual"><scope>forpy::ClassificationLeaf</scope><name>ClassificationLeaf</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a1c3233dd4931db451bf6d33413e6810d" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>create_duplicate</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a8ac3f32509d9caad64ef458c0884a30a" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>ensure_capacity</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a61144f17050448997ea009887d62a9ec" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>finalize_capacity</name></member>
      <member refid="classforpy_1_1_classification_leaf_1ac173386e1574d2a65c2f002a2589777f" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>get_map</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a979b942934c8b487abccb2e0d8078ee9" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>get_result</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a5ecafb773c0b71a32f9d6046cfd124cc" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>get_result</name></member>
      <member refid="classforpy_1_1_i_leaf_1a0ba46f3fb5d150cb48d64adc0612c973" prot="public" virt="virtual" ambiguityscope="forpy::ILeaf::"><scope>forpy::ClassificationLeaf</scope><name>get_result</name></member>
      <member refid="classforpy_1_1_i_leaf_1a965fcf0b0910bf04405ce2f114cabeb4" prot="public" virt="virtual" ambiguityscope="forpy::ILeaf::"><scope>forpy::ClassificationLeaf</scope><name>get_result</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a950b6612ecb8bbfdefd9783f821d4899" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>get_result_columns</name></member>
      <member refid="classforpy_1_1_classification_leaf_1ab495ca9402d64549209a42a286c5bb3d" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>get_result_type</name></member>
      <member refid="classforpy_1_1_classification_leaf_1ab61464e2db717e2bf986f98407eb7f83" prot="public" virt="non-virtual"><scope>forpy::ClassificationLeaf</scope><name>get_stored_dists</name></member>
      <member refid="classforpy_1_1_i_leaf_1a3905105cf769f4e03293ab2d5f9bef27" prot="protected" virt="non-virtual"><scope>forpy::ClassificationLeaf</scope><name>ILeaf</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a36e74b9993f59d2612e22370c6f0b911" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>is_compatible_with</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a550dc6f665c971be1757afd951b941da" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>is_compatible_with</name></member>
      <member refid="classforpy_1_1_classification_leaf_1ab5f04b67d484634301d0b681c4db3412" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>make_leaf</name></member>
      <member refid="classforpy_1_1_classification_leaf_1ae5a92893224d575e96f24ea8aa5728d5" prot="private" virt="non-virtual"><scope>forpy::ClassificationLeaf</scope><name>n_classes</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a335caddba2fed27f6033bd96ce56c36a" prot="public" virt="non-virtual"><scope>forpy::ClassificationLeaf</scope><name>operator&lt;&lt;</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a4c5c9e02904ee0bf86b96569d6ae30b5" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>operator==</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a139b6e7f472ee2d440ca794d6a300283" prot="private" virt="non-virtual"><scope>forpy::ClassificationLeaf</scope><name>serialize</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a6d9ebb7aec987931f05161ae5cd58c27" prot="private" virt="non-virtual"><scope>forpy::ClassificationLeaf</scope><name>stored_distributions</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a767bd3bc6afdc03711a3265693c435b8" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>transfer_or_run_check</name></member>
      <member refid="classforpy_1_1_classification_leaf_1a2a0581398c367e490cbcb3e6d2a50a0b" prot="private" virt="non-virtual"><scope>forpy::ClassificationLeaf</scope><name>true_max_class</name></member>
      <member refid="classforpy_1_1_i_leaf_1ad5b2eac48bba952724ae16ef20721301" prot="public" virt="virtual"><scope>forpy::ClassificationLeaf</scope><name>~ILeaf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
