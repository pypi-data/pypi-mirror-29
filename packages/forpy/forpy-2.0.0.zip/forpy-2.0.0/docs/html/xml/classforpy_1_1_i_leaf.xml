<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classforpy_1_1_i_leaf" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>forpy::ILeaf</compoundname>
    <derivedcompoundref refid="classforpy_1_1_classification_leaf" prot="public" virt="non-virtual">forpy::ClassificationLeaf</derivedcompoundref>
    <derivedcompoundref refid="classforpy_1_1_regression_leaf" prot="public" virt="non-virtual">forpy::RegressionLeaf</derivedcompoundref>
    <includes refid="ileaf_8h" local="no">ileaf.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classforpy_1_1_i_leaf_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class cereal::access</definition>
        <argsstring></argsstring>
        <name>cereal::access</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="138" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1ad5b2eac48bba952724ae16ef20721301" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual forpy::ILeaf::~ILeaf</definition>
        <argsstring>()</argsstring>
        <name>~ILeaf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="25" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a624665d009a72253b96a83058d08e42f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;ILeaf&gt; forpy::ILeaf::create_duplicate</definition>
        <argsstring>() const VIRTUAL_PTR</argsstring>
        <name>create_duplicate</name>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1a523a58a9fcfc79158180ac213cec3136">create_duplicate</reimplementedby>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1a1c3233dd4931db451bf6d33413e6810d">create_duplicate</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a similar, but empty, leaf. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a5e5dfa9cdb34c445d00be4187eee832a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool forpy::ILeaf::is_compatible_with</definition>
        <argsstring>(const IDataProvider &amp;)</argsstring>
        <name>is_compatible_with</name>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1a9c823e0991d307bb4fd96d82b2397253">is_compatible_with</reimplementedby>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1a36e74b9993f59d2612e22370c6f0b911">is_compatible_with</reimplementedby>
        <param>
          <type>const <ref refid="classforpy_1_1_i_data_provider" kindref="compound">IDataProvider</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Checks compatibility with a certain <ref refid="classforpy_1_1_i_data_provider" kindref="compound">IDataProvider</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This method is guaranteed to be called at the beginning of a training. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="34" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a515341f2744f8537ddaf542459e421dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool forpy::ILeaf::is_compatible_with</definition>
        <argsstring>(const IThreshOpt &amp;threshopt) VIRTUAL(bool)</argsstring>
        <name>is_compatible_with</name>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1ab7efaa3994b7a47c061de4b925cb9167">is_compatible_with</reimplementedby>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1a550dc6f665c971be1757afd951b941da">is_compatible_with</reimplementedby>
        <param>
          <type>const <ref refid="classforpy_1_1_i_thresh_opt" kindref="compound">IThreshOpt</ref> &amp;</type>
          <declname>threshopt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a1761f69b5d97451a1008c4f35759dc39" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void forpy::ILeaf::transfer_or_run_check</definition>
        <argsstring>(ILeaf *other, IThreshOpt *thresh_opt, IDataProvider *dprov) VIRTUAL_VOID</argsstring>
        <name>transfer_or_run_check</name>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1a767bd3bc6afdc03711a3265693c435b8">transfer_or_run_check</reimplementedby>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1a08cc5595675c8704b89cdec27cdf5dc9">transfer_or_run_check</reimplementedby>
        <param>
          <type><ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classforpy_1_1_i_thresh_opt" kindref="compound">IThreshOpt</ref> *</type>
          <declname>thresh_opt</declname>
        </param>
        <param>
          <type><ref refid="classforpy_1_1_i_data_provider" kindref="compound">IDataProvider</ref> *</type>
          <declname>dprov</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a3c5246ea62fceb6ca96ea669f0967fe4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void forpy::ILeaf::make_leaf</definition>
        <argsstring>(const TodoMark &amp;todo_info, const IDataProvider &amp;data_provider, Desk *desk) const VIRTUAL_VOID</argsstring>
        <name>make_leaf</name>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1afc78c7bcce730f096da6d5f1d92a78be">make_leaf</reimplementedby>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1ab5f04b67d484634301d0b681c4db3412">make_leaf</reimplementedby>
        <param>
          <type>const <ref refid="structforpy_1_1_todo_mark" kindref="compound">TodoMark</ref> &amp;</type>
          <declname>todo_info</declname>
        </param>
        <param>
          <type>const <ref refid="classforpy_1_1_i_data_provider" kindref="compound">IDataProvider</ref> &amp;</type>
          <declname>data_provider</declname>
        </param>
        <param>
          <type><ref refid="structforpy_1_1_desk" kindref="compound">Desk</ref> *</type>
          <declname>desk</declname>
        </param>
        <briefdescription>
<para>Creates a leaf with the specified node_id and data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a4c4a3e07e6e7e683346dbaaa086444ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t forpy::ILeaf::get_result_columns</definition>
        <argsstring>(const size_t &amp;n_trees=1, const bool &amp;predict_proba=false, const bool &amp;for_forest=false) const VIRTUAL(size_t)</argsstring>
        <name>get_result_columns</name>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1a2ee39f19e664cdb4d260e6da0bf153ef">get_result_columns</reimplementedby>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1a950b6612ecb8bbfdefd9783f821d4899">get_result_columns</reimplementedby>
        <param>
          <type>const size_t &amp;</type>
          <declname>n_trees</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>predict_proba</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>for_forest</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of summary dimensions per sample. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a2113cd63cd4e723a0699edc8683e36a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref> &gt;</type>
        <definition>virtual Data&lt;Mat&gt; forpy::ILeaf::get_result_type</definition>
        <argsstring>(const bool &amp;predict_proba, const bool &amp;for_forest=false) const VIRTUAL(Data&lt; Mat &gt;)</argsstring>
        <name>get_result_type</name>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1ab495ca9402d64549209a42a286c5bb3d">get_result_type</reimplementedby>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1a69ca578f046736ec06cdd91950a31f24">get_result_type</reimplementedby>
        <param>
          <type>const bool &amp;</type>
          <declname>predict_proba</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>for_forest</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the result data type (a 0x0 mat within in appropriate variant). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a0ba46f3fb5d150cb48d64adc0612c973" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref> &gt;</type>
        <definition>virtual Data&lt;Mat&gt; forpy::ILeaf::get_result</definition>
        <argsstring>(const id_t &amp;node_id, const bool &amp;predict_proba=false, const bool &amp;for_forest=false) const</argsstring>
        <name>get_result</name>
        <param>
          <type>const <ref refid="namespaceforpy_1a324c9643e02b76477c3a99a48773be8c" kindref="member">id_t</ref> &amp;</type>
          <declname>node_id</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>predict_proba</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>for_forest</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the leaf data for the leaf with the given id. </para>        </briefdescription>
        <detaileddescription>
<para>This function allocates space for storing the result. If the memory is already prepared, use other overloads. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="68" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" bodystart="68" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1ae05c309a58b401ee24fcbb803550fa2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void forpy::ILeaf::get_result</definition>
        <argsstring>(const id_t &amp;node_id, Data&lt; MatRef &gt; &amp;target, const bool &amp;predict_proba, const bool &amp;for_forest) const VIRTUAL_VOID</argsstring>
        <name>get_result</name>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1a979b942934c8b487abccb2e0d8078ee9">get_result</reimplementedby>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1aaf9b95f99e3a494c7eac7ca19fcd071d">get_result</reimplementedby>
        <param>
          <type>const <ref refid="namespaceforpy_1a324c9643e02b76477c3a99a48773be8c" kindref="member">id_t</ref> &amp;</type>
          <declname>node_id</declname>
        </param>
        <param>
          <type><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1ac50f86d38ff96870f057147546b8ad26" kindref="member">MatRef</ref> &gt; &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>predict_proba</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>for_forest</declname>
        </param>
        <briefdescription>
<para>Get the leaf data for the leaf with the given id. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a965fcf0b0910bf04405ce2f114cabeb4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref> &gt;</type>
        <definition>virtual Data&lt;Mat&gt; forpy::ILeaf::get_result</definition>
        <argsstring>(const std::vector&lt; Data&lt; Mat &gt;&gt; &amp;leaf_results, const Vec&lt; float &gt; &amp;weights=Vec&lt; float &gt;(), const bool &amp;predict_proba=false) const</argsstring>
        <name>get_result</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref> &gt;&gt; &amp;</type>
          <declname>leaf_results</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec</ref>&lt; float &gt; &amp;</type>
          <declname>weights</declname>
          <defval><ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec</ref>&lt; float &gt;()</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>predict_proba</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Combine leaf results of several trees with weights. </para>        </briefdescription>
        <detaileddescription>
<para>This function allocates space for the result. If the memory is already allocated, use another overload of this function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="98" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" bodystart="98" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a85539dcbb494e9b8c426e79fd61f6cb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void forpy::ILeaf::get_result</definition>
        <argsstring>(const std::vector&lt; Data&lt; Mat &gt;&gt; &amp;leaf_results, Data&lt; MatRef &gt; &amp;target_v, const Vec&lt; float &gt; &amp;weights=Vec&lt; float &gt;(), const bool &amp;predict_proba=false) const VIRTUAL_VOID</argsstring>
        <name>get_result</name>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1a5ecafb773c0b71a32f9d6046cfd124cc">get_result</reimplementedby>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1a809459bc7399274229a6a6eb1507e46d">get_result</reimplementedby>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref> &gt;&gt; &amp;</type>
          <declname>leaf_results</declname>
        </param>
        <param>
          <type><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt; <ref refid="namespaceforpy_1ac50f86d38ff96870f057147546b8ad26" kindref="member">MatRef</ref> &gt; &amp;</type>
          <declname>target_v</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec</ref>&lt; float &gt; &amp;</type>
          <declname>weights</declname>
          <defval><ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec</ref>&lt; float &gt;()</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>predict_proba</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the fused forest result. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1af4ceeb66a04547d71501c759c2d361ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void forpy::ILeaf::ensure_capacity</definition>
        <argsstring>(const size_t &amp;n) VIRTUAL_VOID</argsstring>
        <name>ensure_capacity</name>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1a8ac3f32509d9caad64ef458c0884a30a">ensure_capacity</reimplementedby>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1aba1e9f1d6d3583476195c9252dafc355">ensure_capacity</reimplementedby>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Ensure that storage is available for at least n leafs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a5bae9feb177b3e981402ebd8fd24869d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void forpy::ILeaf::finalize_capacity</definition>
        <argsstring>(const size_t &amp;n) VIRTUAL_VOID</argsstring>
        <name>finalize_capacity</name>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1a61144f17050448997ea009887d62a9ec">finalize_capacity</reimplementedby>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1a6fdd83f19b12c5715677d8532239457e">finalize_capacity</reimplementedby>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Cut down capacity to exactly n leafs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1af67bf97754866e58154ae201e2ef4512" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const std::vector&lt; <ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref>&lt; float &gt; &gt; *</type>
        <definition>virtual const std::vector&lt;Mat&lt;float&gt; &gt;* forpy::ILeaf::get_map</definition>
        <argsstring>() const =0</argsstring>
        <name>get_map</name>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1ac173386e1574d2a65c2f002a2589777f">get_map</reimplementedby>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1a3c731282e3e38cda6d1791d78536cd58">get_map</reimplementedby>
        <briefdescription>
<para>Get all leafs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a411936d9f0759c509a7d648b1a5bd1be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool forpy::ILeaf::operator==</definition>
        <argsstring>(const ILeaf &amp;rhs) const VIRTUAL(bool)</argsstring>
        <name>operator==</name>
        <reimplementedby refid="classforpy_1_1_classification_leaf_1a4c5c9e02904ee0bf86b96569d6ae30b5">operator==</reimplementedby>
        <reimplementedby refid="classforpy_1_1_regression_leaf_1aa60e723ebfe1af3332543a468b0e2e27">operator==</reimplementedby>
        <param>
          <type>const <ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="131" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a3905105cf769f4e03293ab2d5f9bef27" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>forpy::ILeaf::ILeaf</definition>
        <argsstring>()</argsstring>
        <name>ILeaf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For deserialization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="135" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" bodystart="135" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1aadae7479984d996ba7d3facfbd515d29" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void forpy::ILeaf::serialize</definition>
        <argsstring>(Archive &amp;, const uint &amp;)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
        </param>
        <param>
          <type>const <ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="140" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classforpy_1_1_i_leaf_1a5a248dcb8a1727dbb35b66bd5f833a9f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>forpy::ILeaf::DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(ILeaf)</argsstring>
        <name>DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="142" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Stores and returns leaf values, and combines them to forest results. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="111">
        <label>forpy::ILeaf</label>
        <link refid="classforpy_1_1_i_leaf"/>
      </node>
      <node id="112">
        <label>forpy::ClassificationLeaf</label>
        <link refid="classforpy_1_1_classification_leaf"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
      </node>
      <node id="113">
        <label>forpy::RegressionLeaf</label>
        <link refid="classforpy_1_1_regression_leaf"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="23" column="1" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" bodystart="23" bodyend="143"/>
    <listofallmembers>
      <member refid="classforpy_1_1_i_leaf_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" virt="non-virtual"><scope>forpy::ILeaf</scope><name>cereal::access</name></member>
      <member refid="classforpy_1_1_i_leaf_1a624665d009a72253b96a83058d08e42f" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>create_duplicate</name></member>
      <member refid="classforpy_1_1_i_leaf_1a5a248dcb8a1727dbb35b66bd5f833a9f" prot="private" virt="non-virtual"><scope>forpy::ILeaf</scope><name>DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classforpy_1_1_i_leaf_1af4ceeb66a04547d71501c759c2d361ec" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>ensure_capacity</name></member>
      <member refid="classforpy_1_1_i_leaf_1a5bae9feb177b3e981402ebd8fd24869d" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>finalize_capacity</name></member>
      <member refid="classforpy_1_1_i_leaf_1af67bf97754866e58154ae201e2ef4512" prot="public" virt="pure-virtual"><scope>forpy::ILeaf</scope><name>get_map</name></member>
      <member refid="classforpy_1_1_i_leaf_1a0ba46f3fb5d150cb48d64adc0612c973" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>get_result</name></member>
      <member refid="classforpy_1_1_i_leaf_1ae05c309a58b401ee24fcbb803550fa2e" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>get_result</name></member>
      <member refid="classforpy_1_1_i_leaf_1a965fcf0b0910bf04405ce2f114cabeb4" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>get_result</name></member>
      <member refid="classforpy_1_1_i_leaf_1a85539dcbb494e9b8c426e79fd61f6cb5" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>get_result</name></member>
      <member refid="classforpy_1_1_i_leaf_1a4c4a3e07e6e7e683346dbaaa086444ae" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>get_result_columns</name></member>
      <member refid="classforpy_1_1_i_leaf_1a2113cd63cd4e723a0699edc8683e36a7" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>get_result_type</name></member>
      <member refid="classforpy_1_1_i_leaf_1a3905105cf769f4e03293ab2d5f9bef27" prot="protected" virt="non-virtual"><scope>forpy::ILeaf</scope><name>ILeaf</name></member>
      <member refid="classforpy_1_1_i_leaf_1a5e5dfa9cdb34c445d00be4187eee832a" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>is_compatible_with</name></member>
      <member refid="classforpy_1_1_i_leaf_1a515341f2744f8537ddaf542459e421dc" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>is_compatible_with</name></member>
      <member refid="classforpy_1_1_i_leaf_1a3c5246ea62fceb6ca96ea669f0967fe4" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>make_leaf</name></member>
      <member refid="classforpy_1_1_i_leaf_1a411936d9f0759c509a7d648b1a5bd1be" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>operator==</name></member>
      <member refid="classforpy_1_1_i_leaf_1aadae7479984d996ba7d3facfbd515d29" prot="private" virt="non-virtual"><scope>forpy::ILeaf</scope><name>serialize</name></member>
      <member refid="classforpy_1_1_i_leaf_1a1761f69b5d97451a1008c4f35759dc39" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>transfer_or_run_check</name></member>
      <member refid="classforpy_1_1_i_leaf_1ad5b2eac48bba952724ae16ef20721301" prot="public" virt="virtual"><scope>forpy::ILeaf</scope><name>~ILeaf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
