<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="ileaf_8h" kind="file" language="C++">
    <compoundname>ileaf.h</compoundname>
    <includes refid="global_8h" local="yes">../global.h</includes>
    <includes local="yes">../util/serialization/basics.h</includes>
    <includes local="no">vector</includes>
    <includes refid="idataprovider_8h" local="yes">../data_providers/idataprovider.h</includes>
    <includes refid="ithreshopt_8h" local="yes">../threshold_optimizers/ithreshopt.h</includes>
    <includes refid="types_8h" local="yes">../types.h</includes>
    <includedby refid="classificationleaf_8h" local="yes">/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h</includedby>
    <includedby refid="tree_8h" local="yes">/Users/classner/git/forpy/include/forpy/tree.h</includedby>
    <includedby refid="leafs_8h" local="yes">/Users/classner/git/forpy/include/forpy/leafs/leafs.h</includedby>
    <includedby refid="regressionleaf_8h" local="yes">/Users/classner/git/forpy/include/forpy/leafs/regressionleaf.h</includedby>
    <incdepgraph>
      <node id="820">
        <label>functional</label>
      </node>
      <node id="811">
        <label>iomanip</label>
      </node>
      <node id="832">
        <label>../threshold_optimizers/ithreshopt.h</label>
        <link refid="ithreshopt_8h"/>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="819" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
      </node>
      <node id="830">
        <label>mapbox/variant_cast.hpp</label>
      </node>
      <node id="810">
        <label>glog/logging.h</label>
      </node>
      <node id="825">
        <label>numeric</label>
      </node>
      <node id="815">
        <label>string</label>
      </node>
      <node id="814">
        <label>./version.h</label>
        <link refid="version_8h"/>
      </node>
      <node id="823">
        <label>map</label>
      </node>
      <node id="833">
        <label>../util/desk.h</label>
        <link refid="desk_8h"/>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
      </node>
      <node id="827">
        <label>./util/hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="828" relation="include">
        </childnode>
        <childnode refid="818" relation="include">
        </childnode>
      </node>
      <node id="822">
        <label>Eigen/Dense</label>
      </node>
      <node id="819">
        <label>../data_providers/idataprovider.h</label>
        <link refid="idataprovider_8h"/>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
        <childnode refid="818" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
        <childnode refid="829" relation="include">
        </childnode>
      </node>
      <node id="829">
        <label>./util/storage.h</label>
        <link refid="storage_8h"/>
        <childnode refid="830" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
      </node>
      <node id="818">
        <label>vector</label>
      </node>
      <node id="826">
        <label>utility</label>
      </node>
      <node id="817">
        <label>../util/serialization/basics.h</label>
      </node>
      <node id="812">
        <label>iostream</label>
      </node>
      <node id="809">
        <label>../global.h</label>
        <link refid="global_8h"/>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="812" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
        <childnode refid="814" relation="include">
        </childnode>
        <childnode refid="815" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
      </node>
      <node id="828">
        <label>cstddef</label>
      </node>
      <node id="808">
        <label>/Users/classner/git/forpy/include/forpy/leafs/ileaf.h</label>
        <link refid="ileaf_8h"/>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="818" relation="include">
        </childnode>
        <childnode refid="819" relation="include">
        </childnode>
        <childnode refid="832" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
      </node>
      <node id="816">
        <label>csignal</label>
      </node>
      <node id="813">
        <label>thread</label>
      </node>
      <node id="821">
        <label>../types.h</label>
        <link refid="types_8h"/>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="825" relation="include">
        </childnode>
        <childnode refid="826" relation="include">
        </childnode>
        <childnode refid="818" relation="include">
        </childnode>
        <childnode refid="827" relation="include">
        </childnode>
        <childnode refid="829" relation="include">
        </childnode>
      </node>
      <node id="831">
        <label>./serialization/variant.h</label>
      </node>
      <node id="824">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="837">
        <label>/Users/classner/git/forpy/include/forpy/forpy.h</label>
        <link refid="forpy_8h"/>
      </node>
      <node id="838">
        <label>/Users/classner/git/forpy/include/forpy/leafs/leafs.h</label>
        <link refid="leafs_8h"/>
        <childnode refid="837" relation="include">
        </childnode>
      </node>
      <node id="839">
        <label>/Users/classner/git/forpy/include/forpy/tree.h</label>
        <link refid="tree_8h"/>
        <childnode refid="836" relation="include">
        </childnode>
        <childnode refid="837" relation="include">
        </childnode>
      </node>
      <node id="835">
        <label>/Users/classner/git/forpy/include/forpy/leafs/classificationleaf.h</label>
        <link refid="classificationleaf_8h"/>
        <childnode refid="836" relation="include">
        </childnode>
        <childnode refid="838" relation="include">
        </childnode>
      </node>
      <node id="840">
        <label>/Users/classner/git/forpy/include/forpy/leafs/regressionleaf.h</label>
        <link refid="regressionleaf_8h"/>
        <childnode refid="838" relation="include">
        </childnode>
      </node>
      <node id="836">
        <label>/Users/classner/git/forpy/include/forpy/forest.h</label>
        <link refid="forest_8h"/>
        <childnode refid="837" relation="include">
        </childnode>
      </node>
      <node id="834">
        <label>/Users/classner/git/forpy/include/forpy/leafs/ileaf.h</label>
        <link refid="ileaf_8h"/>
        <childnode refid="835" relation="include">
        </childnode>
        <childnode refid="839" relation="include">
        </childnode>
        <childnode refid="838" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classforpy_1_1_i_leaf" prot="public">forpy::ILeaf</innerclass>
    <innernamespace refid="namespaceforpy">forpy</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="ileaf_8h_1a05840758679e136ce379bf69fc02d877" prot="public" static="no">
        <name>FORPY_LEAFS_ILEAF_H_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" line="4" column="9" bodyfile="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Author:<sp/>Christoph<sp/>Lassner.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FORPY_LEAFS_ILEAF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="ileaf_8h_1a05840758679e136ce379bf69fc02d877" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FORPY_LEAFS_ILEAF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../global.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../util/serialization/basics.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../data_providers/idataprovider.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../threshold_optimizers/ithreshopt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceforpy" kindref="compound">forpy</ref><sp/>{</highlight></codeline>
<codeline lineno="23" refid="classforpy_1_1_i_leaf" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25" refid="classforpy_1_1_i_leaf_1ad5b2eac48bba952724ae16ef20721301" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_leaf_1ad5b2eac48bba952724ae16ef20721301" kindref="member">~ILeaf</ref>(){};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ILeaf&gt;<sp/><ref refid="classforpy_1_1_i_leaf_1a624665d009a72253b96a83058d08e42f" kindref="member">create_duplicate</ref>()<sp/>const<sp/><ref refid="global_8h_1aaa10329820a5fea78247d9e92ba8928b" kindref="member">VIRTUAL_PTR</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classforpy_1_1_i_leaf_1a5e5dfa9cdb34c445d00be4187eee832a" refkind="member"><highlight class="normal"><sp/><sp/>inline<sp/>virtual<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_leaf_1a5e5dfa9cdb34c445d00be4187eee832a" kindref="member">is_compatible_with</ref>(</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="classforpy_1_1_i_data_provider" kindref="compound">IDataProvider</ref><sp/>&amp;<sp/></highlight><highlight class="comment">/*data_provider*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_leaf_1a5e5dfa9cdb34c445d00be4187eee832a" kindref="member">is_compatible_with</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_thresh_opt" kindref="compound">IThreshOpt</ref><sp/>&amp;threshopt)<sp/><ref refid="global_8h_1a287409078f3b1637bf3eff5bb81ef767" kindref="member">VIRTUAL</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_leaf_1a1761f69b5d97451a1008c4f35759dc39" kindref="member">transfer_or_run_check</ref>(<ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref><sp/>*other,<sp/><ref refid="classforpy_1_1_i_thresh_opt" kindref="compound">IThreshOpt</ref><sp/>*thresh_opt,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classforpy_1_1_i_data_provider" kindref="compound">IDataProvider</ref><sp/>*dprov)<sp/><ref refid="global_8h_1a5c7a27f283386207b288032797b11011" kindref="member">VIRTUAL_VOID</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_leaf_1a3c5246ea62fceb6ca96ea669f0967fe4" kindref="member">make_leaf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structforpy_1_1_todo_mark" kindref="compound">TodoMark</ref><sp/>&amp;todo_info,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_data_provider" kindref="compound">IDataProvider</ref><sp/>&amp;data_provider,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structforpy_1_1_desk" kindref="compound">Desk</ref><sp/>*desk)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="global_8h_1a5c7a27f283386207b288032797b11011" kindref="member">VIRTUAL_VOID</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_leaf_1a4c4a3e07e6e7e683346dbaaa086444ae" kindref="member">get_result_columns</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;n_trees<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;predict_proba<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;for_forest<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>const</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global_8h_1a287409078f3b1637bf3eff5bb81ef767" kindref="member">VIRTUAL</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>virtual<sp/><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt;<ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref>&gt;<sp/><ref refid="classforpy_1_1_i_leaf_1a2113cd63cd4e723a0699edc8683e36a7" kindref="member">get_result_type</ref>(const<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;predict_proba,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;for_forest<sp/>=<sp/>false)<sp/>const</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global_8h_1a287409078f3b1637bf3eff5bb81ef767" kindref="member">VIRTUAL</ref>(<ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt;<ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref>&gt;);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classforpy_1_1_i_leaf_1a0ba46f3fb5d150cb48d64adc0612c973" refkind="member"><highlight class="normal"><sp/><sp/>inline<sp/>virtual<sp/><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data</ref>&lt;<ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref>&gt;<sp/><ref refid="classforpy_1_1_i_leaf_1a0ba46f3fb5d150cb48d64adc0612c973" kindref="member">get_result</ref>(const<sp/><ref refid="namespaceforpy_1a324c9643e02b76477c3a99a48773be8c" kindref="member">id_t</ref><sp/>&amp;node_id,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;predict_proba<sp/>=<sp/>false,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;for_forest<sp/>=<sp/>false)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res_v<sp/>=<sp/><ref refid="classforpy_1_1_i_leaf_1a2113cd63cd4e723a0699edc8683e36a7" kindref="member">get_result_type</ref>(predict_proba);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data&lt;Mat&gt;</ref><sp/>ret;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>res_v.match(</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;res_mt)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structforpy_1_1get__core" kindref="compound">get_core</ref>&lt;decltype(res_mt.data()[0])&gt;::type<sp/>RT;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.set&lt;<ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat&lt;RT&gt;</ref>&gt;(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat&lt;RT&gt;::Zero</ref>(1,<sp/>this-&gt;<ref refid="classforpy_1_1_i_leaf_1a4c4a3e07e6e7e683346dbaaa086444ae" kindref="member">get_result_columns</ref>(1,<sp/>predict_proba)));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data&lt;MatRef&gt;</ref><sp/>dref<sp/>=<sp/><ref refid="namespaceforpy_1ac50f86d38ff96870f057147546b8ad26" kindref="member">MatRef&lt;RT&gt;</ref>(ret.get_unchecked&lt;<ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat&lt;RT&gt;</ref>&gt;());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classforpy_1_1_i_leaf_1a0ba46f3fb5d150cb48d64adc0612c973" kindref="member">get_result</ref>(node_id,<sp/>dref,<sp/>predict_proba,<sp/>for_forest);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structforpy_1_1_empty" kindref="compound">Empty</ref><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_empty_exception" kindref="compound">EmptyException</ref>();<sp/>});</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_leaf_1a0ba46f3fb5d150cb48d64adc0612c973" kindref="member">get_result</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceforpy_1a324c9643e02b76477c3a99a48773be8c" kindref="member">id_t</ref><sp/>&amp;node_id,<sp/><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data&lt;MatRef&gt;</ref><sp/>&amp;target,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;predict_proba,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;for_forest)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="global_8h_1a5c7a27f283386207b288032797b11011" kindref="member">VIRTUAL_VOID</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classforpy_1_1_i_leaf_1a965fcf0b0910bf04405ce2f114cabeb4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data&lt;Mat&gt;</ref><sp/><ref refid="classforpy_1_1_i_leaf_1a965fcf0b0910bf04405ce2f114cabeb4" kindref="member">get_result</ref>(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data&lt;Mat&gt;</ref>&gt;<sp/>&amp;leaf_results,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec&lt;float&gt;</ref><sp/>&amp;weights<sp/>=<sp/><ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec&lt;float&gt;</ref>(),</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;predict_proba<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data&lt;Mat&gt;</ref><sp/>ret;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>leaf_results[0].match(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;lr0)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structforpy_1_1get__core" kindref="compound">get_core</ref>&lt;decltype(lr0.data())&gt;::type<sp/>RT;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.set&lt;<ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat&lt;RT&gt;</ref>&gt;(<ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat&lt;RT&gt;::Zero</ref>(</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr0.rows(),</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classforpy_1_1_i_leaf_1a4c4a3e07e6e7e683346dbaaa086444ae" kindref="member">get_result_columns</ref>(leaf_results.size(),<sp/>predict_proba,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data&lt;MatRef&gt;</ref><sp/>dref<sp/>=<sp/><ref refid="namespaceforpy_1ac50f86d38ff96870f057147546b8ad26" kindref="member">MatRef&lt;RT&gt;</ref>(ret.get_unchecked&lt;<ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat&lt;RT&gt;</ref>&gt;());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classforpy_1_1_i_leaf_1a0ba46f3fb5d150cb48d64adc0612c973" kindref="member">get_result</ref>(leaf_results,<sp/>dref,<sp/>weights,<sp/>predict_proba);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structforpy_1_1_empty" kindref="compound">Empty</ref><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_empty_exception" kindref="compound">EmptyException</ref>();<sp/>});</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_leaf_1a0ba46f3fb5d150cb48d64adc0612c973" kindref="member">get_result</ref>(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data&lt;Mat&gt;</ref>&gt;<sp/>&amp;leaf_results,<sp/><ref refid="namespaceforpy_1a724d37691de11a57b50b9935b5550a89" kindref="member">Data&lt;MatRef&gt;</ref><sp/>&amp;target_v,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec&lt;float&gt;</ref><sp/>&amp;weights<sp/>=<sp/><ref refid="namespaceforpy_1a36398396324079cc112b2c14d72ef20d" kindref="member">Vec&lt;float&gt;</ref>(),</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;predict_proba<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>const<sp/><ref refid="global_8h_1a5c7a27f283386207b288032797b11011" kindref="member">VIRTUAL_VOID</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>virtual<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_leaf_1af4ceeb66a04547d71501c759c2d361ec" kindref="member">ensure_capacity</ref>(const<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;n)<sp/><ref refid="global_8h_1a5c7a27f283386207b288032797b11011" kindref="member">VIRTUAL_VOID</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>virtual<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_leaf_1a5bae9feb177b3e981402ebd8fd24869d" kindref="member">finalize_capacity</ref>(const<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;n)<sp/><ref refid="global_8h_1a5c7a27f283386207b288032797b11011" kindref="member">VIRTUAL_VOID</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>virtual<sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespaceforpy_1a96f4b931f57ef7b106a2137e9b92939c" kindref="member">Mat</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;&gt;<sp/>*<ref refid="classforpy_1_1_i_leaf_1af67bf97754866e58154ae201e2ef4512" kindref="member">get_map</ref>()<sp/>const<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>virtual<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(const<sp/><ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref><sp/>&amp;rhs)<sp/>const<sp/><ref refid="global_8h_1a287409078f3b1637bf3eff5bb81ef767" kindref="member">VIRTUAL</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline lineno="135" refid="classforpy_1_1_i_leaf_1a3905105cf769f4e03293ab2d5f9bef27" refkind="member"><highlight class="normal"><sp/><sp/>inline<sp/><ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref>(){};</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">cereal::access;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="140" refid="classforpy_1_1_i_leaf_1aadae7479984d996ba7d3facfbd515d29" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classforpy_1_1_i_leaf_1aadae7479984d996ba7d3facfbd515d29" kindref="member">serialize</ref>(Archive<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceforpy_1ad05e34c62859518b61b76b5085e913d8" kindref="member">uint</ref><sp/>&amp;){};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="classforpy_1_1_i_leaf_1a5a248dcb8a1727dbb35b66bd5f833a9f" kindref="member">DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classforpy_1_1_i_leaf" kindref="compound">ILeaf</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal">};<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>forpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>FORPY_LEAFS_ILEAF_H_</highlight></codeline>
    </programlisting>
    <location file="/Users/classner/git/forpy/include/forpy/leafs/ileaf.h"/>
  </compounddef>
</doxygen>
