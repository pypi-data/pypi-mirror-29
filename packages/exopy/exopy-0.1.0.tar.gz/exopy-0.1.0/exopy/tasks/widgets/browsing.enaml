# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widget allowing to browse the different tasks known to the manager.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from enaml.core.api import Conditional, Include
from enaml.widgets.api import ObjectCombo, Container

from ...utils.widgets.qt_list_str_widget import QtListStrWidget
from ...utils.transformers import ids_to_unique_names


# TODO would be nicer with regex but I never managed to get the regex right.
def normalize_name(name):
    """Normalize names.

    For tasks, replaces '_' by spaces and add spaces between 'aA' sequences.
    For templates, only the extension file is removed.

    """
    if name.endswith('.task.ini'):
        name, _, _ = name.rsplit('.', 2)
        return name.capitalize()

    if name.endswith('Task'):
        name = name[:-4]
    name += '\0'

    package = None
    if '.' in name:
        package, name = name.rsplit('.', 1)

    aux = ''
    for i, char in enumerate(name):
        if char == '_':
            aux += ' '
            continue

        if char != '\0':
            if char.isupper() and i != 0:
                if name[i-1].islower():
                    if name[i+1].islower():
                        aux += ' ' + char.lower()
                    else:
                        aux += ' ' + char
                else:
                    if name[i+1].islower():
                        aux += ' ' + char.lower()
                    else:
                        aux += char
            else:
                if i == 0:
                    aux += char.upper()
                else:
                    aux += char

    return package + '.' + aux if package else aux


enamldef TaskSelector(Container): sel:
    """Basic widget displaying a list of tasks acording to the selected filter.

    """
    #: Reference to the tasks manager.
    attr manager

    #: Flag indicating whether or not to display the filter selection dialog.
    attr display_filters : bool = True

    #: Currently selected filter.
    attr selected_filter = 'All'
    selected_filter ::
        if selected_filter:
            tasks = manager.list_tasks(selected_filter)
            tasks = tasks or ['']
        else:
            tasks = manager.list_tasks()
        self.tasks = tasks

    #: Tasks to display in the selector.
    attr tasks = manager.list_tasks(selected_filter)

    #: Currently selected task.
    alias selected_task : t_select.selected_item

    #: Mappping between user understandable names and ids.
    attr _task_map << (ids_to_unique_names(tasks, normalize_name,
                                           preformatter=normalize_name,
                                           reverse=True)
                       if tasks else {})

    func _to_name(task_id):
        return  _task_map[task_id]

    Conditional:
        condition << display_filters
        ObjectCombo:
            items << sorted(manager.filters)
            selected := selected_filter

    QtListStrWidget: t_select:
        items << list(_task_map)
        to_string = _to_name
        sort = True
