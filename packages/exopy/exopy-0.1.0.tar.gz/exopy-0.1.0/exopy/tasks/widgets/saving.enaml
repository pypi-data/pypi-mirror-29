# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widgets dedicated to saving tasks.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

import os
from textwrap import fill

from atom.api import (Atom, Unicode, Bool, ForwardTyped, observe)
from enaml.widgets.api import (Container, Field, MultilineField, CheckBox,
                               PushButton, Dialog)
from enaml.layout.api import align, hbox, vbox, spacer
from enaml.stdlib.message_box import question

from ...utils.widgets.qt_list_str_widget import QtListStrWidget
from ..utils.templates import load_template


# Protection from circular imports
def task_manager():
    from ..plugin import TaskManagerPlugin
    return TaskManagerPlugin


class TemplateSaverModel(Atom):
    """Model for the Template saver dialog.

    """
    #: Reference to the task manager.
    manager = ForwardTyped(task_manager)

    #: Currently selected folder in which to save the template.
    folder = Unicode()

    #: File in which to save the template.
    filename = Unicode()

    #: Documentation for the template.
    doc = Unicode()

    #: Flag indicating whether or not enough informations have been provided
    #: to porceed with saving.
    ready = Bool(False)

    def __init__(self, **kwargs):
        super(TemplateSaverModel, self).__init__(**kwargs)
        self.folder = self.manager._template_folders[0]

    def accept_template_info(self, ui):
        """ Whether or not the provided infos allows to save the template.

        Parameters
        ----------
        ui :
            Widget calling this method, used as a parent for the dialogs
            this method might need to open.

        """
        if not self.filename.endswith('.task.ini'):
            self.filename +=  '.task.ini'

        if self.filename in self.manager.templates:
            message = cleandoc("""You entered a template name which already
                        exists, do you want to erase the existing file ?
                        """)
            result = question(message=fill(message.replace('\n', ' '), 80),
                              title='Confirm overwrite :',
                              parent=ui)
            if result and result.action == 'reject':
                return False

        return True

    # =========================================================================
    # --- Private API ---------------------------------------------------------
    # =========================================================================

    def _post_setattr_filename(self, old, new):
        """ Observer displaying templates infos is the user select an existing
        template.

        """
        if new in self.manager.templates:
             _, doc = load_template(self.manager.templates[new])
             self.doc = doc

        else:
            self.ready = (self.doc != '' and self.filename != '')

    def _post_setattr_doc(self, new, old):
        """Check whether the last update to the doc member made the saving
        possible.

        """
        self.ready = (self.doc != '' and self.filename != '')


enamldef TemplateSaverDialog(Dialog): dial:
    """ Simple dialog to save a template.

    """
    #: Reference to the task manager.
    attr manager

    #: Whether or not to disply the resulting file.
    attr show_result : bool = False

    #: Internal model.
    attr _model = TemplateSaverModel(manager=manager)

    title = 'Save template'

    func get_infos():
        """Return the selected path and documentation for the template.

        """
        # This is necessary as the user may have selected an existing template
        # for which the folder may be contained in the filename
        filename = _model.filename.split(os.path.sep)[-1]
        return os.path.join(_model.folder, filename), _model.doc

    Container:
        constraints = [vbox(
                       hbox(li, vbox(name, doc, res)),
                       hbox(spacer.flex(), cancel, ok))
                       ]

        QtListStrWidget: li:
            items << list(manager.templates)
            selected_item >> _model.filename

        Field: name:
            text := _model.filename

        MultilineField: doc:
            text := _model.doc

        CheckBox: res:
            text = 'Show result'
            checked := show_result

        PushButton: cancel:
            hug_width = 'strong'
            text = 'Cancel'
            clicked::
                dial.reject()

        PushButton: ok:
            hug_width = 'strong'
            text = 'Ok'
            enabled << _model.ready
            clicked ::
                if _model.accept_template_info(dial):
                    dial.accept()


enamldef TemplateViewer(Dialog): dial:
    """Dialog to display a template file.

    """
    title = 'Saved template'

    alias text : sci.text

    Container:
        constraints = [vbox(sci, ok),
                       align('right', sci, ok)]

        MultilineField: sci:
            read_only = True

        PushButton: ok:
            text = 'Ok'
            clicked ::
                dial.accept()
