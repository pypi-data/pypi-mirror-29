# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widgets used to select a model.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

import kiwisolver as kiwi
from atom.api import Coerced
from enaml.core.api import Include, Conditional, Looper
from enaml.widgets.api import (Dialog, CheckBox, ObjectCombo, Label, Container,
                               PushButton, Field)
from enaml.layout.api import vbox, hbox, spacer, align, horizontal, vertical

from ...utils.widgets.qt_tree_widget import QtTreeWidget
from ...utils.widgets.tree_nodes import TreeNode
from ..infos import (INSTRUMENT_KINDS, ManufacturersHolder, SeriesInfos,
                     InstrumentModelInfos)


enamldef ModelSelectionWidget(Container):
    """Widget displaying All the known instruments models as a tree.

    Models can be filtered by kind and series diplayed or hidden.

    """
    #: Reference to the instrument plugin
    attr plugin

    #: Kind of instrument used to filter.
    attr kind := plugin._manufacturers.kind

    #: Whether or not to display instruments by series.
    attr use_series := plugin._manufacturers.use_series

    #: Currently selected model.
    attr model << (tr.selected_item
                   if isinstance(tr.selected_item, InstrumentModelInfos) else
                   None)
    model ::
        if change['value']:
            tr.selected_item = change['value']

    constraints = [vbox(hbox(k_lab, k_val, spacer, ser), tr),
                   align('v_center', k_lab, k_val)]

    initialized ::
        if model:
            tr.selected_item = model

    Label: k_lab:
        text = 'Kind'
    ObjectCombo: k_val:
        items = ['All'] + list(INSTRUMENT_KINDS)
        selected := kind
    CheckBox: ser:
        text = 'Series'
        checked := use_series
    QtTreeWidget: tr:
        root_node = plugin._manufacturers
        hide_root = True
        auto_expand = True
        drag_drop = False
        TreeNode:
            node_for = [ManufacturersHolder]
            children_member = 'manufacturers'
            rename = False
            rename_me = False
            delete = False
            delete_me = False
            auto_open = True
        TreeNode:
            node_for = [SeriesInfos]  # Handle both series and manufacturer
            label = 'name'
            children_member = 'instruments'
            rename = False
            rename_me = False
            delete = False
            delete_me = False
            auto_open = True
        TreeNode:
            node_for = [InstrumentModelInfos]
            label = 'model'
            rename = False
            rename_me = False
            delete = False
            delete_me = False
            auto_open = True


enamldef ModelView(Container):
    """View summarizing the infos about a specific model.

    """

    #: Model object driving this widget.
    attr model

    # HINT stolen from Form to turn v-center to top in the alignment
    layout_constraints => ():
        children = self.visible_widgets()
        labels = children[::2]
        widgets = children[1::2]
        n_labels = len(labels)
        n_widgets = len(widgets)
        if n_labels != n_widgets:
            if n_labels > n_widgets:
                odd_child = labels.pop()
            else:
                odd_child = widgets.pop()
        else:
            odd_child = None

        # Boundary flex spacer
        b_flx = spacer(0).flex()

        # Inter-column flex spacer
        c_flx = spacer(max(0, 10)).flex()

        # Inter-row flex spacer
        r_flx = spacer(max(0, 10)).flex()

        # Generate the row constraints and make the column stacks
        midline = kiwi.Variable(str(self.name + '_central_'))
        top = self.contents_top
        left = self.contents_left
        right = self.contents_right
        constraints = self.constraints[:]
        column1 = [top, b_flx]
        column2 = [top, b_flx]
        push = constraints.append
        push_col1 = column1.append
        push_col2 = column2.append
        for label, widget in zip(labels, widgets):
            push((widget.left == midline) | 'strong')
            push(align('top', label, widget) | 'strong')
            push(horizontal(left, b_flx, label, c_flx, widget, b_flx, right))
            push_col1(label)
            push_col1(r_flx)
            push_col2(widget)
            push_col2(r_flx)
        push((widgets[0].width >= 4*labels[0].width) | 'strong')

        # Handle the odd child and create the column constraints
        if odd_child is not None:
            push_col1(odd_child)
            push_col2(odd_child)
            push(horizontal(left, b_flx, odd_child, b_flx, right))
        else:
            column1.pop()
            column2.pop()
        bottom = self.contents_bottom
        push_col1(b_flx)
        push_col1(bottom)
        push_col2(b_flx)
        push_col2(bottom)
        push(vertical(*column1))
        push(vertical(*column2))

        return constraints

    Label:
        text = 'Manufacturer'
    Field:
        text = model.manufacturer
        read_only = True
    Conditional:
        condition = bool(model.serie)
        Label:
            text = 'Serie'
        Field:
            text = model.serie
            read_only = True
    Label:
        text = 'Model'
    Field:
        text = model.model
        read_only = True
    Label: d_lab:
        text = 'Drivers'
    Container: d_val:
        padding = 0
        Looper:
            iterable = model.drivers
            Field:
                read_only = True
                text = loop_item.id
    Label: c_lab:
        text = 'Connections'
    Container: c_val:
        padding = 0
        Looper:
            iterable = model.connections
            Field:
                text = loop_item
                read_only = True

    Label: s_lab:
        text = 'Settings'
    Container: s_val:
        padding = 0
        Looper:
            iterable = model.settings
            Field:
                text = loop_item
                read_only = True


enamldef ModelSelectionDialog(Dialog): dial:
    """Dialog allowing to choose an instrument model.

    """
    #: Reference to the instrument plugin
    alias plugin : sel.plugin

    #: Currently selected instrument model
    attr instr_model

    title = 'Select an instrument model'

    initialized ::
        if instr_model:
            sel.model = instr_model

    Container:

        constraints << ([vbox(hbox(sel, vbox(*(list(dis.objects) + [spacer]))),
                              hbox(spacer, can, ok)),
                        contents_width >= 2*sel.width])

        ModelSelectionWidget: sel:
            kind = 'All'
            use_series = True
        Include: dis:
            objects << [ModelView(model=sel.model)] if sel.model else []
        PushButton: can:
            text = 'Cancel'
            clicked ::
                dial.reject()
        PushButton: ok:
            text = 'Ok'
            enabled << bool(sel.model)
            clicked::
                dial.instr_model = sel.model
                dial.accept()
