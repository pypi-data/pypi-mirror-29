# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widgets used to select a profile and the driver/connection/settings to use.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from atom.api import Coerced
from enaml.core.api import Conditional
from enaml.layout.api import hbox, vbox, spacer
from enaml.widgets.api import (Container, Dialog, Form, Label, ObjectCombo,
                               PushButton, Field)

from ...utils.widgets.qt_list_str_widget import QtListStrWidget
from ...utils.transformers import ids_to_unique_names


SENTINEL = object()


def matching_connections(infos, d_id):
        """Determine the allowed connections based on the selected driver.

        """
        if infos is SENTINEL or not d_id:
            return []

        d_map = {d.id : d for d in infos.model.drivers}
        driver_connections = d_map[d_id].connections
        return [c for c in infos.connections if c in driver_connections]


def matching_settings(infos, d_id):
    """Determine the allowed settings based on the selected driver.

    """
    if infos is SENTINEL or not d_id:
        return []

    d_map = {d.id : d for d in infos.model.drivers}
    driver_settings = d_map[d_id].settings
    return [s for s in infos.settings
            if infos.settings[s]['id'] in driver_settings]


enamldef ProfileSelectionWidget(Container): pw:
    """A widget to select a profile and what connection and settings to use.

    """
    #: Reference to the instrument plugin.
    attr plugin

    #: Callable used to filter the list of profiles displayed.
    #: The callable should take as single argument the profiles {id: infos}
    #: and return a filtered iterable of the valid profiles ids.
    attr filter_profiles = lambda x: x

    #: Callable used to filter the list of drivers displayed for a profile.
    #: The callable should take as single argument the drivers infos
    #: and return a filtered list.
    attr filter_drivers = lambda x: x

    #: Currently selected profile (id)
    attr profile

    #: Infos of the currently selected profile.
    attr infos << plugin._profiles[profile] if profile else SENTINEL
    infos ::
        post_set_infos()

    #: Currently selected driver (id)
    attr driver
    driver ::
        cc.items = matching_connections(infos, driver)
        sc.items = matching_settings(infos, driver)

    #: Currently selected connection (id)
    attr connection

    #: Currently selected settings
    attr settings

    #: Private list of valid drivers.
    attr _drivers = []

    func post_set_infos():
        if infos is not SENTINEL:
            pw._drivers = filter_drivers(infos.model.drivers)
            if driver not in [d.id for d in _drivers]:
                pw.driver = _drivers[0].id if _drivers else None
            cc.items = matching_connections(infos, driver)
            sc.items = matching_settings(infos, driver)

    initialized ::
        pl.items = sorted(filter_profiles(plugin._profiles.copy()))
        pl.refresh_items()
        if not pw.profile and pl.items:
            pw.profile = pl.items[0]
        post_set_infos()

    constraints = [hbox(pl, pf), pf.top == contents_top]

    QtListStrWidget: pl:
        items << (sorted(filter_profiles(plugin._profiles.copy()))
                  if plugin else [])
        selected_item := pw.profile

    Form: pf:

        Label:
            text = 'Manufacturer'
        Field:
            attr aliases << tuple(plugin.get_aliases(infos.model.manufacturer))
            text << ('' if infos is SENTINEL else
                     ('%s  (%s)' % (infos.model.manufacturer,
                                    ' '.join(aliases))
                     if aliases else '%s' % infos.model.manufacturer))
            read_only = True

        Label:
            text = 'Model'
        Field:
            text << infos.model.model if infos is not SENTINEL else ''

        Conditional:
            condition << len(_drivers) > 1
            Label:
                text = 'Driver'
            ObjectCombo: dc:
                items << sorted((d.id for d in _drivers))
                selected := driver

        Label:
            text = 'Connections'
        ObjectCombo: cc:
            enabled << bool(driver)
            items ::
                if self.selected not in change['value']:
                    self.selected = None
            selected := connection

        Label: sc_lab:
            text = 'Settings'
            visible << bool(infos is not SENTINEL and infos.settings)
        ObjectCombo: sc:
            visible << sc_lab.visible
            enabled << bool(driver)
            items ::
                if self.selected not in change['value']:
                    self.selected = None
            selected := settings



enamldef ProfileSelectionDialog(Dialog): dial:
    """A dialog to select a profile and what connection and settings to use.

    """
    #: Reference to the instrument plugin
    alias plugin : w.plugin

    #: Callable used to filter the list of profiles displayed.
    #: The callable should take as single argument the profiles (id, infos)
    #: and return a filtered iterable of the valid profiles ids.
    alias filter_profiles : w.filter_profiles

    #: Callable used to filter the list of drivers displayed for a profile.
    #: The callable should take as single argument the drivers infos
    #: and return a filtered list.
    alias filter_drivers : w.filter_drivers

    #: Currently selected profile (id)
    alias profile : w.profile

    #: Currently selected driver (id)
    alias driver : w.driver

    #: Currently selected connection (id)
    alias connection : w.connection

    #: Currently selected settings (id)
    alias settings : w.settings

    title = 'Select a profile'

    Container:

        constraints = [vbox(w, hbox(spacer, can, ok))]

        ProfileSelectionWidget: w:
            pass

        PushButton: can:
            text = 'Cancel'
            clicked ::
                dial.reject()

        PushButton: ok:
            text = 'Ok'
            enabled << bool(w.driver and w.connection)
            clicked ::
                dial.accept()
