# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Dependencies plugin manifest.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from enaml.workbench.core.api import Command

from ...utils.plugin_tools import make_handler

PLUGIN_ID = 'exopy.app.dependencies'


# =============================================================================
# --- Factories ---------------------------------------------------------------
# =============================================================================

def dependencies_plugin_factory():
    """Factory function for the DependenciesManagerPlugin.

    """
    from .plugin import DependenciesPlugin
    return DependenciesPlugin()


# =============================================================================
# --- Descriptions ------------------------------------------------------------
# =============================================================================

BUILD_DEPENDENCIES_PLUGINS_DESCRIPTION = \
"""Plugins which expose objects suceptibles to be necessary to rebuild part
of the application should declare a BuildDependency to this point."""


RUNTIME_COLLECTOR_DEPENDENCIES_PLUGINS_DESCRIPTION = \
"""Plugins which expose objects suceptibles to be necessary to run part
of the application should declare a RuntimeDependencyCollector to this
point."""


RUNTIME_ANALYSER_DEPENDENCIES_PLUGINS_DESCRIPTION = \
"""Plugins which expose objects having runtime dependencies should declare a
RuntimeDependencyAnalyser for each kind of dependency to this point."""


ANALYSE_DEPENDENCIES_DESCRIPTION=\
"""Analyse the dependencies of a given object.

The object must either be a configobj.Section object or have a traverse
method yielding the object and all its subcomponent suceptible to add
more dependencies.

Parameters
----------
obj : object
    Obj whose dependencies should be analysed.

dependencies : {['build'], ['runtime'], ['build', 'runtime']}
    Kind of dependencies which should be gathered. Note that only
    build dependencies can be retrieved from a `configobj.Section`
    object.

Returns
-------
dependencies : BuildContainer | RuntimeContainer | tuple
    BuildContainer, RuntimeContaineror tuple of both according to
    the requested dependencies.

"""

VALIDATE_DEPENDENCIES_DESCRIPTION=\
"""Validate that a set of dependencies is valid (ie exists).

Parameters
----------
kind : {'build', 'runtime'}
    Kind of dependency to validate.

dependencies : dict
    Dictionary of dependencies sorted by id. This is typically the
    content of the dependencies attribute of BuildContainer or
    RuntimeContainer.

Returns
-------
result : bool
    Boolean indicating whether or not all dependencies are valid.

errors : dict
    Dictionary containing the errors which occured. Those are stored
    by dependency id and by dependency.

"""

COLLECT_DEPENDENCIES_DESCRIPTION=\
"""Collect that a set of dependencies.

For runtime dependencies if permissions are necessary to use a
dependence they are requested and should released when they are no
longer needed.

Parameters
----------
kind : {'build', 'runtime'}
    Kind of dependency to collect.

dependencies : dict
    Dictionary of dependencies sorted by id. This is typically the
    content of the dependencies attribute of BuildContainer or
    RuntimeContainer.

owner : unicode, optional
    Calling plugin id. Used for some runtime dependencies needing to
    know the ressource owner.

Returns
-------
dependencies : BuildContainer | RuntimeContainer | tuple
    BuildContainer, RuntimeContainer or tuple of both according to
    the requested dependencies.

"""


RELEASE_RUNTIMES_DESCRIPTION=\
"""Release runtime dependencies previously acquired (collected).

Parameters
----------
owner : unicode
    Id of the plugin releasing the ressources.

dependencies : dict
    Dictionary containing the runtime dependencies to release organised
    by id.

"""


# =============================================================================
# --- Manifest ----------------------------------------------------------------
# =============================================================================

enamldef DependenciesManifest(PluginManifest):
    """ Manifest for the plugin handling object dependencies.

    """
    id = 'exopy.app.dependencies'
    factory = dependencies_plugin_factory

    # =========================================================================
    # --- Extension points ----------------------------------------------------
    # =========================================================================

    ExtensionPoint:
        id = 'build'
        description = BUILD_DEPENDENCIES_PLUGINS_DESCRIPTION

    ExtensionPoint:
        id = 'runtime_collect'
        description = RUNTIME_COLLECTOR_DEPENDENCIES_PLUGINS_DESCRIPTION

    ExtensionPoint:
        id = 'runtime_analyse'
        description = RUNTIME_ANALYSER_DEPENDENCIES_PLUGINS_DESCRIPTION

    # =========================================================================
    # --- Extensions ----------------------------------------------------------
    # =========================================================================

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'exopy.app.dependencies.analyse'
            description = ANALYSE_DEPENDENCIES_DESCRIPTION
            handler = make_handler(PLUGIN_ID, 'analyse_dependencies')

        Command:
            id = 'exopy.app.dependencies.validate'
            description = VALIDATE_DEPENDENCIES_DESCRIPTION
            handler = make_handler(PLUGIN_ID, 'validate_dependencies')

        Command:
            id = 'exopy.app.dependencies.collect'
            description = COLLECT_DEPENDENCIES_DESCRIPTION
            handler = make_handler(PLUGIN_ID, 'collect_dependencies')

        Command:
            id = 'exopy.app.dependencies.release_runtimes'
            description = RELEASE_RUNTIMES_DESCRIPTION
            handler = make_handler(PLUGIN_ID, 'release_runtimes')
