# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Collection of widgets used to create and edit rules.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from operator import attrgetter

from enaml.core.api import Include
from enaml.layout.api import hbox, spacer, vbox
from enaml.widgets.api import (PushButton, Container, Dialog, CheckBox,
                               ObjectCombo, Notebook, Page, Menu, Action)
from enaml.stdlib.message_box import warning

from .....utils.widgets.qt_list_str_widget import QtListStrWidget


enamldef CreateRuleDialog(Dialog): dial:
    """Dialog used to create a new rule.

    """
    #: Newly created rule.
    attr rule << (p_select.rule if nb.selected_tab.endswith('select_rule')
                  else p_build.rule)

    #: Reference to the text monitor plugin.
    attr plugin

    title = 'Select/Create a rule'

    Container:

        Notebook: nb:
            tabs_closable = False
            tabs_movable = False

            Page: p_select:
                attr rule = (plugin.build_rule(qlist.selected_item) if
                             qlist.selected_item else None)
                title = 'Existing rules'
                name = 'exopy.measurement.monitors.text_monitor.select_rule'

                Container:
                    constraints << [hbox(qlist,
                                         vbox(*(tuple(v_select.objects) +
                                                (spacer,)))
                                         ),
                                    contents_width >= 2*qlist.width]

                    QtListStrWidget: qlist:
                        items = plugin.rules
                        selected_item::
                            p_select.rule = plugin.build_rule(selected_item)

                    Include: v_select:
                        objects << ([plugin.get_rule_view(p_select.rule)]
                                    if p_select.rule else [])

            Page: p_build:
                attr rule = (plugin.get_rule_type(com.selected)() if
                             com.selected else None)
                title = 'Build rule'
                name = 'exopy.measurement.monitors.text_monitor.create_rule'

                Container:
                    constraints << [vbox(com,
                                         *(tuple(v_build.objects) +
                                           (sav, hbox(spacer, ok, cancel))))
                                    ]

                    ObjectCombo: com:
                        items << plugin.rule_types
                        selected ::
                            p_build.rule = plugin.get_rule_type(selected)()

                    Include: v_build:
                        objects << ([plugin.get_rule_view(p_build.rule)]
                                    if p_build.rule else [])

                    CheckBox: sav:
                        text = 'Save in preferences'

        PushButton: ok:
            text = 'Ok'
            enabled << bool(dial.rule)
            clicked ::
                if dial.rule is p_select.rule:
                    v = v_select.objects[0]
                else:
                    v = v_build.objects[0]
                res, msg = v.validate()
                if not res:
                    warning(self, 'Wrong parameters', msg)
                else:
                    if dial.rule is not p_select.rule and sav.checked:
                        plugin.save_rule(rule)
                    dial.accept()

        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                dial.reject()


enamldef EditRulesView(Dialog): dial:
    """Dialog to edit all the rules attached to a monitor.

    """
    #: Reference to the monitor whose rules are being edited.
    attr monitor

    #: Reference to the plugin handling the rules.
    attr plugin << monitor._plugin

    title = 'Rules'

    initialized ::
        v.objects = ([plugin.get_rule_view(qlist.selected_item)]
                     if qlist.selected_item else [])

    Container:
        constraints << [vbox(
                            hbox(qlist, vbox(*(tuple(v.objects) + (spacer,))),
                                 vbox(add, delete, save, spacer)),
                            hbox(spacer, ex)),
                        contents_width >= 3*qlist.width]

        QtListStrWidget: qlist:
            items << monitor.rules
            to_string = attrgetter('id')

        Include: v:
            objects << ([plugin.get_rule_view(qlist.selected_item)]
                        if qlist.selected_item else [])

        PushButton: add:
            text = 'Add'
            clicked ::
                dial = CreateRuleDialog(plugin=monitor._plugin)
                if dial.exec_():
                    monitor.rules.append(dial.rule)
                    monitor.refresh_monitored_entries()
                    qlist.refresh_items()

        PushButton: delete:
            text = 'Remove'
            clicked ::
                del monitor.rules[monitor.rules.index(qlist.selected_item)]
                monitor.refresh_monitored_entries()
                qlist.refresh_items()

        PushButton: save:
            text = 'Save'
            tool_tip = 'Save the rule definition into the preferences'
            enabled << (bool(qlist.selected_item) and
                        bool(qlist.selected_item.id not in
                             monitor._plugin._rule_configs.contributions))
            Menu:
                Action:
                    text = 'Save'
                    triggered ::
                        plugin.save_rule(qlist.selected_item)
                Action:
                    text = 'Save and add to default'
                    triggered ::
                        plugin.save_rule(qlist.selected_item)
                        plugin.default_rules.append(qlist.selected_item.id)

        PushButton: ex:
            text = 'Close'
            clicked ::
                dial.accept()
