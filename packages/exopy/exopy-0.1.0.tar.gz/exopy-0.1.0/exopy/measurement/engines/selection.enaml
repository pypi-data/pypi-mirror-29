# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widgets dedicated to selecting an engine for measurement execution.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from enaml.widgets.api import (Notebook, Container, Dialog, PushButton,
                               MultilineField)
from enaml.layout.api import vbox, hbox, spacer
from enaml.core.api import Include

from ...utils.widgets.qt_list_str_widget import QtListStrWidget
from ...utils.transformers import ids_to_unique_names


enamldef EngineSelector(Dialog): dial:
    """Simple dialog to select an engine.

    """
    #: Refrence to the measurement plugin.
    attr plugin

    #: Declaration for the currently selected engine.
    attr selected_decl << (
        plugin.get_declarations('engine',
                                [list_ed.selected_item])[list_ed.selected_item]
                                )

    #: Mappping between engine user understandable names and ids.
    attr _names << ids_to_unique_names(plugin.engines, reverse=True)

    func _to_name(engine_id):
        return _names[engine_id]

    title = 'Select an engine'

    Container:
        constraints << [hbox(list_ed, desc, vbox(ok, cancel, spacer))]

        QtListStrWidget: list_ed:
            items << plugin.engines
            sort = True
            to_string = _to_name

        MultilineField: desc:
            text << selected_decl.description if selected_decl else ''

        PushButton: ok:
            text = 'Ok'
            enabled << bool(selected_decl)
            clicked ::
                dial.accept()

        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                dial.reject()
