
"""
out_ex20161103.py

Machine-generated model code

[Generated by:]
         CA_GOV_F = CA_GOV_LAG_F +CA_GOV_T -CA_GOV_DEM_GOOD                          # [F] Financial assets
  CA_GOV_FISC_BAL = CA_GOV_T -CA_GOV_DEM_GOOD                                        # [FISC_BAL] Government Fiscal Balance
     CA_GOV_LAG_F = CA_GOV_F (k -1 )                                                 # [LAG_F] Previous periods financial assets.
         CA_GOV_T = CA_TF_T                                                          # [T] Tax revenue received.
   CA_HH_AfterTax = CA_HH_PreTax -CA_HH_T                                            # [AfterTax] Aftertax income
   CA_HH_AlphaFin = 0.4000                                                           # [AlphaFin] Parameter for consumption out of financial assets
CA_HH_AlphaIncome = 0.6000                                                           # [AlphaIncome] Parameter for consumption out of income
   CA_HH_DEM_GOOD = CA_HH_AlphaIncome *CA_HH_AfterTax +CA_HH_AlphaFin *CA_HH_LAG_F   # [DEM_GOOD] Expenditure on goods consumption
          CA_HH_F = CA_HH_LAG_F -CA_HH_T +CA_HH_SUP_LAB -CA_HH_DEM_GOOD              # [F] Financial assets
      CA_HH_LAG_F = CA_HH_F (k -1 )                                                  # [LAG_F] Previous periods financial assets.
     CA_HH_PreTax = CA_HH_SUP_LAB                                                    # [PreTax] Pretax income
    CA_HH_SUP_LAB = CA_BUS_DEM_LAB                                                   # [SUP_LAB] Supply of Labour
          CA_HH_T = CA_TF_TaxRate *CA_HH_PreTax                                      # [T] Taxes paid.
   CA_BUS_DEM_LAB = CA_GOOD_SUP_GOOD                                                 # [DEM_LAB] Demand for labour
         CA_BUS_F = CA_BUS_LAG_F -CA_BUS_DEM_LAB +CA_BUS_SUP_GOOD                    # [F] Financial assets
     CA_BUS_LAG_F = CA_BUS_F (k -1 )                                                 # [LAG_F] Previous periods financial assets.
  CA_BUS_SUP_GOOD = CA_GOV_DEM_GOOD +CA_HH_DEM_GOOD                                  # [SUP_GOOD] Supply of goods
          CA_TF_T = CA_TF_TaxRate *CA_HH_PreTax                                      # [T] Taxes Paid
    CA_TF_TaxRate = 0.2000                                                           # [TaxRate] Tax rate
   CA_LAB_DEM_LAB = CA_BUS_DEM_LAB                                                   # [DEM_LAB] Demand for Market LAB
   CA_LAB_SUP_LAB = CA_LAB_DEM_LAB                                                   # [SUP_LAB] Supply for Market LAB
 CA_GOOD_DEM_GOOD = CA_GOV_DEM_GOOD +CA_HH_DEM_GOOD                                  # [DEM_GOOD] Demand for Market GOOD
 CA_GOOD_SUP_GOOD = CA_GOOD_DEM_GOOD                                                 # [SUP_GOOD] Supply for Market GOOD
         US_GOV_F = US_GOV_LAG_F +US_GOV_T -US_GOV_DEM_GOOD                          # [F] Financial assets
  US_GOV_FISC_BAL = US_GOV_T -US_GOV_DEM_GOOD                                        # [FISC_BAL] Government Fiscal Balance
     US_GOV_LAG_F = US_GOV_F (k -1 )                                                 # [LAG_F] Previous periods financial assets.
         US_GOV_T = US_TF_T                                                          # [T] Tax revenue received.
   US_HH_AfterTax = US_HH_PreTax -US_HH_T                                            # [AfterTax] Aftertax income
   US_HH_AlphaFin = 0.4000                                                           # [AlphaFin] Parameter for consumption out of financial assets
US_HH_AlphaIncome = 0.6000                                                           # [AlphaIncome] Parameter for consumption out of income
   US_HH_DEM_GOOD = US_HH_AlphaIncome *US_HH_AfterTax +US_HH_AlphaFin *US_HH_LAG_F   # [DEM_GOOD] Expenditure on goods consumption
          US_HH_F = US_HH_LAG_F -US_HH_T +US_HH_SUP_LAB -US_HH_DEM_GOOD              # [F] Financial assets
      US_HH_LAG_F = US_HH_F (k -1 )                                                  # [LAG_F] Previous periods financial assets.
     US_HH_PreTax = US_HH_SUP_LAB                                                    # [PreTax] Pretax income
    US_HH_SUP_LAB = US_BUS_DEM_LAB                                                   # [SUP_LAB] Supply of Labour
          US_HH_T = US_TF_TaxRate *US_HH_PreTax                                      # [T] Taxes paid.
   US_BUS_DEM_LAB = 0.900 *US_GOOD_SUP_GOOD                                          # [DEM_LAB] Demand for labour
         US_BUS_F = US_BUS_LAG_F -US_BUS_DEM_LAB +US_BUS_SUP_GOOD                    # [F] Financial assets
     US_BUS_LAG_F = US_BUS_F (k -1 )                                                 # [LAG_F] Previous periods financial assets.
      US_BUS_PROF = 0.100 *US_GOOD_SUP_GOOD                                          # [PROF] Profits
  US_BUS_SUP_GOOD = US_GOV_DEM_GOOD +US_HH_DEM_GOOD                                  # [SUP_GOOD] Supply of goods
          US_TF_T = US_TF_TaxRate *US_HH_PreTax                                      # [T] Taxes Paid
    US_TF_TaxRate = 0.2000                                                           # [TaxRate] Tax rate
   US_LAB_DEM_LAB = US_BUS_DEM_LAB                                                   # [DEM_LAB] Demand for Market LAB
   US_LAB_SUP_LAB = US_LAB_DEM_LAB                                                   # [SUP_LAB] Supply for Market LAB
 US_GOOD_DEM_GOOD = US_GOV_DEM_GOOD +US_HH_DEM_GOOD                                  # [DEM_GOOD] Demand for Market GOOD
 US_GOOD_SUP_GOOD = US_GOOD_DEM_GOOD                                                 # [SUP_GOOD] Supply for Market GOOD

# Exogenous Variables

  CA_GOV_DEM_GOOD =  [20. ,]*105                                                     # [DEM_GOOD] Government Consumption of Goods
  US_GOV_DEM_GOOD =  [20. ,]*105                                                     # [DEM_GOOD] Government Consumption of Goods

MaxTime = 100
Err_Tolerance=0.001
"""

from pprint import pprint
# Bring in all the math functions by default.
from math import *

from sfc_models.base_solver import BaseSolver


class SFCModel(BaseSolver):
    """
    Model

    Implements the following system of equations.

    Endogenous variables and parameters
    ===================================
    CA_GOV_F = CA_GOV_LAG_F+CA_TF_T-CA_GOV_DEM_GOOD,
    CA_HH_AfterTax = CA_GOOD_DEM_GOOD-CA_HH_T,
    CA_HH_AlphaFin = 0.4000,
    CA_HH_AlphaIncome = 0.6000,
    CA_HH_DEM_GOOD = CA_HH_AlphaIncome*CA_HH_AfterTax+CA_HH_AlphaFin*CA_HH_LAG_F,
    CA_HH_F = CA_HH_LAG_F-CA_HH_T+CA_GOOD_DEM_GOOD-CA_HH_DEM_GOOD,
    CA_HH_T = CA_TF_TaxRate*CA_GOOD_DEM_GOOD,
    CA_BUS_F = CA_BUS_LAG_F-CA_GOOD_DEM_GOOD+CA_BUS_SUP_GOOD,
    CA_BUS_SUP_GOOD = CA_GOV_DEM_GOOD+CA_HH_DEM_GOOD,
    CA_TF_T = CA_TF_TaxRate*CA_GOOD_DEM_GOOD,
    CA_TF_TaxRate = 0.2000,
    CA_GOOD_DEM_GOOD = CA_GOV_DEM_GOOD+CA_HH_DEM_GOOD,
    US_GOV_F = US_GOV_LAG_F+US_TF_T-US_GOV_DEM_GOOD,
    US_HH_AfterTax = US_BUS_DEM_LAB-US_HH_T,
    US_HH_AlphaFin = 0.4000,
    US_HH_AlphaIncome = 0.6000,
    US_HH_DEM_GOOD = US_HH_AlphaIncome*US_HH_AfterTax+US_HH_AlphaFin*US_HH_LAG_F,
    US_HH_F = US_HH_LAG_F-US_HH_T+US_BUS_DEM_LAB-US_HH_DEM_GOOD,
    US_HH_T = US_TF_TaxRate*US_BUS_DEM_LAB,
    US_BUS_DEM_LAB = 0.900*US_GOOD_DEM_GOOD,
    US_BUS_F = US_BUS_LAG_F-US_BUS_DEM_LAB+US_BUS_SUP_GOOD,
    US_BUS_SUP_GOOD = US_GOV_DEM_GOOD+US_HH_DEM_GOOD,
    US_TF_T = US_TF_TaxRate*US_BUS_DEM_LAB,
    US_TF_TaxRate = 0.2000,
    US_GOOD_DEM_GOOD = US_GOV_DEM_GOOD+US_HH_DEM_GOOD,
    CA_GOV_FISC_BAL = CA_TF_T-CA_GOV_DEM_GOOD,
    CA_GOV_T = CA_TF_T,
    CA_HH_PreTax = CA_GOOD_DEM_GOOD,
    CA_HH_SUP_LAB = CA_GOOD_DEM_GOOD,
    CA_LAB_DEM_LAB = CA_GOOD_DEM_GOOD,
    CA_LAB_SUP_LAB = CA_BUS_DEM_LAB,
    CA_GOOD_SUP_GOOD = CA_GOOD_DEM_GOOD,
    US_GOV_FISC_BAL = US_TF_T-US_GOV_DEM_GOOD,
    US_GOV_T = US_TF_T,
    US_HH_PreTax = US_BUS_DEM_LAB,
    US_HH_SUP_LAB = US_BUS_DEM_LAB,
    US_BUS_PROF = 0.100*US_GOOD_DEM_GOOD,
    US_LAB_DEM_LAB = US_BUS_DEM_LAB,
    US_LAB_SUP_LAB = US_BUS_DEM_LAB,
    US_GOOD_SUP_GOOD = US_GOOD_DEM_GOOD,
    t = t_minus_1+1.0,
    CA_BUS_DEM_LAB = CA_GOOD_DEM_GOOD.
    Where lagged variables are:
    CA_GOV_LAG_F(t) = CA_GOV_F(k-1),
    CA_HH_LAG_F(t) = CA_HH_F(k-1),
    CA_BUS_LAG_F(t) = CA_BUS_F(k-1),
    US_GOV_LAG_F(t) = US_GOV_F(k-1),
    US_HH_LAG_F(t) = US_HH_F(k-1),
    US_BUS_LAG_F(t) = US_BUS_F(k-1),
    t_minus_1(t) = t(k-1).
    
    
    Exogenous Variables
    ===================
    CA_GOV_DEM_GOOD,
    US_GOV_DEM_GOOD.

    """
    def __init__(self):
        BaseSolver.__init__(self, ['CA_GOV_F', 'CA_HH_AfterTax', 'CA_HH_AlphaFin', 'CA_HH_AlphaIncome', 'CA_HH_DEM_GOOD', 'CA_HH_F', 'CA_HH_T', 'CA_BUS_F', 'CA_BUS_SUP_GOOD', 'CA_TF_T', 'CA_TF_TaxRate', 'CA_GOOD_DEM_GOOD', 'US_GOV_F', 'US_HH_AfterTax', 'US_HH_AlphaFin', 'US_HH_AlphaIncome', 'US_HH_DEM_GOOD', 'US_HH_F', 'US_HH_T', 'US_BUS_DEM_LAB', 'US_BUS_F', 'US_BUS_SUP_GOOD', 'US_TF_T', 'US_TF_TaxRate', 'US_GOOD_DEM_GOOD', 'CA_GOV_FISC_BAL', 'CA_GOV_T', 'CA_HH_PreTax', 'CA_HH_SUP_LAB', 'CA_LAB_DEM_LAB', 'CA_LAB_SUP_LAB', 'CA_GOOD_SUP_GOOD', 'US_GOV_FISC_BAL', 'US_GOV_T', 'US_HH_PreTax', 'US_HH_SUP_LAB', 'US_BUS_PROF', 'US_LAB_DEM_LAB', 'US_LAB_SUP_LAB', 'US_GOOD_SUP_GOOD', 't', 'CA_BUS_DEM_LAB', 'CA_GOV_DEM_GOOD', 'US_GOV_DEM_GOOD'])
        self.MaxIterations = 400
        self.MaxTime = 100
        # Current time step. Call this "STEP" and not time so that users
        # can create a custom time axis variable.
        self.STEP = 0
        self.PrintIterations = False
        self.Err_Tolerance = 0.001
        self.CA_GOV_F = [0., ]
        self.CA_HH_AfterTax = [0., ]
        self.CA_HH_AlphaFin = [0.4000, ]
        self.CA_HH_AlphaIncome = [0.6000, ]
        self.CA_HH_DEM_GOOD = [0., ]
        self.CA_HH_F = [0., ]
        self.CA_HH_T = [0., ]
        self.CA_BUS_F = [0., ]
        self.CA_BUS_SUP_GOOD = [0., ]
        self.CA_TF_T = [0., ]
        self.CA_TF_TaxRate = [0.2000, ]
        self.CA_GOOD_DEM_GOOD = [0., ]
        self.US_GOV_F = [0., ]
        self.US_HH_AfterTax = [0., ]
        self.US_HH_AlphaFin = [0.4000, ]
        self.US_HH_AlphaIncome = [0.6000, ]
        self.US_HH_DEM_GOOD = [0., ]
        self.US_HH_F = [0., ]
        self.US_HH_T = [0., ]
        self.US_BUS_DEM_LAB = [0., ]
        self.US_BUS_F = [0., ]
        self.US_BUS_SUP_GOOD = [0., ]
        self.US_TF_T = [0., ]
        self.US_TF_TaxRate = [0.2000, ]
        self.US_GOOD_DEM_GOOD = [0., ]
        self.CA_GOV_FISC_BAL = [0., ]
        self.CA_GOV_T = [0., ]
        self.CA_HH_PreTax = [0., ]
        self.CA_HH_SUP_LAB = [0., ]
        self.CA_LAB_DEM_LAB = [0., ]
        self.CA_LAB_SUP_LAB = [0., ]
        self.CA_GOOD_SUP_GOOD = [0., ]
        self.US_GOV_FISC_BAL = [0., ]
        self.US_GOV_T = [0., ]
        self.US_HH_PreTax = [0., ]
        self.US_HH_SUP_LAB = [0., ]
        self.US_BUS_PROF = [0., ]
        self.US_LAB_DEM_LAB = [0., ]
        self.US_LAB_SUP_LAB = [0., ]
        self.US_GOOD_SUP_GOOD = [0., ]
        self.t = [0., ]
        self.CA_BUS_DEM_LAB = [0., ]
        self.CA_GOV_DEM_GOOD = [20. ,]*105
        self.US_GOV_DEM_GOOD = [20. ,]*105
        #  Make sure exogenous variables are not longer than time frame
        self.CA_GOV_DEM_GOOD = self.CA_GOV_DEM_GOOD[0:101]
        self.US_GOV_DEM_GOOD = self.US_GOV_DEM_GOOD[0:101]


    @staticmethod
    def Iterator(in_vec):
        CA_GOV_F, CA_HH_AfterTax, CA_HH_AlphaFin, CA_HH_AlphaIncome, CA_HH_DEM_GOOD, CA_HH_F, CA_HH_T, CA_BUS_F, CA_BUS_SUP_GOOD, CA_TF_T, CA_TF_TaxRate, CA_GOOD_DEM_GOOD, US_GOV_F, US_HH_AfterTax, US_HH_AlphaFin, US_HH_AlphaIncome, US_HH_DEM_GOOD, US_HH_F, US_HH_T, US_BUS_DEM_LAB, US_BUS_F, US_BUS_SUP_GOOD, US_TF_T, US_TF_TaxRate, US_GOOD_DEM_GOOD, CA_GOV_FISC_BAL, CA_GOV_T, CA_HH_PreTax, CA_HH_SUP_LAB, CA_LAB_DEM_LAB, CA_LAB_SUP_LAB, CA_GOOD_SUP_GOOD, US_GOV_FISC_BAL, US_GOV_T, US_HH_PreTax, US_HH_SUP_LAB, US_BUS_PROF, US_LAB_DEM_LAB, US_LAB_SUP_LAB, US_GOOD_SUP_GOOD, t, CA_BUS_DEM_LAB, CA_GOV_LAG_F, CA_HH_LAG_F, CA_BUS_LAG_F, US_GOV_LAG_F, US_HH_LAG_F, US_BUS_LAG_F, t_minus_1, CA_GOV_DEM_GOOD, US_GOV_DEM_GOOD = in_vec 
        NEW_CA_GOV_F = CA_GOV_LAG_F+CA_TF_T-CA_GOV_DEM_GOOD
        NEW_CA_HH_AfterTax = CA_GOOD_DEM_GOOD-CA_HH_T
        NEW_CA_HH_AlphaFin = 0.4000
        NEW_CA_HH_AlphaIncome = 0.6000
        NEW_CA_HH_DEM_GOOD = CA_HH_AlphaIncome*CA_HH_AfterTax+CA_HH_AlphaFin*CA_HH_LAG_F
        NEW_CA_HH_F = CA_HH_LAG_F-CA_HH_T+CA_GOOD_DEM_GOOD-CA_HH_DEM_GOOD
        NEW_CA_HH_T = CA_TF_TaxRate*CA_GOOD_DEM_GOOD
        NEW_CA_BUS_F = CA_BUS_LAG_F-CA_GOOD_DEM_GOOD+CA_BUS_SUP_GOOD
        NEW_CA_BUS_SUP_GOOD = CA_GOV_DEM_GOOD+CA_HH_DEM_GOOD
        NEW_CA_TF_T = CA_TF_TaxRate*CA_GOOD_DEM_GOOD
        NEW_CA_TF_TaxRate = 0.2000
        NEW_CA_GOOD_DEM_GOOD = CA_GOV_DEM_GOOD+CA_HH_DEM_GOOD
        NEW_US_GOV_F = US_GOV_LAG_F+US_TF_T-US_GOV_DEM_GOOD
        NEW_US_HH_AfterTax = US_BUS_DEM_LAB-US_HH_T
        NEW_US_HH_AlphaFin = 0.4000
        NEW_US_HH_AlphaIncome = 0.6000
        NEW_US_HH_DEM_GOOD = US_HH_AlphaIncome*US_HH_AfterTax+US_HH_AlphaFin*US_HH_LAG_F
        NEW_US_HH_F = US_HH_LAG_F-US_HH_T+US_BUS_DEM_LAB-US_HH_DEM_GOOD
        NEW_US_HH_T = US_TF_TaxRate*US_BUS_DEM_LAB
        NEW_US_BUS_DEM_LAB = 0.900*US_GOOD_DEM_GOOD
        NEW_US_BUS_F = US_BUS_LAG_F-US_BUS_DEM_LAB+US_BUS_SUP_GOOD
        NEW_US_BUS_SUP_GOOD = US_GOV_DEM_GOOD+US_HH_DEM_GOOD
        NEW_US_TF_T = US_TF_TaxRate*US_BUS_DEM_LAB
        NEW_US_TF_TaxRate = 0.2000
        NEW_US_GOOD_DEM_GOOD = US_GOV_DEM_GOOD+US_HH_DEM_GOOD
        NEW_CA_GOV_FISC_BAL = CA_TF_T-CA_GOV_DEM_GOOD
        NEW_CA_GOV_T = CA_TF_T
        NEW_CA_HH_PreTax = CA_GOOD_DEM_GOOD
        NEW_CA_HH_SUP_LAB = CA_GOOD_DEM_GOOD
        NEW_CA_LAB_DEM_LAB = CA_GOOD_DEM_GOOD
        NEW_CA_LAB_SUP_LAB = CA_BUS_DEM_LAB
        NEW_CA_GOOD_SUP_GOOD = CA_GOOD_DEM_GOOD
        NEW_US_GOV_FISC_BAL = US_TF_T-US_GOV_DEM_GOOD
        NEW_US_GOV_T = US_TF_T
        NEW_US_HH_PreTax = US_BUS_DEM_LAB
        NEW_US_HH_SUP_LAB = US_BUS_DEM_LAB
        NEW_US_BUS_PROF = 0.100*US_GOOD_DEM_GOOD
        NEW_US_LAB_DEM_LAB = US_BUS_DEM_LAB
        NEW_US_LAB_SUP_LAB = US_BUS_DEM_LAB
        NEW_US_GOOD_SUP_GOOD = US_GOOD_DEM_GOOD
        NEW_t = t_minus_1+1.0
        NEW_CA_BUS_DEM_LAB = CA_GOOD_DEM_GOOD
        NEW_CA_GOV_LAG_F = CA_GOV_LAG_F
        NEW_CA_HH_LAG_F = CA_HH_LAG_F
        NEW_CA_BUS_LAG_F = CA_BUS_LAG_F
        NEW_US_GOV_LAG_F = US_GOV_LAG_F
        NEW_US_HH_LAG_F = US_HH_LAG_F
        NEW_US_BUS_LAG_F = US_BUS_LAG_F
        NEW_t_minus_1 = t_minus_1
        NEW_CA_GOV_DEM_GOOD = CA_GOV_DEM_GOOD
        NEW_US_GOV_DEM_GOOD = US_GOV_DEM_GOOD
        return NEW_CA_GOV_F, NEW_CA_HH_AfterTax, NEW_CA_HH_AlphaFin, NEW_CA_HH_AlphaIncome, NEW_CA_HH_DEM_GOOD, NEW_CA_HH_F, NEW_CA_HH_T, NEW_CA_BUS_F, NEW_CA_BUS_SUP_GOOD, NEW_CA_TF_T, NEW_CA_TF_TaxRate, NEW_CA_GOOD_DEM_GOOD, NEW_US_GOV_F, NEW_US_HH_AfterTax, NEW_US_HH_AlphaFin, NEW_US_HH_AlphaIncome, NEW_US_HH_DEM_GOOD, NEW_US_HH_F, NEW_US_HH_T, NEW_US_BUS_DEM_LAB, NEW_US_BUS_F, NEW_US_BUS_SUP_GOOD, NEW_US_TF_T, NEW_US_TF_TaxRate, NEW_US_GOOD_DEM_GOOD, NEW_CA_GOV_FISC_BAL, NEW_CA_GOV_T, NEW_CA_HH_PreTax, NEW_CA_HH_SUP_LAB, NEW_CA_LAB_DEM_LAB, NEW_CA_LAB_SUP_LAB, NEW_CA_GOOD_SUP_GOOD, NEW_US_GOV_FISC_BAL, NEW_US_GOV_T, NEW_US_HH_PreTax, NEW_US_HH_SUP_LAB, NEW_US_BUS_PROF, NEW_US_LAB_DEM_LAB, NEW_US_LAB_SUP_LAB, NEW_US_GOOD_SUP_GOOD, NEW_t, NEW_CA_BUS_DEM_LAB, NEW_CA_GOV_LAG_F, NEW_CA_HH_LAG_F, NEW_CA_BUS_LAG_F, NEW_US_GOV_LAG_F, NEW_US_HH_LAG_F, NEW_US_BUS_LAG_F, NEW_t_minus_1, NEW_CA_GOV_DEM_GOOD, NEW_US_GOV_DEM_GOOD


    def main(self):
        while self.STEP < self.MaxTime:
            self.RunOneStep()

    def RunOneStep(self):
        self.STEP += 1
        CA_GOV_F = self.CA_GOV_F[-1]
        CA_HH_AfterTax = self.CA_HH_AfterTax[-1]
        CA_HH_AlphaFin = self.CA_HH_AlphaFin[-1]
        CA_HH_AlphaIncome = self.CA_HH_AlphaIncome[-1]
        CA_HH_DEM_GOOD = self.CA_HH_DEM_GOOD[-1]
        CA_HH_F = self.CA_HH_F[-1]
        CA_HH_T = self.CA_HH_T[-1]
        CA_BUS_F = self.CA_BUS_F[-1]
        CA_BUS_SUP_GOOD = self.CA_BUS_SUP_GOOD[-1]
        CA_TF_T = self.CA_TF_T[-1]
        CA_TF_TaxRate = self.CA_TF_TaxRate[-1]
        CA_GOOD_DEM_GOOD = self.CA_GOOD_DEM_GOOD[-1]
        US_GOV_F = self.US_GOV_F[-1]
        US_HH_AfterTax = self.US_HH_AfterTax[-1]
        US_HH_AlphaFin = self.US_HH_AlphaFin[-1]
        US_HH_AlphaIncome = self.US_HH_AlphaIncome[-1]
        US_HH_DEM_GOOD = self.US_HH_DEM_GOOD[-1]
        US_HH_F = self.US_HH_F[-1]
        US_HH_T = self.US_HH_T[-1]
        US_BUS_DEM_LAB = self.US_BUS_DEM_LAB[-1]
        US_BUS_F = self.US_BUS_F[-1]
        US_BUS_SUP_GOOD = self.US_BUS_SUP_GOOD[-1]
        US_TF_T = self.US_TF_T[-1]
        US_TF_TaxRate = self.US_TF_TaxRate[-1]
        US_GOOD_DEM_GOOD = self.US_GOOD_DEM_GOOD[-1]
        CA_GOV_FISC_BAL = self.CA_GOV_FISC_BAL[-1]
        CA_GOV_T = self.CA_GOV_T[-1]
        CA_HH_PreTax = self.CA_HH_PreTax[-1]
        CA_HH_SUP_LAB = self.CA_HH_SUP_LAB[-1]
        CA_LAB_DEM_LAB = self.CA_LAB_DEM_LAB[-1]
        CA_LAB_SUP_LAB = self.CA_LAB_SUP_LAB[-1]
        CA_GOOD_SUP_GOOD = self.CA_GOOD_SUP_GOOD[-1]
        US_GOV_FISC_BAL = self.US_GOV_FISC_BAL[-1]
        US_GOV_T = self.US_GOV_T[-1]
        US_HH_PreTax = self.US_HH_PreTax[-1]
        US_HH_SUP_LAB = self.US_HH_SUP_LAB[-1]
        US_BUS_PROF = self.US_BUS_PROF[-1]
        US_LAB_DEM_LAB = self.US_LAB_DEM_LAB[-1]
        US_LAB_SUP_LAB = self.US_LAB_SUP_LAB[-1]
        US_GOOD_SUP_GOOD = self.US_GOOD_SUP_GOOD[-1]
        t = self.t[-1]
        CA_BUS_DEM_LAB = self.CA_BUS_DEM_LAB[-1]
        CA_GOV_LAG_F = self.CA_GOV_F[self.STEP -1]
        CA_HH_LAG_F = self.CA_HH_F[self.STEP -1]
        CA_BUS_LAG_F = self.CA_BUS_F[self.STEP -1]
        US_GOV_LAG_F = self.US_GOV_F[self.STEP -1]
        US_HH_LAG_F = self.US_HH_F[self.STEP -1]
        US_BUS_LAG_F = self.US_BUS_F[self.STEP -1]
        t_minus_1 = self.t[self.STEP -1]
        CA_GOV_DEM_GOOD = self.CA_GOV_DEM_GOOD[self.STEP]
        US_GOV_DEM_GOOD = self.US_GOV_DEM_GOOD[self.STEP]

        orig_vector = (CA_GOV_F, CA_HH_AfterTax, CA_HH_AlphaFin, CA_HH_AlphaIncome, CA_HH_DEM_GOOD, CA_HH_F, CA_HH_T, CA_BUS_F, CA_BUS_SUP_GOOD, CA_TF_T, CA_TF_TaxRate, CA_GOOD_DEM_GOOD, US_GOV_F, US_HH_AfterTax, US_HH_AlphaFin, US_HH_AlphaIncome, US_HH_DEM_GOOD, US_HH_F, US_HH_T, US_BUS_DEM_LAB, US_BUS_F, US_BUS_SUP_GOOD, US_TF_T, US_TF_TaxRate, US_GOOD_DEM_GOOD, CA_GOV_FISC_BAL, CA_GOV_T, CA_HH_PreTax, CA_HH_SUP_LAB, CA_LAB_DEM_LAB, CA_LAB_SUP_LAB, CA_GOOD_SUP_GOOD, US_GOV_FISC_BAL, US_GOV_T, US_HH_PreTax, US_HH_SUP_LAB, US_BUS_PROF, US_LAB_DEM_LAB, US_LAB_SUP_LAB, US_GOOD_SUP_GOOD, t, CA_BUS_DEM_LAB, CA_GOV_LAG_F, CA_HH_LAG_F, CA_BUS_LAG_F, US_GOV_LAG_F, US_HH_LAG_F, US_BUS_LAG_F, t_minus_1, CA_GOV_DEM_GOOD, US_GOV_DEM_GOOD)
        err = 1.
        cnt = 0
        while err > self.Err_Tolerance:
            new_vector = self.Iterator(orig_vector)
            err = self.CalcError(orig_vector, new_vector)
            orig_vector = new_vector
            cnt += 1
            if cnt > self.MaxIterations:
                raise ValueError('No Convergence!')
        if self.PrintIterations:
            pprint(cnt)
        CA_GOV_F = orig_vector[0]
        self.CA_GOV_F.append(CA_GOV_F)
        CA_HH_AfterTax = orig_vector[1]
        self.CA_HH_AfterTax.append(CA_HH_AfterTax)
        CA_HH_AlphaFin = orig_vector[2]
        self.CA_HH_AlphaFin.append(CA_HH_AlphaFin)
        CA_HH_AlphaIncome = orig_vector[3]
        self.CA_HH_AlphaIncome.append(CA_HH_AlphaIncome)
        CA_HH_DEM_GOOD = orig_vector[4]
        self.CA_HH_DEM_GOOD.append(CA_HH_DEM_GOOD)
        CA_HH_F = orig_vector[5]
        self.CA_HH_F.append(CA_HH_F)
        CA_HH_T = orig_vector[6]
        self.CA_HH_T.append(CA_HH_T)
        CA_BUS_F = orig_vector[7]
        self.CA_BUS_F.append(CA_BUS_F)
        CA_BUS_SUP_GOOD = orig_vector[8]
        self.CA_BUS_SUP_GOOD.append(CA_BUS_SUP_GOOD)
        CA_TF_T = orig_vector[9]
        self.CA_TF_T.append(CA_TF_T)
        CA_TF_TaxRate = orig_vector[10]
        self.CA_TF_TaxRate.append(CA_TF_TaxRate)
        CA_GOOD_DEM_GOOD = orig_vector[11]
        self.CA_GOOD_DEM_GOOD.append(CA_GOOD_DEM_GOOD)
        US_GOV_F = orig_vector[12]
        self.US_GOV_F.append(US_GOV_F)
        US_HH_AfterTax = orig_vector[13]
        self.US_HH_AfterTax.append(US_HH_AfterTax)
        US_HH_AlphaFin = orig_vector[14]
        self.US_HH_AlphaFin.append(US_HH_AlphaFin)
        US_HH_AlphaIncome = orig_vector[15]
        self.US_HH_AlphaIncome.append(US_HH_AlphaIncome)
        US_HH_DEM_GOOD = orig_vector[16]
        self.US_HH_DEM_GOOD.append(US_HH_DEM_GOOD)
        US_HH_F = orig_vector[17]
        self.US_HH_F.append(US_HH_F)
        US_HH_T = orig_vector[18]
        self.US_HH_T.append(US_HH_T)
        US_BUS_DEM_LAB = orig_vector[19]
        self.US_BUS_DEM_LAB.append(US_BUS_DEM_LAB)
        US_BUS_F = orig_vector[20]
        self.US_BUS_F.append(US_BUS_F)
        US_BUS_SUP_GOOD = orig_vector[21]
        self.US_BUS_SUP_GOOD.append(US_BUS_SUP_GOOD)
        US_TF_T = orig_vector[22]
        self.US_TF_T.append(US_TF_T)
        US_TF_TaxRate = orig_vector[23]
        self.US_TF_TaxRate.append(US_TF_TaxRate)
        US_GOOD_DEM_GOOD = orig_vector[24]
        self.US_GOOD_DEM_GOOD.append(US_GOOD_DEM_GOOD)
        CA_GOV_FISC_BAL = orig_vector[25]
        self.CA_GOV_FISC_BAL.append(CA_GOV_FISC_BAL)
        CA_GOV_T = orig_vector[26]
        self.CA_GOV_T.append(CA_GOV_T)
        CA_HH_PreTax = orig_vector[27]
        self.CA_HH_PreTax.append(CA_HH_PreTax)
        CA_HH_SUP_LAB = orig_vector[28]
        self.CA_HH_SUP_LAB.append(CA_HH_SUP_LAB)
        CA_LAB_DEM_LAB = orig_vector[29]
        self.CA_LAB_DEM_LAB.append(CA_LAB_DEM_LAB)
        CA_LAB_SUP_LAB = orig_vector[30]
        self.CA_LAB_SUP_LAB.append(CA_LAB_SUP_LAB)
        CA_GOOD_SUP_GOOD = orig_vector[31]
        self.CA_GOOD_SUP_GOOD.append(CA_GOOD_SUP_GOOD)
        US_GOV_FISC_BAL = orig_vector[32]
        self.US_GOV_FISC_BAL.append(US_GOV_FISC_BAL)
        US_GOV_T = orig_vector[33]
        self.US_GOV_T.append(US_GOV_T)
        US_HH_PreTax = orig_vector[34]
        self.US_HH_PreTax.append(US_HH_PreTax)
        US_HH_SUP_LAB = orig_vector[35]
        self.US_HH_SUP_LAB.append(US_HH_SUP_LAB)
        US_BUS_PROF = orig_vector[36]
        self.US_BUS_PROF.append(US_BUS_PROF)
        US_LAB_DEM_LAB = orig_vector[37]
        self.US_LAB_DEM_LAB.append(US_LAB_DEM_LAB)
        US_LAB_SUP_LAB = orig_vector[38]
        self.US_LAB_SUP_LAB.append(US_LAB_SUP_LAB)
        US_GOOD_SUP_GOOD = orig_vector[39]
        self.US_GOOD_SUP_GOOD.append(US_GOOD_SUP_GOOD)
        t = orig_vector[40]
        self.t.append(t)
        CA_BUS_DEM_LAB = orig_vector[41]
        self.CA_BUS_DEM_LAB.append(CA_BUS_DEM_LAB)


    @staticmethod
    def CalcError(vec1, vec2):
        err = 0.
        for val1, val2 in zip(vec1, vec2):
            err += abs(val1 - val2)
        return err

if __name__ == '__main__':
    obj = SFCModel()
    obj.main()
