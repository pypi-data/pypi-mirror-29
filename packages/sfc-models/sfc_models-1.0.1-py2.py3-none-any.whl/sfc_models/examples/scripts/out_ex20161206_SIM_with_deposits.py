
"""
out_ex20161206_SIM_with_deposits.py

Machine-generated model code

[Generated by:]
          GOV_F = GOV_LAG_F +GOV_T -GOV_DEM_GOOD -GOV_INTDEP           # [F] Financial assets
   GOV_FISC_BAL = GOV_T -GOV_DEM_GOOD                                  # [FISC_BAL] Government Primary Fiscal Balance (Need to fix)
     GOV_INTDEP = DEP_LAG_r *GOV_LAG_SUP_DEP                           # [INTDEP] Interest paid on Deposit
      GOV_LAG_F = GOV_F (k -1 )                                        # [LAG_F] Previous periods financial assets.
GOV_LAG_SUP_DEP = GOV_SUP_DEP (k -1 )                                  # [LAG_SUP_DEP] Lagged Supply of Deposit
    GOV_SUP_DEP = DEP_DEM_DEP                                          # [SUP_DEP] Supply of Deposit
    GOV_SUP_MON = MON_DEM_MON                                          # [SUP_MON] Supply of Money
          GOV_T = TF_T                                                 # [T] Tax revenue received.
    HH_AfterTax = HH_PreTax -HH_T                                      # [AfterTax] Aftertax income
    HH_AlphaFin = 0.4000                                               # [AlphaFin] Parameter for consumption out of financial assets
 HH_AlphaIncome = 0.6000                                               # [AlphaIncome] Parameter for consumption out of income
     HH_DEM_DEP = 0.5 *HH_F                                            # [DEM_DEP] Demand for deposits
    HH_DEM_GOOD = HH_AlphaIncome *HH_AfterTax +HH_AlphaFin *HH_LAG_F   # [DEM_GOOD] Expenditure on goods consumption
     HH_DEM_MON = 0.5 *HH_F                                            # [DEM_MON] Demand for Money
           HH_F = HH_LAG_F -HH_T +HH_SUP_LAB -HH_DEM_GOOD +HH_INTDEP   # [F] Financial assets
      HH_INTDEP = DEP_LAG_r *HH_LAG_DEM_DEP                            # [INTDEP] Interest received on Deposit
 HH_LAG_DEM_DEP = HH_DEM_DEP (k -1 )                                   # [LAG_DEM_DEP] Lagged demand for Deposit
       HH_LAG_F = HH_F (k -1 )                                         # [LAG_F] Previous periods financial assets.
      HH_PreTax = HH_SUP_LAB                                           # [PreTax] Pretax income
     HH_SUP_LAB = BUS_DEM_LAB                                          # [SUP_LAB] Supply of Labour
           HH_T = TF_TaxRate *HH_PreTax                                # [T] Taxes paid.
    BUS_DEM_LAB = GOOD_SUP_GOOD                                        # [DEM_LAB] Demand for labour
    BUS_DEM_MON = BUS_F                                                # [DEM_MON] Demand for Money
          BUS_F = BUS_LAG_F -BUS_DEM_LAB +BUS_SUP_GOOD                 # [F] Financial assets
      BUS_LAG_F = BUS_F (k -1 )                                        # [LAG_F] Previous periods financial assets.
   BUS_SUP_GOOD = GOV_DEM_GOOD +HH_DEM_GOOD                            # [SUP_GOOD] Supply of goods
           TF_T = TF_TaxRate *HH_PreTax                                # [T] Taxes Paid
     TF_TaxRate = 0.2000                                               # [TaxRate] Tax rate
    LAB_DEM_LAB = BUS_DEM_LAB                                          # [DEM_LAB] Demand for Market LAB
    LAB_SUP_LAB = LAB_DEM_LAB                                          # [SUP_LAB] Supply for Market LAB
  GOOD_DEM_GOOD = GOV_DEM_GOOD +HH_DEM_GOOD                            # [DEM_GOOD] Demand for Market GOOD
  GOOD_SUP_GOOD = GOOD_DEM_GOOD                                        # [SUP_GOOD] Supply for Market GOOD
    MON_DEM_MON = HH_DEM_MON +BUS_DEM_MON                              # [DEM_MON] Total demand for Money
    MON_SUP_MON = GOV_SUP_MON                                          # [SUP_MON] Supply of Money
    DEP_DEM_DEP = HH_DEM_DEP                                           # [DEM_DEP] Total demand for Deposit
      DEP_LAG_r = DEP_r (k -1 )                                        # [LAG_r] Lagged Interest rate
    DEP_SUP_DEP = GOV_SUP_DEP                                          # [SUP_DEP] Supply of Deposit
        HH_F(0) = 80.0                                                 # Initial Condition

# Exogenous Variables

   GOV_DEM_GOOD =  [20. ,]*105                                         # [DEM_GOOD] Government Consumption of Goods
          DEP_r =  [0.0 ,]*5 +[0.04 ]*100                              # [r] Interest rate

MaxTime = 100
Err_Tolerance=0.001
"""

from pprint import pprint
# Bring in all the math functions by default.
from math import *

from sfc_models.base_solver import BaseSolver


class SFCModel(BaseSolver):
    """
    Model

    Implements the following system of equations.

    Endogenous variables and parameters
    ===================================
    GOV_F = GOV_LAG_F+TF_T-GOV_DEM_GOOD-GOV_INTDEP,
    GOV_INTDEP = DEP_LAG_r*GOV_LAG_SUP_DEP,
    HH_AfterTax = GOOD_DEM_GOOD-HH_T,
    HH_AlphaFin = 0.4000,
    HH_AlphaIncome = 0.6000,
    HH_DEM_DEP = 0.5*HH_F,
    HH_DEM_GOOD = HH_AlphaIncome*HH_AfterTax+HH_AlphaFin*HH_LAG_F,
    HH_DEM_MON = 0.5*HH_F,
    HH_F = HH_LAG_F-HH_T+GOOD_DEM_GOOD-HH_DEM_GOOD+HH_INTDEP,
    HH_INTDEP = DEP_LAG_r*HH_LAG_DEM_DEP,
    HH_T = TF_TaxRate*GOOD_DEM_GOOD,
    BUS_F = BUS_LAG_F-GOOD_DEM_GOOD+BUS_SUP_GOOD,
    BUS_SUP_GOOD = GOV_DEM_GOOD+HH_DEM_GOOD,
    TF_T = TF_TaxRate*GOOD_DEM_GOOD,
    TF_TaxRate = 0.2000,
    GOOD_DEM_GOOD = GOV_DEM_GOOD+HH_DEM_GOOD,
    MON_DEM_MON = HH_DEM_MON+BUS_F,
    t = t_minus_1+1.0,
    GOV_FISC_BAL = TF_T-GOV_DEM_GOOD,
    GOV_SUP_DEP = HH_DEM_DEP,
    GOV_SUP_MON = MON_DEM_MON,
    GOV_T = TF_T,
    HH_PreTax = GOOD_DEM_GOOD,
    HH_SUP_LAB = GOOD_DEM_GOOD,
    BUS_DEM_MON = BUS_F,
    LAB_DEM_LAB = GOOD_DEM_GOOD,
    LAB_SUP_LAB = BUS_DEM_LAB,
    GOOD_SUP_GOOD = GOOD_DEM_GOOD,
    MON_SUP_MON = MON_DEM_MON,
    DEP_DEM_DEP = HH_DEM_DEP,
    DEP_SUP_DEP = HH_DEM_DEP,
    BUS_DEM_LAB = GOOD_DEM_GOOD.
    Where lagged variables are:
    GOV_LAG_F(t) = GOV_F(k-1),
    GOV_LAG_SUP_DEP(t) = GOV_SUP_DEP(k-1),
    HH_LAG_DEM_DEP(t) = HH_DEM_DEP(k-1),
    HH_LAG_F(t) = HH_F(k-1),
    BUS_LAG_F(t) = BUS_F(k-1),
    DEP_LAG_r(t) = DEP_r(k-1),
    t_minus_1(t) = t(k-1).
    
    Initial Conditions:
    HH_F(0) = 80.0.
    
    Exogenous Variables
    ===================
    GOV_DEM_GOOD,
    DEP_r.

    """
    def __init__(self):
        BaseSolver.__init__(self, ['GOV_F', 'GOV_INTDEP', 'HH_AfterTax', 'HH_AlphaFin', 'HH_AlphaIncome', 'HH_DEM_DEP', 'HH_DEM_GOOD', 'HH_DEM_MON', 'HH_F', 'HH_INTDEP', 'HH_T', 'BUS_F', 'BUS_SUP_GOOD', 'TF_T', 'TF_TaxRate', 'GOOD_DEM_GOOD', 'MON_DEM_MON', 't', 'GOV_FISC_BAL', 'GOV_SUP_DEP', 'GOV_SUP_MON', 'GOV_T', 'HH_PreTax', 'HH_SUP_LAB', 'BUS_DEM_MON', 'LAB_DEM_LAB', 'LAB_SUP_LAB', 'GOOD_SUP_GOOD', 'MON_SUP_MON', 'DEP_DEM_DEP', 'DEP_SUP_DEP', 'BUS_DEM_LAB', 'GOV_DEM_GOOD', 'DEP_r'])
        self.MaxIterations = 400
        self.MaxTime = 100
        # Current time step. Call this "STEP" and not time so that users
        # can create a custom time axis variable.
        self.STEP = 0
        self.PrintIterations = False
        self.Err_Tolerance = 0.001
        self.GOV_F = [0., ]
        self.GOV_INTDEP = [0., ]
        self.HH_AfterTax = [0., ]
        self.HH_AlphaFin = [0.4000, ]
        self.HH_AlphaIncome = [0.6000, ]
        self.HH_DEM_DEP = [0., ]
        self.HH_DEM_GOOD = [0., ]
        self.HH_DEM_MON = [0., ]
        self.HH_F = [80.0, ]
        self.HH_INTDEP = [0., ]
        self.HH_T = [0., ]
        self.BUS_F = [0., ]
        self.BUS_SUP_GOOD = [0., ]
        self.TF_T = [0., ]
        self.TF_TaxRate = [0.2000, ]
        self.GOOD_DEM_GOOD = [0., ]
        self.MON_DEM_MON = [0., ]
        self.t = [0., ]
        self.GOV_FISC_BAL = [0., ]
        self.GOV_SUP_DEP = [0., ]
        self.GOV_SUP_MON = [0., ]
        self.GOV_T = [0., ]
        self.HH_PreTax = [0., ]
        self.HH_SUP_LAB = [0., ]
        self.BUS_DEM_MON = [0., ]
        self.LAB_DEM_LAB = [0., ]
        self.LAB_SUP_LAB = [0., ]
        self.GOOD_SUP_GOOD = [0., ]
        self.MON_SUP_MON = [0., ]
        self.DEP_DEM_DEP = [0., ]
        self.DEP_SUP_DEP = [0., ]
        self.BUS_DEM_LAB = [0., ]
        self.GOV_DEM_GOOD = [20. ,]*105
        self.DEP_r = [0.0 ,]*5 +[0.04 ]*100
        #  Make sure exogenous variables are not longer than time frame
        self.GOV_DEM_GOOD = self.GOV_DEM_GOOD[0:101]
        self.DEP_r = self.DEP_r[0:101]


    @staticmethod
    def Iterator(in_vec):
        GOV_F, GOV_INTDEP, HH_AfterTax, HH_AlphaFin, HH_AlphaIncome, HH_DEM_DEP, HH_DEM_GOOD, HH_DEM_MON, HH_F, HH_INTDEP, HH_T, BUS_F, BUS_SUP_GOOD, TF_T, TF_TaxRate, GOOD_DEM_GOOD, MON_DEM_MON, t, GOV_FISC_BAL, GOV_SUP_DEP, GOV_SUP_MON, GOV_T, HH_PreTax, HH_SUP_LAB, BUS_DEM_MON, LAB_DEM_LAB, LAB_SUP_LAB, GOOD_SUP_GOOD, MON_SUP_MON, DEP_DEM_DEP, DEP_SUP_DEP, BUS_DEM_LAB, GOV_LAG_F, GOV_LAG_SUP_DEP, HH_LAG_DEM_DEP, HH_LAG_F, BUS_LAG_F, DEP_LAG_r, t_minus_1, GOV_DEM_GOOD, DEP_r = in_vec 
        NEW_GOV_F = GOV_LAG_F+TF_T-GOV_DEM_GOOD-GOV_INTDEP
        NEW_GOV_INTDEP = DEP_LAG_r*GOV_LAG_SUP_DEP
        NEW_HH_AfterTax = GOOD_DEM_GOOD-HH_T
        NEW_HH_AlphaFin = 0.4000
        NEW_HH_AlphaIncome = 0.6000
        NEW_HH_DEM_DEP = 0.5*HH_F
        NEW_HH_DEM_GOOD = HH_AlphaIncome*HH_AfterTax+HH_AlphaFin*HH_LAG_F
        NEW_HH_DEM_MON = 0.5*HH_F
        NEW_HH_F = HH_LAG_F-HH_T+GOOD_DEM_GOOD-HH_DEM_GOOD+HH_INTDEP
        NEW_HH_INTDEP = DEP_LAG_r*HH_LAG_DEM_DEP
        NEW_HH_T = TF_TaxRate*GOOD_DEM_GOOD
        NEW_BUS_F = BUS_LAG_F-GOOD_DEM_GOOD+BUS_SUP_GOOD
        NEW_BUS_SUP_GOOD = GOV_DEM_GOOD+HH_DEM_GOOD
        NEW_TF_T = TF_TaxRate*GOOD_DEM_GOOD
        NEW_TF_TaxRate = 0.2000
        NEW_GOOD_DEM_GOOD = GOV_DEM_GOOD+HH_DEM_GOOD
        NEW_MON_DEM_MON = HH_DEM_MON+BUS_F
        NEW_t = t_minus_1+1.0
        NEW_GOV_FISC_BAL = TF_T-GOV_DEM_GOOD
        NEW_GOV_SUP_DEP = HH_DEM_DEP
        NEW_GOV_SUP_MON = MON_DEM_MON
        NEW_GOV_T = TF_T
        NEW_HH_PreTax = GOOD_DEM_GOOD
        NEW_HH_SUP_LAB = GOOD_DEM_GOOD
        NEW_BUS_DEM_MON = BUS_F
        NEW_LAB_DEM_LAB = GOOD_DEM_GOOD
        NEW_LAB_SUP_LAB = BUS_DEM_LAB
        NEW_GOOD_SUP_GOOD = GOOD_DEM_GOOD
        NEW_MON_SUP_MON = MON_DEM_MON
        NEW_DEP_DEM_DEP = HH_DEM_DEP
        NEW_DEP_SUP_DEP = HH_DEM_DEP
        NEW_BUS_DEM_LAB = GOOD_DEM_GOOD
        NEW_GOV_LAG_F = GOV_LAG_F
        NEW_GOV_LAG_SUP_DEP = GOV_LAG_SUP_DEP
        NEW_HH_LAG_DEM_DEP = HH_LAG_DEM_DEP
        NEW_HH_LAG_F = HH_LAG_F
        NEW_BUS_LAG_F = BUS_LAG_F
        NEW_DEP_LAG_r = DEP_LAG_r
        NEW_t_minus_1 = t_minus_1
        NEW_GOV_DEM_GOOD = GOV_DEM_GOOD
        NEW_DEP_r = DEP_r
        return NEW_GOV_F, NEW_GOV_INTDEP, NEW_HH_AfterTax, NEW_HH_AlphaFin, NEW_HH_AlphaIncome, NEW_HH_DEM_DEP, NEW_HH_DEM_GOOD, NEW_HH_DEM_MON, NEW_HH_F, NEW_HH_INTDEP, NEW_HH_T, NEW_BUS_F, NEW_BUS_SUP_GOOD, NEW_TF_T, NEW_TF_TaxRate, NEW_GOOD_DEM_GOOD, NEW_MON_DEM_MON, NEW_t, NEW_GOV_FISC_BAL, NEW_GOV_SUP_DEP, NEW_GOV_SUP_MON, NEW_GOV_T, NEW_HH_PreTax, NEW_HH_SUP_LAB, NEW_BUS_DEM_MON, NEW_LAB_DEM_LAB, NEW_LAB_SUP_LAB, NEW_GOOD_SUP_GOOD, NEW_MON_SUP_MON, NEW_DEP_DEM_DEP, NEW_DEP_SUP_DEP, NEW_BUS_DEM_LAB, NEW_GOV_LAG_F, NEW_GOV_LAG_SUP_DEP, NEW_HH_LAG_DEM_DEP, NEW_HH_LAG_F, NEW_BUS_LAG_F, NEW_DEP_LAG_r, NEW_t_minus_1, NEW_GOV_DEM_GOOD, NEW_DEP_r


    def main(self):
        while self.STEP < self.MaxTime:
            self.RunOneStep()

    def RunOneStep(self):
        self.STEP += 1
        GOV_F = self.GOV_F[-1]
        GOV_INTDEP = self.GOV_INTDEP[-1]
        HH_AfterTax = self.HH_AfterTax[-1]
        HH_AlphaFin = self.HH_AlphaFin[-1]
        HH_AlphaIncome = self.HH_AlphaIncome[-1]
        HH_DEM_DEP = self.HH_DEM_DEP[-1]
        HH_DEM_GOOD = self.HH_DEM_GOOD[-1]
        HH_DEM_MON = self.HH_DEM_MON[-1]
        HH_F = self.HH_F[-1]
        HH_INTDEP = self.HH_INTDEP[-1]
        HH_T = self.HH_T[-1]
        BUS_F = self.BUS_F[-1]
        BUS_SUP_GOOD = self.BUS_SUP_GOOD[-1]
        TF_T = self.TF_T[-1]
        TF_TaxRate = self.TF_TaxRate[-1]
        GOOD_DEM_GOOD = self.GOOD_DEM_GOOD[-1]
        MON_DEM_MON = self.MON_DEM_MON[-1]
        t = self.t[-1]
        GOV_FISC_BAL = self.GOV_FISC_BAL[-1]
        GOV_SUP_DEP = self.GOV_SUP_DEP[-1]
        GOV_SUP_MON = self.GOV_SUP_MON[-1]
        GOV_T = self.GOV_T[-1]
        HH_PreTax = self.HH_PreTax[-1]
        HH_SUP_LAB = self.HH_SUP_LAB[-1]
        BUS_DEM_MON = self.BUS_DEM_MON[-1]
        LAB_DEM_LAB = self.LAB_DEM_LAB[-1]
        LAB_SUP_LAB = self.LAB_SUP_LAB[-1]
        GOOD_SUP_GOOD = self.GOOD_SUP_GOOD[-1]
        MON_SUP_MON = self.MON_SUP_MON[-1]
        DEP_DEM_DEP = self.DEP_DEM_DEP[-1]
        DEP_SUP_DEP = self.DEP_SUP_DEP[-1]
        BUS_DEM_LAB = self.BUS_DEM_LAB[-1]
        GOV_LAG_F = self.GOV_F[self.STEP -1]
        GOV_LAG_SUP_DEP = self.GOV_SUP_DEP[self.STEP -1]
        HH_LAG_DEM_DEP = self.HH_DEM_DEP[self.STEP -1]
        HH_LAG_F = self.HH_F[self.STEP -1]
        BUS_LAG_F = self.BUS_F[self.STEP -1]
        DEP_LAG_r = self.DEP_r[self.STEP -1]
        t_minus_1 = self.t[self.STEP -1]
        GOV_DEM_GOOD = self.GOV_DEM_GOOD[self.STEP]
        DEP_r = self.DEP_r[self.STEP]

        orig_vector = (GOV_F, GOV_INTDEP, HH_AfterTax, HH_AlphaFin, HH_AlphaIncome, HH_DEM_DEP, HH_DEM_GOOD, HH_DEM_MON, HH_F, HH_INTDEP, HH_T, BUS_F, BUS_SUP_GOOD, TF_T, TF_TaxRate, GOOD_DEM_GOOD, MON_DEM_MON, t, GOV_FISC_BAL, GOV_SUP_DEP, GOV_SUP_MON, GOV_T, HH_PreTax, HH_SUP_LAB, BUS_DEM_MON, LAB_DEM_LAB, LAB_SUP_LAB, GOOD_SUP_GOOD, MON_SUP_MON, DEP_DEM_DEP, DEP_SUP_DEP, BUS_DEM_LAB, GOV_LAG_F, GOV_LAG_SUP_DEP, HH_LAG_DEM_DEP, HH_LAG_F, BUS_LAG_F, DEP_LAG_r, t_minus_1, GOV_DEM_GOOD, DEP_r)
        err = 1.
        cnt = 0
        while err > self.Err_Tolerance:
            new_vector = self.Iterator(orig_vector)
            err = self.CalcError(orig_vector, new_vector)
            orig_vector = new_vector
            cnt += 1
            if cnt > self.MaxIterations:
                raise ValueError('No Convergence!')
        if self.PrintIterations:
            pprint(cnt)
        GOV_F = orig_vector[0]
        self.GOV_F.append(GOV_F)
        GOV_INTDEP = orig_vector[1]
        self.GOV_INTDEP.append(GOV_INTDEP)
        HH_AfterTax = orig_vector[2]
        self.HH_AfterTax.append(HH_AfterTax)
        HH_AlphaFin = orig_vector[3]
        self.HH_AlphaFin.append(HH_AlphaFin)
        HH_AlphaIncome = orig_vector[4]
        self.HH_AlphaIncome.append(HH_AlphaIncome)
        HH_DEM_DEP = orig_vector[5]
        self.HH_DEM_DEP.append(HH_DEM_DEP)
        HH_DEM_GOOD = orig_vector[6]
        self.HH_DEM_GOOD.append(HH_DEM_GOOD)
        HH_DEM_MON = orig_vector[7]
        self.HH_DEM_MON.append(HH_DEM_MON)
        HH_F = orig_vector[8]
        self.HH_F.append(HH_F)
        HH_INTDEP = orig_vector[9]
        self.HH_INTDEP.append(HH_INTDEP)
        HH_T = orig_vector[10]
        self.HH_T.append(HH_T)
        BUS_F = orig_vector[11]
        self.BUS_F.append(BUS_F)
        BUS_SUP_GOOD = orig_vector[12]
        self.BUS_SUP_GOOD.append(BUS_SUP_GOOD)
        TF_T = orig_vector[13]
        self.TF_T.append(TF_T)
        TF_TaxRate = orig_vector[14]
        self.TF_TaxRate.append(TF_TaxRate)
        GOOD_DEM_GOOD = orig_vector[15]
        self.GOOD_DEM_GOOD.append(GOOD_DEM_GOOD)
        MON_DEM_MON = orig_vector[16]
        self.MON_DEM_MON.append(MON_DEM_MON)
        t = orig_vector[17]
        self.t.append(t)
        GOV_FISC_BAL = orig_vector[18]
        self.GOV_FISC_BAL.append(GOV_FISC_BAL)
        GOV_SUP_DEP = orig_vector[19]
        self.GOV_SUP_DEP.append(GOV_SUP_DEP)
        GOV_SUP_MON = orig_vector[20]
        self.GOV_SUP_MON.append(GOV_SUP_MON)
        GOV_T = orig_vector[21]
        self.GOV_T.append(GOV_T)
        HH_PreTax = orig_vector[22]
        self.HH_PreTax.append(HH_PreTax)
        HH_SUP_LAB = orig_vector[23]
        self.HH_SUP_LAB.append(HH_SUP_LAB)
        BUS_DEM_MON = orig_vector[24]
        self.BUS_DEM_MON.append(BUS_DEM_MON)
        LAB_DEM_LAB = orig_vector[25]
        self.LAB_DEM_LAB.append(LAB_DEM_LAB)
        LAB_SUP_LAB = orig_vector[26]
        self.LAB_SUP_LAB.append(LAB_SUP_LAB)
        GOOD_SUP_GOOD = orig_vector[27]
        self.GOOD_SUP_GOOD.append(GOOD_SUP_GOOD)
        MON_SUP_MON = orig_vector[28]
        self.MON_SUP_MON.append(MON_SUP_MON)
        DEP_DEM_DEP = orig_vector[29]
        self.DEP_DEM_DEP.append(DEP_DEM_DEP)
        DEP_SUP_DEP = orig_vector[30]
        self.DEP_SUP_DEP.append(DEP_SUP_DEP)
        BUS_DEM_LAB = orig_vector[31]
        self.BUS_DEM_LAB.append(BUS_DEM_LAB)


    @staticmethod
    def CalcError(vec1, vec2):
        err = 0.
        for val1, val2 in zip(vec1, vec2):
            err += abs(val1 - val2)
        return err

if __name__ == '__main__':
    obj = SFCModel()
    obj.main()
