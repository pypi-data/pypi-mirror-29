<?xml version="1.0" encoding="UTF-8"?>
<contents>
  <reference>
    <title>to inner classes</title>
    <abstract>This file contains the declarations for inner classes handling a relationship</abstract>
    <author>Mel Viso</author>
    <date>10/2016</date>
    <package>standard</package>
    <digital-sign/>
  </reference>
  <definitions>
    <def>arg=p{toRel._name}</def>
    <def>toKey={toRel._name}</def>
    <def>fromKey={fromRel._name}</def>
    <def>fromPtr={fromRel._fromPtr.prefixed_name}</def>
    <def>counter={toRel._counter.prefixed_name}</def>
    <def>classTo={TO._name}</def>
  </definitions>
  <classes>
	<class name="{toKey}Iterator" access="public" prefix="_">
		<types>
			 <type name="filter" definition="typedef bool ({TO._name}::*filter)() const;" note="Type for functions filtering iteration" />
		</types>
		<members>
			<member name="p{fromKey}" type="FROM" access="private" ptr="True" />
			<member name="p{toKey}" type="TO" access="private" ptr="True" />
			<member name="filterMethod" type="filter" access="private" />
		</members>
		<ctors>
			<ctor access="public" explicit="True" autoargs="False">
				<args>
					<arg name="p{fromKey}" type="FROM" ptr="True" />
					<arg name="p{toKey}" type="TO" ptr="True" default="nullptr" />
				</args>
				<init>
: _p{fromKey}(p{fromKey})
, _p{toKey}(p{toKey})
, _filterMethod(nullptr)
				</init>
				<content filter="{transactional:False}"/>
			</ctor>
			<ctor access="public" explicit="True" autoargs="False">
				<args>
					<arg name="p{fromKey}" type="FROM" ptr="True" />
					<arg name="filter_func" type="filter" ptr="False" default="nullptr" />
				</args>
				<init>
: _p{fromKey}(p{fromKey})
, _p{toKey}(nullptr)
, _filterMethod(filter_func)
				</init>
				<content filter="{transactional:False}"/>
			</ctor>
		</ctors>
		<methods>
			<method name="operator ++" access="public" type="TO" ptr="True">
				<args/>
				<content filter="{transactional:False}">
if(_p{toKey} == nullptr)
{{
	_p{toKey} = _p{fromKey}-&gt;GetFirst{toKey}();
}}
else
{{
	_p{toKey} = _p{fromKey}-&gt;GetNext{toKey}(_p{toKey});
}}
if( _filterMethod != nullptr )
{{
	while( _p{toKey} != nullptr &amp;&amp; ! (_p{toKey}-&gt;*_filterMethod)() )
	{{
		_p{toKey} = _p{fromKey}-&gt;GetNext{toKey}(_p{toKey});
	}}
}}
return _p{toKey};
				</content>
			</method>
			<method name="operator --" access="public" type="TO" ptr="True">
				<args/>
				<content filter="{transactional:False}">
if(_p{toKey} == nullptr)
{{
	_p{toKey} = _p{fromKey}-&gt;GetLast{toKey}();
}}
else
{{
	_p{toKey} = _p{fromKey}->GetPrev{toKey}(_p{toKey});
}}
if( _filterMethod != nullptr )
{{
	while( _p{toKey} != nullptr &amp;&amp; !(_p{toKey}-&gt;*_filterMethod)() )
	{{
		_p{toKey} = _p{fromKey}-&gt;GetPrev{toKey}(_p{toKey});
	}}
}}
return _p{toKey};
				</content>
			</method>
			<method name="operator {TO._name}*" access="public" inline="True" type='' >
				<args/>
				<content filter="{transactional:False}">
return _p{toKey};
				</content>
			</method>
			<method name="operator ->" access="public" inline="True" type="TO" ptr="True" >
				<args/>
				<content filter="{transactional:False}">
return _p{toKey};
				</content>
			</method>
			<method name="Get" access="public" type="TO" inline="True" ptr="True" >
				<args/>
				<content filter="{transactional:False}">
return _p{toKey};
				</content>
			</method>
			<method name="Reset" access="public" type="void"  >
				<args/>
				<content filter="{transactional:False}">
_p{toKey} = nullptr;
				</content>
			</method>
			<method name="IsLast" access="public" type="bool"  >
				<args/>
				<content filter="{transactional:False}">
if( _p{toKey} == nullptr &amp;&amp; _p{fromKey}-&gt;GetFirst{toKey}() == nullptr )
{{
	return true;
}}
else if( _p{fromKey}-&gt;GetNext{toKey}(_p{toKey}) == nullptr )
{{
	return true;
}}
else
{{
	return false;
}}
				</content>
			</method>
			<method name="IsFirst" access="public" type="bool"  >
				<args/>
				<content filter="{transactional:False}">
if( _p{toKey} == nullptr &amp;&amp; _p{fromKey}-&gt;GetLast{toKey}() == nullptr )
{{
	return true;
}}
else if( _p{fromKey}-&gt;GetPrev{toKey}(_p{toKey}) == nullptr )
{{
	return true;
}}
else
{{
	return false;
}}
				</content>
			</method>
		</methods>
		<dtor virtual="True">
			<content filter="{transactional:False}"/>
		</dtor>
	</class>
  </classes>
</contents>
