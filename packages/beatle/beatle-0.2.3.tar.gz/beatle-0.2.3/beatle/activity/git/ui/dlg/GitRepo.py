"""Subclass of NewGitRepo, which is generated by wxFormBuilder."""

import wx

from beatle.lib import wxx
from beatle.app import resources as rc
from beatle.activity.git.ui import ui


# Implementing NewGitRepo
class GitRepoDialog(ui.NewGitRepo):
    """
    This dialog allows to create a new git repository.

    """
    @wxx.SetInfo(__doc__)
    def __init__(self, parent, container):
        """Initialize dialog"""
        super(GitRepoDialog, self).__init__(parent)
        self.container = container
        icon = wx.EmptyIcon()
        icon.CopyFromBitmap(rc.GetBitmap("git"))
        self.SetIcon(icon)

    def get_kwargs(self):
        """Returns kwargs dictionary suitable for object creation"""
        kwargs = {}
        kwargs['parent'] = self.container
        kwargs['uri'] = self._path
        kwargs['local'] = True
        return kwargs

    def Validate(self):
        """Validate the dialog"""
        self._path = self.m_dirPicker2.GetPath().strip()
        if len(self._path) == 0:
            wx.MessageBox("Git directory must be specified", "Error",
                wx.OK | wx.CENTER | wx.ICON_ERROR, self)
            return False
        #really check git repo
        import git
        try:
            git.Repo(self._path)
            wx.MessageBox("The specified dir is already a Git repository.", "Error",
                    wx.OK | wx.CENTER | wx.ICON_ERROR, self)
            return False
        except git.exc.NoSuchPathError:
            wx.MessageBox("The specified path is invalid", "Error",
                wx.OK | wx.CENTER | wx.ICON_ERROR, self)
            return False
        except git.exc.InvalidGitRepositoryError:
            pass
        #create repo
        try:
            repo = git.Repo.init(self._path)
            repo.index.commit("initial commit")
        except:
            wx.MessageBox("Failed while initializing git repository", "Error",
                wx.OK | wx.CENTER | wx.ICON_ERROR, self)
            return False
        return True

    def OnCancel(self, event):
        """cancel event handler"""
        self.EndModal(wx.ID_CANCEL)

    def OnOK(self, event):
        """Handle OnOk"""
        if self.Validate():
            self.EndModal(wx.ID_OK)

