# ./pyone/bindings/__init__.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:eaf4ddc80a6b64a72ab0e6018da7e2b8d8784117
# Generated 2018-02-17 01:11:26.532020 by PyXB version 1.2.6 using Python 2.7.14.final.0
# Namespace http://opennebula.org/XMLSchema

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:181a89ca-1377-11e8-a81a-1002b50d9337')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://opennebula.org/XMLSchema', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}HISTORY uses Python identifier HISTORY
    __HISTORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HISTORY'), 'HISTORY', '__httpopennebula_orgXMLSchema_CTD_ANON_httpopennebula_orgXMLSchemaHISTORY', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 13, 2), )

    
    HISTORY = property(__HISTORY.value, __HISTORY.set, None, None)

    _ElementMap.update({
        __HISTORY.name() : __HISTORY
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 14, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OID uses Python identifier OID
    __OID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OID'), 'OID', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaOID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 16, 8), )

    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SEQ uses Python identifier SEQ
    __SEQ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SEQ'), 'SEQ', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaSEQ', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 17, 8), )

    
    SEQ = property(__SEQ.value, __SEQ.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}HOSTNAME uses Python identifier HOSTNAME
    __HOSTNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HOSTNAME'), 'HOSTNAME', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaHOSTNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 18, 8), )

    
    HOSTNAME = property(__HOSTNAME.value, __HOSTNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}HID uses Python identifier HID
    __HID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HID'), 'HID', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaHID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 19, 8), )

    
    HID = property(__HID.value, __HID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CID uses Python identifier CID
    __CID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CID'), 'CID', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaCID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 20, 8), )

    
    CID = property(__CID.value, __CID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}STIME uses Python identifier STIME
    __STIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STIME'), 'STIME', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaSTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 21, 8), )

    
    STIME = property(__STIME.value, __STIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ETIME uses Python identifier ETIME
    __ETIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ETIME'), 'ETIME', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaETIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 22, 8), )

    
    ETIME = property(__ETIME.value, __ETIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM_MAD uses Python identifier VM_MAD
    __VM_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM_MAD'), 'VM_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaVM_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 23, 8), )

    
    VM_MAD = property(__VM_MAD.value, __VM_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TM_MAD uses Python identifier TM_MAD
    __TM_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TM_MAD'), 'TM_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaTM_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 24, 8), )

    
    TM_MAD = property(__TM_MAD.value, __TM_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DS_ID uses Python identifier DS_ID
    __DS_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DS_ID'), 'DS_ID', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaDS_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 25, 8), )

    
    DS_ID = property(__DS_ID.value, __DS_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PSTIME uses Python identifier PSTIME
    __PSTIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PSTIME'), 'PSTIME', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaPSTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 26, 8), )

    
    PSTIME = property(__PSTIME.value, __PSTIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PETIME uses Python identifier PETIME
    __PETIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PETIME'), 'PETIME', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaPETIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 27, 8), )

    
    PETIME = property(__PETIME.value, __PETIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RSTIME uses Python identifier RSTIME
    __RSTIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RSTIME'), 'RSTIME', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaRSTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 28, 8), )

    
    RSTIME = property(__RSTIME.value, __RSTIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RETIME uses Python identifier RETIME
    __RETIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RETIME'), 'RETIME', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaRETIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 29, 8), )

    
    RETIME = property(__RETIME.value, __RETIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ESTIME uses Python identifier ESTIME
    __ESTIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ESTIME'), 'ESTIME', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaESTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 30, 8), )

    
    ESTIME = property(__ESTIME.value, __ESTIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}EETIME uses Python identifier EETIME
    __EETIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EETIME'), 'EETIME', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaEETIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 31, 8), )

    
    EETIME = property(__EETIME.value, __EETIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ACTION uses Python identifier ACTION
    __ACTION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ACTION'), 'ACTION', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaACTION', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 80, 8), )

    
    ACTION = property(__ACTION.value, __ACTION.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 81, 8), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 82, 8), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}REQUEST_ID uses Python identifier REQUEST_ID
    __REQUEST_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'REQUEST_ID'), 'REQUEST_ID', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaREQUEST_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 83, 8), )

    
    REQUEST_ID = property(__REQUEST_ID.value, __REQUEST_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM uses Python identifier VM
    __VM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM'), 'VM', '__httpopennebula_orgXMLSchema_CTD_ANON__httpopennebula_orgXMLSchemaVM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 84, 8), )

    
    VM = property(__VM.value, __VM.set, None, None)

    _ElementMap.update({
        __OID.name() : __OID,
        __SEQ.name() : __SEQ,
        __HOSTNAME.name() : __HOSTNAME,
        __HID.name() : __HID,
        __CID.name() : __CID,
        __STIME.name() : __STIME,
        __ETIME.name() : __ETIME,
        __VM_MAD.name() : __VM_MAD,
        __TM_MAD.name() : __TM_MAD,
        __DS_ID.name() : __DS_ID,
        __PSTIME.name() : __PSTIME,
        __PETIME.name() : __PETIME,
        __RSTIME.name() : __RSTIME,
        __RETIME.name() : __RETIME,
        __ESTIME.name() : __ESTIME,
        __EETIME.name() : __EETIME,
        __ACTION.name() : __ACTION,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __REQUEST_ID.name() : __REQUEST_ID,
        __VM.name() : __VM
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 85, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 87, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 88, 14), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 89, 14), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UNAME uses Python identifier UNAME
    __UNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), 'UNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaUNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 90, 14), )

    
    UNAME = property(__UNAME.value, __UNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 91, 14), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 92, 14), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PERMISSIONS uses Python identifier PERMISSIONS
    __PERMISSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), 'PERMISSIONS', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaPERMISSIONS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 93, 14), )

    
    PERMISSIONS = property(__PERMISSIONS.value, __PERMISSIONS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LAST_POLL uses Python identifier LAST_POLL
    __LAST_POLL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LAST_POLL'), 'LAST_POLL', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaLAST_POLL', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 108, 14), )

    
    LAST_POLL = property(__LAST_POLL.value, __LAST_POLL.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}STATE uses Python identifier STATE
    __STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STATE'), 'STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaSTATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 113, 14), )

    
    STATE = property(__STATE.value, __STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LCM_STATE uses Python identifier LCM_STATE
    __LCM_STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LCM_STATE'), 'LCM_STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaLCM_STATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 119, 14), )

    
    LCM_STATE = property(__LCM_STATE.value, __LCM_STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PREV_STATE uses Python identifier PREV_STATE
    __PREV_STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PREV_STATE'), 'PREV_STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaPREV_STATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 120, 14), )

    
    PREV_STATE = property(__PREV_STATE.value, __PREV_STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PREV_LCM_STATE uses Python identifier PREV_LCM_STATE
    __PREV_LCM_STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PREV_LCM_STATE'), 'PREV_LCM_STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaPREV_LCM_STATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 121, 14), )

    
    PREV_LCM_STATE = property(__PREV_LCM_STATE.value, __PREV_LCM_STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RESCHED uses Python identifier RESCHED
    __RESCHED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RESCHED'), 'RESCHED', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaRESCHED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 122, 14), )

    
    RESCHED = property(__RESCHED.value, __RESCHED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}STIME uses Python identifier STIME
    __STIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STIME'), 'STIME', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaSTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 123, 14), )

    
    STIME = property(__STIME.value, __STIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ETIME uses Python identifier ETIME
    __ETIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ETIME'), 'ETIME', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaETIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 124, 14), )

    
    ETIME = property(__ETIME.value, __ETIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DEPLOY_ID uses Python identifier DEPLOY_ID
    __DEPLOY_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DEPLOY_ID'), 'DEPLOY_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaDEPLOY_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 125, 14), )

    
    DEPLOY_ID = property(__DEPLOY_ID.value, __DEPLOY_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MONITORING uses Python identifier MONITORING
    __MONITORING = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MONITORING'), 'MONITORING', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaMONITORING', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 126, 14), )

    
    MONITORING = property(__MONITORING.value, __MONITORING.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 145, 14), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USER_TEMPLATE uses Python identifier USER_TEMPLATE
    __USER_TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USER_TEMPLATE'), 'USER_TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaUSER_TEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 146, 14), )

    
    USER_TEMPLATE = property(__USER_TEMPLATE.value, __USER_TEMPLATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}HISTORY_RECORDS uses Python identifier HISTORY_RECORDS
    __HISTORY_RECORDS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HISTORY_RECORDS'), 'HISTORY_RECORDS', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaHISTORY_RECORDS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 147, 14), )

    
    HISTORY_RECORDS = property(__HISTORY_RECORDS.value, __HISTORY_RECORDS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SNAPSHOTS uses Python identifier SNAPSHOTS
    __SNAPSHOTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOTS'), 'SNAPSHOTS', '__httpopennebula_orgXMLSchema_CTD_ANON_2_httpopennebula_orgXMLSchemaSNAPSHOTS', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 149, 14), )

    
    SNAPSHOTS = property(__SNAPSHOTS.value, __SNAPSHOTS.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __UNAME.name() : __UNAME,
        __GNAME.name() : __GNAME,
        __NAME.name() : __NAME,
        __PERMISSIONS.name() : __PERMISSIONS,
        __LAST_POLL.name() : __LAST_POLL,
        __STATE.name() : __STATE,
        __LCM_STATE.name() : __LCM_STATE,
        __PREV_STATE.name() : __PREV_STATE,
        __PREV_LCM_STATE.name() : __PREV_LCM_STATE,
        __RESCHED.name() : __RESCHED,
        __STIME.name() : __STIME,
        __ETIME.name() : __ETIME,
        __DEPLOY_ID.name() : __DEPLOY_ID,
        __MONITORING.name() : __MONITORING,
        __TEMPLATE.name() : __TEMPLATE,
        __USER_TEMPLATE.name() : __USER_TEMPLATE,
        __HISTORY_RECORDS.name() : __HISTORY_RECORDS,
        __SNAPSHOTS.name() : __SNAPSHOTS
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 94, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OWNER_U uses Python identifier OWNER_U
    __OWNER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), 'OWNER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_3_httpopennebula_orgXMLSchemaOWNER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 96, 20), )

    
    OWNER_U = property(__OWNER_U.value, __OWNER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_M uses Python identifier OWNER_M
    __OWNER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), 'OWNER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_3_httpopennebula_orgXMLSchemaOWNER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 97, 20), )

    
    OWNER_M = property(__OWNER_M.value, __OWNER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_A uses Python identifier OWNER_A
    __OWNER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), 'OWNER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_3_httpopennebula_orgXMLSchemaOWNER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 98, 20), )

    
    OWNER_A = property(__OWNER_A.value, __OWNER_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_U uses Python identifier GROUP_U
    __GROUP_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), 'GROUP_U', '__httpopennebula_orgXMLSchema_CTD_ANON_3_httpopennebula_orgXMLSchemaGROUP_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 99, 20), )

    
    GROUP_U = property(__GROUP_U.value, __GROUP_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_M uses Python identifier GROUP_M
    __GROUP_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), 'GROUP_M', '__httpopennebula_orgXMLSchema_CTD_ANON_3_httpopennebula_orgXMLSchemaGROUP_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 100, 20), )

    
    GROUP_M = property(__GROUP_M.value, __GROUP_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_A uses Python identifier GROUP_A
    __GROUP_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), 'GROUP_A', '__httpopennebula_orgXMLSchema_CTD_ANON_3_httpopennebula_orgXMLSchemaGROUP_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 101, 20), )

    
    GROUP_A = property(__GROUP_A.value, __GROUP_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_U uses Python identifier OTHER_U
    __OTHER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), 'OTHER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_3_httpopennebula_orgXMLSchemaOTHER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 102, 20), )

    
    OTHER_U = property(__OTHER_U.value, __OTHER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_M uses Python identifier OTHER_M
    __OTHER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), 'OTHER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_3_httpopennebula_orgXMLSchemaOTHER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 103, 20), )

    
    OTHER_M = property(__OTHER_M.value, __OTHER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_A uses Python identifier OTHER_A
    __OTHER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), 'OTHER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_3_httpopennebula_orgXMLSchemaOTHER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 104, 20), )

    
    OTHER_A = property(__OTHER_A.value, __OTHER_A.set, None, None)

    _ElementMap.update({
        __OWNER_U.name() : __OWNER_U,
        __OWNER_M.name() : __OWNER_M,
        __OWNER_A.name() : __OWNER_A,
        __GROUP_U.name() : __GROUP_U,
        __GROUP_M.name() : __GROUP_M,
        __GROUP_A.name() : __GROUP_A,
        __OTHER_U.name() : __OTHER_U,
        __OTHER_M.name() : __OTHER_M,
        __OTHER_A.name() : __OTHER_A
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 150, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DISK_ID uses Python identifier DISK_ID
    __DISK_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DISK_ID'), 'DISK_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_4_httpopennebula_orgXMLSchemaDISK_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 152, 20), )

    
    DISK_ID = property(__DISK_ID.value, __DISK_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SNAPSHOT uses Python identifier SNAPSHOT
    __SNAPSHOT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOT'), 'SNAPSHOT', '__httpopennebula_orgXMLSchema_CTD_ANON_4_httpopennebula_orgXMLSchemaSNAPSHOT', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 153, 20), )

    
    SNAPSHOT = property(__SNAPSHOT.value, __SNAPSHOT.set, None, None)

    _ElementMap.update({
        __DISK_ID.name() : __DISK_ID,
        __SNAPSHOT.name() : __SNAPSHOT
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 154, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ACTIVE uses Python identifier ACTIVE
    __ACTIVE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ACTIVE'), 'ACTIVE', '__httpopennebula_orgXMLSchema_CTD_ANON_5_httpopennebula_orgXMLSchemaACTIVE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 156, 26), )

    
    ACTIVE = property(__ACTIVE.value, __ACTIVE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CHILDREN uses Python identifier CHILDREN
    __CHILDREN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CHILDREN'), 'CHILDREN', '__httpopennebula_orgXMLSchema_CTD_ANON_5_httpopennebula_orgXMLSchemaCHILDREN', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 157, 26), )

    
    CHILDREN = property(__CHILDREN.value, __CHILDREN.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATE uses Python identifier DATE
    __DATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATE'), 'DATE', '__httpopennebula_orgXMLSchema_CTD_ANON_5_httpopennebula_orgXMLSchemaDATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 158, 26), )

    
    DATE = property(__DATE.value, __DATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_5_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 159, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_5_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 160, 26), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PARENT uses Python identifier PARENT
    __PARENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PARENT'), 'PARENT', '__httpopennebula_orgXMLSchema_CTD_ANON_5_httpopennebula_orgXMLSchemaPARENT', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 161, 26), )

    
    PARENT = property(__PARENT.value, __PARENT.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_5_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 162, 26), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    _ElementMap.update({
        __ACTIVE.name() : __ACTIVE,
        __CHILDREN.name() : __CHILDREN,
        __DATE.name() : __DATE,
        __ID.name() : __ID,
        __NAME.name() : __NAME,
        __PARENT.name() : __PARENT,
        __SIZE.name() : __SIZE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_6_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 7, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_6_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 8, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}HOSTS uses Python identifier HOSTS
    __HOSTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HOSTS'), 'HOSTS', '__httpopennebula_orgXMLSchema_CTD_ANON_6_httpopennebula_orgXMLSchemaHOSTS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 9, 8), )

    
    HOSTS = property(__HOSTS.value, __HOSTS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATASTORES uses Python identifier DATASTORES
    __DATASTORES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORES'), 'DATASTORES', '__httpopennebula_orgXMLSchema_CTD_ANON_6_httpopennebula_orgXMLSchemaDATASTORES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 16, 8), )

    
    DATASTORES = property(__DATASTORES.value, __DATASTORES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VNETS uses Python identifier VNETS
    __VNETS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VNETS'), 'VNETS', '__httpopennebula_orgXMLSchema_CTD_ANON_6_httpopennebula_orgXMLSchemaVNETS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 23, 8), )

    
    VNETS = property(__VNETS.value, __VNETS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_6_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 30, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __NAME.name() : __NAME,
        __HOSTS.name() : __HOSTS,
        __DATASTORES.name() : __DATASTORES,
        __VNETS.name() : __VNETS,
        __TEMPLATE.name() : __TEMPLATE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 10, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_7_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 12, 18), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_7 = CTD_ANON_7


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 17, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_8_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 19, 18), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_8 = CTD_ANON_8


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 24, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_9_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 26, 18), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_9 = CTD_ANON_9


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster_pool.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}CLUSTER uses Python identifier CLUSTER
    __CLUSTER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER'), 'CLUSTER', '__httpopennebula_orgXMLSchema_CTD_ANON_10_httpopennebula_orgXMLSchemaCLUSTER', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 4, 2), )

    
    CLUSTER = property(__CLUSTER.value, __CLUSTER.set, None, None)

    _ElementMap.update({
        __CLUSTER.name() : __CLUSTER
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_10 = CTD_ANON_10


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 6, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 7, 8), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 8, 8), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UNAME uses Python identifier UNAME
    __UNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), 'UNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaUNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 9, 8), )

    
    UNAME = property(__UNAME.value, __UNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 10, 8), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 11, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PERMISSIONS uses Python identifier PERMISSIONS
    __PERMISSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), 'PERMISSIONS', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaPERMISSIONS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 12, 8), )

    
    PERMISSIONS = property(__PERMISSIONS.value, __PERMISSIONS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DS_MAD uses Python identifier DS_MAD
    __DS_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DS_MAD'), 'DS_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaDS_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 27, 8), )

    
    DS_MAD = property(__DS_MAD.value, __DS_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TM_MAD uses Python identifier TM_MAD
    __TM_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TM_MAD'), 'TM_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaTM_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 28, 8), )

    
    TM_MAD = property(__TM_MAD.value, __TM_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}BASE_PATH uses Python identifier BASE_PATH
    __BASE_PATH = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BASE_PATH'), 'BASE_PATH', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaBASE_PATH', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 29, 8), )

    
    BASE_PATH = property(__BASE_PATH.value, __BASE_PATH.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TYPE'), 'TYPE', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaTYPE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 30, 8), )

    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DISK_TYPE uses Python identifier DISK_TYPE
    __DISK_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DISK_TYPE'), 'DISK_TYPE', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaDISK_TYPE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 31, 8), )

    
    DISK_TYPE = property(__DISK_TYPE.value, __DISK_TYPE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}STATE uses Python identifier STATE
    __STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STATE'), 'STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaSTATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 32, 8), )

    
    STATE = property(__STATE.value, __STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CLUSTERS uses Python identifier CLUSTERS
    __CLUSTERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS'), 'CLUSTERS', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaCLUSTERS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 33, 8), )

    
    CLUSTERS = property(__CLUSTERS.value, __CLUSTERS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TOTAL_MB uses Python identifier TOTAL_MB
    __TOTAL_MB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MB'), 'TOTAL_MB', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaTOTAL_MB', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 40, 8), )

    
    TOTAL_MB = property(__TOTAL_MB.value, __TOTAL_MB.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}FREE_MB uses Python identifier FREE_MB
    __FREE_MB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FREE_MB'), 'FREE_MB', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaFREE_MB', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 41, 8), )

    
    FREE_MB = property(__FREE_MB.value, __FREE_MB.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USED_MB uses Python identifier USED_MB
    __USED_MB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USED_MB'), 'USED_MB', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaUSED_MB', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 42, 8), )

    
    USED_MB = property(__USED_MB.value, __USED_MB.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES uses Python identifier IMAGES
    __IMAGES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), 'IMAGES', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaIMAGES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 43, 8), )

    
    IMAGES = property(__IMAGES.value, __IMAGES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_11_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 50, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __UNAME.name() : __UNAME,
        __GNAME.name() : __GNAME,
        __NAME.name() : __NAME,
        __PERMISSIONS.name() : __PERMISSIONS,
        __DS_MAD.name() : __DS_MAD,
        __TM_MAD.name() : __TM_MAD,
        __BASE_PATH.name() : __BASE_PATH,
        __TYPE.name() : __TYPE,
        __DISK_TYPE.name() : __DISK_TYPE,
        __STATE.name() : __STATE,
        __CLUSTERS.name() : __CLUSTERS,
        __TOTAL_MB.name() : __TOTAL_MB,
        __FREE_MB.name() : __FREE_MB,
        __USED_MB.name() : __USED_MB,
        __IMAGES.name() : __IMAGES,
        __TEMPLATE.name() : __TEMPLATE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_11 = CTD_ANON_11


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 13, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OWNER_U uses Python identifier OWNER_U
    __OWNER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), 'OWNER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_12_httpopennebula_orgXMLSchemaOWNER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 15, 14), )

    
    OWNER_U = property(__OWNER_U.value, __OWNER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_M uses Python identifier OWNER_M
    __OWNER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), 'OWNER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_12_httpopennebula_orgXMLSchemaOWNER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 16, 14), )

    
    OWNER_M = property(__OWNER_M.value, __OWNER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_A uses Python identifier OWNER_A
    __OWNER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), 'OWNER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_12_httpopennebula_orgXMLSchemaOWNER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 17, 14), )

    
    OWNER_A = property(__OWNER_A.value, __OWNER_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_U uses Python identifier GROUP_U
    __GROUP_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), 'GROUP_U', '__httpopennebula_orgXMLSchema_CTD_ANON_12_httpopennebula_orgXMLSchemaGROUP_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 18, 14), )

    
    GROUP_U = property(__GROUP_U.value, __GROUP_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_M uses Python identifier GROUP_M
    __GROUP_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), 'GROUP_M', '__httpopennebula_orgXMLSchema_CTD_ANON_12_httpopennebula_orgXMLSchemaGROUP_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 19, 14), )

    
    GROUP_M = property(__GROUP_M.value, __GROUP_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_A uses Python identifier GROUP_A
    __GROUP_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), 'GROUP_A', '__httpopennebula_orgXMLSchema_CTD_ANON_12_httpopennebula_orgXMLSchemaGROUP_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 20, 14), )

    
    GROUP_A = property(__GROUP_A.value, __GROUP_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_U uses Python identifier OTHER_U
    __OTHER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), 'OTHER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_12_httpopennebula_orgXMLSchemaOTHER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 21, 14), )

    
    OTHER_U = property(__OTHER_U.value, __OTHER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_M uses Python identifier OTHER_M
    __OTHER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), 'OTHER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_12_httpopennebula_orgXMLSchemaOTHER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 22, 14), )

    
    OTHER_M = property(__OTHER_M.value, __OTHER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_A uses Python identifier OTHER_A
    __OTHER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), 'OTHER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_12_httpopennebula_orgXMLSchemaOTHER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 23, 14), )

    
    OTHER_A = property(__OTHER_A.value, __OTHER_A.set, None, None)

    _ElementMap.update({
        __OWNER_U.name() : __OWNER_U,
        __OWNER_M.name() : __OWNER_M,
        __OWNER_A.name() : __OWNER_A,
        __GROUP_U.name() : __GROUP_U,
        __GROUP_M.name() : __GROUP_M,
        __GROUP_A.name() : __GROUP_A,
        __OTHER_U.name() : __OTHER_U,
        __OTHER_M.name() : __OTHER_M,
        __OTHER_A.name() : __OTHER_A
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_12 = CTD_ANON_12


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 34, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_13_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 36, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_13 = CTD_ANON_13


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 44, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_14_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 46, 18), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_14 = CTD_ANON_14


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore_pool.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE uses Python identifier DATASTORE
    __DATASTORE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), 'DATASTORE', '__httpopennebula_orgXMLSchema_CTD_ANON_15_httpopennebula_orgXMLSchemaDATASTORE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 3, 2), )

    
    DATASTORE = property(__DATASTORE.value, __DATASTORE.set, None, None)

    _ElementMap.update({
        __DATASTORE.name() : __DATASTORE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_15 = CTD_ANON_15


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_16_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 7, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_16_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 8, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_16_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 9, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USERS uses Python identifier USERS
    __USERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USERS'), 'USERS', '__httpopennebula_orgXMLSchema_CTD_ANON_16_httpopennebula_orgXMLSchemaUSERS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 10, 8), )

    
    USERS = property(__USERS.value, __USERS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ADMINS uses Python identifier ADMINS
    __ADMINS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ADMINS'), 'ADMINS', '__httpopennebula_orgXMLSchema_CTD_ANON_16_httpopennebula_orgXMLSchemaADMINS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 17, 8), )

    
    ADMINS = property(__ADMINS.value, __ADMINS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATASTORE_QUOTA uses Python identifier DATASTORE_QUOTA
    __DATASTORE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), 'DATASTORE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_16_httpopennebula_orgXMLSchemaDATASTORE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 24, 8), )

    
    DATASTORE_QUOTA = property(__DATASTORE_QUOTA.value, __DATASTORE_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NETWORK_QUOTA uses Python identifier NETWORK_QUOTA
    __NETWORK_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), 'NETWORK_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_16_httpopennebula_orgXMLSchemaNETWORK_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 41, 8), )

    
    NETWORK_QUOTA = property(__NETWORK_QUOTA.value, __NETWORK_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM_QUOTA uses Python identifier VM_QUOTA
    __VM_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), 'VM_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_16_httpopennebula_orgXMLSchemaVM_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 56, 8), )

    
    VM_QUOTA = property(__VM_QUOTA.value, __VM_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGE_QUOTA uses Python identifier IMAGE_QUOTA
    __IMAGE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), 'IMAGE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_16_httpopennebula_orgXMLSchemaIMAGE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 76, 8), )

    
    IMAGE_QUOTA = property(__IMAGE_QUOTA.value, __IMAGE_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DEFAULT_GROUP_QUOTAS uses Python identifier DEFAULT_GROUP_QUOTAS
    __DEFAULT_GROUP_QUOTAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_GROUP_QUOTAS'), 'DEFAULT_GROUP_QUOTAS', '__httpopennebula_orgXMLSchema_CTD_ANON_16_httpopennebula_orgXMLSchemaDEFAULT_GROUP_QUOTAS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 91, 8), )

    
    DEFAULT_GROUP_QUOTAS = property(__DEFAULT_GROUP_QUOTAS.value, __DEFAULT_GROUP_QUOTAS.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __NAME.name() : __NAME,
        __TEMPLATE.name() : __TEMPLATE,
        __USERS.name() : __USERS,
        __ADMINS.name() : __ADMINS,
        __DATASTORE_QUOTA.name() : __DATASTORE_QUOTA,
        __NETWORK_QUOTA.name() : __NETWORK_QUOTA,
        __VM_QUOTA.name() : __VM_QUOTA,
        __IMAGE_QUOTA.name() : __IMAGE_QUOTA,
        __DEFAULT_GROUP_QUOTAS.name() : __DEFAULT_GROUP_QUOTAS
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_16 = CTD_ANON_16


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 11, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_17_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 13, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_17 = CTD_ANON_17


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 18, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_18_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 20, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_18 = CTD_ANON_18


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 25, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE uses Python identifier DATASTORE
    __DATASTORE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), 'DATASTORE', '__httpopennebula_orgXMLSchema_CTD_ANON_19_httpopennebula_orgXMLSchemaDATASTORE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 27, 14), )

    
    DATASTORE = property(__DATASTORE.value, __DATASTORE.set, None, None)

    _ElementMap.update({
        __DATASTORE.name() : __DATASTORE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_19 = CTD_ANON_19


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 28, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_20_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 30, 18), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES uses Python identifier IMAGES
    __IMAGES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), 'IMAGES', '__httpopennebula_orgXMLSchema_CTD_ANON_20_httpopennebula_orgXMLSchemaIMAGES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 31, 18), )

    
    IMAGES = property(__IMAGES.value, __IMAGES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES_USED uses Python identifier IMAGES_USED
    __IMAGES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), 'IMAGES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_20_httpopennebula_orgXMLSchemaIMAGES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 32, 18), )

    
    IMAGES_USED = property(__IMAGES_USED.value, __IMAGES_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_20_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 33, 18), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE_USED uses Python identifier SIZE_USED
    __SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), 'SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_20_httpopennebula_orgXMLSchemaSIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 34, 18), )

    
    SIZE_USED = property(__SIZE_USED.value, __SIZE_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __IMAGES.name() : __IMAGES,
        __IMAGES_USED.name() : __IMAGES_USED,
        __SIZE.name() : __SIZE,
        __SIZE_USED.name() : __SIZE_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_20 = CTD_ANON_20


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 42, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}NETWORK uses Python identifier NETWORK
    __NETWORK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), 'NETWORK', '__httpopennebula_orgXMLSchema_CTD_ANON_21_httpopennebula_orgXMLSchemaNETWORK', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 44, 14), )

    
    NETWORK = property(__NETWORK.value, __NETWORK.set, None, None)

    _ElementMap.update({
        __NETWORK.name() : __NETWORK
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_21 = CTD_ANON_21


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 45, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_22_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 47, 18), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES uses Python identifier LEASES
    __LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), 'LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_22_httpopennebula_orgXMLSchemaLEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 48, 18), )

    
    LEASES = property(__LEASES.value, __LEASES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES_USED uses Python identifier LEASES_USED
    __LEASES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), 'LEASES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_22_httpopennebula_orgXMLSchemaLEASES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 49, 18), )

    
    LEASES_USED = property(__LEASES_USED.value, __LEASES_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __LEASES.name() : __LEASES,
        __LEASES_USED.name() : __LEASES_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_22 = CTD_ANON_22


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 57, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VM uses Python identifier VM
    __VM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM'), 'VM', '__httpopennebula_orgXMLSchema_CTD_ANON_23_httpopennebula_orgXMLSchemaVM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 59, 14), )

    
    VM = property(__VM.value, __VM.set, None, None)

    _ElementMap.update({
        __VM.name() : __VM
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_23 = CTD_ANON_23


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 60, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}CPU uses Python identifier CPU
    __CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU'), 'CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_24_httpopennebula_orgXMLSchemaCPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 62, 20), )

    
    CPU = property(__CPU.value, __CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CPU_USED uses Python identifier CPU_USED
    __CPU_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), 'CPU_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_24_httpopennebula_orgXMLSchemaCPU_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 63, 20), )

    
    CPU_USED = property(__CPU_USED.value, __CPU_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY uses Python identifier MEMORY
    __MEMORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), 'MEMORY', '__httpopennebula_orgXMLSchema_CTD_ANON_24_httpopennebula_orgXMLSchemaMEMORY', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 64, 20), )

    
    MEMORY = property(__MEMORY.value, __MEMORY.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY_USED uses Python identifier MEMORY_USED
    __MEMORY_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), 'MEMORY_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_24_httpopennebula_orgXMLSchemaMEMORY_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 65, 20), )

    
    MEMORY_USED = property(__MEMORY_USED.value, __MEMORY_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE uses Python identifier SYSTEM_DISK_SIZE
    __SYSTEM_DISK_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), 'SYSTEM_DISK_SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_24_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 66, 20), )

    
    SYSTEM_DISK_SIZE = property(__SYSTEM_DISK_SIZE.value, __SYSTEM_DISK_SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE_USED uses Python identifier SYSTEM_DISK_SIZE_USED
    __SYSTEM_DISK_SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), 'SYSTEM_DISK_SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_24_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 67, 20), )

    
    SYSTEM_DISK_SIZE_USED = property(__SYSTEM_DISK_SIZE_USED.value, __SYSTEM_DISK_SIZE_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS uses Python identifier VMS
    __VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS'), 'VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_24_httpopennebula_orgXMLSchemaVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 68, 20), )

    
    VMS = property(__VMS.value, __VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS_USED uses Python identifier VMS_USED
    __VMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), 'VMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_24_httpopennebula_orgXMLSchemaVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 69, 20), )

    
    VMS_USED = property(__VMS_USED.value, __VMS_USED.set, None, None)

    _ElementMap.update({
        __CPU.name() : __CPU,
        __CPU_USED.name() : __CPU_USED,
        __MEMORY.name() : __MEMORY,
        __MEMORY_USED.name() : __MEMORY_USED,
        __SYSTEM_DISK_SIZE.name() : __SYSTEM_DISK_SIZE,
        __SYSTEM_DISK_SIZE_USED.name() : __SYSTEM_DISK_SIZE_USED,
        __VMS.name() : __VMS,
        __VMS_USED.name() : __VMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_24 = CTD_ANON_24


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 77, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}IMAGE uses Python identifier IMAGE
    __IMAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), 'IMAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_25_httpopennebula_orgXMLSchemaIMAGE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 79, 14), )

    
    IMAGE = property(__IMAGE.value, __IMAGE.set, None, None)

    _ElementMap.update({
        __IMAGE.name() : __IMAGE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_25 = CTD_ANON_25


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 80, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_26_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 82, 20), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS uses Python identifier RVMS
    __RVMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), 'RVMS', '__httpopennebula_orgXMLSchema_CTD_ANON_26_httpopennebula_orgXMLSchemaRVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 83, 20), )

    
    RVMS = property(__RVMS.value, __RVMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS_USED uses Python identifier RVMS_USED
    __RVMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), 'RVMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_26_httpopennebula_orgXMLSchemaRVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 84, 20), )

    
    RVMS_USED = property(__RVMS_USED.value, __RVMS_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __RVMS.name() : __RVMS,
        __RVMS_USED.name() : __RVMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_26 = CTD_ANON_26


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 92, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE_QUOTA uses Python identifier DATASTORE_QUOTA
    __DATASTORE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), 'DATASTORE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_27_httpopennebula_orgXMLSchemaDATASTORE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 94, 16), )

    
    DATASTORE_QUOTA = property(__DATASTORE_QUOTA.value, __DATASTORE_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NETWORK_QUOTA uses Python identifier NETWORK_QUOTA
    __NETWORK_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), 'NETWORK_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_27_httpopennebula_orgXMLSchemaNETWORK_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 111, 16), )

    
    NETWORK_QUOTA = property(__NETWORK_QUOTA.value, __NETWORK_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM_QUOTA uses Python identifier VM_QUOTA
    __VM_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), 'VM_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_27_httpopennebula_orgXMLSchemaVM_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 126, 16), )

    
    VM_QUOTA = property(__VM_QUOTA.value, __VM_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGE_QUOTA uses Python identifier IMAGE_QUOTA
    __IMAGE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), 'IMAGE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_27_httpopennebula_orgXMLSchemaIMAGE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 146, 16), )

    
    IMAGE_QUOTA = property(__IMAGE_QUOTA.value, __IMAGE_QUOTA.set, None, None)

    _ElementMap.update({
        __DATASTORE_QUOTA.name() : __DATASTORE_QUOTA,
        __NETWORK_QUOTA.name() : __NETWORK_QUOTA,
        __VM_QUOTA.name() : __VM_QUOTA,
        __IMAGE_QUOTA.name() : __IMAGE_QUOTA
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_27 = CTD_ANON_27


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 95, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE uses Python identifier DATASTORE
    __DATASTORE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), 'DATASTORE', '__httpopennebula_orgXMLSchema_CTD_ANON_28_httpopennebula_orgXMLSchemaDATASTORE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 97, 22), )

    
    DATASTORE = property(__DATASTORE.value, __DATASTORE.set, None, None)

    _ElementMap.update({
        __DATASTORE.name() : __DATASTORE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_28 = CTD_ANON_28


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 98, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_29_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 100, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES uses Python identifier IMAGES
    __IMAGES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), 'IMAGES', '__httpopennebula_orgXMLSchema_CTD_ANON_29_httpopennebula_orgXMLSchemaIMAGES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 101, 26), )

    
    IMAGES = property(__IMAGES.value, __IMAGES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES_USED uses Python identifier IMAGES_USED
    __IMAGES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), 'IMAGES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_29_httpopennebula_orgXMLSchemaIMAGES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 102, 26), )

    
    IMAGES_USED = property(__IMAGES_USED.value, __IMAGES_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_29_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 103, 26), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE_USED uses Python identifier SIZE_USED
    __SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), 'SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_29_httpopennebula_orgXMLSchemaSIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 104, 26), )

    
    SIZE_USED = property(__SIZE_USED.value, __SIZE_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __IMAGES.name() : __IMAGES,
        __IMAGES_USED.name() : __IMAGES_USED,
        __SIZE.name() : __SIZE,
        __SIZE_USED.name() : __SIZE_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_29 = CTD_ANON_29


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 112, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}NETWORK uses Python identifier NETWORK
    __NETWORK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), 'NETWORK', '__httpopennebula_orgXMLSchema_CTD_ANON_30_httpopennebula_orgXMLSchemaNETWORK', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 114, 22), )

    
    NETWORK = property(__NETWORK.value, __NETWORK.set, None, None)

    _ElementMap.update({
        __NETWORK.name() : __NETWORK
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_30 = CTD_ANON_30


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 115, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_31_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 117, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES uses Python identifier LEASES
    __LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), 'LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_31_httpopennebula_orgXMLSchemaLEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 118, 26), )

    
    LEASES = property(__LEASES.value, __LEASES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES_USED uses Python identifier LEASES_USED
    __LEASES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), 'LEASES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_31_httpopennebula_orgXMLSchemaLEASES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 119, 26), )

    
    LEASES_USED = property(__LEASES_USED.value, __LEASES_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __LEASES.name() : __LEASES,
        __LEASES_USED.name() : __LEASES_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_31 = CTD_ANON_31


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 127, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VM uses Python identifier VM
    __VM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM'), 'VM', '__httpopennebula_orgXMLSchema_CTD_ANON_32_httpopennebula_orgXMLSchemaVM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 129, 22), )

    
    VM = property(__VM.value, __VM.set, None, None)

    _ElementMap.update({
        __VM.name() : __VM
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_32 = CTD_ANON_32


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 130, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}CPU uses Python identifier CPU
    __CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU'), 'CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_33_httpopennebula_orgXMLSchemaCPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 132, 28), )

    
    CPU = property(__CPU.value, __CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CPU_USED uses Python identifier CPU_USED
    __CPU_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), 'CPU_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_33_httpopennebula_orgXMLSchemaCPU_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 133, 28), )

    
    CPU_USED = property(__CPU_USED.value, __CPU_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY uses Python identifier MEMORY
    __MEMORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), 'MEMORY', '__httpopennebula_orgXMLSchema_CTD_ANON_33_httpopennebula_orgXMLSchemaMEMORY', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 134, 28), )

    
    MEMORY = property(__MEMORY.value, __MEMORY.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY_USED uses Python identifier MEMORY_USED
    __MEMORY_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), 'MEMORY_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_33_httpopennebula_orgXMLSchemaMEMORY_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 135, 28), )

    
    MEMORY_USED = property(__MEMORY_USED.value, __MEMORY_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE uses Python identifier SYSTEM_DISK_SIZE
    __SYSTEM_DISK_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), 'SYSTEM_DISK_SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_33_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 136, 28), )

    
    SYSTEM_DISK_SIZE = property(__SYSTEM_DISK_SIZE.value, __SYSTEM_DISK_SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE_USED uses Python identifier SYSTEM_DISK_SIZE_USED
    __SYSTEM_DISK_SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), 'SYSTEM_DISK_SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_33_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 137, 28), )

    
    SYSTEM_DISK_SIZE_USED = property(__SYSTEM_DISK_SIZE_USED.value, __SYSTEM_DISK_SIZE_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS uses Python identifier VMS
    __VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS'), 'VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_33_httpopennebula_orgXMLSchemaVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 138, 28), )

    
    VMS = property(__VMS.value, __VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS_USED uses Python identifier VMS_USED
    __VMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), 'VMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_33_httpopennebula_orgXMLSchemaVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 139, 28), )

    
    VMS_USED = property(__VMS_USED.value, __VMS_USED.set, None, None)

    _ElementMap.update({
        __CPU.name() : __CPU,
        __CPU_USED.name() : __CPU_USED,
        __MEMORY.name() : __MEMORY,
        __MEMORY_USED.name() : __MEMORY_USED,
        __SYSTEM_DISK_SIZE.name() : __SYSTEM_DISK_SIZE,
        __SYSTEM_DISK_SIZE_USED.name() : __SYSTEM_DISK_SIZE_USED,
        __VMS.name() : __VMS,
        __VMS_USED.name() : __VMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_33 = CTD_ANON_33


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 147, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}IMAGE uses Python identifier IMAGE
    __IMAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), 'IMAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_34_httpopennebula_orgXMLSchemaIMAGE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 149, 22), )

    
    IMAGE = property(__IMAGE.value, __IMAGE.set, None, None)

    _ElementMap.update({
        __IMAGE.name() : __IMAGE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_34 = CTD_ANON_34


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 150, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_35_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 152, 28), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS uses Python identifier RVMS
    __RVMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), 'RVMS', '__httpopennebula_orgXMLSchema_CTD_ANON_35_httpopennebula_orgXMLSchemaRVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 153, 28), )

    
    RVMS = property(__RVMS.value, __RVMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS_USED uses Python identifier RVMS_USED
    __RVMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), 'RVMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_35_httpopennebula_orgXMLSchemaRVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 154, 28), )

    
    RVMS_USED = property(__RVMS_USED.value, __RVMS_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __RVMS.name() : __RVMS,
        __RVMS_USED.name() : __RVMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_35 = CTD_ANON_35


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}GROUP uses Python identifier GROUP
    __GROUP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP'), 'GROUP', '__httpopennebula_orgXMLSchema_CTD_ANON_36_httpopennebula_orgXMLSchemaGROUP', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 8, 10), )

    
    GROUP = property(__GROUP.value, __GROUP.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}QUOTAS uses Python identifier QUOTAS
    __QUOTAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'QUOTAS'), 'QUOTAS', '__httpopennebula_orgXMLSchema_CTD_ANON_36_httpopennebula_orgXMLSchemaQUOTAS', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 31, 10), )

    
    QUOTAS = property(__QUOTAS.value, __QUOTAS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DEFAULT_GROUP_QUOTAS uses Python identifier DEFAULT_GROUP_QUOTAS
    __DEFAULT_GROUP_QUOTAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_GROUP_QUOTAS'), 'DEFAULT_GROUP_QUOTAS', '__httpopennebula_orgXMLSchema_CTD_ANON_36_httpopennebula_orgXMLSchemaDEFAULT_GROUP_QUOTAS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 106, 8), )

    
    DEFAULT_GROUP_QUOTAS = property(__DEFAULT_GROUP_QUOTAS.value, __DEFAULT_GROUP_QUOTAS.set, None, None)

    _ElementMap.update({
        __GROUP.name() : __GROUP,
        __QUOTAS.name() : __QUOTAS,
        __DEFAULT_GROUP_QUOTAS.name() : __DEFAULT_GROUP_QUOTAS
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_36 = CTD_ANON_36


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 9, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_37_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 11, 16), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_37_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 12, 16), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_37_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 13, 16), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USERS uses Python identifier USERS
    __USERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USERS'), 'USERS', '__httpopennebula_orgXMLSchema_CTD_ANON_37_httpopennebula_orgXMLSchemaUSERS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 14, 16), )

    
    USERS = property(__USERS.value, __USERS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ADMINS uses Python identifier ADMINS
    __ADMINS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ADMINS'), 'ADMINS', '__httpopennebula_orgXMLSchema_CTD_ANON_37_httpopennebula_orgXMLSchemaADMINS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 21, 16), )

    
    ADMINS = property(__ADMINS.value, __ADMINS.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __NAME.name() : __NAME,
        __TEMPLATE.name() : __TEMPLATE,
        __USERS.name() : __USERS,
        __ADMINS.name() : __ADMINS
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_37 = CTD_ANON_37


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 15, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_38_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 17, 22), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_38 = CTD_ANON_38


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 22, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_39_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 24, 22), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_39 = CTD_ANON_39


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 32, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_40_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 34, 16), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATASTORE_QUOTA uses Python identifier DATASTORE_QUOTA
    __DATASTORE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), 'DATASTORE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_40_httpopennebula_orgXMLSchemaDATASTORE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 35, 16), )

    
    DATASTORE_QUOTA = property(__DATASTORE_QUOTA.value, __DATASTORE_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NETWORK_QUOTA uses Python identifier NETWORK_QUOTA
    __NETWORK_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), 'NETWORK_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_40_httpopennebula_orgXMLSchemaNETWORK_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 52, 16), )

    
    NETWORK_QUOTA = property(__NETWORK_QUOTA.value, __NETWORK_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM_QUOTA uses Python identifier VM_QUOTA
    __VM_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), 'VM_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_40_httpopennebula_orgXMLSchemaVM_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 67, 16), )

    
    VM_QUOTA = property(__VM_QUOTA.value, __VM_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGE_QUOTA uses Python identifier IMAGE_QUOTA
    __IMAGE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), 'IMAGE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_40_httpopennebula_orgXMLSchemaIMAGE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 87, 16), )

    
    IMAGE_QUOTA = property(__IMAGE_QUOTA.value, __IMAGE_QUOTA.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __DATASTORE_QUOTA.name() : __DATASTORE_QUOTA,
        __NETWORK_QUOTA.name() : __NETWORK_QUOTA,
        __VM_QUOTA.name() : __VM_QUOTA,
        __IMAGE_QUOTA.name() : __IMAGE_QUOTA
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_40 = CTD_ANON_40


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 36, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE uses Python identifier DATASTORE
    __DATASTORE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), 'DATASTORE', '__httpopennebula_orgXMLSchema_CTD_ANON_41_httpopennebula_orgXMLSchemaDATASTORE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 38, 22), )

    
    DATASTORE = property(__DATASTORE.value, __DATASTORE.set, None, None)

    _ElementMap.update({
        __DATASTORE.name() : __DATASTORE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_41 = CTD_ANON_41


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 39, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_42_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 41, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES uses Python identifier IMAGES
    __IMAGES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), 'IMAGES', '__httpopennebula_orgXMLSchema_CTD_ANON_42_httpopennebula_orgXMLSchemaIMAGES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 42, 26), )

    
    IMAGES = property(__IMAGES.value, __IMAGES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES_USED uses Python identifier IMAGES_USED
    __IMAGES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), 'IMAGES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_42_httpopennebula_orgXMLSchemaIMAGES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 43, 26), )

    
    IMAGES_USED = property(__IMAGES_USED.value, __IMAGES_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_42_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 44, 26), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE_USED uses Python identifier SIZE_USED
    __SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), 'SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_42_httpopennebula_orgXMLSchemaSIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 45, 26), )

    
    SIZE_USED = property(__SIZE_USED.value, __SIZE_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __IMAGES.name() : __IMAGES,
        __IMAGES_USED.name() : __IMAGES_USED,
        __SIZE.name() : __SIZE,
        __SIZE_USED.name() : __SIZE_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_42 = CTD_ANON_42


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 53, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}NETWORK uses Python identifier NETWORK
    __NETWORK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), 'NETWORK', '__httpopennebula_orgXMLSchema_CTD_ANON_43_httpopennebula_orgXMLSchemaNETWORK', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 55, 22), )

    
    NETWORK = property(__NETWORK.value, __NETWORK.set, None, None)

    _ElementMap.update({
        __NETWORK.name() : __NETWORK
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_43 = CTD_ANON_43


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 56, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_44_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 58, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES uses Python identifier LEASES
    __LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), 'LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_44_httpopennebula_orgXMLSchemaLEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 59, 26), )

    
    LEASES = property(__LEASES.value, __LEASES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES_USED uses Python identifier LEASES_USED
    __LEASES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), 'LEASES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_44_httpopennebula_orgXMLSchemaLEASES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 60, 26), )

    
    LEASES_USED = property(__LEASES_USED.value, __LEASES_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __LEASES.name() : __LEASES,
        __LEASES_USED.name() : __LEASES_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_44 = CTD_ANON_44


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 68, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VM uses Python identifier VM
    __VM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM'), 'VM', '__httpopennebula_orgXMLSchema_CTD_ANON_45_httpopennebula_orgXMLSchemaVM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 70, 22), )

    
    VM = property(__VM.value, __VM.set, None, None)

    _ElementMap.update({
        __VM.name() : __VM
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_45 = CTD_ANON_45


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 71, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}CPU uses Python identifier CPU
    __CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU'), 'CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_46_httpopennebula_orgXMLSchemaCPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 73, 28), )

    
    CPU = property(__CPU.value, __CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CPU_USED uses Python identifier CPU_USED
    __CPU_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), 'CPU_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_46_httpopennebula_orgXMLSchemaCPU_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 74, 28), )

    
    CPU_USED = property(__CPU_USED.value, __CPU_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY uses Python identifier MEMORY
    __MEMORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), 'MEMORY', '__httpopennebula_orgXMLSchema_CTD_ANON_46_httpopennebula_orgXMLSchemaMEMORY', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 75, 28), )

    
    MEMORY = property(__MEMORY.value, __MEMORY.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY_USED uses Python identifier MEMORY_USED
    __MEMORY_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), 'MEMORY_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_46_httpopennebula_orgXMLSchemaMEMORY_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 76, 28), )

    
    MEMORY_USED = property(__MEMORY_USED.value, __MEMORY_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE uses Python identifier SYSTEM_DISK_SIZE
    __SYSTEM_DISK_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), 'SYSTEM_DISK_SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_46_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 77, 28), )

    
    SYSTEM_DISK_SIZE = property(__SYSTEM_DISK_SIZE.value, __SYSTEM_DISK_SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE_USED uses Python identifier SYSTEM_DISK_SIZE_USED
    __SYSTEM_DISK_SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), 'SYSTEM_DISK_SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_46_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 78, 28), )

    
    SYSTEM_DISK_SIZE_USED = property(__SYSTEM_DISK_SIZE_USED.value, __SYSTEM_DISK_SIZE_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS uses Python identifier VMS
    __VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS'), 'VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_46_httpopennebula_orgXMLSchemaVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 79, 28), )

    
    VMS = property(__VMS.value, __VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS_USED uses Python identifier VMS_USED
    __VMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), 'VMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_46_httpopennebula_orgXMLSchemaVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 80, 28), )

    
    VMS_USED = property(__VMS_USED.value, __VMS_USED.set, None, None)

    _ElementMap.update({
        __CPU.name() : __CPU,
        __CPU_USED.name() : __CPU_USED,
        __MEMORY.name() : __MEMORY,
        __MEMORY_USED.name() : __MEMORY_USED,
        __SYSTEM_DISK_SIZE.name() : __SYSTEM_DISK_SIZE,
        __SYSTEM_DISK_SIZE_USED.name() : __SYSTEM_DISK_SIZE_USED,
        __VMS.name() : __VMS,
        __VMS_USED.name() : __VMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_46 = CTD_ANON_46


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 88, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}IMAGE uses Python identifier IMAGE
    __IMAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), 'IMAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_47_httpopennebula_orgXMLSchemaIMAGE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 90, 22), )

    
    IMAGE = property(__IMAGE.value, __IMAGE.set, None, None)

    _ElementMap.update({
        __IMAGE.name() : __IMAGE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_47 = CTD_ANON_47


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 91, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_48_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 93, 28), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS uses Python identifier RVMS
    __RVMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), 'RVMS', '__httpopennebula_orgXMLSchema_CTD_ANON_48_httpopennebula_orgXMLSchemaRVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 94, 28), )

    
    RVMS = property(__RVMS.value, __RVMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS_USED uses Python identifier RVMS_USED
    __RVMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), 'RVMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_48_httpopennebula_orgXMLSchemaRVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 95, 28), )

    
    RVMS_USED = property(__RVMS_USED.value, __RVMS_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __RVMS.name() : __RVMS,
        __RVMS_USED.name() : __RVMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_48 = CTD_ANON_48


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 107, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE_QUOTA uses Python identifier DATASTORE_QUOTA
    __DATASTORE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), 'DATASTORE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_49_httpopennebula_orgXMLSchemaDATASTORE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 109, 16), )

    
    DATASTORE_QUOTA = property(__DATASTORE_QUOTA.value, __DATASTORE_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NETWORK_QUOTA uses Python identifier NETWORK_QUOTA
    __NETWORK_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), 'NETWORK_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_49_httpopennebula_orgXMLSchemaNETWORK_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 126, 16), )

    
    NETWORK_QUOTA = property(__NETWORK_QUOTA.value, __NETWORK_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM_QUOTA uses Python identifier VM_QUOTA
    __VM_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), 'VM_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_49_httpopennebula_orgXMLSchemaVM_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 141, 16), )

    
    VM_QUOTA = property(__VM_QUOTA.value, __VM_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGE_QUOTA uses Python identifier IMAGE_QUOTA
    __IMAGE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), 'IMAGE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_49_httpopennebula_orgXMLSchemaIMAGE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 161, 16), )

    
    IMAGE_QUOTA = property(__IMAGE_QUOTA.value, __IMAGE_QUOTA.set, None, None)

    _ElementMap.update({
        __DATASTORE_QUOTA.name() : __DATASTORE_QUOTA,
        __NETWORK_QUOTA.name() : __NETWORK_QUOTA,
        __VM_QUOTA.name() : __VM_QUOTA,
        __IMAGE_QUOTA.name() : __IMAGE_QUOTA
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_49 = CTD_ANON_49


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 110, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE uses Python identifier DATASTORE
    __DATASTORE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), 'DATASTORE', '__httpopennebula_orgXMLSchema_CTD_ANON_50_httpopennebula_orgXMLSchemaDATASTORE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 112, 22), )

    
    DATASTORE = property(__DATASTORE.value, __DATASTORE.set, None, None)

    _ElementMap.update({
        __DATASTORE.name() : __DATASTORE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_50 = CTD_ANON_50


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 113, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_51_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 115, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES uses Python identifier IMAGES
    __IMAGES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), 'IMAGES', '__httpopennebula_orgXMLSchema_CTD_ANON_51_httpopennebula_orgXMLSchemaIMAGES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 116, 26), )

    
    IMAGES = property(__IMAGES.value, __IMAGES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES_USED uses Python identifier IMAGES_USED
    __IMAGES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), 'IMAGES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_51_httpopennebula_orgXMLSchemaIMAGES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 117, 26), )

    
    IMAGES_USED = property(__IMAGES_USED.value, __IMAGES_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_51_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 118, 26), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE_USED uses Python identifier SIZE_USED
    __SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), 'SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_51_httpopennebula_orgXMLSchemaSIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 119, 26), )

    
    SIZE_USED = property(__SIZE_USED.value, __SIZE_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __IMAGES.name() : __IMAGES,
        __IMAGES_USED.name() : __IMAGES_USED,
        __SIZE.name() : __SIZE,
        __SIZE_USED.name() : __SIZE_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_51 = CTD_ANON_51


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 127, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}NETWORK uses Python identifier NETWORK
    __NETWORK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), 'NETWORK', '__httpopennebula_orgXMLSchema_CTD_ANON_52_httpopennebula_orgXMLSchemaNETWORK', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 129, 22), )

    
    NETWORK = property(__NETWORK.value, __NETWORK.set, None, None)

    _ElementMap.update({
        __NETWORK.name() : __NETWORK
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_52 = CTD_ANON_52


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 130, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_53_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 132, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES uses Python identifier LEASES
    __LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), 'LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_53_httpopennebula_orgXMLSchemaLEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 133, 26), )

    
    LEASES = property(__LEASES.value, __LEASES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES_USED uses Python identifier LEASES_USED
    __LEASES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), 'LEASES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_53_httpopennebula_orgXMLSchemaLEASES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 134, 26), )

    
    LEASES_USED = property(__LEASES_USED.value, __LEASES_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __LEASES.name() : __LEASES,
        __LEASES_USED.name() : __LEASES_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_53 = CTD_ANON_53


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 142, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VM uses Python identifier VM
    __VM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM'), 'VM', '__httpopennebula_orgXMLSchema_CTD_ANON_54_httpopennebula_orgXMLSchemaVM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 144, 22), )

    
    VM = property(__VM.value, __VM.set, None, None)

    _ElementMap.update({
        __VM.name() : __VM
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_54 = CTD_ANON_54


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 145, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}CPU uses Python identifier CPU
    __CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU'), 'CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_55_httpopennebula_orgXMLSchemaCPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 147, 28), )

    
    CPU = property(__CPU.value, __CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CPU_USED uses Python identifier CPU_USED
    __CPU_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), 'CPU_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_55_httpopennebula_orgXMLSchemaCPU_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 148, 28), )

    
    CPU_USED = property(__CPU_USED.value, __CPU_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY uses Python identifier MEMORY
    __MEMORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), 'MEMORY', '__httpopennebula_orgXMLSchema_CTD_ANON_55_httpopennebula_orgXMLSchemaMEMORY', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 149, 28), )

    
    MEMORY = property(__MEMORY.value, __MEMORY.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY_USED uses Python identifier MEMORY_USED
    __MEMORY_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), 'MEMORY_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_55_httpopennebula_orgXMLSchemaMEMORY_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 150, 28), )

    
    MEMORY_USED = property(__MEMORY_USED.value, __MEMORY_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE uses Python identifier SYSTEM_DISK_SIZE
    __SYSTEM_DISK_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), 'SYSTEM_DISK_SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_55_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 151, 28), )

    
    SYSTEM_DISK_SIZE = property(__SYSTEM_DISK_SIZE.value, __SYSTEM_DISK_SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE_USED uses Python identifier SYSTEM_DISK_SIZE_USED
    __SYSTEM_DISK_SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), 'SYSTEM_DISK_SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_55_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 152, 28), )

    
    SYSTEM_DISK_SIZE_USED = property(__SYSTEM_DISK_SIZE_USED.value, __SYSTEM_DISK_SIZE_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS uses Python identifier VMS
    __VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS'), 'VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_55_httpopennebula_orgXMLSchemaVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 153, 28), )

    
    VMS = property(__VMS.value, __VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS_USED uses Python identifier VMS_USED
    __VMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), 'VMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_55_httpopennebula_orgXMLSchemaVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 154, 28), )

    
    VMS_USED = property(__VMS_USED.value, __VMS_USED.set, None, None)

    _ElementMap.update({
        __CPU.name() : __CPU,
        __CPU_USED.name() : __CPU_USED,
        __MEMORY.name() : __MEMORY,
        __MEMORY_USED.name() : __MEMORY_USED,
        __SYSTEM_DISK_SIZE.name() : __SYSTEM_DISK_SIZE,
        __SYSTEM_DISK_SIZE_USED.name() : __SYSTEM_DISK_SIZE_USED,
        __VMS.name() : __VMS,
        __VMS_USED.name() : __VMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_55 = CTD_ANON_55


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 162, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}IMAGE uses Python identifier IMAGE
    __IMAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), 'IMAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_56_httpopennebula_orgXMLSchemaIMAGE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 164, 22), )

    
    IMAGE = property(__IMAGE.value, __IMAGE.set, None, None)

    _ElementMap.update({
        __IMAGE.name() : __IMAGE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_56 = CTD_ANON_56


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 165, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_57_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 167, 28), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS uses Python identifier RVMS
    __RVMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), 'RVMS', '__httpopennebula_orgXMLSchema_CTD_ANON_57_httpopennebula_orgXMLSchemaRVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 168, 28), )

    
    RVMS = property(__RVMS.value, __RVMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS_USED uses Python identifier RVMS_USED
    __RVMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), 'RVMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_57_httpopennebula_orgXMLSchemaRVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 169, 28), )

    
    RVMS_USED = property(__RVMS_USED.value, __RVMS_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __RVMS.name() : __RVMS,
        __RVMS_USED.name() : __RVMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_57 = CTD_ANON_57


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_58_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 6, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_58_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 7, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}STATE uses Python identifier STATE
    __STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STATE'), 'STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_58_httpopennebula_orgXMLSchemaSTATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 20, 8), )

    
    STATE = property(__STATE.value, __STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IM_MAD uses Python identifier IM_MAD
    __IM_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IM_MAD'), 'IM_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON_58_httpopennebula_orgXMLSchemaIM_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 21, 8), )

    
    IM_MAD = property(__IM_MAD.value, __IM_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM_MAD uses Python identifier VM_MAD
    __VM_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM_MAD'), 'VM_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON_58_httpopennebula_orgXMLSchemaVM_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 22, 8), )

    
    VM_MAD = property(__VM_MAD.value, __VM_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LAST_MON_TIME uses Python identifier LAST_MON_TIME
    __LAST_MON_TIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LAST_MON_TIME'), 'LAST_MON_TIME', '__httpopennebula_orgXMLSchema_CTD_ANON_58_httpopennebula_orgXMLSchemaLAST_MON_TIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 23, 8), )

    
    LAST_MON_TIME = property(__LAST_MON_TIME.value, __LAST_MON_TIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CLUSTER_ID uses Python identifier CLUSTER_ID
    __CLUSTER_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER_ID'), 'CLUSTER_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_58_httpopennebula_orgXMLSchemaCLUSTER_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 24, 8), )

    
    CLUSTER_ID = property(__CLUSTER_ID.value, __CLUSTER_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CLUSTER uses Python identifier CLUSTER
    __CLUSTER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER'), 'CLUSTER', '__httpopennebula_orgXMLSchema_CTD_ANON_58_httpopennebula_orgXMLSchemaCLUSTER', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 25, 8), )

    
    CLUSTER = property(__CLUSTER.value, __CLUSTER.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}HOST_SHARE uses Python identifier HOST_SHARE
    __HOST_SHARE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HOST_SHARE'), 'HOST_SHARE', '__httpopennebula_orgXMLSchema_CTD_ANON_58_httpopennebula_orgXMLSchemaHOST_SHARE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 26, 8), )

    
    HOST_SHARE = property(__HOST_SHARE.value, __HOST_SHARE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS uses Python identifier VMS
    __VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS'), 'VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_58_httpopennebula_orgXMLSchemaVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 80, 8), )

    
    VMS = property(__VMS.value, __VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_58_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 87, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __NAME.name() : __NAME,
        __STATE.name() : __STATE,
        __IM_MAD.name() : __IM_MAD,
        __VM_MAD.name() : __VM_MAD,
        __LAST_MON_TIME.name() : __LAST_MON_TIME,
        __CLUSTER_ID.name() : __CLUSTER_ID,
        __CLUSTER.name() : __CLUSTER,
        __HOST_SHARE.name() : __HOST_SHARE,
        __VMS.name() : __VMS,
        __TEMPLATE.name() : __TEMPLATE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_58 = CTD_ANON_58


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 27, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DISK_USAGE uses Python identifier DISK_USAGE
    __DISK_USAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DISK_USAGE'), 'DISK_USAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaDISK_USAGE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 29, 14), )

    
    DISK_USAGE = property(__DISK_USAGE.value, __DISK_USAGE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEM_USAGE uses Python identifier MEM_USAGE
    __MEM_USAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEM_USAGE'), 'MEM_USAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaMEM_USAGE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 30, 14), )

    
    MEM_USAGE = property(__MEM_USAGE.value, __MEM_USAGE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CPU_USAGE uses Python identifier CPU_USAGE
    __CPU_USAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU_USAGE'), 'CPU_USAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaCPU_USAGE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 32, 14), )

    
    CPU_USAGE = property(__CPU_USAGE.value, __CPU_USAGE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TOTAL_MEM uses Python identifier TOTAL_MEM
    __TOTAL_MEM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MEM'), 'TOTAL_MEM', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaTOTAL_MEM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 34, 14), )

    
    TOTAL_MEM = property(__TOTAL_MEM.value, __TOTAL_MEM.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TOTAL_CPU uses Python identifier TOTAL_CPU
    __TOTAL_CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_CPU'), 'TOTAL_CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaTOTAL_CPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 35, 14), )

    
    TOTAL_CPU = property(__TOTAL_CPU.value, __TOTAL_CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MAX_DISK uses Python identifier MAX_DISK
    __MAX_DISK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MAX_DISK'), 'MAX_DISK', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaMAX_DISK', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 36, 14), )

    
    MAX_DISK = property(__MAX_DISK.value, __MAX_DISK.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MAX_MEM uses Python identifier MAX_MEM
    __MAX_MEM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MAX_MEM'), 'MAX_MEM', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaMAX_MEM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 37, 14), )

    
    MAX_MEM = property(__MAX_MEM.value, __MAX_MEM.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MAX_CPU uses Python identifier MAX_CPU
    __MAX_CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MAX_CPU'), 'MAX_CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaMAX_CPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 39, 14), )

    
    MAX_CPU = property(__MAX_CPU.value, __MAX_CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}FREE_DISK uses Python identifier FREE_DISK
    __FREE_DISK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FREE_DISK'), 'FREE_DISK', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaFREE_DISK', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 41, 14), )

    
    FREE_DISK = property(__FREE_DISK.value, __FREE_DISK.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}FREE_MEM uses Python identifier FREE_MEM
    __FREE_MEM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FREE_MEM'), 'FREE_MEM', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaFREE_MEM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 42, 14), )

    
    FREE_MEM = property(__FREE_MEM.value, __FREE_MEM.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}FREE_CPU uses Python identifier FREE_CPU
    __FREE_CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FREE_CPU'), 'FREE_CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaFREE_CPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 44, 14), )

    
    FREE_CPU = property(__FREE_CPU.value, __FREE_CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USED_DISK uses Python identifier USED_DISK
    __USED_DISK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USED_DISK'), 'USED_DISK', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaUSED_DISK', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 46, 14), )

    
    USED_DISK = property(__USED_DISK.value, __USED_DISK.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USED_MEM uses Python identifier USED_MEM
    __USED_MEM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USED_MEM'), 'USED_MEM', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaUSED_MEM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 47, 14), )

    
    USED_MEM = property(__USED_MEM.value, __USED_MEM.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USED_CPU uses Python identifier USED_CPU
    __USED_CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USED_CPU'), 'USED_CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaUSED_CPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 49, 14), )

    
    USED_CPU = property(__USED_CPU.value, __USED_CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RUNNING_VMS uses Python identifier RUNNING_VMS
    __RUNNING_VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RUNNING_VMS'), 'RUNNING_VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaRUNNING_VMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 53, 14), )

    
    RUNNING_VMS = property(__RUNNING_VMS.value, __RUNNING_VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATASTORES uses Python identifier DATASTORES
    __DATASTORES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORES'), 'DATASTORES', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaDATASTORES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 54, 14), )

    
    DATASTORES = property(__DATASTORES.value, __DATASTORES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PCI_DEVICES uses Python identifier PCI_DEVICES
    __PCI_DEVICES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PCI_DEVICES'), 'PCI_DEVICES', '__httpopennebula_orgXMLSchema_CTD_ANON_59_httpopennebula_orgXMLSchemaPCI_DEVICES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 70, 14), )

    
    PCI_DEVICES = property(__PCI_DEVICES.value, __PCI_DEVICES.set, None, None)

    _ElementMap.update({
        __DISK_USAGE.name() : __DISK_USAGE,
        __MEM_USAGE.name() : __MEM_USAGE,
        __CPU_USAGE.name() : __CPU_USAGE,
        __TOTAL_MEM.name() : __TOTAL_MEM,
        __TOTAL_CPU.name() : __TOTAL_CPU,
        __MAX_DISK.name() : __MAX_DISK,
        __MAX_MEM.name() : __MAX_MEM,
        __MAX_CPU.name() : __MAX_CPU,
        __FREE_DISK.name() : __FREE_DISK,
        __FREE_MEM.name() : __FREE_MEM,
        __FREE_CPU.name() : __FREE_CPU,
        __USED_DISK.name() : __USED_DISK,
        __USED_MEM.name() : __USED_MEM,
        __USED_CPU.name() : __USED_CPU,
        __RUNNING_VMS.name() : __RUNNING_VMS,
        __DATASTORES.name() : __DATASTORES,
        __PCI_DEVICES.name() : __PCI_DEVICES
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_59 = CTD_ANON_59


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 55, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DS uses Python identifier DS
    __DS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DS'), 'DS', '__httpopennebula_orgXMLSchema_CTD_ANON_60_httpopennebula_orgXMLSchemaDS', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 57, 20), )

    
    DS = property(__DS.value, __DS.set, None, None)

    _ElementMap.update({
        __DS.name() : __DS
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_60 = CTD_ANON_60


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 58, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_61_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 60, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}FREE_MB uses Python identifier FREE_MB
    __FREE_MB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FREE_MB'), 'FREE_MB', '__httpopennebula_orgXMLSchema_CTD_ANON_61_httpopennebula_orgXMLSchemaFREE_MB', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 61, 26), )

    
    FREE_MB = property(__FREE_MB.value, __FREE_MB.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TOTAL_MB uses Python identifier TOTAL_MB
    __TOTAL_MB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MB'), 'TOTAL_MB', '__httpopennebula_orgXMLSchema_CTD_ANON_61_httpopennebula_orgXMLSchemaTOTAL_MB', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 62, 26), )

    
    TOTAL_MB = property(__TOTAL_MB.value, __TOTAL_MB.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USED_MB uses Python identifier USED_MB
    __USED_MB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USED_MB'), 'USED_MB', '__httpopennebula_orgXMLSchema_CTD_ANON_61_httpopennebula_orgXMLSchemaUSED_MB', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 63, 26), )

    
    USED_MB = property(__USED_MB.value, __USED_MB.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __FREE_MB.name() : __FREE_MB,
        __TOTAL_MB.name() : __TOTAL_MB,
        __USED_MB.name() : __USED_MB
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_61 = CTD_ANON_61


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 71, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}PCI uses Python identifier PCI
    __PCI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PCI'), 'PCI', '__httpopennebula_orgXMLSchema_CTD_ANON_62_httpopennebula_orgXMLSchemaPCI', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 73, 20), )

    
    PCI = property(__PCI.value, __PCI.set, None, None)

    _ElementMap.update({
        __PCI.name() : __PCI
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_62 = CTD_ANON_62


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 81, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_63_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 83, 18), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_63 = CTD_ANON_63


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host_pool.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}HOST uses Python identifier HOST
    __HOST = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HOST'), 'HOST', '__httpopennebula_orgXMLSchema_CTD_ANON_64_httpopennebula_orgXMLSchemaHOST', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 3, 2), )

    
    HOST = property(__HOST.value, __HOST.set, None, None)

    _ElementMap.update({
        __HOST.name() : __HOST
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_64 = CTD_ANON_64


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 6, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 7, 8), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 8, 8), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UNAME uses Python identifier UNAME
    __UNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), 'UNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaUNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 9, 8), )

    
    UNAME = property(__UNAME.value, __UNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 10, 8), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 11, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PERMISSIONS uses Python identifier PERMISSIONS
    __PERMISSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), 'PERMISSIONS', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaPERMISSIONS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 12, 8), )

    
    PERMISSIONS = property(__PERMISSIONS.value, __PERMISSIONS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TYPE'), 'TYPE', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaTYPE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 27, 8), )

    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DISK_TYPE uses Python identifier DISK_TYPE
    __DISK_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DISK_TYPE'), 'DISK_TYPE', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaDISK_TYPE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 28, 8), )

    
    DISK_TYPE = property(__DISK_TYPE.value, __DISK_TYPE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PERSISTENT uses Python identifier PERSISTENT
    __PERSISTENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PERSISTENT'), 'PERSISTENT', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaPERSISTENT', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 29, 8), )

    
    PERSISTENT = property(__PERSISTENT.value, __PERSISTENT.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}REGTIME uses Python identifier REGTIME
    __REGTIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'REGTIME'), 'REGTIME', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaREGTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 30, 8), )

    
    REGTIME = property(__REGTIME.value, __REGTIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SOURCE uses Python identifier SOURCE
    __SOURCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SOURCE'), 'SOURCE', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaSOURCE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 31, 8), )

    
    SOURCE = property(__SOURCE.value, __SOURCE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PATH uses Python identifier PATH
    __PATH = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PATH'), 'PATH', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaPATH', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 32, 8), )

    
    PATH = property(__PATH.value, __PATH.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}FSTYPE uses Python identifier FSTYPE
    __FSTYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FSTYPE'), 'FSTYPE', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaFSTYPE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 33, 8), )

    
    FSTYPE = property(__FSTYPE.value, __FSTYPE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 34, 8), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}STATE uses Python identifier STATE
    __STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STATE'), 'STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaSTATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 49, 8), )

    
    STATE = property(__STATE.value, __STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RUNNING_VMS uses Python identifier RUNNING_VMS
    __RUNNING_VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RUNNING_VMS'), 'RUNNING_VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaRUNNING_VMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 50, 8), )

    
    RUNNING_VMS = property(__RUNNING_VMS.value, __RUNNING_VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CLONING_OPS uses Python identifier CLONING_OPS
    __CLONING_OPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLONING_OPS'), 'CLONING_OPS', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaCLONING_OPS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 51, 8), )

    
    CLONING_OPS = property(__CLONING_OPS.value, __CLONING_OPS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CLONING_ID uses Python identifier CLONING_ID
    __CLONING_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLONING_ID'), 'CLONING_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaCLONING_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 52, 8), )

    
    CLONING_ID = property(__CLONING_ID.value, __CLONING_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TARGET_SNAPSHOT uses Python identifier TARGET_SNAPSHOT
    __TARGET_SNAPSHOT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TARGET_SNAPSHOT'), 'TARGET_SNAPSHOT', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaTARGET_SNAPSHOT', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 53, 8), )

    
    TARGET_SNAPSHOT = property(__TARGET_SNAPSHOT.value, __TARGET_SNAPSHOT.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATASTORE_ID uses Python identifier DATASTORE_ID
    __DATASTORE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_ID'), 'DATASTORE_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaDATASTORE_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 54, 8), )

    
    DATASTORE_ID = property(__DATASTORE_ID.value, __DATASTORE_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATASTORE uses Python identifier DATASTORE
    __DATASTORE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), 'DATASTORE', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaDATASTORE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 55, 8), )

    
    DATASTORE = property(__DATASTORE.value, __DATASTORE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS uses Python identifier VMS
    __VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS'), 'VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 56, 8), )

    
    VMS = property(__VMS.value, __VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CLONES uses Python identifier CLONES
    __CLONES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLONES'), 'CLONES', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaCLONES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 63, 8), )

    
    CLONES = property(__CLONES.value, __CLONES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}APP_CLONES uses Python identifier APP_CLONES
    __APP_CLONES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'APP_CLONES'), 'APP_CLONES', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaAPP_CLONES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 70, 8), )

    
    APP_CLONES = property(__APP_CLONES.value, __APP_CLONES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 77, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SNAPSHOTS uses Python identifier SNAPSHOTS
    __SNAPSHOTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOTS'), 'SNAPSHOTS', '__httpopennebula_orgXMLSchema_CTD_ANON_65_httpopennebula_orgXMLSchemaSNAPSHOTS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 78, 8), )

    
    SNAPSHOTS = property(__SNAPSHOTS.value, __SNAPSHOTS.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __UNAME.name() : __UNAME,
        __GNAME.name() : __GNAME,
        __NAME.name() : __NAME,
        __PERMISSIONS.name() : __PERMISSIONS,
        __TYPE.name() : __TYPE,
        __DISK_TYPE.name() : __DISK_TYPE,
        __PERSISTENT.name() : __PERSISTENT,
        __REGTIME.name() : __REGTIME,
        __SOURCE.name() : __SOURCE,
        __PATH.name() : __PATH,
        __FSTYPE.name() : __FSTYPE,
        __SIZE.name() : __SIZE,
        __STATE.name() : __STATE,
        __RUNNING_VMS.name() : __RUNNING_VMS,
        __CLONING_OPS.name() : __CLONING_OPS,
        __CLONING_ID.name() : __CLONING_ID,
        __TARGET_SNAPSHOT.name() : __TARGET_SNAPSHOT,
        __DATASTORE_ID.name() : __DATASTORE_ID,
        __DATASTORE.name() : __DATASTORE,
        __VMS.name() : __VMS,
        __CLONES.name() : __CLONES,
        __APP_CLONES.name() : __APP_CLONES,
        __TEMPLATE.name() : __TEMPLATE,
        __SNAPSHOTS.name() : __SNAPSHOTS
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_65 = CTD_ANON_65


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 13, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OWNER_U uses Python identifier OWNER_U
    __OWNER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), 'OWNER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_66_httpopennebula_orgXMLSchemaOWNER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 15, 14), )

    
    OWNER_U = property(__OWNER_U.value, __OWNER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_M uses Python identifier OWNER_M
    __OWNER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), 'OWNER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_66_httpopennebula_orgXMLSchemaOWNER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 16, 14), )

    
    OWNER_M = property(__OWNER_M.value, __OWNER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_A uses Python identifier OWNER_A
    __OWNER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), 'OWNER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_66_httpopennebula_orgXMLSchemaOWNER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 17, 14), )

    
    OWNER_A = property(__OWNER_A.value, __OWNER_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_U uses Python identifier GROUP_U
    __GROUP_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), 'GROUP_U', '__httpopennebula_orgXMLSchema_CTD_ANON_66_httpopennebula_orgXMLSchemaGROUP_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 18, 14), )

    
    GROUP_U = property(__GROUP_U.value, __GROUP_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_M uses Python identifier GROUP_M
    __GROUP_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), 'GROUP_M', '__httpopennebula_orgXMLSchema_CTD_ANON_66_httpopennebula_orgXMLSchemaGROUP_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 19, 14), )

    
    GROUP_M = property(__GROUP_M.value, __GROUP_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_A uses Python identifier GROUP_A
    __GROUP_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), 'GROUP_A', '__httpopennebula_orgXMLSchema_CTD_ANON_66_httpopennebula_orgXMLSchemaGROUP_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 20, 14), )

    
    GROUP_A = property(__GROUP_A.value, __GROUP_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_U uses Python identifier OTHER_U
    __OTHER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), 'OTHER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_66_httpopennebula_orgXMLSchemaOTHER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 21, 14), )

    
    OTHER_U = property(__OTHER_U.value, __OTHER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_M uses Python identifier OTHER_M
    __OTHER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), 'OTHER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_66_httpopennebula_orgXMLSchemaOTHER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 22, 14), )

    
    OTHER_M = property(__OTHER_M.value, __OTHER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_A uses Python identifier OTHER_A
    __OTHER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), 'OTHER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_66_httpopennebula_orgXMLSchemaOTHER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 23, 14), )

    
    OTHER_A = property(__OTHER_A.value, __OTHER_A.set, None, None)

    _ElementMap.update({
        __OWNER_U.name() : __OWNER_U,
        __OWNER_M.name() : __OWNER_M,
        __OWNER_A.name() : __OWNER_A,
        __GROUP_U.name() : __GROUP_U,
        __GROUP_M.name() : __GROUP_M,
        __GROUP_A.name() : __GROUP_A,
        __OTHER_U.name() : __OTHER_U,
        __OTHER_M.name() : __OTHER_M,
        __OTHER_A.name() : __OTHER_A
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_66 = CTD_ANON_66


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 57, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_67_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 59, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_67 = CTD_ANON_67


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 64, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_68_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 66, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_68 = CTD_ANON_68


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 71, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_69_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 73, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_69 = CTD_ANON_69


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 79, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ALLOW_ORPHANS uses Python identifier ALLOW_ORPHANS
    __ALLOW_ORPHANS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ALLOW_ORPHANS'), 'ALLOW_ORPHANS', '__httpopennebula_orgXMLSchema_CTD_ANON_70_httpopennebula_orgXMLSchemaALLOW_ORPHANS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 81, 14), )

    
    ALLOW_ORPHANS = property(__ALLOW_ORPHANS.value, __ALLOW_ORPHANS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SNAPSHOT uses Python identifier SNAPSHOT
    __SNAPSHOT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOT'), 'SNAPSHOT', '__httpopennebula_orgXMLSchema_CTD_ANON_70_httpopennebula_orgXMLSchemaSNAPSHOT', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 82, 14), )

    
    SNAPSHOT = property(__SNAPSHOT.value, __SNAPSHOT.set, None, None)

    _ElementMap.update({
        __ALLOW_ORPHANS.name() : __ALLOW_ORPHANS,
        __SNAPSHOT.name() : __SNAPSHOT
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_70 = CTD_ANON_70


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 83, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}CHILDREN uses Python identifier CHILDREN
    __CHILDREN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CHILDREN'), 'CHILDREN', '__httpopennebula_orgXMLSchema_CTD_ANON_71_httpopennebula_orgXMLSchemaCHILDREN', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 85, 20), )

    
    CHILDREN = property(__CHILDREN.value, __CHILDREN.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ACTIVE uses Python identifier ACTIVE
    __ACTIVE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ACTIVE'), 'ACTIVE', '__httpopennebula_orgXMLSchema_CTD_ANON_71_httpopennebula_orgXMLSchemaACTIVE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 86, 20), )

    
    ACTIVE = property(__ACTIVE.value, __ACTIVE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATE uses Python identifier DATE
    __DATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATE'), 'DATE', '__httpopennebula_orgXMLSchema_CTD_ANON_71_httpopennebula_orgXMLSchemaDATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 87, 20), )

    
    DATE = property(__DATE.value, __DATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_71_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 88, 20), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_71_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 89, 20), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PARENT uses Python identifier PARENT
    __PARENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PARENT'), 'PARENT', '__httpopennebula_orgXMLSchema_CTD_ANON_71_httpopennebula_orgXMLSchemaPARENT', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 90, 20), )

    
    PARENT = property(__PARENT.value, __PARENT.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_71_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 91, 20), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    _ElementMap.update({
        __CHILDREN.name() : __CHILDREN,
        __ACTIVE.name() : __ACTIVE,
        __DATE.name() : __DATE,
        __ID.name() : __ID,
        __NAME.name() : __NAME,
        __PARENT.name() : __PARENT,
        __SIZE.name() : __SIZE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_71 = CTD_ANON_71


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image_pool.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}IMAGE uses Python identifier IMAGE
    __IMAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), 'IMAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_72_httpopennebula_orgXMLSchemaIMAGE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 3, 2), )

    
    IMAGE = property(__IMAGE.value, __IMAGE.set, None, None)

    _ElementMap.update({
        __IMAGE.name() : __IMAGE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_72 = CTD_ANON_72


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 7, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 8, 8), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 9, 8), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UNAME uses Python identifier UNAME
    __UNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), 'UNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaUNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 10, 8), )

    
    UNAME = property(__UNAME.value, __UNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 11, 8), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 12, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MARKET_MAD uses Python identifier MARKET_MAD
    __MARKET_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MARKET_MAD'), 'MARKET_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaMARKET_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 13, 8), )

    
    MARKET_MAD = property(__MARKET_MAD.value, __MARKET_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ZONE_ID uses Python identifier ZONE_ID
    __ZONE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), 'ZONE_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaZONE_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 14, 8), )

    
    ZONE_ID = property(__ZONE_ID.value, __ZONE_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TOTAL_MB uses Python identifier TOTAL_MB
    __TOTAL_MB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MB'), 'TOTAL_MB', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaTOTAL_MB', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 15, 8), )

    
    TOTAL_MB = property(__TOTAL_MB.value, __TOTAL_MB.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}FREE_MB uses Python identifier FREE_MB
    __FREE_MB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FREE_MB'), 'FREE_MB', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaFREE_MB', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 16, 8), )

    
    FREE_MB = property(__FREE_MB.value, __FREE_MB.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USED_MB uses Python identifier USED_MB
    __USED_MB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USED_MB'), 'USED_MB', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaUSED_MB', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 17, 8), )

    
    USED_MB = property(__USED_MB.value, __USED_MB.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MARKETPLACEAPPS uses Python identifier MARKETPLACEAPPS
    __MARKETPLACEAPPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACEAPPS'), 'MARKETPLACEAPPS', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaMARKETPLACEAPPS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 18, 8), )

    
    MARKETPLACEAPPS = property(__MARKETPLACEAPPS.value, __MARKETPLACEAPPS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PERMISSIONS uses Python identifier PERMISSIONS
    __PERMISSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), 'PERMISSIONS', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaPERMISSIONS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 25, 8), )

    
    PERMISSIONS = property(__PERMISSIONS.value, __PERMISSIONS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_73_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 40, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __UNAME.name() : __UNAME,
        __GNAME.name() : __GNAME,
        __NAME.name() : __NAME,
        __MARKET_MAD.name() : __MARKET_MAD,
        __ZONE_ID.name() : __ZONE_ID,
        __TOTAL_MB.name() : __TOTAL_MB,
        __FREE_MB.name() : __FREE_MB,
        __USED_MB.name() : __USED_MB,
        __MARKETPLACEAPPS.name() : __MARKETPLACEAPPS,
        __PERMISSIONS.name() : __PERMISSIONS,
        __TEMPLATE.name() : __TEMPLATE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_73 = CTD_ANON_73


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 19, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_74_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 21, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_74 = CTD_ANON_74


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 26, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OWNER_U uses Python identifier OWNER_U
    __OWNER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), 'OWNER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_75_httpopennebula_orgXMLSchemaOWNER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 28, 14), )

    
    OWNER_U = property(__OWNER_U.value, __OWNER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_M uses Python identifier OWNER_M
    __OWNER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), 'OWNER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_75_httpopennebula_orgXMLSchemaOWNER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 29, 14), )

    
    OWNER_M = property(__OWNER_M.value, __OWNER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_A uses Python identifier OWNER_A
    __OWNER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), 'OWNER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_75_httpopennebula_orgXMLSchemaOWNER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 30, 14), )

    
    OWNER_A = property(__OWNER_A.value, __OWNER_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_U uses Python identifier GROUP_U
    __GROUP_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), 'GROUP_U', '__httpopennebula_orgXMLSchema_CTD_ANON_75_httpopennebula_orgXMLSchemaGROUP_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 31, 14), )

    
    GROUP_U = property(__GROUP_U.value, __GROUP_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_M uses Python identifier GROUP_M
    __GROUP_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), 'GROUP_M', '__httpopennebula_orgXMLSchema_CTD_ANON_75_httpopennebula_orgXMLSchemaGROUP_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 32, 14), )

    
    GROUP_M = property(__GROUP_M.value, __GROUP_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_A uses Python identifier GROUP_A
    __GROUP_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), 'GROUP_A', '__httpopennebula_orgXMLSchema_CTD_ANON_75_httpopennebula_orgXMLSchemaGROUP_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 33, 14), )

    
    GROUP_A = property(__GROUP_A.value, __GROUP_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_U uses Python identifier OTHER_U
    __OTHER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), 'OTHER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_75_httpopennebula_orgXMLSchemaOTHER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 34, 14), )

    
    OTHER_U = property(__OTHER_U.value, __OTHER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_M uses Python identifier OTHER_M
    __OTHER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), 'OTHER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_75_httpopennebula_orgXMLSchemaOTHER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 35, 14), )

    
    OTHER_M = property(__OTHER_M.value, __OTHER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_A uses Python identifier OTHER_A
    __OTHER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), 'OTHER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_75_httpopennebula_orgXMLSchemaOTHER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 36, 14), )

    
    OTHER_A = property(__OTHER_A.value, __OTHER_A.set, None, None)

    _ElementMap.update({
        __OWNER_U.name() : __OWNER_U,
        __OWNER_M.name() : __OWNER_M,
        __OWNER_A.name() : __OWNER_A,
        __GROUP_U.name() : __GROUP_U,
        __GROUP_M.name() : __GROUP_M,
        __GROUP_A.name() : __GROUP_A,
        __OTHER_U.name() : __OTHER_U,
        __OTHER_M.name() : __OTHER_M,
        __OTHER_A.name() : __OTHER_A
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_75 = CTD_ANON_75


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace_pool.xsd', 6, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}MARKETPLACE uses Python identifier MARKETPLACE
    __MARKETPLACE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACE'), 'MARKETPLACE', '__httpopennebula_orgXMLSchema_CTD_ANON_76_httpopennebula_orgXMLSchemaMARKETPLACE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 4, 2), )

    
    MARKETPLACE = property(__MARKETPLACE.value, __MARKETPLACE.set, None, None)

    _ElementMap.update({
        __MARKETPLACE.name() : __MARKETPLACE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_76 = CTD_ANON_76


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 7, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 8, 8), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 9, 8), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UNAME uses Python identifier UNAME
    __UNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), 'UNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaUNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 10, 8), )

    
    UNAME = property(__UNAME.value, __UNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 11, 8), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}REGTIME uses Python identifier REGTIME
    __REGTIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'REGTIME'), 'REGTIME', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaREGTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 12, 8), )

    
    REGTIME = property(__REGTIME.value, __REGTIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 13, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ZONE_ID uses Python identifier ZONE_ID
    __ZONE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), 'ZONE_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaZONE_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 14, 8), )

    
    ZONE_ID = property(__ZONE_ID.value, __ZONE_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ORIGIN_ID uses Python identifier ORIGIN_ID
    __ORIGIN_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ORIGIN_ID'), 'ORIGIN_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaORIGIN_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 15, 8), )

    
    ORIGIN_ID = property(__ORIGIN_ID.value, __ORIGIN_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SOURCE uses Python identifier SOURCE
    __SOURCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SOURCE'), 'SOURCE', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaSOURCE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 16, 8), )

    
    SOURCE = property(__SOURCE.value, __SOURCE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MD5 uses Python identifier MD5
    __MD5 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MD5'), 'MD5', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaMD5', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 17, 8), )

    
    MD5 = property(__MD5.value, __MD5.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 18, 8), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DESCRIPTION uses Python identifier DESCRIPTION
    __DESCRIPTION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DESCRIPTION'), 'DESCRIPTION', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaDESCRIPTION', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 19, 8), )

    
    DESCRIPTION = property(__DESCRIPTION.value, __DESCRIPTION.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VERSION uses Python identifier VERSION
    __VERSION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VERSION'), 'VERSION', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaVERSION', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 20, 8), )

    
    VERSION = property(__VERSION.value, __VERSION.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}FORMAT uses Python identifier FORMAT
    __FORMAT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FORMAT'), 'FORMAT', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaFORMAT', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 21, 8), )

    
    FORMAT = property(__FORMAT.value, __FORMAT.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}APPTEMPLATE64 uses Python identifier APPTEMPLATE64
    __APPTEMPLATE64 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'APPTEMPLATE64'), 'APPTEMPLATE64', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaAPPTEMPLATE64', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 22, 8), )

    
    APPTEMPLATE64 = property(__APPTEMPLATE64.value, __APPTEMPLATE64.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MARKETPLACE_ID uses Python identifier MARKETPLACE_ID
    __MARKETPLACE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACE_ID'), 'MARKETPLACE_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaMARKETPLACE_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 23, 8), )

    
    MARKETPLACE_ID = property(__MARKETPLACE_ID.value, __MARKETPLACE_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MARKETPLACE uses Python identifier MARKETPLACE
    __MARKETPLACE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACE'), 'MARKETPLACE', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaMARKETPLACE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 24, 8), )

    
    MARKETPLACE = property(__MARKETPLACE.value, __MARKETPLACE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}STATE uses Python identifier STATE
    __STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STATE'), 'STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaSTATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 25, 8), )

    
    STATE = property(__STATE.value, __STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TYPE'), 'TYPE', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaTYPE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 26, 8), )

    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PERMISSIONS uses Python identifier PERMISSIONS
    __PERMISSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), 'PERMISSIONS', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaPERMISSIONS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 27, 8), )

    
    PERMISSIONS = property(__PERMISSIONS.value, __PERMISSIONS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_77_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 42, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __UNAME.name() : __UNAME,
        __GNAME.name() : __GNAME,
        __REGTIME.name() : __REGTIME,
        __NAME.name() : __NAME,
        __ZONE_ID.name() : __ZONE_ID,
        __ORIGIN_ID.name() : __ORIGIN_ID,
        __SOURCE.name() : __SOURCE,
        __MD5.name() : __MD5,
        __SIZE.name() : __SIZE,
        __DESCRIPTION.name() : __DESCRIPTION,
        __VERSION.name() : __VERSION,
        __FORMAT.name() : __FORMAT,
        __APPTEMPLATE64.name() : __APPTEMPLATE64,
        __MARKETPLACE_ID.name() : __MARKETPLACE_ID,
        __MARKETPLACE.name() : __MARKETPLACE,
        __STATE.name() : __STATE,
        __TYPE.name() : __TYPE,
        __PERMISSIONS.name() : __PERMISSIONS,
        __TEMPLATE.name() : __TEMPLATE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_77 = CTD_ANON_77


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 28, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OWNER_U uses Python identifier OWNER_U
    __OWNER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), 'OWNER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_78_httpopennebula_orgXMLSchemaOWNER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 30, 14), )

    
    OWNER_U = property(__OWNER_U.value, __OWNER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_M uses Python identifier OWNER_M
    __OWNER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), 'OWNER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_78_httpopennebula_orgXMLSchemaOWNER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 31, 14), )

    
    OWNER_M = property(__OWNER_M.value, __OWNER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_A uses Python identifier OWNER_A
    __OWNER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), 'OWNER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_78_httpopennebula_orgXMLSchemaOWNER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 32, 14), )

    
    OWNER_A = property(__OWNER_A.value, __OWNER_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_U uses Python identifier GROUP_U
    __GROUP_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), 'GROUP_U', '__httpopennebula_orgXMLSchema_CTD_ANON_78_httpopennebula_orgXMLSchemaGROUP_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 33, 14), )

    
    GROUP_U = property(__GROUP_U.value, __GROUP_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_M uses Python identifier GROUP_M
    __GROUP_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), 'GROUP_M', '__httpopennebula_orgXMLSchema_CTD_ANON_78_httpopennebula_orgXMLSchemaGROUP_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 34, 14), )

    
    GROUP_M = property(__GROUP_M.value, __GROUP_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_A uses Python identifier GROUP_A
    __GROUP_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), 'GROUP_A', '__httpopennebula_orgXMLSchema_CTD_ANON_78_httpopennebula_orgXMLSchemaGROUP_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 35, 14), )

    
    GROUP_A = property(__GROUP_A.value, __GROUP_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_U uses Python identifier OTHER_U
    __OTHER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), 'OTHER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_78_httpopennebula_orgXMLSchemaOTHER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 36, 14), )

    
    OTHER_U = property(__OTHER_U.value, __OTHER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_M uses Python identifier OTHER_M
    __OTHER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), 'OTHER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_78_httpopennebula_orgXMLSchemaOTHER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 37, 14), )

    
    OTHER_M = property(__OTHER_M.value, __OTHER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_A uses Python identifier OTHER_A
    __OTHER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), 'OTHER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_78_httpopennebula_orgXMLSchemaOTHER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 38, 14), )

    
    OTHER_A = property(__OTHER_A.value, __OTHER_A.set, None, None)

    _ElementMap.update({
        __OWNER_U.name() : __OWNER_U,
        __OWNER_M.name() : __OWNER_M,
        __OWNER_A.name() : __OWNER_A,
        __GROUP_U.name() : __GROUP_U,
        __GROUP_M.name() : __GROUP_M,
        __GROUP_A.name() : __GROUP_A,
        __OTHER_U.name() : __OTHER_U,
        __OTHER_M.name() : __OTHER_M,
        __OTHER_A.name() : __OTHER_A
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_78 = CTD_ANON_78


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp_pool.xsd', 6, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}MARKETPLACEAPP uses Python identifier MARKETPLACEAPP
    __MARKETPLACEAPP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACEAPP'), 'MARKETPLACEAPP', '__httpopennebula_orgXMLSchema_CTD_ANON_79_httpopennebula_orgXMLSchemaMARKETPLACEAPP', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 4, 2), )

    
    MARKETPLACEAPP = property(__MARKETPLACEAPP.value, __MARKETPLACEAPP.set, None, None)

    _ElementMap.update({
        __MARKETPLACEAPP.name() : __MARKETPLACEAPP
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_79 = CTD_ANON_79


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 7, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 8, 8), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUPS uses Python identifier GROUPS
    __GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUPS'), 'GROUPS', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaGROUPS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 9, 8), )

    
    GROUPS = property(__GROUPS.value, __GROUPS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 16, 8), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 17, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PASSWORD uses Python identifier PASSWORD
    __PASSWORD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PASSWORD'), 'PASSWORD', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaPASSWORD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 18, 8), )

    
    PASSWORD = property(__PASSWORD.value, __PASSWORD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}AUTH_DRIVER uses Python identifier AUTH_DRIVER
    __AUTH_DRIVER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AUTH_DRIVER'), 'AUTH_DRIVER', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaAUTH_DRIVER', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 19, 8), )

    
    AUTH_DRIVER = property(__AUTH_DRIVER.value, __AUTH_DRIVER.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ENABLED uses Python identifier ENABLED
    __ENABLED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ENABLED'), 'ENABLED', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaENABLED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 20, 8), )

    
    ENABLED = property(__ENABLED.value, __ENABLED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LOGIN_TOKEN uses Python identifier LOGIN_TOKEN
    __LOGIN_TOKEN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LOGIN_TOKEN'), 'LOGIN_TOKEN', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaLOGIN_TOKEN', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 21, 8), )

    
    LOGIN_TOKEN = property(__LOGIN_TOKEN.value, __LOGIN_TOKEN.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 30, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATASTORE_QUOTA uses Python identifier DATASTORE_QUOTA
    __DATASTORE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), 'DATASTORE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaDATASTORE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 31, 8), )

    
    DATASTORE_QUOTA = property(__DATASTORE_QUOTA.value, __DATASTORE_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NETWORK_QUOTA uses Python identifier NETWORK_QUOTA
    __NETWORK_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), 'NETWORK_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaNETWORK_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 48, 8), )

    
    NETWORK_QUOTA = property(__NETWORK_QUOTA.value, __NETWORK_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM_QUOTA uses Python identifier VM_QUOTA
    __VM_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), 'VM_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaVM_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 63, 8), )

    
    VM_QUOTA = property(__VM_QUOTA.value, __VM_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGE_QUOTA uses Python identifier IMAGE_QUOTA
    __IMAGE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), 'IMAGE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaIMAGE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 83, 8), )

    
    IMAGE_QUOTA = property(__IMAGE_QUOTA.value, __IMAGE_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DEFAULT_USER_QUOTAS uses Python identifier DEFAULT_USER_QUOTAS
    __DEFAULT_USER_QUOTAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_USER_QUOTAS'), 'DEFAULT_USER_QUOTAS', '__httpopennebula_orgXMLSchema_CTD_ANON_80_httpopennebula_orgXMLSchemaDEFAULT_USER_QUOTAS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 98, 8), )

    
    DEFAULT_USER_QUOTAS = property(__DEFAULT_USER_QUOTAS.value, __DEFAULT_USER_QUOTAS.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __GID.name() : __GID,
        __GROUPS.name() : __GROUPS,
        __GNAME.name() : __GNAME,
        __NAME.name() : __NAME,
        __PASSWORD.name() : __PASSWORD,
        __AUTH_DRIVER.name() : __AUTH_DRIVER,
        __ENABLED.name() : __ENABLED,
        __LOGIN_TOKEN.name() : __LOGIN_TOKEN,
        __TEMPLATE.name() : __TEMPLATE,
        __DATASTORE_QUOTA.name() : __DATASTORE_QUOTA,
        __NETWORK_QUOTA.name() : __NETWORK_QUOTA,
        __VM_QUOTA.name() : __VM_QUOTA,
        __IMAGE_QUOTA.name() : __IMAGE_QUOTA,
        __DEFAULT_USER_QUOTAS.name() : __DEFAULT_USER_QUOTAS
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_80 = CTD_ANON_80


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 10, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_81_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 12, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_81 = CTD_ANON_81


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 22, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}TOKEN uses Python identifier TOKEN
    __TOKEN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TOKEN'), 'TOKEN', '__httpopennebula_orgXMLSchema_CTD_ANON_82_httpopennebula_orgXMLSchemaTOKEN', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 24, 14), )

    
    TOKEN = property(__TOKEN.value, __TOKEN.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}EXPIRATION_TIME uses Python identifier EXPIRATION_TIME
    __EXPIRATION_TIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EXPIRATION_TIME'), 'EXPIRATION_TIME', '__httpopennebula_orgXMLSchema_CTD_ANON_82_httpopennebula_orgXMLSchemaEXPIRATION_TIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 25, 14), )

    
    EXPIRATION_TIME = property(__EXPIRATION_TIME.value, __EXPIRATION_TIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EGID'), 'EGID', '__httpopennebula_orgXMLSchema_CTD_ANON_82_httpopennebula_orgXMLSchemaEGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 26, 14), )

    
    EGID = property(__EGID.value, __EGID.set, None, None)

    _ElementMap.update({
        __TOKEN.name() : __TOKEN,
        __EXPIRATION_TIME.name() : __EXPIRATION_TIME,
        __EGID.name() : __EGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_82 = CTD_ANON_82


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_83 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 32, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE uses Python identifier DATASTORE
    __DATASTORE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), 'DATASTORE', '__httpopennebula_orgXMLSchema_CTD_ANON_83_httpopennebula_orgXMLSchemaDATASTORE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 34, 14), )

    
    DATASTORE = property(__DATASTORE.value, __DATASTORE.set, None, None)

    _ElementMap.update({
        __DATASTORE.name() : __DATASTORE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_83 = CTD_ANON_83


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 35, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_84_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 37, 18), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES uses Python identifier IMAGES
    __IMAGES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), 'IMAGES', '__httpopennebula_orgXMLSchema_CTD_ANON_84_httpopennebula_orgXMLSchemaIMAGES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 38, 18), )

    
    IMAGES = property(__IMAGES.value, __IMAGES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES_USED uses Python identifier IMAGES_USED
    __IMAGES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), 'IMAGES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_84_httpopennebula_orgXMLSchemaIMAGES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 39, 18), )

    
    IMAGES_USED = property(__IMAGES_USED.value, __IMAGES_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_84_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 40, 18), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE_USED uses Python identifier SIZE_USED
    __SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), 'SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_84_httpopennebula_orgXMLSchemaSIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 41, 18), )

    
    SIZE_USED = property(__SIZE_USED.value, __SIZE_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __IMAGES.name() : __IMAGES,
        __IMAGES_USED.name() : __IMAGES_USED,
        __SIZE.name() : __SIZE,
        __SIZE_USED.name() : __SIZE_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_84 = CTD_ANON_84


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 49, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}NETWORK uses Python identifier NETWORK
    __NETWORK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), 'NETWORK', '__httpopennebula_orgXMLSchema_CTD_ANON_85_httpopennebula_orgXMLSchemaNETWORK', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 51, 14), )

    
    NETWORK = property(__NETWORK.value, __NETWORK.set, None, None)

    _ElementMap.update({
        __NETWORK.name() : __NETWORK
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_85 = CTD_ANON_85


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_86 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 52, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_86_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 54, 18), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES uses Python identifier LEASES
    __LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), 'LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_86_httpopennebula_orgXMLSchemaLEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 55, 18), )

    
    LEASES = property(__LEASES.value, __LEASES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES_USED uses Python identifier LEASES_USED
    __LEASES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), 'LEASES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_86_httpopennebula_orgXMLSchemaLEASES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 56, 18), )

    
    LEASES_USED = property(__LEASES_USED.value, __LEASES_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __LEASES.name() : __LEASES,
        __LEASES_USED.name() : __LEASES_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_86 = CTD_ANON_86


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_87 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 64, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VM uses Python identifier VM
    __VM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM'), 'VM', '__httpopennebula_orgXMLSchema_CTD_ANON_87_httpopennebula_orgXMLSchemaVM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 66, 14), )

    
    VM = property(__VM.value, __VM.set, None, None)

    _ElementMap.update({
        __VM.name() : __VM
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_87 = CTD_ANON_87


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_88 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 67, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}CPU uses Python identifier CPU
    __CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU'), 'CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_88_httpopennebula_orgXMLSchemaCPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 69, 20), )

    
    CPU = property(__CPU.value, __CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CPU_USED uses Python identifier CPU_USED
    __CPU_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), 'CPU_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_88_httpopennebula_orgXMLSchemaCPU_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 70, 20), )

    
    CPU_USED = property(__CPU_USED.value, __CPU_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY uses Python identifier MEMORY
    __MEMORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), 'MEMORY', '__httpopennebula_orgXMLSchema_CTD_ANON_88_httpopennebula_orgXMLSchemaMEMORY', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 71, 20), )

    
    MEMORY = property(__MEMORY.value, __MEMORY.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY_USED uses Python identifier MEMORY_USED
    __MEMORY_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), 'MEMORY_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_88_httpopennebula_orgXMLSchemaMEMORY_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 72, 20), )

    
    MEMORY_USED = property(__MEMORY_USED.value, __MEMORY_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE uses Python identifier SYSTEM_DISK_SIZE
    __SYSTEM_DISK_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), 'SYSTEM_DISK_SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_88_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 73, 20), )

    
    SYSTEM_DISK_SIZE = property(__SYSTEM_DISK_SIZE.value, __SYSTEM_DISK_SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE_USED uses Python identifier SYSTEM_DISK_SIZE_USED
    __SYSTEM_DISK_SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), 'SYSTEM_DISK_SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_88_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 74, 20), )

    
    SYSTEM_DISK_SIZE_USED = property(__SYSTEM_DISK_SIZE_USED.value, __SYSTEM_DISK_SIZE_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS uses Python identifier VMS
    __VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS'), 'VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_88_httpopennebula_orgXMLSchemaVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 75, 20), )

    
    VMS = property(__VMS.value, __VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS_USED uses Python identifier VMS_USED
    __VMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), 'VMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_88_httpopennebula_orgXMLSchemaVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 76, 20), )

    
    VMS_USED = property(__VMS_USED.value, __VMS_USED.set, None, None)

    _ElementMap.update({
        __CPU.name() : __CPU,
        __CPU_USED.name() : __CPU_USED,
        __MEMORY.name() : __MEMORY,
        __MEMORY_USED.name() : __MEMORY_USED,
        __SYSTEM_DISK_SIZE.name() : __SYSTEM_DISK_SIZE,
        __SYSTEM_DISK_SIZE_USED.name() : __SYSTEM_DISK_SIZE_USED,
        __VMS.name() : __VMS,
        __VMS_USED.name() : __VMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_88 = CTD_ANON_88


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 84, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}IMAGE uses Python identifier IMAGE
    __IMAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), 'IMAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_89_httpopennebula_orgXMLSchemaIMAGE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 86, 14), )

    
    IMAGE = property(__IMAGE.value, __IMAGE.set, None, None)

    _ElementMap.update({
        __IMAGE.name() : __IMAGE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_89 = CTD_ANON_89


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 87, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_90_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 89, 20), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS uses Python identifier RVMS
    __RVMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), 'RVMS', '__httpopennebula_orgXMLSchema_CTD_ANON_90_httpopennebula_orgXMLSchemaRVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 90, 20), )

    
    RVMS = property(__RVMS.value, __RVMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS_USED uses Python identifier RVMS_USED
    __RVMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), 'RVMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_90_httpopennebula_orgXMLSchemaRVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 91, 20), )

    
    RVMS_USED = property(__RVMS_USED.value, __RVMS_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __RVMS.name() : __RVMS,
        __RVMS_USED.name() : __RVMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_90 = CTD_ANON_90


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 99, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE_QUOTA uses Python identifier DATASTORE_QUOTA
    __DATASTORE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), 'DATASTORE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_91_httpopennebula_orgXMLSchemaDATASTORE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 101, 16), )

    
    DATASTORE_QUOTA = property(__DATASTORE_QUOTA.value, __DATASTORE_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NETWORK_QUOTA uses Python identifier NETWORK_QUOTA
    __NETWORK_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), 'NETWORK_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_91_httpopennebula_orgXMLSchemaNETWORK_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 118, 16), )

    
    NETWORK_QUOTA = property(__NETWORK_QUOTA.value, __NETWORK_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM_QUOTA uses Python identifier VM_QUOTA
    __VM_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), 'VM_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_91_httpopennebula_orgXMLSchemaVM_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 133, 16), )

    
    VM_QUOTA = property(__VM_QUOTA.value, __VM_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGE_QUOTA uses Python identifier IMAGE_QUOTA
    __IMAGE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), 'IMAGE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_91_httpopennebula_orgXMLSchemaIMAGE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 153, 16), )

    
    IMAGE_QUOTA = property(__IMAGE_QUOTA.value, __IMAGE_QUOTA.set, None, None)

    _ElementMap.update({
        __DATASTORE_QUOTA.name() : __DATASTORE_QUOTA,
        __NETWORK_QUOTA.name() : __NETWORK_QUOTA,
        __VM_QUOTA.name() : __VM_QUOTA,
        __IMAGE_QUOTA.name() : __IMAGE_QUOTA
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_91 = CTD_ANON_91


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_92 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 102, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE uses Python identifier DATASTORE
    __DATASTORE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), 'DATASTORE', '__httpopennebula_orgXMLSchema_CTD_ANON_92_httpopennebula_orgXMLSchemaDATASTORE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 104, 22), )

    
    DATASTORE = property(__DATASTORE.value, __DATASTORE.set, None, None)

    _ElementMap.update({
        __DATASTORE.name() : __DATASTORE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_92 = CTD_ANON_92


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_93 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 105, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_93_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 107, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES uses Python identifier IMAGES
    __IMAGES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), 'IMAGES', '__httpopennebula_orgXMLSchema_CTD_ANON_93_httpopennebula_orgXMLSchemaIMAGES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 108, 26), )

    
    IMAGES = property(__IMAGES.value, __IMAGES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES_USED uses Python identifier IMAGES_USED
    __IMAGES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), 'IMAGES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_93_httpopennebula_orgXMLSchemaIMAGES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 109, 26), )

    
    IMAGES_USED = property(__IMAGES_USED.value, __IMAGES_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_93_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 110, 26), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE_USED uses Python identifier SIZE_USED
    __SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), 'SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_93_httpopennebula_orgXMLSchemaSIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 111, 26), )

    
    SIZE_USED = property(__SIZE_USED.value, __SIZE_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __IMAGES.name() : __IMAGES,
        __IMAGES_USED.name() : __IMAGES_USED,
        __SIZE.name() : __SIZE,
        __SIZE_USED.name() : __SIZE_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_93 = CTD_ANON_93


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_94 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 119, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}NETWORK uses Python identifier NETWORK
    __NETWORK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), 'NETWORK', '__httpopennebula_orgXMLSchema_CTD_ANON_94_httpopennebula_orgXMLSchemaNETWORK', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 121, 22), )

    
    NETWORK = property(__NETWORK.value, __NETWORK.set, None, None)

    _ElementMap.update({
        __NETWORK.name() : __NETWORK
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_94 = CTD_ANON_94


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_95 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 122, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_95_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 124, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES uses Python identifier LEASES
    __LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), 'LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_95_httpopennebula_orgXMLSchemaLEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 125, 26), )

    
    LEASES = property(__LEASES.value, __LEASES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES_USED uses Python identifier LEASES_USED
    __LEASES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), 'LEASES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_95_httpopennebula_orgXMLSchemaLEASES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 126, 26), )

    
    LEASES_USED = property(__LEASES_USED.value, __LEASES_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __LEASES.name() : __LEASES,
        __LEASES_USED.name() : __LEASES_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_95 = CTD_ANON_95


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_96 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 134, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VM uses Python identifier VM
    __VM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM'), 'VM', '__httpopennebula_orgXMLSchema_CTD_ANON_96_httpopennebula_orgXMLSchemaVM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 136, 22), )

    
    VM = property(__VM.value, __VM.set, None, None)

    _ElementMap.update({
        __VM.name() : __VM
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_96 = CTD_ANON_96


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_97 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 137, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}CPU uses Python identifier CPU
    __CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU'), 'CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_97_httpopennebula_orgXMLSchemaCPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 139, 28), )

    
    CPU = property(__CPU.value, __CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CPU_USED uses Python identifier CPU_USED
    __CPU_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), 'CPU_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_97_httpopennebula_orgXMLSchemaCPU_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 140, 28), )

    
    CPU_USED = property(__CPU_USED.value, __CPU_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY uses Python identifier MEMORY
    __MEMORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), 'MEMORY', '__httpopennebula_orgXMLSchema_CTD_ANON_97_httpopennebula_orgXMLSchemaMEMORY', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 141, 28), )

    
    MEMORY = property(__MEMORY.value, __MEMORY.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY_USED uses Python identifier MEMORY_USED
    __MEMORY_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), 'MEMORY_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_97_httpopennebula_orgXMLSchemaMEMORY_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 142, 28), )

    
    MEMORY_USED = property(__MEMORY_USED.value, __MEMORY_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE uses Python identifier SYSTEM_DISK_SIZE
    __SYSTEM_DISK_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), 'SYSTEM_DISK_SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_97_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 143, 28), )

    
    SYSTEM_DISK_SIZE = property(__SYSTEM_DISK_SIZE.value, __SYSTEM_DISK_SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE_USED uses Python identifier SYSTEM_DISK_SIZE_USED
    __SYSTEM_DISK_SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), 'SYSTEM_DISK_SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_97_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 144, 28), )

    
    SYSTEM_DISK_SIZE_USED = property(__SYSTEM_DISK_SIZE_USED.value, __SYSTEM_DISK_SIZE_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS uses Python identifier VMS
    __VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS'), 'VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_97_httpopennebula_orgXMLSchemaVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 145, 28), )

    
    VMS = property(__VMS.value, __VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS_USED uses Python identifier VMS_USED
    __VMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), 'VMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_97_httpopennebula_orgXMLSchemaVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 146, 28), )

    
    VMS_USED = property(__VMS_USED.value, __VMS_USED.set, None, None)

    _ElementMap.update({
        __CPU.name() : __CPU,
        __CPU_USED.name() : __CPU_USED,
        __MEMORY.name() : __MEMORY,
        __MEMORY_USED.name() : __MEMORY_USED,
        __SYSTEM_DISK_SIZE.name() : __SYSTEM_DISK_SIZE,
        __SYSTEM_DISK_SIZE_USED.name() : __SYSTEM_DISK_SIZE_USED,
        __VMS.name() : __VMS,
        __VMS_USED.name() : __VMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_97 = CTD_ANON_97


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_98 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 154, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}IMAGE uses Python identifier IMAGE
    __IMAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), 'IMAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_98_httpopennebula_orgXMLSchemaIMAGE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 156, 22), )

    
    IMAGE = property(__IMAGE.value, __IMAGE.set, None, None)

    _ElementMap.update({
        __IMAGE.name() : __IMAGE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_98 = CTD_ANON_98


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_99 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 157, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_99_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 159, 28), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS uses Python identifier RVMS
    __RVMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), 'RVMS', '__httpopennebula_orgXMLSchema_CTD_ANON_99_httpopennebula_orgXMLSchemaRVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 160, 28), )

    
    RVMS = property(__RVMS.value, __RVMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS_USED uses Python identifier RVMS_USED
    __RVMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), 'RVMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_99_httpopennebula_orgXMLSchemaRVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 161, 28), )

    
    RVMS_USED = property(__RVMS_USED.value, __RVMS_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __RVMS.name() : __RVMS,
        __RVMS_USED.name() : __RVMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_99 = CTD_ANON_99


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_100 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}USER uses Python identifier USER
    __USER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USER'), 'USER', '__httpopennebula_orgXMLSchema_CTD_ANON_100_httpopennebula_orgXMLSchemaUSER', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 8, 10), )

    
    USER = property(__USER.value, __USER.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}QUOTAS uses Python identifier QUOTAS
    __QUOTAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'QUOTAS'), 'QUOTAS', '__httpopennebula_orgXMLSchema_CTD_ANON_100_httpopennebula_orgXMLSchemaQUOTAS', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 38, 10), )

    
    QUOTAS = property(__QUOTAS.value, __QUOTAS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DEFAULT_USER_QUOTAS uses Python identifier DEFAULT_USER_QUOTAS
    __DEFAULT_USER_QUOTAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_USER_QUOTAS'), 'DEFAULT_USER_QUOTAS', '__httpopennebula_orgXMLSchema_CTD_ANON_100_httpopennebula_orgXMLSchemaDEFAULT_USER_QUOTAS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 113, 8), )

    
    DEFAULT_USER_QUOTAS = property(__DEFAULT_USER_QUOTAS.value, __DEFAULT_USER_QUOTAS.set, None, None)

    _ElementMap.update({
        __USER.name() : __USER,
        __QUOTAS.name() : __QUOTAS,
        __DEFAULT_USER_QUOTAS.name() : __DEFAULT_USER_QUOTAS
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_100 = CTD_ANON_100


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_101 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 9, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_101_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 11, 16), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_101_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 12, 16), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUPS uses Python identifier GROUPS
    __GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUPS'), 'GROUPS', '__httpopennebula_orgXMLSchema_CTD_ANON_101_httpopennebula_orgXMLSchemaGROUPS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 13, 16), )

    
    GROUPS = property(__GROUPS.value, __GROUPS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_101_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 20, 16), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_101_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 21, 16), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PASSWORD uses Python identifier PASSWORD
    __PASSWORD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PASSWORD'), 'PASSWORD', '__httpopennebula_orgXMLSchema_CTD_ANON_101_httpopennebula_orgXMLSchemaPASSWORD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 22, 16), )

    
    PASSWORD = property(__PASSWORD.value, __PASSWORD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}AUTH_DRIVER uses Python identifier AUTH_DRIVER
    __AUTH_DRIVER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AUTH_DRIVER'), 'AUTH_DRIVER', '__httpopennebula_orgXMLSchema_CTD_ANON_101_httpopennebula_orgXMLSchemaAUTH_DRIVER', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 23, 16), )

    
    AUTH_DRIVER = property(__AUTH_DRIVER.value, __AUTH_DRIVER.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ENABLED uses Python identifier ENABLED
    __ENABLED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ENABLED'), 'ENABLED', '__httpopennebula_orgXMLSchema_CTD_ANON_101_httpopennebula_orgXMLSchemaENABLED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 24, 16), )

    
    ENABLED = property(__ENABLED.value, __ENABLED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LOGIN_TOKEN uses Python identifier LOGIN_TOKEN
    __LOGIN_TOKEN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LOGIN_TOKEN'), 'LOGIN_TOKEN', '__httpopennebula_orgXMLSchema_CTD_ANON_101_httpopennebula_orgXMLSchemaLOGIN_TOKEN', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 25, 16), )

    
    LOGIN_TOKEN = property(__LOGIN_TOKEN.value, __LOGIN_TOKEN.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_101_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 34, 16), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __GID.name() : __GID,
        __GROUPS.name() : __GROUPS,
        __GNAME.name() : __GNAME,
        __NAME.name() : __NAME,
        __PASSWORD.name() : __PASSWORD,
        __AUTH_DRIVER.name() : __AUTH_DRIVER,
        __ENABLED.name() : __ENABLED,
        __LOGIN_TOKEN.name() : __LOGIN_TOKEN,
        __TEMPLATE.name() : __TEMPLATE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_101 = CTD_ANON_101


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_102 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 14, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_102_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 16, 22), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_102 = CTD_ANON_102


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_103 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 26, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}TOKEN uses Python identifier TOKEN
    __TOKEN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TOKEN'), 'TOKEN', '__httpopennebula_orgXMLSchema_CTD_ANON_103_httpopennebula_orgXMLSchemaTOKEN', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 28, 22), )

    
    TOKEN = property(__TOKEN.value, __TOKEN.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}EXPIRATION_TIME uses Python identifier EXPIRATION_TIME
    __EXPIRATION_TIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EXPIRATION_TIME'), 'EXPIRATION_TIME', '__httpopennebula_orgXMLSchema_CTD_ANON_103_httpopennebula_orgXMLSchemaEXPIRATION_TIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 29, 22), )

    
    EXPIRATION_TIME = property(__EXPIRATION_TIME.value, __EXPIRATION_TIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EGID'), 'EGID', '__httpopennebula_orgXMLSchema_CTD_ANON_103_httpopennebula_orgXMLSchemaEGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 30, 22), )

    
    EGID = property(__EGID.value, __EGID.set, None, None)

    _ElementMap.update({
        __TOKEN.name() : __TOKEN,
        __EXPIRATION_TIME.name() : __EXPIRATION_TIME,
        __EGID.name() : __EGID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_103 = CTD_ANON_103


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_104 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 39, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_104_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 41, 16), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATASTORE_QUOTA uses Python identifier DATASTORE_QUOTA
    __DATASTORE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), 'DATASTORE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_104_httpopennebula_orgXMLSchemaDATASTORE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 42, 16), )

    
    DATASTORE_QUOTA = property(__DATASTORE_QUOTA.value, __DATASTORE_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NETWORK_QUOTA uses Python identifier NETWORK_QUOTA
    __NETWORK_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), 'NETWORK_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_104_httpopennebula_orgXMLSchemaNETWORK_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 59, 16), )

    
    NETWORK_QUOTA = property(__NETWORK_QUOTA.value, __NETWORK_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM_QUOTA uses Python identifier VM_QUOTA
    __VM_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), 'VM_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_104_httpopennebula_orgXMLSchemaVM_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 74, 16), )

    
    VM_QUOTA = property(__VM_QUOTA.value, __VM_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGE_QUOTA uses Python identifier IMAGE_QUOTA
    __IMAGE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), 'IMAGE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_104_httpopennebula_orgXMLSchemaIMAGE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 94, 16), )

    
    IMAGE_QUOTA = property(__IMAGE_QUOTA.value, __IMAGE_QUOTA.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __DATASTORE_QUOTA.name() : __DATASTORE_QUOTA,
        __NETWORK_QUOTA.name() : __NETWORK_QUOTA,
        __VM_QUOTA.name() : __VM_QUOTA,
        __IMAGE_QUOTA.name() : __IMAGE_QUOTA
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_104 = CTD_ANON_104


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_105 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 43, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE uses Python identifier DATASTORE
    __DATASTORE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), 'DATASTORE', '__httpopennebula_orgXMLSchema_CTD_ANON_105_httpopennebula_orgXMLSchemaDATASTORE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 45, 22), )

    
    DATASTORE = property(__DATASTORE.value, __DATASTORE.set, None, None)

    _ElementMap.update({
        __DATASTORE.name() : __DATASTORE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_105 = CTD_ANON_105


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_106 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 46, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_106_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 48, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES uses Python identifier IMAGES
    __IMAGES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), 'IMAGES', '__httpopennebula_orgXMLSchema_CTD_ANON_106_httpopennebula_orgXMLSchemaIMAGES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 49, 26), )

    
    IMAGES = property(__IMAGES.value, __IMAGES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES_USED uses Python identifier IMAGES_USED
    __IMAGES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), 'IMAGES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_106_httpopennebula_orgXMLSchemaIMAGES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 50, 26), )

    
    IMAGES_USED = property(__IMAGES_USED.value, __IMAGES_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_106_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 51, 26), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE_USED uses Python identifier SIZE_USED
    __SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), 'SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_106_httpopennebula_orgXMLSchemaSIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 52, 26), )

    
    SIZE_USED = property(__SIZE_USED.value, __SIZE_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __IMAGES.name() : __IMAGES,
        __IMAGES_USED.name() : __IMAGES_USED,
        __SIZE.name() : __SIZE,
        __SIZE_USED.name() : __SIZE_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_106 = CTD_ANON_106


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_107 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 60, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}NETWORK uses Python identifier NETWORK
    __NETWORK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), 'NETWORK', '__httpopennebula_orgXMLSchema_CTD_ANON_107_httpopennebula_orgXMLSchemaNETWORK', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 62, 22), )

    
    NETWORK = property(__NETWORK.value, __NETWORK.set, None, None)

    _ElementMap.update({
        __NETWORK.name() : __NETWORK
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_107 = CTD_ANON_107


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_108 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 63, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_108_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 65, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES uses Python identifier LEASES
    __LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), 'LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_108_httpopennebula_orgXMLSchemaLEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 66, 26), )

    
    LEASES = property(__LEASES.value, __LEASES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES_USED uses Python identifier LEASES_USED
    __LEASES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), 'LEASES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_108_httpopennebula_orgXMLSchemaLEASES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 67, 26), )

    
    LEASES_USED = property(__LEASES_USED.value, __LEASES_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __LEASES.name() : __LEASES,
        __LEASES_USED.name() : __LEASES_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_108 = CTD_ANON_108


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_109 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 75, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VM uses Python identifier VM
    __VM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM'), 'VM', '__httpopennebula_orgXMLSchema_CTD_ANON_109_httpopennebula_orgXMLSchemaVM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 77, 22), )

    
    VM = property(__VM.value, __VM.set, None, None)

    _ElementMap.update({
        __VM.name() : __VM
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_109 = CTD_ANON_109


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_110 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 78, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}CPU uses Python identifier CPU
    __CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU'), 'CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_110_httpopennebula_orgXMLSchemaCPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 80, 28), )

    
    CPU = property(__CPU.value, __CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CPU_USED uses Python identifier CPU_USED
    __CPU_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), 'CPU_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_110_httpopennebula_orgXMLSchemaCPU_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 81, 28), )

    
    CPU_USED = property(__CPU_USED.value, __CPU_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY uses Python identifier MEMORY
    __MEMORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), 'MEMORY', '__httpopennebula_orgXMLSchema_CTD_ANON_110_httpopennebula_orgXMLSchemaMEMORY', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 82, 28), )

    
    MEMORY = property(__MEMORY.value, __MEMORY.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY_USED uses Python identifier MEMORY_USED
    __MEMORY_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), 'MEMORY_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_110_httpopennebula_orgXMLSchemaMEMORY_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 83, 28), )

    
    MEMORY_USED = property(__MEMORY_USED.value, __MEMORY_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE uses Python identifier SYSTEM_DISK_SIZE
    __SYSTEM_DISK_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), 'SYSTEM_DISK_SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_110_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 84, 28), )

    
    SYSTEM_DISK_SIZE = property(__SYSTEM_DISK_SIZE.value, __SYSTEM_DISK_SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE_USED uses Python identifier SYSTEM_DISK_SIZE_USED
    __SYSTEM_DISK_SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), 'SYSTEM_DISK_SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_110_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 85, 28), )

    
    SYSTEM_DISK_SIZE_USED = property(__SYSTEM_DISK_SIZE_USED.value, __SYSTEM_DISK_SIZE_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS uses Python identifier VMS
    __VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS'), 'VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_110_httpopennebula_orgXMLSchemaVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 86, 28), )

    
    VMS = property(__VMS.value, __VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS_USED uses Python identifier VMS_USED
    __VMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), 'VMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_110_httpopennebula_orgXMLSchemaVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 87, 28), )

    
    VMS_USED = property(__VMS_USED.value, __VMS_USED.set, None, None)

    _ElementMap.update({
        __CPU.name() : __CPU,
        __CPU_USED.name() : __CPU_USED,
        __MEMORY.name() : __MEMORY,
        __MEMORY_USED.name() : __MEMORY_USED,
        __SYSTEM_DISK_SIZE.name() : __SYSTEM_DISK_SIZE,
        __SYSTEM_DISK_SIZE_USED.name() : __SYSTEM_DISK_SIZE_USED,
        __VMS.name() : __VMS,
        __VMS_USED.name() : __VMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_110 = CTD_ANON_110


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_111 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 95, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}IMAGE uses Python identifier IMAGE
    __IMAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), 'IMAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_111_httpopennebula_orgXMLSchemaIMAGE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 97, 22), )

    
    IMAGE = property(__IMAGE.value, __IMAGE.set, None, None)

    _ElementMap.update({
        __IMAGE.name() : __IMAGE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_111 = CTD_ANON_111


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_112 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 98, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_112_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 100, 28), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS uses Python identifier RVMS
    __RVMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), 'RVMS', '__httpopennebula_orgXMLSchema_CTD_ANON_112_httpopennebula_orgXMLSchemaRVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 101, 28), )

    
    RVMS = property(__RVMS.value, __RVMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS_USED uses Python identifier RVMS_USED
    __RVMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), 'RVMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_112_httpopennebula_orgXMLSchemaRVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 102, 28), )

    
    RVMS_USED = property(__RVMS_USED.value, __RVMS_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __RVMS.name() : __RVMS,
        __RVMS_USED.name() : __RVMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_112 = CTD_ANON_112


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_113 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 114, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE_QUOTA uses Python identifier DATASTORE_QUOTA
    __DATASTORE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), 'DATASTORE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_113_httpopennebula_orgXMLSchemaDATASTORE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 116, 16), )

    
    DATASTORE_QUOTA = property(__DATASTORE_QUOTA.value, __DATASTORE_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NETWORK_QUOTA uses Python identifier NETWORK_QUOTA
    __NETWORK_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), 'NETWORK_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_113_httpopennebula_orgXMLSchemaNETWORK_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 133, 16), )

    
    NETWORK_QUOTA = property(__NETWORK_QUOTA.value, __NETWORK_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM_QUOTA uses Python identifier VM_QUOTA
    __VM_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), 'VM_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_113_httpopennebula_orgXMLSchemaVM_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 148, 16), )

    
    VM_QUOTA = property(__VM_QUOTA.value, __VM_QUOTA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGE_QUOTA uses Python identifier IMAGE_QUOTA
    __IMAGE_QUOTA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), 'IMAGE_QUOTA', '__httpopennebula_orgXMLSchema_CTD_ANON_113_httpopennebula_orgXMLSchemaIMAGE_QUOTA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 168, 16), )

    
    IMAGE_QUOTA = property(__IMAGE_QUOTA.value, __IMAGE_QUOTA.set, None, None)

    _ElementMap.update({
        __DATASTORE_QUOTA.name() : __DATASTORE_QUOTA,
        __NETWORK_QUOTA.name() : __NETWORK_QUOTA,
        __VM_QUOTA.name() : __VM_QUOTA,
        __IMAGE_QUOTA.name() : __IMAGE_QUOTA
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_113 = CTD_ANON_113


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_114 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 117, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE uses Python identifier DATASTORE
    __DATASTORE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), 'DATASTORE', '__httpopennebula_orgXMLSchema_CTD_ANON_114_httpopennebula_orgXMLSchemaDATASTORE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 119, 22), )

    
    DATASTORE = property(__DATASTORE.value, __DATASTORE.set, None, None)

    _ElementMap.update({
        __DATASTORE.name() : __DATASTORE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_114 = CTD_ANON_114


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_115 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 120, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_115_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 122, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES uses Python identifier IMAGES
    __IMAGES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), 'IMAGES', '__httpopennebula_orgXMLSchema_CTD_ANON_115_httpopennebula_orgXMLSchemaIMAGES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 123, 26), )

    
    IMAGES = property(__IMAGES.value, __IMAGES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IMAGES_USED uses Python identifier IMAGES_USED
    __IMAGES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), 'IMAGES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_115_httpopennebula_orgXMLSchemaIMAGES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 124, 26), )

    
    IMAGES_USED = property(__IMAGES_USED.value, __IMAGES_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_115_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 125, 26), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE_USED uses Python identifier SIZE_USED
    __SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), 'SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_115_httpopennebula_orgXMLSchemaSIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 126, 26), )

    
    SIZE_USED = property(__SIZE_USED.value, __SIZE_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __IMAGES.name() : __IMAGES,
        __IMAGES_USED.name() : __IMAGES_USED,
        __SIZE.name() : __SIZE,
        __SIZE_USED.name() : __SIZE_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_115 = CTD_ANON_115


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_116 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 134, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}NETWORK uses Python identifier NETWORK
    __NETWORK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), 'NETWORK', '__httpopennebula_orgXMLSchema_CTD_ANON_116_httpopennebula_orgXMLSchemaNETWORK', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 136, 22), )

    
    NETWORK = property(__NETWORK.value, __NETWORK.set, None, None)

    _ElementMap.update({
        __NETWORK.name() : __NETWORK
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_116 = CTD_ANON_116


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_117 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 137, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_117_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 139, 26), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES uses Python identifier LEASES
    __LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), 'LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_117_httpopennebula_orgXMLSchemaLEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 140, 26), )

    
    LEASES = property(__LEASES.value, __LEASES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES_USED uses Python identifier LEASES_USED
    __LEASES_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), 'LEASES_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_117_httpopennebula_orgXMLSchemaLEASES_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 141, 26), )

    
    LEASES_USED = property(__LEASES_USED.value, __LEASES_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __LEASES.name() : __LEASES,
        __LEASES_USED.name() : __LEASES_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_117 = CTD_ANON_117


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_118 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 149, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VM uses Python identifier VM
    __VM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM'), 'VM', '__httpopennebula_orgXMLSchema_CTD_ANON_118_httpopennebula_orgXMLSchemaVM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 151, 22), )

    
    VM = property(__VM.value, __VM.set, None, None)

    _ElementMap.update({
        __VM.name() : __VM
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_118 = CTD_ANON_118


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_119 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 152, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}CPU uses Python identifier CPU
    __CPU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU'), 'CPU', '__httpopennebula_orgXMLSchema_CTD_ANON_119_httpopennebula_orgXMLSchemaCPU', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 154, 28), )

    
    CPU = property(__CPU.value, __CPU.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CPU_USED uses Python identifier CPU_USED
    __CPU_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), 'CPU_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_119_httpopennebula_orgXMLSchemaCPU_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 155, 28), )

    
    CPU_USED = property(__CPU_USED.value, __CPU_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY uses Python identifier MEMORY
    __MEMORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), 'MEMORY', '__httpopennebula_orgXMLSchema_CTD_ANON_119_httpopennebula_orgXMLSchemaMEMORY', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 156, 28), )

    
    MEMORY = property(__MEMORY.value, __MEMORY.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MEMORY_USED uses Python identifier MEMORY_USED
    __MEMORY_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), 'MEMORY_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_119_httpopennebula_orgXMLSchemaMEMORY_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 157, 28), )

    
    MEMORY_USED = property(__MEMORY_USED.value, __MEMORY_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE uses Python identifier SYSTEM_DISK_SIZE
    __SYSTEM_DISK_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), 'SYSTEM_DISK_SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_119_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 158, 28), )

    
    SYSTEM_DISK_SIZE = property(__SYSTEM_DISK_SIZE.value, __SYSTEM_DISK_SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SYSTEM_DISK_SIZE_USED uses Python identifier SYSTEM_DISK_SIZE_USED
    __SYSTEM_DISK_SIZE_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), 'SYSTEM_DISK_SIZE_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_119_httpopennebula_orgXMLSchemaSYSTEM_DISK_SIZE_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 159, 28), )

    
    SYSTEM_DISK_SIZE_USED = property(__SYSTEM_DISK_SIZE_USED.value, __SYSTEM_DISK_SIZE_USED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS uses Python identifier VMS
    __VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS'), 'VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_119_httpopennebula_orgXMLSchemaVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 160, 28), )

    
    VMS = property(__VMS.value, __VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS_USED uses Python identifier VMS_USED
    __VMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), 'VMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_119_httpopennebula_orgXMLSchemaVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 161, 28), )

    
    VMS_USED = property(__VMS_USED.value, __VMS_USED.set, None, None)

    _ElementMap.update({
        __CPU.name() : __CPU,
        __CPU_USED.name() : __CPU_USED,
        __MEMORY.name() : __MEMORY,
        __MEMORY_USED.name() : __MEMORY_USED,
        __SYSTEM_DISK_SIZE.name() : __SYSTEM_DISK_SIZE,
        __SYSTEM_DISK_SIZE_USED.name() : __SYSTEM_DISK_SIZE_USED,
        __VMS.name() : __VMS,
        __VMS_USED.name() : __VMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_119 = CTD_ANON_119


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_120 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 169, 18)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}IMAGE uses Python identifier IMAGE
    __IMAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), 'IMAGE', '__httpopennebula_orgXMLSchema_CTD_ANON_120_httpopennebula_orgXMLSchemaIMAGE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 171, 22), )

    
    IMAGE = property(__IMAGE.value, __IMAGE.set, None, None)

    _ElementMap.update({
        __IMAGE.name() : __IMAGE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_120 = CTD_ANON_120


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_121 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 172, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_121_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 174, 28), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS uses Python identifier RVMS
    __RVMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), 'RVMS', '__httpopennebula_orgXMLSchema_CTD_ANON_121_httpopennebula_orgXMLSchemaRVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 175, 28), )

    
    RVMS = property(__RVMS.value, __RVMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RVMS_USED uses Python identifier RVMS_USED
    __RVMS_USED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), 'RVMS_USED', '__httpopennebula_orgXMLSchema_CTD_ANON_121_httpopennebula_orgXMLSchemaRVMS_USED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 176, 28), )

    
    RVMS_USED = property(__RVMS_USED.value, __RVMS_USED.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __RVMS.name() : __RVMS,
        __RVMS_USED.name() : __RVMS_USED
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_121 = CTD_ANON_121


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_122 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_122_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 7, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_122_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 8, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUPS uses Python identifier GROUPS
    __GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUPS'), 'GROUPS', '__httpopennebula_orgXMLSchema_CTD_ANON_122_httpopennebula_orgXMLSchemaGROUPS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 9, 8), )

    
    GROUPS = property(__GROUPS.value, __GROUPS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CLUSTERS uses Python identifier CLUSTERS
    __CLUSTERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS'), 'CLUSTERS', '__httpopennebula_orgXMLSchema_CTD_ANON_122_httpopennebula_orgXMLSchemaCLUSTERS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 16, 8), )

    
    CLUSTERS = property(__CLUSTERS.value, __CLUSTERS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}HOSTS uses Python identifier HOSTS
    __HOSTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HOSTS'), 'HOSTS', '__httpopennebula_orgXMLSchema_CTD_ANON_122_httpopennebula_orgXMLSchemaHOSTS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 30, 8), )

    
    HOSTS = property(__HOSTS.value, __HOSTS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATASTORES uses Python identifier DATASTORES
    __DATASTORES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORES'), 'DATASTORES', '__httpopennebula_orgXMLSchema_CTD_ANON_122_httpopennebula_orgXMLSchemaDATASTORES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 44, 8), )

    
    DATASTORES = property(__DATASTORES.value, __DATASTORES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VNETS uses Python identifier VNETS
    __VNETS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VNETS'), 'VNETS', '__httpopennebula_orgXMLSchema_CTD_ANON_122_httpopennebula_orgXMLSchemaVNETS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 58, 8), )

    
    VNETS = property(__VNETS.value, __VNETS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_122_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 72, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __NAME.name() : __NAME,
        __GROUPS.name() : __GROUPS,
        __CLUSTERS.name() : __CLUSTERS,
        __HOSTS.name() : __HOSTS,
        __DATASTORES.name() : __DATASTORES,
        __VNETS.name() : __VNETS,
        __TEMPLATE.name() : __TEMPLATE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_122 = CTD_ANON_122


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_123 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 10, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_123_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 12, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_123 = CTD_ANON_123


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_124 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 17, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}CLUSTER uses Python identifier CLUSTER
    __CLUSTER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER'), 'CLUSTER', '__httpopennebula_orgXMLSchema_CTD_ANON_124_httpopennebula_orgXMLSchemaCLUSTER', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 19, 14), )

    
    CLUSTER = property(__CLUSTER.value, __CLUSTER.set, None, None)

    _ElementMap.update({
        __CLUSTER.name() : __CLUSTER
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_124 = CTD_ANON_124


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_125 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 20, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ZONE_ID uses Python identifier ZONE_ID
    __ZONE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), 'ZONE_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_125_httpopennebula_orgXMLSchemaZONE_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 22, 20), )

    
    ZONE_ID = property(__ZONE_ID.value, __ZONE_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CLUSTER_ID uses Python identifier CLUSTER_ID
    __CLUSTER_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER_ID'), 'CLUSTER_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_125_httpopennebula_orgXMLSchemaCLUSTER_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 23, 20), )

    
    CLUSTER_ID = property(__CLUSTER_ID.value, __CLUSTER_ID.set, None, None)

    _ElementMap.update({
        __ZONE_ID.name() : __ZONE_ID,
        __CLUSTER_ID.name() : __CLUSTER_ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_125 = CTD_ANON_125


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_126 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 31, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}HOST uses Python identifier HOST
    __HOST = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HOST'), 'HOST', '__httpopennebula_orgXMLSchema_CTD_ANON_126_httpopennebula_orgXMLSchemaHOST', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 33, 14), )

    
    HOST = property(__HOST.value, __HOST.set, None, None)

    _ElementMap.update({
        __HOST.name() : __HOST
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_126 = CTD_ANON_126


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_127 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 34, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ZONE_ID uses Python identifier ZONE_ID
    __ZONE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), 'ZONE_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_127_httpopennebula_orgXMLSchemaZONE_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 36, 20), )

    
    ZONE_ID = property(__ZONE_ID.value, __ZONE_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}HOST_ID uses Python identifier HOST_ID
    __HOST_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HOST_ID'), 'HOST_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_127_httpopennebula_orgXMLSchemaHOST_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 37, 20), )

    
    HOST_ID = property(__HOST_ID.value, __HOST_ID.set, None, None)

    _ElementMap.update({
        __ZONE_ID.name() : __ZONE_ID,
        __HOST_ID.name() : __HOST_ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_127 = CTD_ANON_127


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_128 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 45, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DATASTORE uses Python identifier DATASTORE
    __DATASTORE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), 'DATASTORE', '__httpopennebula_orgXMLSchema_CTD_ANON_128_httpopennebula_orgXMLSchemaDATASTORE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 47, 14), )

    
    DATASTORE = property(__DATASTORE.value, __DATASTORE.set, None, None)

    _ElementMap.update({
        __DATASTORE.name() : __DATASTORE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_128 = CTD_ANON_128


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_129 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 48, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ZONE_ID uses Python identifier ZONE_ID
    __ZONE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), 'ZONE_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_129_httpopennebula_orgXMLSchemaZONE_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 50, 20), )

    
    ZONE_ID = property(__ZONE_ID.value, __ZONE_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATASTORE_ID uses Python identifier DATASTORE_ID
    __DATASTORE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_ID'), 'DATASTORE_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_129_httpopennebula_orgXMLSchemaDATASTORE_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 51, 20), )

    
    DATASTORE_ID = property(__DATASTORE_ID.value, __DATASTORE_ID.set, None, None)

    _ElementMap.update({
        __ZONE_ID.name() : __ZONE_ID,
        __DATASTORE_ID.name() : __DATASTORE_ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_129 = CTD_ANON_129


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_130 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 59, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VNET uses Python identifier VNET
    __VNET = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VNET'), 'VNET', '__httpopennebula_orgXMLSchema_CTD_ANON_130_httpopennebula_orgXMLSchemaVNET', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 61, 14), )

    
    VNET = property(__VNET.value, __VNET.set, None, None)

    _ElementMap.update({
        __VNET.name() : __VNET
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_130 = CTD_ANON_130


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_131 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 62, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ZONE_ID uses Python identifier ZONE_ID
    __ZONE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), 'ZONE_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_131_httpopennebula_orgXMLSchemaZONE_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 64, 20), )

    
    ZONE_ID = property(__ZONE_ID.value, __ZONE_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VNET_ID uses Python identifier VNET_ID
    __VNET_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VNET_ID'), 'VNET_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_131_httpopennebula_orgXMLSchemaVNET_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 65, 20), )

    
    VNET_ID = property(__VNET_ID.value, __VNET_ID.set, None, None)

    _ElementMap.update({
        __ZONE_ID.name() : __ZONE_ID,
        __VNET_ID.name() : __VNET_ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_131 = CTD_ANON_131


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_132 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc_pool.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VDC uses Python identifier VDC
    __VDC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VDC'), 'VDC', '__httpopennebula_orgXMLSchema_CTD_ANON_132_httpopennebula_orgXMLSchemaVDC', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 4, 2), )

    
    VDC = property(__VDC.value, __VDC.set, None, None)

    _ElementMap.update({
        __VDC.name() : __VDC
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_132 = CTD_ANON_132


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_133 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 7, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 8, 8), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 9, 8), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UNAME uses Python identifier UNAME
    __UNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), 'UNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaUNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 10, 8), )

    
    UNAME = property(__UNAME.value, __UNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 11, 8), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 12, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PERMISSIONS uses Python identifier PERMISSIONS
    __PERMISSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), 'PERMISSIONS', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaPERMISSIONS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 13, 8), )

    
    PERMISSIONS = property(__PERMISSIONS.value, __PERMISSIONS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LAST_POLL uses Python identifier LAST_POLL
    __LAST_POLL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LAST_POLL'), 'LAST_POLL', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaLAST_POLL', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 28, 8), )

    
    LAST_POLL = property(__LAST_POLL.value, __LAST_POLL.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}STATE uses Python identifier STATE
    __STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STATE'), 'STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaSTATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 33, 8), )

    
    STATE = property(__STATE.value, __STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LCM_STATE uses Python identifier LCM_STATE
    __LCM_STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LCM_STATE'), 'LCM_STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaLCM_STATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 39, 8), )

    
    LCM_STATE = property(__LCM_STATE.value, __LCM_STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PREV_STATE uses Python identifier PREV_STATE
    __PREV_STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PREV_STATE'), 'PREV_STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaPREV_STATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 40, 8), )

    
    PREV_STATE = property(__PREV_STATE.value, __PREV_STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PREV_LCM_STATE uses Python identifier PREV_LCM_STATE
    __PREV_LCM_STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PREV_LCM_STATE'), 'PREV_LCM_STATE', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaPREV_LCM_STATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 41, 8), )

    
    PREV_LCM_STATE = property(__PREV_LCM_STATE.value, __PREV_LCM_STATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RESCHED uses Python identifier RESCHED
    __RESCHED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RESCHED'), 'RESCHED', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaRESCHED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 42, 8), )

    
    RESCHED = property(__RESCHED.value, __RESCHED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}STIME uses Python identifier STIME
    __STIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STIME'), 'STIME', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaSTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 43, 8), )

    
    STIME = property(__STIME.value, __STIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ETIME uses Python identifier ETIME
    __ETIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ETIME'), 'ETIME', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaETIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 44, 8), )

    
    ETIME = property(__ETIME.value, __ETIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DEPLOY_ID uses Python identifier DEPLOY_ID
    __DEPLOY_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DEPLOY_ID'), 'DEPLOY_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaDEPLOY_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 45, 8), )

    
    DEPLOY_ID = property(__DEPLOY_ID.value, __DEPLOY_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MONITORING uses Python identifier MONITORING
    __MONITORING = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MONITORING'), 'MONITORING', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaMONITORING', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 46, 8), )

    
    MONITORING = property(__MONITORING.value, __MONITORING.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 65, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USER_TEMPLATE uses Python identifier USER_TEMPLATE
    __USER_TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USER_TEMPLATE'), 'USER_TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaUSER_TEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 66, 8), )

    
    USER_TEMPLATE = property(__USER_TEMPLATE.value, __USER_TEMPLATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}HISTORY_RECORDS uses Python identifier HISTORY_RECORDS
    __HISTORY_RECORDS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HISTORY_RECORDS'), 'HISTORY_RECORDS', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaHISTORY_RECORDS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 67, 8), )

    
    HISTORY_RECORDS = property(__HISTORY_RECORDS.value, __HISTORY_RECORDS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SNAPSHOTS uses Python identifier SNAPSHOTS
    __SNAPSHOTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOTS'), 'SNAPSHOTS', '__httpopennebula_orgXMLSchema_CTD_ANON_133_httpopennebula_orgXMLSchemaSNAPSHOTS', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 147, 8), )

    
    SNAPSHOTS = property(__SNAPSHOTS.value, __SNAPSHOTS.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __UNAME.name() : __UNAME,
        __GNAME.name() : __GNAME,
        __NAME.name() : __NAME,
        __PERMISSIONS.name() : __PERMISSIONS,
        __LAST_POLL.name() : __LAST_POLL,
        __STATE.name() : __STATE,
        __LCM_STATE.name() : __LCM_STATE,
        __PREV_STATE.name() : __PREV_STATE,
        __PREV_LCM_STATE.name() : __PREV_LCM_STATE,
        __RESCHED.name() : __RESCHED,
        __STIME.name() : __STIME,
        __ETIME.name() : __ETIME,
        __DEPLOY_ID.name() : __DEPLOY_ID,
        __MONITORING.name() : __MONITORING,
        __TEMPLATE.name() : __TEMPLATE,
        __USER_TEMPLATE.name() : __USER_TEMPLATE,
        __HISTORY_RECORDS.name() : __HISTORY_RECORDS,
        __SNAPSHOTS.name() : __SNAPSHOTS
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_133 = CTD_ANON_133


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_134 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 14, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OWNER_U uses Python identifier OWNER_U
    __OWNER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), 'OWNER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_134_httpopennebula_orgXMLSchemaOWNER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 16, 14), )

    
    OWNER_U = property(__OWNER_U.value, __OWNER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_M uses Python identifier OWNER_M
    __OWNER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), 'OWNER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_134_httpopennebula_orgXMLSchemaOWNER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 17, 14), )

    
    OWNER_M = property(__OWNER_M.value, __OWNER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_A uses Python identifier OWNER_A
    __OWNER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), 'OWNER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_134_httpopennebula_orgXMLSchemaOWNER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 18, 14), )

    
    OWNER_A = property(__OWNER_A.value, __OWNER_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_U uses Python identifier GROUP_U
    __GROUP_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), 'GROUP_U', '__httpopennebula_orgXMLSchema_CTD_ANON_134_httpopennebula_orgXMLSchemaGROUP_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 19, 14), )

    
    GROUP_U = property(__GROUP_U.value, __GROUP_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_M uses Python identifier GROUP_M
    __GROUP_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), 'GROUP_M', '__httpopennebula_orgXMLSchema_CTD_ANON_134_httpopennebula_orgXMLSchemaGROUP_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 20, 14), )

    
    GROUP_M = property(__GROUP_M.value, __GROUP_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_A uses Python identifier GROUP_A
    __GROUP_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), 'GROUP_A', '__httpopennebula_orgXMLSchema_CTD_ANON_134_httpopennebula_orgXMLSchemaGROUP_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 21, 14), )

    
    GROUP_A = property(__GROUP_A.value, __GROUP_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_U uses Python identifier OTHER_U
    __OTHER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), 'OTHER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_134_httpopennebula_orgXMLSchemaOTHER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 22, 14), )

    
    OTHER_U = property(__OTHER_U.value, __OTHER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_M uses Python identifier OTHER_M
    __OTHER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), 'OTHER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_134_httpopennebula_orgXMLSchemaOTHER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 23, 14), )

    
    OTHER_M = property(__OTHER_M.value, __OTHER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_A uses Python identifier OTHER_A
    __OTHER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), 'OTHER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_134_httpopennebula_orgXMLSchemaOTHER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 24, 14), )

    
    OTHER_A = property(__OTHER_A.value, __OTHER_A.set, None, None)

    _ElementMap.update({
        __OWNER_U.name() : __OWNER_U,
        __OWNER_M.name() : __OWNER_M,
        __OWNER_A.name() : __OWNER_A,
        __GROUP_U.name() : __GROUP_U,
        __GROUP_M.name() : __GROUP_M,
        __GROUP_A.name() : __GROUP_A,
        __OTHER_U.name() : __OTHER_U,
        __OTHER_M.name() : __OTHER_M,
        __OTHER_A.name() : __OTHER_A
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_134 = CTD_ANON_134


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_135 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 68, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}HISTORY uses Python identifier HISTORY
    __HISTORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HISTORY'), 'HISTORY', '__httpopennebula_orgXMLSchema_CTD_ANON_135_httpopennebula_orgXMLSchemaHISTORY', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 70, 14), )

    
    HISTORY = property(__HISTORY.value, __HISTORY.set, None, None)

    _ElementMap.update({
        __HISTORY.name() : __HISTORY
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_135 = CTD_ANON_135


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_136 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 71, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OID uses Python identifier OID
    __OID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OID'), 'OID', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaOID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 73, 20), )

    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SEQ uses Python identifier SEQ
    __SEQ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SEQ'), 'SEQ', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaSEQ', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 74, 20), )

    
    SEQ = property(__SEQ.value, __SEQ.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}HOSTNAME uses Python identifier HOSTNAME
    __HOSTNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HOSTNAME'), 'HOSTNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaHOSTNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 75, 20), )

    
    HOSTNAME = property(__HOSTNAME.value, __HOSTNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}HID uses Python identifier HID
    __HID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HID'), 'HID', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaHID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 76, 20), )

    
    HID = property(__HID.value, __HID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CID uses Python identifier CID
    __CID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CID'), 'CID', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaCID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 77, 20), )

    
    CID = property(__CID.value, __CID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}STIME uses Python identifier STIME
    __STIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STIME'), 'STIME', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaSTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 78, 20), )

    
    STIME = property(__STIME.value, __STIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ETIME uses Python identifier ETIME
    __ETIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ETIME'), 'ETIME', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaETIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 79, 20), )

    
    ETIME = property(__ETIME.value, __ETIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM_MAD uses Python identifier VM_MAD
    __VM_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM_MAD'), 'VM_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaVM_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 80, 20), )

    
    VM_MAD = property(__VM_MAD.value, __VM_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TM_MAD uses Python identifier TM_MAD
    __TM_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TM_MAD'), 'TM_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaTM_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 81, 20), )

    
    TM_MAD = property(__TM_MAD.value, __TM_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DS_ID uses Python identifier DS_ID
    __DS_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DS_ID'), 'DS_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaDS_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 82, 20), )

    
    DS_ID = property(__DS_ID.value, __DS_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PSTIME uses Python identifier PSTIME
    __PSTIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PSTIME'), 'PSTIME', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaPSTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 83, 20), )

    
    PSTIME = property(__PSTIME.value, __PSTIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PETIME uses Python identifier PETIME
    __PETIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PETIME'), 'PETIME', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaPETIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 84, 20), )

    
    PETIME = property(__PETIME.value, __PETIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RSTIME uses Python identifier RSTIME
    __RSTIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RSTIME'), 'RSTIME', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaRSTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 85, 20), )

    
    RSTIME = property(__RSTIME.value, __RSTIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}RETIME uses Python identifier RETIME
    __RETIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RETIME'), 'RETIME', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaRETIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 86, 20), )

    
    RETIME = property(__RETIME.value, __RETIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ESTIME uses Python identifier ESTIME
    __ESTIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ESTIME'), 'ESTIME', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaESTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 87, 20), )

    
    ESTIME = property(__ESTIME.value, __ESTIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}EETIME uses Python identifier EETIME
    __EETIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EETIME'), 'EETIME', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaEETIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 88, 20), )

    
    EETIME = property(__EETIME.value, __EETIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ACTION uses Python identifier ACTION
    __ACTION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ACTION'), 'ACTION', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaACTION', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 137, 20), )

    
    ACTION = property(__ACTION.value, __ACTION.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 138, 20), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 139, 20), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}REQUEST_ID uses Python identifier REQUEST_ID
    __REQUEST_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'REQUEST_ID'), 'REQUEST_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_136_httpopennebula_orgXMLSchemaREQUEST_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 140, 20), )

    
    REQUEST_ID = property(__REQUEST_ID.value, __REQUEST_ID.set, None, None)

    _ElementMap.update({
        __OID.name() : __OID,
        __SEQ.name() : __SEQ,
        __HOSTNAME.name() : __HOSTNAME,
        __HID.name() : __HID,
        __CID.name() : __CID,
        __STIME.name() : __STIME,
        __ETIME.name() : __ETIME,
        __VM_MAD.name() : __VM_MAD,
        __TM_MAD.name() : __TM_MAD,
        __DS_ID.name() : __DS_ID,
        __PSTIME.name() : __PSTIME,
        __PETIME.name() : __PETIME,
        __RSTIME.name() : __RSTIME,
        __RETIME.name() : __RETIME,
        __ESTIME.name() : __ESTIME,
        __EETIME.name() : __EETIME,
        __ACTION.name() : __ACTION,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __REQUEST_ID.name() : __REQUEST_ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_136 = CTD_ANON_136


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_137 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 148, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}DISK_ID uses Python identifier DISK_ID
    __DISK_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DISK_ID'), 'DISK_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_137_httpopennebula_orgXMLSchemaDISK_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 150, 14), )

    
    DISK_ID = property(__DISK_ID.value, __DISK_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SNAPSHOT uses Python identifier SNAPSHOT
    __SNAPSHOT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOT'), 'SNAPSHOT', '__httpopennebula_orgXMLSchema_CTD_ANON_137_httpopennebula_orgXMLSchemaSNAPSHOT', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 151, 14), )

    
    SNAPSHOT = property(__SNAPSHOT.value, __SNAPSHOT.set, None, None)

    _ElementMap.update({
        __DISK_ID.name() : __DISK_ID,
        __SNAPSHOT.name() : __SNAPSHOT
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_137 = CTD_ANON_137


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_138 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 152, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ACTIVE uses Python identifier ACTIVE
    __ACTIVE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ACTIVE'), 'ACTIVE', '__httpopennebula_orgXMLSchema_CTD_ANON_138_httpopennebula_orgXMLSchemaACTIVE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 154, 20), )

    
    ACTIVE = property(__ACTIVE.value, __ACTIVE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CHILDREN uses Python identifier CHILDREN
    __CHILDREN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CHILDREN'), 'CHILDREN', '__httpopennebula_orgXMLSchema_CTD_ANON_138_httpopennebula_orgXMLSchemaCHILDREN', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 155, 20), )

    
    CHILDREN = property(__CHILDREN.value, __CHILDREN.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}DATE uses Python identifier DATE
    __DATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DATE'), 'DATE', '__httpopennebula_orgXMLSchema_CTD_ANON_138_httpopennebula_orgXMLSchemaDATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 156, 20), )

    
    DATE = property(__DATE.value, __DATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_138_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 157, 20), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_138_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 158, 20), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PARENT uses Python identifier PARENT
    __PARENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PARENT'), 'PARENT', '__httpopennebula_orgXMLSchema_CTD_ANON_138_httpopennebula_orgXMLSchemaPARENT', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 159, 20), )

    
    PARENT = property(__PARENT.value, __PARENT.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_138_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 160, 20), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    _ElementMap.update({
        __ACTIVE.name() : __ACTIVE,
        __CHILDREN.name() : __CHILDREN,
        __DATE.name() : __DATE,
        __ID.name() : __ID,
        __NAME.name() : __NAME,
        __PARENT.name() : __PARENT,
        __SIZE.name() : __SIZE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_138 = CTD_ANON_138


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_139 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm_pool.xsd', 6, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VM uses Python identifier VM
    __VM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM'), 'VM', '__httpopennebula_orgXMLSchema_CTD_ANON_139_httpopennebula_orgXMLSchemaVM', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 4, 2), )

    
    VM = property(__VM.value, __VM.set, None, None)

    _ElementMap.update({
        __VM.name() : __VM
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_139 = CTD_ANON_139


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_140 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_140_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 6, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON_140_httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 7, 8), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_140_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 8, 8), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UNAME uses Python identifier UNAME
    __UNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), 'UNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_140_httpopennebula_orgXMLSchemaUNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 9, 8), )

    
    UNAME = property(__UNAME.value, __UNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_140_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 10, 8), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_140_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 11, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PERMISSIONS uses Python identifier PERMISSIONS
    __PERMISSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), 'PERMISSIONS', '__httpopennebula_orgXMLSchema_CTD_ANON_140_httpopennebula_orgXMLSchemaPERMISSIONS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 12, 8), )

    
    PERMISSIONS = property(__PERMISSIONS.value, __PERMISSIONS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}REGTIME uses Python identifier REGTIME
    __REGTIME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'REGTIME'), 'REGTIME', '__httpopennebula_orgXMLSchema_CTD_ANON_140_httpopennebula_orgXMLSchemaREGTIME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 27, 8), )

    
    REGTIME = property(__REGTIME.value, __REGTIME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_140_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 28, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __UNAME.name() : __UNAME,
        __GNAME.name() : __GNAME,
        __NAME.name() : __NAME,
        __PERMISSIONS.name() : __PERMISSIONS,
        __REGTIME.name() : __REGTIME,
        __TEMPLATE.name() : __TEMPLATE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_140 = CTD_ANON_140


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_141 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 13, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OWNER_U uses Python identifier OWNER_U
    __OWNER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), 'OWNER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_141_httpopennebula_orgXMLSchemaOWNER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 15, 14), )

    
    OWNER_U = property(__OWNER_U.value, __OWNER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_M uses Python identifier OWNER_M
    __OWNER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), 'OWNER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_141_httpopennebula_orgXMLSchemaOWNER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 16, 14), )

    
    OWNER_M = property(__OWNER_M.value, __OWNER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_A uses Python identifier OWNER_A
    __OWNER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), 'OWNER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_141_httpopennebula_orgXMLSchemaOWNER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 17, 14), )

    
    OWNER_A = property(__OWNER_A.value, __OWNER_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_U uses Python identifier GROUP_U
    __GROUP_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), 'GROUP_U', '__httpopennebula_orgXMLSchema_CTD_ANON_141_httpopennebula_orgXMLSchemaGROUP_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 18, 14), )

    
    GROUP_U = property(__GROUP_U.value, __GROUP_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_M uses Python identifier GROUP_M
    __GROUP_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), 'GROUP_M', '__httpopennebula_orgXMLSchema_CTD_ANON_141_httpopennebula_orgXMLSchemaGROUP_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 19, 14), )

    
    GROUP_M = property(__GROUP_M.value, __GROUP_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_A uses Python identifier GROUP_A
    __GROUP_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), 'GROUP_A', '__httpopennebula_orgXMLSchema_CTD_ANON_141_httpopennebula_orgXMLSchemaGROUP_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 20, 14), )

    
    GROUP_A = property(__GROUP_A.value, __GROUP_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_U uses Python identifier OTHER_U
    __OTHER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), 'OTHER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_141_httpopennebula_orgXMLSchemaOTHER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 21, 14), )

    
    OTHER_U = property(__OTHER_U.value, __OTHER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_M uses Python identifier OTHER_M
    __OTHER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), 'OTHER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_141_httpopennebula_orgXMLSchemaOTHER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 22, 14), )

    
    OTHER_M = property(__OTHER_M.value, __OTHER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_A uses Python identifier OTHER_A
    __OTHER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), 'OTHER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_141_httpopennebula_orgXMLSchemaOTHER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 23, 14), )

    
    OTHER_A = property(__OTHER_A.value, __OTHER_A.set, None, None)

    _ElementMap.update({
        __OWNER_U.name() : __OWNER_U,
        __OWNER_M.name() : __OWNER_M,
        __OWNER_A.name() : __OWNER_A,
        __GROUP_U.name() : __GROUP_U,
        __GROUP_M.name() : __GROUP_M,
        __GROUP_A.name() : __GROUP_A,
        __OTHER_U.name() : __OTHER_U,
        __OTHER_M.name() : __OTHER_M,
        __OTHER_A.name() : __OTHER_A
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_141 = CTD_ANON_141


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_142 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate_pool.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VMTEMPLATE uses Python identifier VMTEMPLATE
    __VMTEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMTEMPLATE'), 'VMTEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_142_httpopennebula_orgXMLSchemaVMTEMPLATE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 3, 2), )

    
    VMTEMPLATE = property(__VMTEMPLATE.value, __VMTEMPLATE.set, None, None)

    _ElementMap.update({
        __VMTEMPLATE.name() : __VMTEMPLATE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_142 = CTD_ANON_142


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_143 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 7, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 8, 8), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 9, 8), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UNAME uses Python identifier UNAME
    __UNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), 'UNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaUNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 10, 8), )

    
    UNAME = property(__UNAME.value, __UNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 11, 8), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 12, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PERMISSIONS uses Python identifier PERMISSIONS
    __PERMISSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), 'PERMISSIONS', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaPERMISSIONS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 13, 8), )

    
    PERMISSIONS = property(__PERMISSIONS.value, __PERMISSIONS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CLUSTERS uses Python identifier CLUSTERS
    __CLUSTERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS'), 'CLUSTERS', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaCLUSTERS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 28, 8), )

    
    CLUSTERS = property(__CLUSTERS.value, __CLUSTERS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}BRIDGE uses Python identifier BRIDGE
    __BRIDGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BRIDGE'), 'BRIDGE', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaBRIDGE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 35, 8), )

    
    BRIDGE = property(__BRIDGE.value, __BRIDGE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PARENT_NETWORK_ID uses Python identifier PARENT_NETWORK_ID
    __PARENT_NETWORK_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_ID'), 'PARENT_NETWORK_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaPARENT_NETWORK_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 36, 8), )

    
    PARENT_NETWORK_ID = property(__PARENT_NETWORK_ID.value, __PARENT_NETWORK_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VN_MAD uses Python identifier VN_MAD
    __VN_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD'), 'VN_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaVN_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 37, 8), )

    
    VN_MAD = property(__VN_MAD.value, __VN_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PHYDEV uses Python identifier PHYDEV
    __PHYDEV = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PHYDEV'), 'PHYDEV', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaPHYDEV', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 38, 8), )

    
    PHYDEV = property(__PHYDEV.value, __PHYDEV.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VLAN_ID uses Python identifier VLAN_ID
    __VLAN_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID'), 'VLAN_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaVLAN_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 39, 8), )

    
    VLAN_ID = property(__VLAN_ID.value, __VLAN_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VLAN_ID_AUTOMATIC uses Python identifier VLAN_ID_AUTOMATIC
    __VLAN_ID_AUTOMATIC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID_AUTOMATIC'), 'VLAN_ID_AUTOMATIC', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaVLAN_ID_AUTOMATIC', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 40, 8), )

    
    VLAN_ID_AUTOMATIC = property(__VLAN_ID_AUTOMATIC.value, __VLAN_ID_AUTOMATIC.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USED_LEASES uses Python identifier USED_LEASES
    __USED_LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USED_LEASES'), 'USED_LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaUSED_LEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 41, 8), )

    
    USED_LEASES = property(__USED_LEASES.value, __USED_LEASES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VROUTERS uses Python identifier VROUTERS
    __VROUTERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VROUTERS'), 'VROUTERS', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaVROUTERS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 42, 8), )

    
    VROUTERS = property(__VROUTERS.value, __VROUTERS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 49, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}AR_POOL uses Python identifier AR_POOL
    __AR_POOL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AR_POOL'), 'AR_POOL', '__httpopennebula_orgXMLSchema_CTD_ANON_143_httpopennebula_orgXMLSchemaAR_POOL', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 50, 8), )

    
    AR_POOL = property(__AR_POOL.value, __AR_POOL.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __UNAME.name() : __UNAME,
        __GNAME.name() : __GNAME,
        __NAME.name() : __NAME,
        __PERMISSIONS.name() : __PERMISSIONS,
        __CLUSTERS.name() : __CLUSTERS,
        __BRIDGE.name() : __BRIDGE,
        __PARENT_NETWORK_ID.name() : __PARENT_NETWORK_ID,
        __VN_MAD.name() : __VN_MAD,
        __PHYDEV.name() : __PHYDEV,
        __VLAN_ID.name() : __VLAN_ID,
        __VLAN_ID_AUTOMATIC.name() : __VLAN_ID_AUTOMATIC,
        __USED_LEASES.name() : __USED_LEASES,
        __VROUTERS.name() : __VROUTERS,
        __TEMPLATE.name() : __TEMPLATE,
        __AR_POOL.name() : __AR_POOL
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_143 = CTD_ANON_143


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_144 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 14, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OWNER_U uses Python identifier OWNER_U
    __OWNER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), 'OWNER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_144_httpopennebula_orgXMLSchemaOWNER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 16, 14), )

    
    OWNER_U = property(__OWNER_U.value, __OWNER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_M uses Python identifier OWNER_M
    __OWNER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), 'OWNER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_144_httpopennebula_orgXMLSchemaOWNER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 17, 14), )

    
    OWNER_M = property(__OWNER_M.value, __OWNER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_A uses Python identifier OWNER_A
    __OWNER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), 'OWNER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_144_httpopennebula_orgXMLSchemaOWNER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 18, 14), )

    
    OWNER_A = property(__OWNER_A.value, __OWNER_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_U uses Python identifier GROUP_U
    __GROUP_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), 'GROUP_U', '__httpopennebula_orgXMLSchema_CTD_ANON_144_httpopennebula_orgXMLSchemaGROUP_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 19, 14), )

    
    GROUP_U = property(__GROUP_U.value, __GROUP_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_M uses Python identifier GROUP_M
    __GROUP_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), 'GROUP_M', '__httpopennebula_orgXMLSchema_CTD_ANON_144_httpopennebula_orgXMLSchemaGROUP_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 20, 14), )

    
    GROUP_M = property(__GROUP_M.value, __GROUP_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_A uses Python identifier GROUP_A
    __GROUP_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), 'GROUP_A', '__httpopennebula_orgXMLSchema_CTD_ANON_144_httpopennebula_orgXMLSchemaGROUP_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 21, 14), )

    
    GROUP_A = property(__GROUP_A.value, __GROUP_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_U uses Python identifier OTHER_U
    __OTHER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), 'OTHER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_144_httpopennebula_orgXMLSchemaOTHER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 22, 14), )

    
    OTHER_U = property(__OTHER_U.value, __OTHER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_M uses Python identifier OTHER_M
    __OTHER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), 'OTHER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_144_httpopennebula_orgXMLSchemaOTHER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 23, 14), )

    
    OTHER_M = property(__OTHER_M.value, __OTHER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_A uses Python identifier OTHER_A
    __OTHER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), 'OTHER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_144_httpopennebula_orgXMLSchemaOTHER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 24, 14), )

    
    OTHER_A = property(__OTHER_A.value, __OTHER_A.set, None, None)

    _ElementMap.update({
        __OWNER_U.name() : __OWNER_U,
        __OWNER_M.name() : __OWNER_M,
        __OWNER_A.name() : __OWNER_A,
        __GROUP_U.name() : __GROUP_U,
        __GROUP_M.name() : __GROUP_M,
        __GROUP_A.name() : __GROUP_A,
        __OTHER_U.name() : __OTHER_U,
        __OTHER_M.name() : __OTHER_M,
        __OTHER_A.name() : __OTHER_A
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_144 = CTD_ANON_144


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_145 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 29, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_145_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 31, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_145 = CTD_ANON_145


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_146 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 43, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_146_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 45, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_146 = CTD_ANON_146


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_147 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 51, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}AR uses Python identifier AR
    __AR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AR'), 'AR', '__httpopennebula_orgXMLSchema_CTD_ANON_147_httpopennebula_orgXMLSchemaAR', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 53, 14), )

    
    AR = property(__AR.value, __AR.set, None, None)

    _ElementMap.update({
        __AR.name() : __AR
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_147 = CTD_ANON_147


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_148 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 54, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}AR_ID uses Python identifier AR_ID
    __AR_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AR_ID'), 'AR_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaAR_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 56, 20), )

    
    AR_ID = property(__AR_ID.value, __AR_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GLOBAL_PREFIX uses Python identifier GLOBAL_PREFIX
    __GLOBAL_PREFIX = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GLOBAL_PREFIX'), 'GLOBAL_PREFIX', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaGLOBAL_PREFIX', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 57, 20), )

    
    GLOBAL_PREFIX = property(__GLOBAL_PREFIX.value, __GLOBAL_PREFIX.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP uses Python identifier IP
    __IP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP'), 'IP', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaIP', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 58, 20), )

    
    IP = property(__IP.value, __IP.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MAC uses Python identifier MAC
    __MAC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MAC'), 'MAC', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaMAC', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 59, 20), )

    
    MAC = property(__MAC.value, __MAC.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PARENT_NETWORK_AR_ID uses Python identifier PARENT_NETWORK_AR_ID
    __PARENT_NETWORK_AR_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_AR_ID'), 'PARENT_NETWORK_AR_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaPARENT_NETWORK_AR_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 60, 20), )

    
    PARENT_NETWORK_AR_ID = property(__PARENT_NETWORK_AR_ID.value, __PARENT_NETWORK_AR_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 61, 20), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TYPE'), 'TYPE', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaTYPE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 62, 20), )

    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ULA_PREFIX uses Python identifier ULA_PREFIX
    __ULA_PREFIX = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ULA_PREFIX'), 'ULA_PREFIX', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaULA_PREFIX', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 63, 20), )

    
    ULA_PREFIX = property(__ULA_PREFIX.value, __ULA_PREFIX.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VN_MAD uses Python identifier VN_MAD
    __VN_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD'), 'VN_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaVN_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 64, 20), )

    
    VN_MAD = property(__VN_MAD.value, __VN_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MAC_END uses Python identifier MAC_END
    __MAC_END = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MAC_END'), 'MAC_END', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaMAC_END', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 65, 20), )

    
    MAC_END = property(__MAC_END.value, __MAC_END.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP_END uses Python identifier IP_END
    __IP_END = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP_END'), 'IP_END', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaIP_END', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 66, 20), )

    
    IP_END = property(__IP_END.value, __IP_END.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP6_ULA uses Python identifier IP6_ULA
    __IP6_ULA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP6_ULA'), 'IP6_ULA', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaIP6_ULA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 67, 20), )

    
    IP6_ULA = property(__IP6_ULA.value, __IP6_ULA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP6_ULA_END uses Python identifier IP6_ULA_END
    __IP6_ULA_END = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP6_ULA_END'), 'IP6_ULA_END', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaIP6_ULA_END', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 68, 20), )

    
    IP6_ULA_END = property(__IP6_ULA_END.value, __IP6_ULA_END.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP6_GLOBAL uses Python identifier IP6_GLOBAL
    __IP6_GLOBAL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP6_GLOBAL'), 'IP6_GLOBAL', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaIP6_GLOBAL', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 69, 20), )

    
    IP6_GLOBAL = property(__IP6_GLOBAL.value, __IP6_GLOBAL.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP6_GLOBAL_END uses Python identifier IP6_GLOBAL_END
    __IP6_GLOBAL_END = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP6_GLOBAL_END'), 'IP6_GLOBAL_END', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaIP6_GLOBAL_END', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 70, 20), )

    
    IP6_GLOBAL_END = property(__IP6_GLOBAL_END.value, __IP6_GLOBAL_END.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP6 uses Python identifier IP6
    __IP6 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP6'), 'IP6', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaIP6', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 71, 20), )

    
    IP6 = property(__IP6.value, __IP6.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP6_END uses Python identifier IP6_END
    __IP6_END = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP6_END'), 'IP6_END', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaIP6_END', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 72, 20), )

    
    IP6_END = property(__IP6_END.value, __IP6_END.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USED_LEASES uses Python identifier USED_LEASES
    __USED_LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USED_LEASES'), 'USED_LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaUSED_LEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 73, 20), )

    
    USED_LEASES = property(__USED_LEASES.value, __USED_LEASES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}LEASES uses Python identifier LEASES
    __LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), 'LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_148_httpopennebula_orgXMLSchemaLEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 74, 20), )

    
    LEASES = property(__LEASES.value, __LEASES.set, None, None)

    _ElementMap.update({
        __AR_ID.name() : __AR_ID,
        __GLOBAL_PREFIX.name() : __GLOBAL_PREFIX,
        __IP.name() : __IP,
        __MAC.name() : __MAC,
        __PARENT_NETWORK_AR_ID.name() : __PARENT_NETWORK_AR_ID,
        __SIZE.name() : __SIZE,
        __TYPE.name() : __TYPE,
        __ULA_PREFIX.name() : __ULA_PREFIX,
        __VN_MAD.name() : __VN_MAD,
        __MAC_END.name() : __MAC_END,
        __IP_END.name() : __IP_END,
        __IP6_ULA.name() : __IP6_ULA,
        __IP6_ULA_END.name() : __IP6_ULA_END,
        __IP6_GLOBAL.name() : __IP6_GLOBAL,
        __IP6_GLOBAL_END.name() : __IP6_GLOBAL_END,
        __IP6.name() : __IP6,
        __IP6_END.name() : __IP6_END,
        __USED_LEASES.name() : __USED_LEASES,
        __LEASES.name() : __LEASES
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_148 = CTD_ANON_148


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_149 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 75, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}LEASE uses Python identifier LEASE
    __LEASE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LEASE'), 'LEASE', '__httpopennebula_orgXMLSchema_CTD_ANON_149_httpopennebula_orgXMLSchemaLEASE', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 77, 26), )

    
    LEASE = property(__LEASE.value, __LEASE.set, None, None)

    _ElementMap.update({
        __LEASE.name() : __LEASE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_149 = CTD_ANON_149


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_150 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 78, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}IP uses Python identifier IP
    __IP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP'), 'IP', '__httpopennebula_orgXMLSchema_CTD_ANON_150_httpopennebula_orgXMLSchemaIP', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 80, 32), )

    
    IP = property(__IP.value, __IP.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP6 uses Python identifier IP6
    __IP6 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP6'), 'IP6', '__httpopennebula_orgXMLSchema_CTD_ANON_150_httpopennebula_orgXMLSchemaIP6', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 81, 32), )

    
    IP6 = property(__IP6.value, __IP6.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP6_GLOBAL uses Python identifier IP6_GLOBAL
    __IP6_GLOBAL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP6_GLOBAL'), 'IP6_GLOBAL', '__httpopennebula_orgXMLSchema_CTD_ANON_150_httpopennebula_orgXMLSchemaIP6_GLOBAL', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 82, 32), )

    
    IP6_GLOBAL = property(__IP6_GLOBAL.value, __IP6_GLOBAL.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP6_LINK uses Python identifier IP6_LINK
    __IP6_LINK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP6_LINK'), 'IP6_LINK', '__httpopennebula_orgXMLSchema_CTD_ANON_150_httpopennebula_orgXMLSchemaIP6_LINK', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 83, 32), )

    
    IP6_LINK = property(__IP6_LINK.value, __IP6_LINK.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP6_ULA uses Python identifier IP6_ULA
    __IP6_ULA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP6_ULA'), 'IP6_ULA', '__httpopennebula_orgXMLSchema_CTD_ANON_150_httpopennebula_orgXMLSchemaIP6_ULA', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 84, 32), )

    
    IP6_ULA = property(__IP6_ULA.value, __IP6_ULA.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MAC uses Python identifier MAC
    __MAC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MAC'), 'MAC', '__httpopennebula_orgXMLSchema_CTD_ANON_150_httpopennebula_orgXMLSchemaMAC', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 85, 32), )

    
    MAC = property(__MAC.value, __MAC.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VM uses Python identifier VM
    __VM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VM'), 'VM', '__httpopennebula_orgXMLSchema_CTD_ANON_150_httpopennebula_orgXMLSchemaVM', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 86, 32), )

    
    VM = property(__VM.value, __VM.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VNET uses Python identifier VNET
    __VNET = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VNET'), 'VNET', '__httpopennebula_orgXMLSchema_CTD_ANON_150_httpopennebula_orgXMLSchemaVNET', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 87, 32), )

    
    VNET = property(__VNET.value, __VNET.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VROUTER uses Python identifier VROUTER
    __VROUTER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VROUTER'), 'VROUTER', '__httpopennebula_orgXMLSchema_CTD_ANON_150_httpopennebula_orgXMLSchemaVROUTER', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 88, 32), )

    
    VROUTER = property(__VROUTER.value, __VROUTER.set, None, None)

    _ElementMap.update({
        __IP.name() : __IP,
        __IP6.name() : __IP6,
        __IP6_GLOBAL.name() : __IP6_GLOBAL,
        __IP6_LINK.name() : __IP6_LINK,
        __IP6_ULA.name() : __IP6_ULA,
        __MAC.name() : __MAC,
        __VM.name() : __VM,
        __VNET.name() : __VNET,
        __VROUTER.name() : __VROUTER
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_150 = CTD_ANON_150


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_151 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VNET uses Python identifier VNET
    __VNET = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VNET'), 'VNET', '__httpopennebula_orgXMLSchema_CTD_ANON_151_httpopennebula_orgXMLSchemaVNET', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 8, 8), )

    
    VNET = property(__VNET.value, __VNET.set, None, None)

    _ElementMap.update({
        __VNET.name() : __VNET
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_151 = CTD_ANON_151


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_152 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 9, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 11, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 12, 14), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 13, 14), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UNAME uses Python identifier UNAME
    __UNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), 'UNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaUNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 14, 14), )

    
    UNAME = property(__UNAME.value, __UNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 15, 14), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 16, 14), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PERMISSIONS uses Python identifier PERMISSIONS
    __PERMISSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), 'PERMISSIONS', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaPERMISSIONS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 17, 14), )

    
    PERMISSIONS = property(__PERMISSIONS.value, __PERMISSIONS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}CLUSTERS uses Python identifier CLUSTERS
    __CLUSTERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS'), 'CLUSTERS', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaCLUSTERS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 32, 14), )

    
    CLUSTERS = property(__CLUSTERS.value, __CLUSTERS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}BRIDGE uses Python identifier BRIDGE
    __BRIDGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BRIDGE'), 'BRIDGE', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaBRIDGE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 39, 14), )

    
    BRIDGE = property(__BRIDGE.value, __BRIDGE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PARENT_NETWORK_ID uses Python identifier PARENT_NETWORK_ID
    __PARENT_NETWORK_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_ID'), 'PARENT_NETWORK_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaPARENT_NETWORK_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 40, 14), )

    
    PARENT_NETWORK_ID = property(__PARENT_NETWORK_ID.value, __PARENT_NETWORK_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VN_MAD uses Python identifier VN_MAD
    __VN_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD'), 'VN_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaVN_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 41, 14), )

    
    VN_MAD = property(__VN_MAD.value, __VN_MAD.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PHYDEV uses Python identifier PHYDEV
    __PHYDEV = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PHYDEV'), 'PHYDEV', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaPHYDEV', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 42, 14), )

    
    PHYDEV = property(__PHYDEV.value, __PHYDEV.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VLAN_ID uses Python identifier VLAN_ID
    __VLAN_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID'), 'VLAN_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaVLAN_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 43, 14), )

    
    VLAN_ID = property(__VLAN_ID.value, __VLAN_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VLAN_ID_AUTOMATIC uses Python identifier VLAN_ID_AUTOMATIC
    __VLAN_ID_AUTOMATIC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID_AUTOMATIC'), 'VLAN_ID_AUTOMATIC', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaVLAN_ID_AUTOMATIC', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 44, 14), )

    
    VLAN_ID_AUTOMATIC = property(__VLAN_ID_AUTOMATIC.value, __VLAN_ID_AUTOMATIC.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}USED_LEASES uses Python identifier USED_LEASES
    __USED_LEASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'USED_LEASES'), 'USED_LEASES', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaUSED_LEASES', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 45, 14), )

    
    USED_LEASES = property(__USED_LEASES.value, __USED_LEASES.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VROUTERS uses Python identifier VROUTERS
    __VROUTERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VROUTERS'), 'VROUTERS', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaVROUTERS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 46, 14), )

    
    VROUTERS = property(__VROUTERS.value, __VROUTERS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 53, 14), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}AR_POOL uses Python identifier AR_POOL
    __AR_POOL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AR_POOL'), 'AR_POOL', '__httpopennebula_orgXMLSchema_CTD_ANON_152_httpopennebula_orgXMLSchemaAR_POOL', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 54, 14), )

    
    AR_POOL = property(__AR_POOL.value, __AR_POOL.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __UNAME.name() : __UNAME,
        __GNAME.name() : __GNAME,
        __NAME.name() : __NAME,
        __PERMISSIONS.name() : __PERMISSIONS,
        __CLUSTERS.name() : __CLUSTERS,
        __BRIDGE.name() : __BRIDGE,
        __PARENT_NETWORK_ID.name() : __PARENT_NETWORK_ID,
        __VN_MAD.name() : __VN_MAD,
        __PHYDEV.name() : __PHYDEV,
        __VLAN_ID.name() : __VLAN_ID,
        __VLAN_ID_AUTOMATIC.name() : __VLAN_ID_AUTOMATIC,
        __USED_LEASES.name() : __USED_LEASES,
        __VROUTERS.name() : __VROUTERS,
        __TEMPLATE.name() : __TEMPLATE,
        __AR_POOL.name() : __AR_POOL
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_152 = CTD_ANON_152


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_153 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 18, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OWNER_U uses Python identifier OWNER_U
    __OWNER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), 'OWNER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_153_httpopennebula_orgXMLSchemaOWNER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 20, 20), )

    
    OWNER_U = property(__OWNER_U.value, __OWNER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_M uses Python identifier OWNER_M
    __OWNER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), 'OWNER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_153_httpopennebula_orgXMLSchemaOWNER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 21, 20), )

    
    OWNER_M = property(__OWNER_M.value, __OWNER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_A uses Python identifier OWNER_A
    __OWNER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), 'OWNER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_153_httpopennebula_orgXMLSchemaOWNER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 22, 20), )

    
    OWNER_A = property(__OWNER_A.value, __OWNER_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_U uses Python identifier GROUP_U
    __GROUP_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), 'GROUP_U', '__httpopennebula_orgXMLSchema_CTD_ANON_153_httpopennebula_orgXMLSchemaGROUP_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 23, 20), )

    
    GROUP_U = property(__GROUP_U.value, __GROUP_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_M uses Python identifier GROUP_M
    __GROUP_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), 'GROUP_M', '__httpopennebula_orgXMLSchema_CTD_ANON_153_httpopennebula_orgXMLSchemaGROUP_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 24, 20), )

    
    GROUP_M = property(__GROUP_M.value, __GROUP_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_A uses Python identifier GROUP_A
    __GROUP_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), 'GROUP_A', '__httpopennebula_orgXMLSchema_CTD_ANON_153_httpopennebula_orgXMLSchemaGROUP_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 25, 20), )

    
    GROUP_A = property(__GROUP_A.value, __GROUP_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_U uses Python identifier OTHER_U
    __OTHER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), 'OTHER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_153_httpopennebula_orgXMLSchemaOTHER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 26, 20), )

    
    OTHER_U = property(__OTHER_U.value, __OTHER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_M uses Python identifier OTHER_M
    __OTHER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), 'OTHER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_153_httpopennebula_orgXMLSchemaOTHER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 27, 20), )

    
    OTHER_M = property(__OTHER_M.value, __OTHER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_A uses Python identifier OTHER_A
    __OTHER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), 'OTHER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_153_httpopennebula_orgXMLSchemaOTHER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 28, 20), )

    
    OTHER_A = property(__OTHER_A.value, __OTHER_A.set, None, None)

    _ElementMap.update({
        __OWNER_U.name() : __OWNER_U,
        __OWNER_M.name() : __OWNER_M,
        __OWNER_A.name() : __OWNER_A,
        __GROUP_U.name() : __GROUP_U,
        __GROUP_M.name() : __GROUP_M,
        __GROUP_A.name() : __GROUP_A,
        __OTHER_U.name() : __OTHER_U,
        __OTHER_M.name() : __OTHER_M,
        __OTHER_A.name() : __OTHER_A
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_153 = CTD_ANON_153


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_154 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 33, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_154_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 35, 20), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_154 = CTD_ANON_154


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_155 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 47, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_155_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 49, 20), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_155 = CTD_ANON_155


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_156 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 55, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}AR uses Python identifier AR
    __AR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AR'), 'AR', '__httpopennebula_orgXMLSchema_CTD_ANON_156_httpopennebula_orgXMLSchemaAR', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 57, 20), )

    
    AR = property(__AR.value, __AR.set, None, None)

    _ElementMap.update({
        __AR.name() : __AR
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_156 = CTD_ANON_156


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_157 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 58, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ALLOCATED uses Python identifier ALLOCATED
    __ALLOCATED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ALLOCATED'), 'ALLOCATED', '__httpopennebula_orgXMLSchema_CTD_ANON_157_httpopennebula_orgXMLSchemaALLOCATED', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 60, 26), )

    
    ALLOCATED = property(__ALLOCATED.value, __ALLOCATED.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}AR_ID uses Python identifier AR_ID
    __AR_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AR_ID'), 'AR_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_157_httpopennebula_orgXMLSchemaAR_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 61, 26), )

    
    AR_ID = property(__AR_ID.value, __AR_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GLOBAL_PREFIX uses Python identifier GLOBAL_PREFIX
    __GLOBAL_PREFIX = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GLOBAL_PREFIX'), 'GLOBAL_PREFIX', '__httpopennebula_orgXMLSchema_CTD_ANON_157_httpopennebula_orgXMLSchemaGLOBAL_PREFIX', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 62, 26), )

    
    GLOBAL_PREFIX = property(__GLOBAL_PREFIX.value, __GLOBAL_PREFIX.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}IP uses Python identifier IP
    __IP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IP'), 'IP', '__httpopennebula_orgXMLSchema_CTD_ANON_157_httpopennebula_orgXMLSchemaIP', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 63, 26), )

    
    IP = property(__IP.value, __IP.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}MAC uses Python identifier MAC
    __MAC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MAC'), 'MAC', '__httpopennebula_orgXMLSchema_CTD_ANON_157_httpopennebula_orgXMLSchemaMAC', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 64, 26), )

    
    MAC = property(__MAC.value, __MAC.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PARENT_NETWORK_AR_ID uses Python identifier PARENT_NETWORK_AR_ID
    __PARENT_NETWORK_AR_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_AR_ID'), 'PARENT_NETWORK_AR_ID', '__httpopennebula_orgXMLSchema_CTD_ANON_157_httpopennebula_orgXMLSchemaPARENT_NETWORK_AR_ID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 65, 26), )

    
    PARENT_NETWORK_AR_ID = property(__PARENT_NETWORK_AR_ID.value, __PARENT_NETWORK_AR_ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), 'SIZE', '__httpopennebula_orgXMLSchema_CTD_ANON_157_httpopennebula_orgXMLSchemaSIZE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 66, 26), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TYPE'), 'TYPE', '__httpopennebula_orgXMLSchema_CTD_ANON_157_httpopennebula_orgXMLSchemaTYPE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 67, 26), )

    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}ULA_PREFIX uses Python identifier ULA_PREFIX
    __ULA_PREFIX = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ULA_PREFIX'), 'ULA_PREFIX', '__httpopennebula_orgXMLSchema_CTD_ANON_157_httpopennebula_orgXMLSchemaULA_PREFIX', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 68, 26), )

    
    ULA_PREFIX = property(__ULA_PREFIX.value, __ULA_PREFIX.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VN_MAD uses Python identifier VN_MAD
    __VN_MAD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD'), 'VN_MAD', '__httpopennebula_orgXMLSchema_CTD_ANON_157_httpopennebula_orgXMLSchemaVN_MAD', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 69, 26), )

    
    VN_MAD = property(__VN_MAD.value, __VN_MAD.set, None, None)

    _ElementMap.update({
        __ALLOCATED.name() : __ALLOCATED,
        __AR_ID.name() : __AR_ID,
        __GLOBAL_PREFIX.name() : __GLOBAL_PREFIX,
        __IP.name() : __IP,
        __MAC.name() : __MAC,
        __PARENT_NETWORK_AR_ID.name() : __PARENT_NETWORK_AR_ID,
        __SIZE.name() : __SIZE,
        __TYPE.name() : __TYPE,
        __ULA_PREFIX.name() : __ULA_PREFIX,
        __VN_MAD.name() : __VN_MAD
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_157 = CTD_ANON_157


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_158 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_158_httpopennebula_orgXMLSchemaID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 7, 8), )

    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UID uses Python identifier UID
    __UID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UID'), 'UID', '__httpopennebula_orgXMLSchema_CTD_ANON_158_httpopennebula_orgXMLSchemaUID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 8, 8), )

    
    UID = property(__UID.value, __UID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GID uses Python identifier GID
    __GID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GID'), 'GID', '__httpopennebula_orgXMLSchema_CTD_ANON_158_httpopennebula_orgXMLSchemaGID', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 9, 8), )

    
    GID = property(__GID.value, __GID.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}UNAME uses Python identifier UNAME
    __UNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), 'UNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_158_httpopennebula_orgXMLSchemaUNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 10, 8), )

    
    UNAME = property(__UNAME.value, __UNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GNAME uses Python identifier GNAME
    __GNAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), 'GNAME', '__httpopennebula_orgXMLSchema_CTD_ANON_158_httpopennebula_orgXMLSchemaGNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 11, 8), )

    
    GNAME = property(__GNAME.value, __GNAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}NAME uses Python identifier NAME
    __NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NAME'), 'NAME', '__httpopennebula_orgXMLSchema_CTD_ANON_158_httpopennebula_orgXMLSchemaNAME', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 12, 8), )

    
    NAME = property(__NAME.value, __NAME.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}PERMISSIONS uses Python identifier PERMISSIONS
    __PERMISSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), 'PERMISSIONS', '__httpopennebula_orgXMLSchema_CTD_ANON_158_httpopennebula_orgXMLSchemaPERMISSIONS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 13, 8), )

    
    PERMISSIONS = property(__PERMISSIONS.value, __PERMISSIONS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}VMS uses Python identifier VMS
    __VMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VMS'), 'VMS', '__httpopennebula_orgXMLSchema_CTD_ANON_158_httpopennebula_orgXMLSchemaVMS', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 28, 8), )

    
    VMS = property(__VMS.value, __VMS.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}TEMPLATE uses Python identifier TEMPLATE
    __TEMPLATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), 'TEMPLATE', '__httpopennebula_orgXMLSchema_CTD_ANON_158_httpopennebula_orgXMLSchemaTEMPLATE', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 35, 8), )

    
    TEMPLATE = property(__TEMPLATE.value, __TEMPLATE.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID,
        __UID.name() : __UID,
        __GID.name() : __GID,
        __UNAME.name() : __UNAME,
        __GNAME.name() : __GNAME,
        __NAME.name() : __NAME,
        __PERMISSIONS.name() : __PERMISSIONS,
        __VMS.name() : __VMS,
        __TEMPLATE.name() : __TEMPLATE
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_158 = CTD_ANON_158


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_159 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 14, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}OWNER_U uses Python identifier OWNER_U
    __OWNER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), 'OWNER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_159_httpopennebula_orgXMLSchemaOWNER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 16, 14), )

    
    OWNER_U = property(__OWNER_U.value, __OWNER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_M uses Python identifier OWNER_M
    __OWNER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), 'OWNER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_159_httpopennebula_orgXMLSchemaOWNER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 17, 14), )

    
    OWNER_M = property(__OWNER_M.value, __OWNER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OWNER_A uses Python identifier OWNER_A
    __OWNER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), 'OWNER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_159_httpopennebula_orgXMLSchemaOWNER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 18, 14), )

    
    OWNER_A = property(__OWNER_A.value, __OWNER_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_U uses Python identifier GROUP_U
    __GROUP_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), 'GROUP_U', '__httpopennebula_orgXMLSchema_CTD_ANON_159_httpopennebula_orgXMLSchemaGROUP_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 19, 14), )

    
    GROUP_U = property(__GROUP_U.value, __GROUP_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_M uses Python identifier GROUP_M
    __GROUP_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), 'GROUP_M', '__httpopennebula_orgXMLSchema_CTD_ANON_159_httpopennebula_orgXMLSchemaGROUP_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 20, 14), )

    
    GROUP_M = property(__GROUP_M.value, __GROUP_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}GROUP_A uses Python identifier GROUP_A
    __GROUP_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), 'GROUP_A', '__httpopennebula_orgXMLSchema_CTD_ANON_159_httpopennebula_orgXMLSchemaGROUP_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 21, 14), )

    
    GROUP_A = property(__GROUP_A.value, __GROUP_A.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_U uses Python identifier OTHER_U
    __OTHER_U = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), 'OTHER_U', '__httpopennebula_orgXMLSchema_CTD_ANON_159_httpopennebula_orgXMLSchemaOTHER_U', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 22, 14), )

    
    OTHER_U = property(__OTHER_U.value, __OTHER_U.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_M uses Python identifier OTHER_M
    __OTHER_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), 'OTHER_M', '__httpopennebula_orgXMLSchema_CTD_ANON_159_httpopennebula_orgXMLSchemaOTHER_M', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 23, 14), )

    
    OTHER_M = property(__OTHER_M.value, __OTHER_M.set, None, None)

    
    # Element {http://opennebula.org/XMLSchema}OTHER_A uses Python identifier OTHER_A
    __OTHER_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), 'OTHER_A', '__httpopennebula_orgXMLSchema_CTD_ANON_159_httpopennebula_orgXMLSchemaOTHER_A', False, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 24, 14), )

    
    OTHER_A = property(__OTHER_A.value, __OTHER_A.set, None, None)

    _ElementMap.update({
        __OWNER_U.name() : __OWNER_U,
        __OWNER_M.name() : __OWNER_M,
        __OWNER_A.name() : __OWNER_A,
        __GROUP_U.name() : __GROUP_U,
        __GROUP_M.name() : __GROUP_M,
        __GROUP_A.name() : __GROUP_A,
        __OTHER_U.name() : __OTHER_U,
        __OTHER_M.name() : __OTHER_M,
        __OTHER_A.name() : __OTHER_A
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_159 = CTD_ANON_159


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_160 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 29, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}ID uses Python identifier ID
    __ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ID'), 'ID', '__httpopennebula_orgXMLSchema_CTD_ANON_160_httpopennebula_orgXMLSchemaID', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 31, 14), )

    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __ID.name() : __ID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_160 = CTD_ANON_160


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_161 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter_pool.xsd', 6, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://opennebula.org/XMLSchema}VROUTER uses Python identifier VROUTER
    __VROUTER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VROUTER'), 'VROUTER', '__httpopennebula_orgXMLSchema_CTD_ANON_161_httpopennebula_orgXMLSchemaVROUTER', True, pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 4, 2), )

    
    VROUTER = property(__VROUTER.value, __VROUTER.set, None, None)

    _ElementMap.update({
        __VROUTER.name() : __VROUTER
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_161 = CTD_ANON_161


HISTORY_RECORDS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HISTORY_RECORDS'), CTD_ANON, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 5, 2))
Namespace.addCategoryObject('elementBinding', HISTORY_RECORDS.name().localName(), HISTORY_RECORDS)

HISTORY = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HISTORY'), CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 13, 2))
Namespace.addCategoryObject('elementBinding', HISTORY.name().localName(), HISTORY)

CLUSTER = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER'), CTD_ANON_6, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 4, 2))
Namespace.addCategoryObject('elementBinding', CLUSTER.name().localName(), CLUSTER)

CLUSTER_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER_POOL'), CTD_ANON_10, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster_pool.xsd', 5, 2))
Namespace.addCategoryObject('elementBinding', CLUSTER_POOL.name().localName(), CLUSTER_POOL)

DATASTORE = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 3, 2))
Namespace.addCategoryObject('elementBinding', DATASTORE.name().localName(), DATASTORE)

DATASTORE_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_POOL'), CTD_ANON_15, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore_pool.xsd', 5, 2))
Namespace.addCategoryObject('elementBinding', DATASTORE_POOL.name().localName(), DATASTORE_POOL)

GROUP = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP'), CTD_ANON_16, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 4, 2))
Namespace.addCategoryObject('elementBinding', GROUP.name().localName(), GROUP)

GROUP_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_POOL'), CTD_ANON_36, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 4, 2))
Namespace.addCategoryObject('elementBinding', GROUP_POOL.name().localName(), GROUP_POOL)

HOST = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HOST'), CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 3, 2))
Namespace.addCategoryObject('elementBinding', HOST.name().localName(), HOST)

HOST_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HOST_POOL'), CTD_ANON_64, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host_pool.xsd', 5, 2))
Namespace.addCategoryObject('elementBinding', HOST_POOL.name().localName(), HOST_POOL)

IMAGE = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 3, 2))
Namespace.addCategoryObject('elementBinding', IMAGE.name().localName(), IMAGE)

IMAGE_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_POOL'), CTD_ANON_72, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image_pool.xsd', 5, 2))
Namespace.addCategoryObject('elementBinding', IMAGE_POOL.name().localName(), IMAGE_POOL)

MARKETPLACE = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACE'), CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 4, 2))
Namespace.addCategoryObject('elementBinding', MARKETPLACE.name().localName(), MARKETPLACE)

MARKETPLACE_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACE_POOL'), CTD_ANON_76, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace_pool.xsd', 5, 4))
Namespace.addCategoryObject('elementBinding', MARKETPLACE_POOL.name().localName(), MARKETPLACE_POOL)

MARKETPLACEAPP = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACEAPP'), CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 4, 2))
Namespace.addCategoryObject('elementBinding', MARKETPLACEAPP.name().localName(), MARKETPLACEAPP)

MARKETPLACEAPP_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACEAPP_POOL'), CTD_ANON_79, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp_pool.xsd', 5, 4))
Namespace.addCategoryObject('elementBinding', MARKETPLACEAPP_POOL.name().localName(), MARKETPLACEAPP_POOL)

USER = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USER'), CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 4, 2))
Namespace.addCategoryObject('elementBinding', USER.name().localName(), USER)

USER_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USER_POOL'), CTD_ANON_100, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 4, 2))
Namespace.addCategoryObject('elementBinding', USER_POOL.name().localName(), USER_POOL)

VDC = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VDC'), CTD_ANON_122, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 4, 2))
Namespace.addCategoryObject('elementBinding', VDC.name().localName(), VDC)

VDC_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VDC_POOL'), CTD_ANON_132, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc_pool.xsd', 5, 2))
Namespace.addCategoryObject('elementBinding', VDC_POOL.name().localName(), VDC_POOL)

VM = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 4, 2))
Namespace.addCategoryObject('elementBinding', VM.name().localName(), VM)

VM_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_POOL'), CTD_ANON_139, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm_pool.xsd', 5, 4))
Namespace.addCategoryObject('elementBinding', VM_POOL.name().localName(), VM_POOL)

VMTEMPLATE = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMTEMPLATE'), CTD_ANON_140, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 3, 2))
Namespace.addCategoryObject('elementBinding', VMTEMPLATE.name().localName(), VMTEMPLATE)

VMTEMPLATE_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMTEMPLATE_POOL'), CTD_ANON_142, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate_pool.xsd', 5, 2))
Namespace.addCategoryObject('elementBinding', VMTEMPLATE_POOL.name().localName(), VMTEMPLATE_POOL)

VNET = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VNET'), CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 4, 2))
Namespace.addCategoryObject('elementBinding', VNET.name().localName(), VNET)

VNET_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VNET_POOL'), CTD_ANON_151, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 5, 2))
Namespace.addCategoryObject('elementBinding', VNET_POOL.name().localName(), VNET_POOL)

VROUTER = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VROUTER'), CTD_ANON_158, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 4, 2))
Namespace.addCategoryObject('elementBinding', VROUTER.name().localName(), VROUTER)

VROUTER_POOL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VROUTER_POOL'), CTD_ANON_161, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter_pool.xsd', 5, 4))
Namespace.addCategoryObject('elementBinding', VROUTER_POOL.name().localName(), VROUTER_POOL)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HISTORY'), CTD_ANON_, scope=CTD_ANON, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 13, 2)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 8, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HISTORY')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 8, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 16, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SEQ'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 17, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HOSTNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 18, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 19, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 20, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 21, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ETIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 22, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 23, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TM_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 24, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DS_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 25, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PSTIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 26, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PETIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 27, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RSTIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 28, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RETIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 29, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ESTIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 30, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EETIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 31, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ACTION'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 80, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 81, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 82, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'REQUEST_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 83, 8)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), CTD_ANON_2, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 84, 8)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 16, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SEQ')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 17, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HOSTNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 18, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 19, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 20, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 21, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ETIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 22, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 23, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TM_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 24, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DS_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 25, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PSTIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 26, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PETIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 27, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RSTIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 28, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RETIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 29, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ESTIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 30, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EETIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 31, 8))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ACTION')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 80, 8))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 81, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 82, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'REQUEST_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 83, 8))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 84, 8))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 87, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 88, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 89, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 90, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 91, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 92, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), CTD_ANON_3, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 93, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LAST_POLL'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 108, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 113, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LCM_STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 119, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PREV_STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 120, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PREV_LCM_STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 121, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RESCHED'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 122, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 123, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ETIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 124, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DEPLOY_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 125, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MONITORING'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 126, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 145, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USER_TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 146, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HISTORY_RECORDS'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 147, 14)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOTS'), CTD_ANON_4, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 149, 14)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 93, 14))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 149, 14))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 87, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 88, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 89, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 90, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 91, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 92, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 93, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LAST_POLL')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 108, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 113, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LCM_STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 119, 14))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PREV_STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 120, 14))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PREV_LCM_STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 121, 14))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RESCHED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 122, 14))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 123, 14))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ETIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 124, 14))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DEPLOY_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 125, 14))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MONITORING')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 126, 14))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 145, 14))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USER_TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 146, 14))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HISTORY_RECORDS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 147, 14))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOTS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 149, 14))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_2()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 96, 20)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 97, 20)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 98, 20)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 99, 20)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 100, 20)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 101, 20)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 102, 20)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 103, 20)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 104, 20)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 96, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 97, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 98, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 99, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 100, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 101, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 102, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 103, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 104, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_3()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DISK_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 152, 20)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOT'), CTD_ANON_5, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 153, 20)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 153, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DISK_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 152, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOT')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 153, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_4()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ACTIVE'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 156, 26)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CHILDREN'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 157, 26)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 158, 26)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 159, 26)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 160, 26)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PARENT'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 161, 26)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 162, 26)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 156, 26))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 157, 26))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 160, 26))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ACTIVE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 156, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CHILDREN')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 157, 26))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 158, 26))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 159, 26))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 160, 26))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PARENT')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 161, 26))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/acct.xsd', 162, 26))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_5()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 7, 8)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 8, 8)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HOSTS'), CTD_ANON_7, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 9, 8)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORES'), CTD_ANON_8, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 16, 8)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VNETS'), CTD_ANON_9, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 23, 8)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 30, 8)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 7, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 8, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HOSTS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 9, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 16, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VNETS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 23, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 30, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_6()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 12, 18)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 12, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 12, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_7()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 19, 18)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 19, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 19, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_8()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 26, 18)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 26, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 26, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_9()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER'), CTD_ANON_6, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster.xsd', 4, 2)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster_pool.xsd', 8, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/cluster_pool.xsd', 8, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_10()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 6, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 7, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 8, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 9, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 10, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 11, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), CTD_ANON_12, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 12, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DS_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 27, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TM_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 28, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BASE_PATH'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 29, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TYPE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 30, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DISK_TYPE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 31, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 32, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS'), CTD_ANON_13, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 33, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MB'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 40, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FREE_MB'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 41, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USED_MB'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 42, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), CTD_ANON_14, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 43, 8)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 50, 8)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 12, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 6, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 7, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 8, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 9, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 10, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 11, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 12, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DS_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 27, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TM_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 28, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BASE_PATH')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 29, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TYPE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 30, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DISK_TYPE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 31, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 32, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 33, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MB')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 40, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FREE_MB')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 41, 8))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USED_MB')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 42, 8))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 43, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 50, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_11()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 15, 14)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 16, 14)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 17, 14)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 18, 14)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 19, 14)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 20, 14)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 21, 14)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 22, 14)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 23, 14)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 15, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 16, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 17, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 18, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 19, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 20, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 21, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 22, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 23, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_12()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 36, 14)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 36, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 36, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_13()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 46, 18)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 46, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 46, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_14()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), CTD_ANON_11, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore.xsd', 3, 2)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore_pool.xsd', 8, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/datastore_pool.xsd', 8, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_15()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 7, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 8, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 9, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USERS'), CTD_ANON_17, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 10, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ADMINS'), CTD_ANON_18, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 17, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), CTD_ANON_19, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 24, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), CTD_ANON_21, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 41, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), CTD_ANON_23, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 56, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), CTD_ANON_25, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 76, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_GROUP_QUOTAS'), CTD_ANON_27, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 91, 8)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 24, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 41, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 56, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 76, 8))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 7, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 8, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 9, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USERS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 10, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ADMINS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 17, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 24, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 41, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 56, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 76, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_GROUP_QUOTAS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 91, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_16()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 13, 14)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 13, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 13, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_17()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 20, 14)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 20, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 20, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_18()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), CTD_ANON_20, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 27, 14)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 27, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 27, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_19()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 30, 18)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 31, 18)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 32, 18)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 33, 18)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 34, 18)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 30, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 31, 18))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 32, 18))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 33, 18))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 34, 18))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_20()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), CTD_ANON_22, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 44, 14)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 44, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 44, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_21()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 47, 18)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), pyxb.binding.datatypes.string, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 48, 18)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 49, 18)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 47, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 48, 18))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 49, 18))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_22()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), CTD_ANON_24, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 59, 14)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 59, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 59, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_23()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 62, 20)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 63, 20)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 64, 20)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 65, 20)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 66, 20)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 67, 20)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 68, 20)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 69, 20)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 62, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 63, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 64, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 65, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 66, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 67, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 68, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 69, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_24()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), CTD_ANON_26, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 79, 14)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 79, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 79, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_25()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 82, 20)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 83, 20)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 84, 20)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 82, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 83, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 84, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_26()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), CTD_ANON_28, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 94, 16)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), CTD_ANON_30, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 111, 16)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), CTD_ANON_32, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 126, 16)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), CTD_ANON_34, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 146, 16)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 94, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 111, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 126, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 146, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 94, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 111, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 126, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 146, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_27()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), CTD_ANON_29, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 97, 22)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 97, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 97, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_28()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 100, 26)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), pyxb.binding.datatypes.string, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 101, 26)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 102, 26)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 103, 26)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 104, 26)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 100, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 101, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 102, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 103, 26))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 104, 26))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_29()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), CTD_ANON_31, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 114, 22)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 114, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 114, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_30()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 117, 26)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), pyxb.binding.datatypes.string, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 118, 26)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 119, 26)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 117, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 118, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 119, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_31()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), CTD_ANON_33, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 129, 22)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 129, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 129, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_32()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 132, 28)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 133, 28)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 134, 28)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 135, 28)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 136, 28)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 137, 28)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 138, 28)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 139, 28)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 132, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 133, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 134, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 135, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 136, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 137, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 138, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 139, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_33()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), CTD_ANON_35, scope=CTD_ANON_34, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 149, 22)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 149, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 149, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_34()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 152, 28)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 153, 28)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 154, 28)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 152, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 153, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group.xsd', 154, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_35()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP'), CTD_ANON_37, scope=CTD_ANON_36, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 8, 10)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'QUOTAS'), CTD_ANON_40, scope=CTD_ANON_36, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 31, 10)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_GROUP_QUOTAS'), CTD_ANON_49, scope=CTD_ANON_36, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 106, 8)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 7, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 8, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 31, 10))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 8, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'QUOTAS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 31, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_GROUP_QUOTAS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 106, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_36()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 11, 16)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 12, 16)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 13, 16)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USERS'), CTD_ANON_38, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 14, 16)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ADMINS'), CTD_ANON_39, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 21, 16)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 11, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 12, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 13, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USERS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 14, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ADMINS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 21, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_37()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 17, 22)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 17, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 17, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_38()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 24, 22)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 24, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 24, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_39()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 34, 16)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), CTD_ANON_41, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 35, 16)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), CTD_ANON_43, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 52, 16)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), CTD_ANON_45, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 67, 16)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), CTD_ANON_47, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 87, 16)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 35, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 52, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 67, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 87, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 34, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 35, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 52, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 67, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 87, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_40()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), CTD_ANON_42, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 38, 22)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 38, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 38, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_41()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 41, 26)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), pyxb.binding.datatypes.string, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 42, 26)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 43, 26)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 44, 26)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 45, 26)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 41, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 42, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 43, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 44, 26))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 45, 26))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_42()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), CTD_ANON_44, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 55, 22)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 55, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 55, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_43()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 58, 26)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), pyxb.binding.datatypes.string, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 59, 26)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 60, 26)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 58, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 59, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 60, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_44()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), CTD_ANON_46, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 70, 22)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 70, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 70, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_45()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU'), pyxb.binding.datatypes.string, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 73, 28)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 74, 28)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), pyxb.binding.datatypes.string, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 75, 28)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 76, 28)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 77, 28)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 78, 28)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 79, 28)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 80, 28)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 73, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 74, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 75, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 76, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 77, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 78, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 79, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 80, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_46()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), CTD_ANON_48, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 90, 22)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 90, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 90, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_47()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 93, 28)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 94, 28)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 95, 28)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 93, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 94, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 95, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_48()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), CTD_ANON_50, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 109, 16)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), CTD_ANON_52, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 126, 16)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), CTD_ANON_54, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 141, 16)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), CTD_ANON_56, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 161, 16)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 109, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 126, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 141, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 161, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 109, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 126, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 141, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 161, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_49()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), CTD_ANON_51, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 112, 22)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 112, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 112, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_50()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 115, 26)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 116, 26)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 117, 26)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 118, 26)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 119, 26)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 115, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 116, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 117, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 118, 26))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 119, 26))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_51()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), CTD_ANON_53, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 129, 22)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 129, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 129, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_52()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 132, 26)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 133, 26)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 134, 26)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 132, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 133, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 134, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_53()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), CTD_ANON_55, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 144, 22)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 144, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 144, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_54()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 147, 28)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 148, 28)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 149, 28)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 150, 28)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 151, 28)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 152, 28)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 153, 28)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 154, 28)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 147, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 148, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 149, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 150, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 151, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 152, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 153, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 154, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_55()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), CTD_ANON_57, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 164, 22)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 164, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 164, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_56()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 167, 28)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 168, 28)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 169, 28)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 167, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 168, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/group_pool.xsd', 169, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_57()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 6, 8)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 7, 8)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 20, 8)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IM_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 21, 8)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 22, 8)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LAST_MON_TIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 23, 8)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 24, 8)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER'), pyxb.binding.datatypes.string, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 25, 8)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HOST_SHARE'), CTD_ANON_59, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 26, 8)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS'), CTD_ANON_63, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 80, 8)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 87, 8)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 6, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 7, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 20, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IM_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 21, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 22, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LAST_MON_TIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 23, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 24, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 25, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HOST_SHARE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 26, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 80, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 87, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_58()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DISK_USAGE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 29, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEM_USAGE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 30, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU_USAGE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 32, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MEM'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 34, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_CPU'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 35, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MAX_DISK'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 36, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MAX_MEM'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 37, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MAX_CPU'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 39, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FREE_DISK'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 41, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FREE_MEM'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 42, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FREE_CPU'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 44, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USED_DISK'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 46, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USED_MEM'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 47, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USED_CPU'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 49, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RUNNING_VMS'), pyxb.binding.datatypes.integer, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 53, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORES'), CTD_ANON_60, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 54, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PCI_DEVICES'), CTD_ANON_62, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 70, 14)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DISK_USAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 29, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEM_USAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 30, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU_USAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 32, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MEM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 34, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 35, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MAX_DISK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 36, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MAX_MEM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 37, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MAX_CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 39, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FREE_DISK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 41, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FREE_MEM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 42, 14))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FREE_CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 44, 14))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USED_DISK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 46, 14))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USED_MEM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 47, 14))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USED_CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 49, 14))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RUNNING_VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 53, 14))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 54, 14))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PCI_DEVICES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 70, 14))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_59()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DS'), CTD_ANON_61, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 57, 20)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 57, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 57, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_60()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 60, 26)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FREE_MB'), pyxb.binding.datatypes.integer, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 61, 26)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MB'), pyxb.binding.datatypes.integer, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 62, 26)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USED_MB'), pyxb.binding.datatypes.integer, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 63, 26)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 60, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FREE_MB')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 61, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MB')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 62, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USED_MB')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 63, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_62())
    sub_automata.append(_BuildAutomaton_63())
    sub_automata.append(_BuildAutomaton_64())
    sub_automata.append(_BuildAutomaton_65())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 59, 24)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_61()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PCI'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 73, 20)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 73, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PCI')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 73, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_66()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 83, 18)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 83, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 83, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_67()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HOST'), CTD_ANON_58, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host.xsd', 3, 2)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host_pool.xsd', 8, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HOST')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/host_pool.xsd', 8, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_68()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 6, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 7, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 8, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 9, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 10, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 11, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), CTD_ANON_66, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 12, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TYPE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 27, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DISK_TYPE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 28, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PERSISTENT'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 29, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'REGTIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 30, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SOURCE'), pyxb.binding.datatypes.string, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 31, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PATH'), pyxb.binding.datatypes.string, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 32, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FSTYPE'), pyxb.binding.datatypes.string, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 33, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 34, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 49, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RUNNING_VMS'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 50, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLONING_OPS'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 51, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLONING_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 52, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TARGET_SNAPSHOT'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 53, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 54, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), pyxb.binding.datatypes.string, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 55, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS'), CTD_ANON_67, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 56, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLONES'), CTD_ANON_68, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 63, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'APP_CLONES'), CTD_ANON_69, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 70, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 77, 8)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOTS'), CTD_ANON_70, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 78, 8)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 12, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 6, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 7, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 8, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 9, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 10, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 11, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 12, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TYPE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 27, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DISK_TYPE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 28, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PERSISTENT')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 29, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'REGTIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 30, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SOURCE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 31, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PATH')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 32, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FSTYPE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 33, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 34, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 49, 8))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RUNNING_VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 50, 8))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLONING_OPS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 51, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLONING_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 52, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TARGET_SNAPSHOT')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 53, 8))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 54, 8))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 55, 8))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 56, 8))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLONES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 63, 8))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'APP_CLONES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 70, 8))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 77, 8))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOTS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 78, 8))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
         ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
         ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
         ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_69()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 15, 14)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 16, 14)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 17, 14)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 18, 14)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 19, 14)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 20, 14)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 21, 14)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 22, 14)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 23, 14)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 15, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 16, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 17, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 18, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 19, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 20, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 21, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 22, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 23, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_70()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 59, 14)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 59, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 59, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_71()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 66, 14)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 66, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 66, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_72()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 73, 14)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 73, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 73, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_73()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ALLOW_ORPHANS'), pyxb.binding.datatypes.string, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 81, 14)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOT'), CTD_ANON_71, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 82, 14)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 81, 14))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 82, 14))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ALLOW_ORPHANS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 81, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOT')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 82, 14))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_74()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CHILDREN'), pyxb.binding.datatypes.string, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 85, 20)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ACTIVE'), pyxb.binding.datatypes.string, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 86, 20)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 87, 20)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 88, 20)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 89, 20)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PARENT'), pyxb.binding.datatypes.integer, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 90, 20)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 91, 20)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 85, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 86, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 89, 20))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CHILDREN')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 85, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ACTIVE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 86, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 87, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 88, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 89, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PARENT')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 90, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 91, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_75()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), CTD_ANON_65, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image.xsd', 3, 2)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image_pool.xsd', 8, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/image_pool.xsd', 8, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_76()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 7, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 8, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 9, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 10, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 11, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 12, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MARKET_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 13, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 14, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MB'), pyxb.binding.datatypes.integer, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 15, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FREE_MB'), pyxb.binding.datatypes.integer, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 16, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USED_MB'), pyxb.binding.datatypes.integer, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 17, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACEAPPS'), CTD_ANON_74, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 18, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), CTD_ANON_75, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 25, 8)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 40, 8)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 25, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 7, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 8, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 9, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 10, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 11, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 12, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MARKET_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 13, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 14, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TOTAL_MB')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 15, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FREE_MB')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 16, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USED_MB')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 17, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACEAPPS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 18, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 25, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 40, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_77()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 21, 14)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 21, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 21, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_78()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 28, 14)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 29, 14)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 30, 14)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 31, 14)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 32, 14)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 33, 14)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 34, 14)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 35, 14)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 36, 14)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 28, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 29, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 30, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 31, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 32, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 33, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 34, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 35, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 36, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_79()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACE'), CTD_ANON_73, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace.xsd', 4, 2)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace_pool.xsd', 8, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplace_pool.xsd', 8, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_80()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 7, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 8, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 9, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 10, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 11, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'REGTIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 12, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 13, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 14, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ORIGIN_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 15, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SOURCE'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 16, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MD5'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 17, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 18, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DESCRIPTION'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 19, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VERSION'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 20, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FORMAT'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 21, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'APPTEMPLATE64'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 22, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACE_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 23, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACE'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 24, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 25, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TYPE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 26, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), CTD_ANON_78, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 27, 8)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 42, 8)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 27, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 7, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 8, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 9, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 10, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 11, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'REGTIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 12, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 13, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 14, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ORIGIN_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 15, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SOURCE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 16, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MD5')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 17, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 18, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DESCRIPTION')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 19, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VERSION')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 20, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FORMAT')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 21, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'APPTEMPLATE64')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 22, 8))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACE_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 23, 8))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 24, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 25, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TYPE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 26, 8))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 27, 8))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 42, 8))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_81()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 30, 14)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 31, 14)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 32, 14)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 33, 14)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 34, 14)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 35, 14)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 36, 14)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 37, 14)))

CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 38, 14)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 30, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 31, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 32, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 33, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 34, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 35, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 36, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 37, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 38, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_82()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACEAPP'), CTD_ANON_77, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp.xsd', 4, 2)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp_pool.xsd', 8, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MARKETPLACEAPP')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/marketplaceapp_pool.xsd', 8, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_83()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 7, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 8, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUPS'), CTD_ANON_81, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 9, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 16, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 17, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PASSWORD'), pyxb.binding.datatypes.string, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 18, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AUTH_DRIVER'), pyxb.binding.datatypes.string, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 19, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ENABLED'), pyxb.binding.datatypes.integer, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 20, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LOGIN_TOKEN'), CTD_ANON_82, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 21, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 30, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), CTD_ANON_83, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 31, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), CTD_ANON_85, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 48, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), CTD_ANON_87, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 63, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), CTD_ANON_89, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 83, 8)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_USER_QUOTAS'), CTD_ANON_91, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 98, 8)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 21, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 31, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 48, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 63, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 83, 8))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 7, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 8, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUPS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 9, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 16, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 17, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PASSWORD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 18, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AUTH_DRIVER')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 19, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ENABLED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 20, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LOGIN_TOKEN')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 21, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 30, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 31, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 48, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 63, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 83, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_USER_QUOTAS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 98, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_84()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 12, 14)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 12, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_85()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TOKEN'), pyxb.binding.datatypes.string, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 24, 14)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EXPIRATION_TIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 25, 14)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EGID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 26, 14)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TOKEN')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 24, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EXPIRATION_TIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 25, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EGID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 26, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_86()




CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), CTD_ANON_84, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 34, 14)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 34, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 34, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_83._Automaton = _BuildAutomaton_87()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 37, 18)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), pyxb.binding.datatypes.string, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 38, 18)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 39, 18)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 40, 18)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 41, 18)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 37, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 38, 18))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 39, 18))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 40, 18))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 41, 18))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_88()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), CTD_ANON_86, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 51, 14)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 51, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 51, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_89()




CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 54, 18)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), pyxb.binding.datatypes.string, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 55, 18)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 56, 18)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 54, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 55, 18))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 56, 18))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_90()




CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), CTD_ANON_88, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 66, 14)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 66, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 66, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_87._Automaton = _BuildAutomaton_91()




CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU'), pyxb.binding.datatypes.string, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 69, 20)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 70, 20)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), pyxb.binding.datatypes.string, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 71, 20)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 72, 20)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 73, 20)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 74, 20)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 75, 20)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 76, 20)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 69, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 70, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 71, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 72, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 73, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 74, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 75, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 76, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_92()




CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), CTD_ANON_90, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 86, 14)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 86, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 86, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_93()




CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 89, 20)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 90, 20)))

CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 91, 20)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 89, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 90, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 91, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_94()




CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), CTD_ANON_92, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 101, 16)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), CTD_ANON_94, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 118, 16)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), CTD_ANON_96, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 133, 16)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), CTD_ANON_98, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 153, 16)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 101, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 118, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 133, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 153, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 101, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 118, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 133, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 153, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_95()




CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), CTD_ANON_93, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 104, 22)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 104, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 104, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_92._Automaton = _BuildAutomaton_96()




CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 107, 26)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), pyxb.binding.datatypes.string, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 108, 26)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 109, 26)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 110, 26)))

CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 111, 26)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 107, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 108, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 109, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 110, 26))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 111, 26))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_93._Automaton = _BuildAutomaton_97()




CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), CTD_ANON_95, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 121, 22)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 121, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 121, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_94._Automaton = _BuildAutomaton_98()




CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 124, 26)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 125, 26)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 126, 26)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 124, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 125, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 126, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_95._Automaton = _BuildAutomaton_99()




CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), CTD_ANON_97, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 136, 22)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 136, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 136, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_96._Automaton = _BuildAutomaton_100()




CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 139, 28)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 140, 28)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 141, 28)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 142, 28)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 143, 28)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 144, 28)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 145, 28)))

CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 146, 28)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 139, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 140, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 141, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 142, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 143, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 144, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 145, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 146, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_97._Automaton = _BuildAutomaton_101()




CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), CTD_ANON_99, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 156, 22)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 156, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 156, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_98._Automaton = _BuildAutomaton_102()




CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_99, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 159, 28)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_99, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 160, 28)))

CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_99, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 161, 28)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 159, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 160, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user.xsd', 161, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_99._Automaton = _BuildAutomaton_103()




CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USER'), CTD_ANON_101, scope=CTD_ANON_100, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 8, 10)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'QUOTAS'), CTD_ANON_104, scope=CTD_ANON_100, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 38, 10)))

CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_USER_QUOTAS'), CTD_ANON_113, scope=CTD_ANON_100, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 113, 8)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 7, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 8, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 38, 10))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USER')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 8, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'QUOTAS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 38, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DEFAULT_USER_QUOTAS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 113, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_100._Automaton = _BuildAutomaton_104()




CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 11, 16)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 12, 16)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUPS'), CTD_ANON_102, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 13, 16)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 20, 16)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 21, 16)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PASSWORD'), pyxb.binding.datatypes.string, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 22, 16)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AUTH_DRIVER'), pyxb.binding.datatypes.string, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 23, 16)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ENABLED'), pyxb.binding.datatypes.integer, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 24, 16)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LOGIN_TOKEN'), CTD_ANON_103, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 25, 16)))

CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 34, 16)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 25, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 11, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 12, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUPS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 13, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 20, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 21, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PASSWORD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 22, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AUTH_DRIVER')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 23, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ENABLED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 24, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LOGIN_TOKEN')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 25, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 34, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_101._Automaton = _BuildAutomaton_105()




CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 16, 22)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 16, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_102._Automaton = _BuildAutomaton_106()




CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TOKEN'), pyxb.binding.datatypes.string, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 28, 22)))

CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EXPIRATION_TIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 29, 22)))

CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EGID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 30, 22)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TOKEN')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 28, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EXPIRATION_TIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 29, 22))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EGID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 30, 22))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_103._Automaton = _BuildAutomaton_107()




CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 41, 16)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), CTD_ANON_105, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 42, 16)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), CTD_ANON_107, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 59, 16)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), CTD_ANON_109, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 74, 16)))

CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), CTD_ANON_111, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 94, 16)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 42, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 59, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 74, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 94, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 41, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 42, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 59, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 74, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 94, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_104._Automaton = _BuildAutomaton_108()




CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), CTD_ANON_106, scope=CTD_ANON_105, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 45, 22)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 45, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 45, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_105._Automaton = _BuildAutomaton_109()




CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 48, 26)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), pyxb.binding.datatypes.string, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 49, 26)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 50, 26)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 51, 26)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 52, 26)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 48, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 49, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 50, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 51, 26))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 52, 26))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_106._Automaton = _BuildAutomaton_110()




CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), CTD_ANON_108, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 62, 22)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 62, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 62, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_107._Automaton = _BuildAutomaton_111()




CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 65, 26)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), pyxb.binding.datatypes.string, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 66, 26)))

CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 67, 26)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 65, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 66, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 67, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_108._Automaton = _BuildAutomaton_112()




CTD_ANON_109._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), CTD_ANON_110, scope=CTD_ANON_109, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 77, 22)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 77, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_109._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 77, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_109._Automaton = _BuildAutomaton_113()




CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU'), pyxb.binding.datatypes.string, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 80, 28)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 81, 28)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), pyxb.binding.datatypes.string, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 82, 28)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 83, 28)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 84, 28)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 85, 28)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 86, 28)))

CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 87, 28)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 80, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 81, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 82, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 83, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 84, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 85, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 86, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 87, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_110._Automaton = _BuildAutomaton_114()




CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), CTD_ANON_112, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 97, 22)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 97, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 97, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_111._Automaton = _BuildAutomaton_115()




CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 100, 28)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 101, 28)))

CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 102, 28)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 100, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 101, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 102, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_112._Automaton = _BuildAutomaton_116()




CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA'), CTD_ANON_114, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 116, 16)))

CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA'), CTD_ANON_116, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 133, 16)))

CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA'), CTD_ANON_118, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 148, 16)))

CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA'), CTD_ANON_120, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 168, 16)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 116, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 133, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 148, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 168, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 116, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 133, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 148, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE_QUOTA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 168, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_113._Automaton = _BuildAutomaton_117()




CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), CTD_ANON_115, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 119, 22)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 119, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 119, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_114._Automaton = _BuildAutomaton_118()




CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_115, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 122, 26)))

CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES'), pyxb.binding.datatypes.string, scope=CTD_ANON_115, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 123, 26)))

CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_115, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 124, 26)))

CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_115, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 125, 26)))

CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_115, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 126, 26)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 122, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 123, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 124, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 125, 26))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 126, 26))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_115._Automaton = _BuildAutomaton_119()




CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NETWORK'), CTD_ANON_117, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 136, 22)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 136, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NETWORK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 136, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_116._Automaton = _BuildAutomaton_120()




CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 139, 26)))

CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), pyxb.binding.datatypes.string, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 140, 26)))

CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 141, 26)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 139, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 140, 26))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 141, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_117._Automaton = _BuildAutomaton_121()




CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), CTD_ANON_119, scope=CTD_ANON_118, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 151, 22)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 151, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 151, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_118._Automaton = _BuildAutomaton_122()




CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 154, 28)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 155, 28)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 156, 28)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 157, 28)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 158, 28)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 159, 28)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 160, 28)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 161, 28)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 154, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CPU_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 155, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 156, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MEMORY_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 157, 28))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 158, 28))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SYSTEM_DISK_SIZE_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 159, 28))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 160, 28))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 161, 28))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_119._Automaton = _BuildAutomaton_123()




CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IMAGE'), CTD_ANON_121, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 171, 22)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 171, 22))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IMAGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 171, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_120._Automaton = _BuildAutomaton_124()




CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 174, 28)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS'), pyxb.binding.datatypes.string, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 175, 28)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED'), pyxb.binding.datatypes.string, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 176, 28)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 174, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 175, 28))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RVMS_USED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/user_pool.xsd', 176, 28))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_121._Automaton = _BuildAutomaton_125()




CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 7, 8)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 8, 8)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUPS'), CTD_ANON_123, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 9, 8)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS'), CTD_ANON_124, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 16, 8)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HOSTS'), CTD_ANON_126, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 30, 8)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORES'), CTD_ANON_128, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 44, 8)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VNETS'), CTD_ANON_130, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 58, 8)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 72, 8)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 7, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 8, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUPS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 9, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 16, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HOSTS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 30, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 44, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VNETS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 58, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 72, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_122._Automaton = _BuildAutomaton_126()




CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 12, 14)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 12, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 12, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_123._Automaton = _BuildAutomaton_127()




CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER'), CTD_ANON_125, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 19, 14)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 19, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 19, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_124._Automaton = _BuildAutomaton_128()




CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 22, 20)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 23, 20)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 22, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLUSTER_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 23, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_125._Automaton = _BuildAutomaton_129()




CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HOST'), CTD_ANON_127, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 33, 14)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 33, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HOST')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 33, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_126._Automaton = _BuildAutomaton_130()




CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_127, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 36, 20)))

CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HOST_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_127, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 37, 20)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 36, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HOST_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 37, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_127._Automaton = _BuildAutomaton_131()




CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE'), CTD_ANON_129, scope=CTD_ANON_128, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 47, 14)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 47, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 47, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_128._Automaton = _BuildAutomaton_132()




CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 50, 20)))

CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 51, 20)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 50, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATASTORE_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 51, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_129._Automaton = _BuildAutomaton_133()




CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VNET'), CTD_ANON_131, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 61, 14)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 61, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VNET')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 61, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_130._Automaton = _BuildAutomaton_134()




CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 64, 20)))

CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VNET_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 65, 20)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ZONE_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 64, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VNET_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 65, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_131._Automaton = _BuildAutomaton_135()




CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VDC'), CTD_ANON_122, scope=CTD_ANON_132, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc.xsd', 4, 2)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc_pool.xsd', 8, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VDC')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vdc_pool.xsd', 8, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_132._Automaton = _BuildAutomaton_136()




CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 7, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 8, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 9, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 10, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 11, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 12, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), CTD_ANON_134, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 13, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LAST_POLL'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 28, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 33, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LCM_STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 39, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PREV_STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 40, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PREV_LCM_STATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 41, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RESCHED'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 42, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 43, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ETIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 44, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DEPLOY_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 45, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MONITORING'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 46, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 65, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USER_TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 66, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HISTORY_RECORDS'), CTD_ANON_135, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 67, 8)))

CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOTS'), CTD_ANON_137, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 147, 8)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 13, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 147, 8))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 7, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 8, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 9, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 10, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 11, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 12, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 13, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LAST_POLL')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 28, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 33, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LCM_STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 39, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PREV_STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 40, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PREV_LCM_STATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 41, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RESCHED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 42, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 43, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ETIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 44, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DEPLOY_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 45, 8))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MONITORING')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 46, 8))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 65, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USER_TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 66, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HISTORY_RECORDS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 67, 8))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOTS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 147, 8))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_133._Automaton = _BuildAutomaton_137()




CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 16, 14)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 17, 14)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 18, 14)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 19, 14)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 20, 14)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 21, 14)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 22, 14)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 23, 14)))

CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 24, 14)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 16, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 17, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 18, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 19, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 20, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 21, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 22, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 23, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 24, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_134._Automaton = _BuildAutomaton_138()




CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HISTORY'), CTD_ANON_136, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 70, 14)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 70, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HISTORY')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 70, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_135._Automaton = _BuildAutomaton_139()




CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 73, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SEQ'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 74, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HOSTNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 75, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 76, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 77, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 78, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ETIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 79, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 80, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TM_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 81, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DS_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 82, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PSTIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 83, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PETIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 84, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RSTIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 85, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RETIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 86, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ESTIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 87, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EETIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 88, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ACTION'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 137, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 138, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 139, 20)))

CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'REQUEST_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 140, 20)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 73, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SEQ')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 74, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HOSTNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 75, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 76, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 77, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 78, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ETIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 79, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 80, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TM_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 81, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DS_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 82, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PSTIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 83, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PETIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 84, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RSTIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 85, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RETIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 86, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ESTIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 87, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EETIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 88, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ACTION')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 137, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 138, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 139, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'REQUEST_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 140, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_136._Automaton = _BuildAutomaton_140()




CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DISK_ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 150, 14)))

CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOT'), CTD_ANON_138, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 151, 14)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 151, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DISK_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 150, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SNAPSHOT')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 151, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_137._Automaton = _BuildAutomaton_141()




CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ACTIVE'), pyxb.binding.datatypes.string, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 154, 20)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CHILDREN'), pyxb.binding.datatypes.string, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 155, 20)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DATE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 156, 20)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 157, 20)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 158, 20)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PARENT'), pyxb.binding.datatypes.integer, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 159, 20)))

CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 160, 20)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 154, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 155, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 158, 20))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ACTIVE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 154, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CHILDREN')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 155, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 156, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 157, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 158, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PARENT')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 159, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 160, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_138._Automaton = _BuildAutomaton_142()




CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), CTD_ANON_133, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm.xsd', 4, 2)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm_pool.xsd', 8, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vm_pool.xsd', 8, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_139._Automaton = _BuildAutomaton_143()




CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 6, 8)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 7, 8)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 8, 8)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 9, 8)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 10, 8)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 11, 8)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), CTD_ANON_141, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 12, 8)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'REGTIME'), pyxb.binding.datatypes.integer, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 27, 8)))

CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 28, 8)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 6, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 7, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 8, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 9, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 10, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 11, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 12, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'REGTIME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 27, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 28, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_140._Automaton = _BuildAutomaton_144()




CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 15, 14)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 16, 14)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 17, 14)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 18, 14)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 19, 14)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 20, 14)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 21, 14)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 22, 14)))

CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 23, 14)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 15, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 16, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 17, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 18, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 19, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 20, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 21, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 22, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 23, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_141._Automaton = _BuildAutomaton_145()




CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMTEMPLATE'), CTD_ANON_140, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate.xsd', 3, 2)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate_pool.xsd', 8, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMTEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vmtemplate_pool.xsd', 8, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_142._Automaton = _BuildAutomaton_146()




CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 7, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 8, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 9, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 10, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 11, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 12, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), CTD_ANON_144, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 13, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS'), CTD_ANON_145, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 28, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BRIDGE'), pyxb.binding.datatypes.string, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 35, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 36, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 37, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PHYDEV'), pyxb.binding.datatypes.string, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 38, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 39, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID_AUTOMATIC'), pyxb.binding.datatypes.string, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 40, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USED_LEASES'), pyxb.binding.datatypes.integer, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 41, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VROUTERS'), CTD_ANON_146, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 42, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 49, 8)))

CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AR_POOL'), CTD_ANON_147, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 50, 8)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 13, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 7, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 8, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 9, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 10, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 11, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 12, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 13, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 28, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BRIDGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 35, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 36, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 37, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PHYDEV')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 38, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 39, 8))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID_AUTOMATIC')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 40, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USED_LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 41, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VROUTERS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 42, 8))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 49, 8))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AR_POOL')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 50, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_143._Automaton = _BuildAutomaton_147()




CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 16, 14)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 17, 14)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 18, 14)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 19, 14)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 20, 14)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 21, 14)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 22, 14)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 23, 14)))

CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 24, 14)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 16, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 17, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 18, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 19, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 20, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 21, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 22, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 23, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 24, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_144._Automaton = _BuildAutomaton_148()




CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_145, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 31, 14)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 31, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 31, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_145._Automaton = _BuildAutomaton_149()




CTD_ANON_146._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_146, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 45, 14)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 45, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_146._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 45, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_146._Automaton = _BuildAutomaton_150()




CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AR'), CTD_ANON_148, scope=CTD_ANON_147, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 53, 14)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 52, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 53, 14))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AR')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 53, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_147._Automaton = _BuildAutomaton_151()




CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AR_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 56, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GLOBAL_PREFIX'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 57, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 58, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MAC'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 59, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_AR_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 60, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 61, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TYPE'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 62, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ULA_PREFIX'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 63, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 64, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MAC_END'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 65, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP_END'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 66, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP6_ULA'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 67, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP6_ULA_END'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 68, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP6_GLOBAL'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 69, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP6_GLOBAL_END'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 70, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP6'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 71, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP6_END'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 72, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USED_LEASES'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 73, 20)))

CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASES'), CTD_ANON_149, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 74, 20)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 57, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 58, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 60, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 63, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 64, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 65, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 66, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 67, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 68, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 69, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 70, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 71, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 72, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 74, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AR_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 56, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GLOBAL_PREFIX')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 57, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 58, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MAC')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 59, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_AR_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 60, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 61, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TYPE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 62, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ULA_PREFIX')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 63, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 64, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MAC_END')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 65, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP_END')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 66, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP6_ULA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 67, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP6_ULA_END')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 68, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP6_GLOBAL')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 69, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP6_GLOBAL_END')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 70, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP6')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 71, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP6_END')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 72, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USED_LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 73, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 74, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_148._Automaton = _BuildAutomaton_152()




CTD_ANON_149._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LEASE'), CTD_ANON_150, scope=CTD_ANON_149, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 77, 26)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 77, 26))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_149._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LEASE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 77, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_149._Automaton = _BuildAutomaton_153()




CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP'), pyxb.binding.datatypes.string, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 80, 32)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP6'), pyxb.binding.datatypes.string, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 81, 32)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP6_GLOBAL'), pyxb.binding.datatypes.string, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 82, 32)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP6_LINK'), pyxb.binding.datatypes.string, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 83, 32)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP6_ULA'), pyxb.binding.datatypes.string, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 84, 32)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MAC'), pyxb.binding.datatypes.string, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 85, 32)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VM'), pyxb.binding.datatypes.integer, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 86, 32)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VNET'), pyxb.binding.datatypes.integer, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 87, 32)))

CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VROUTER'), pyxb.binding.datatypes.integer, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 88, 32)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 80, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 80, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 81, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP6')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 81, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 82, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP6_GLOBAL')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 82, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 83, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP6_LINK')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 83, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 84, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP6_ULA')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 84, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MAC')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 85, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 86, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VM')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 86, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 87, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VNET')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 87, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 88, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VROUTER')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 88, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 80, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 81, 32))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 82, 32))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 83, 32))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 84, 32))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 86, 32))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 87, 32))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 88, 32))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_155())
    sub_automata.append(_BuildAutomaton_156())
    sub_automata.append(_BuildAutomaton_157())
    sub_automata.append(_BuildAutomaton_158())
    sub_automata.append(_BuildAutomaton_159())
    sub_automata.append(_BuildAutomaton_160())
    sub_automata.append(_BuildAutomaton_161())
    sub_automata.append(_BuildAutomaton_162())
    sub_automata.append(_BuildAutomaton_163())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet.xsd', 79, 30)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_150._Automaton = _BuildAutomaton_154()




CTD_ANON_151._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VNET'), CTD_ANON_152, scope=CTD_ANON_151, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 8, 8)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 8, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_151._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VNET')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 8, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_151._Automaton = _BuildAutomaton_164()




CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 11, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 12, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 13, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 14, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 15, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 16, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), CTD_ANON_153, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 17, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS'), CTD_ANON_154, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 32, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BRIDGE'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 39, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 40, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 41, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PHYDEV'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 42, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 43, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID_AUTOMATIC'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 44, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'USED_LEASES'), pyxb.binding.datatypes.integer, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 45, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VROUTERS'), CTD_ANON_155, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 46, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 53, 14)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AR_POOL'), CTD_ANON_156, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 54, 14)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 17, 14))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 11, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 12, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 13, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 14, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 15, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 16, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 17, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CLUSTERS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 32, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BRIDGE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 39, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 40, 14))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 41, 14))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PHYDEV')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 42, 14))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 43, 14))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VLAN_ID_AUTOMATIC')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 44, 14))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'USED_LEASES')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 45, 14))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VROUTERS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 46, 14))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 53, 14))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AR_POOL')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 54, 14))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_152._Automaton = _BuildAutomaton_165()




CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 20, 20)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 21, 20)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 22, 20)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 23, 20)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 24, 20)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 25, 20)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 26, 20)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 27, 20)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 28, 20)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 20, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 21, 20))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 22, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 23, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 24, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 25, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 26, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 27, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 28, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_153._Automaton = _BuildAutomaton_166()




CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 35, 20)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 35, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 35, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_154._Automaton = _BuildAutomaton_167()




CTD_ANON_155._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_155, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 49, 20)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 49, 20))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_155._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 49, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_155._Automaton = _BuildAutomaton_168()




CTD_ANON_156._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AR'), CTD_ANON_157, scope=CTD_ANON_156, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 57, 20)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 56, 18))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 57, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_156._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AR')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 57, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_156._Automaton = _BuildAutomaton_169()




CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ALLOCATED'), pyxb.binding.datatypes.string, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 60, 26)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AR_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 61, 26)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GLOBAL_PREFIX'), pyxb.binding.datatypes.string, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 62, 26)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IP'), pyxb.binding.datatypes.string, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 63, 26)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MAC'), pyxb.binding.datatypes.string, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 64, 26)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_AR_ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 65, 26)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SIZE'), pyxb.binding.datatypes.integer, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 66, 26)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TYPE'), pyxb.binding.datatypes.string, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 67, 26)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ULA_PREFIX'), pyxb.binding.datatypes.string, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 68, 26)))

CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD'), pyxb.binding.datatypes.string, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 69, 26)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 60, 26))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 62, 26))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 63, 26))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 65, 26))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 68, 26))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 69, 26))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ALLOCATED')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 60, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AR_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 61, 26))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GLOBAL_PREFIX')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 62, 26))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IP')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 63, 26))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MAC')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 64, 26))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PARENT_NETWORK_AR_ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 65, 26))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SIZE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 66, 26))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TYPE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 67, 26))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ULA_PREFIX')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 68, 26))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VN_MAD')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vnet_pool.xsd', 69, 26))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_157._Automaton = _BuildAutomaton_170()




CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 7, 8)))

CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 8, 8)))

CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 9, 8)))

CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 10, 8)))

CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 11, 8)))

CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NAME'), pyxb.binding.datatypes.string, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 12, 8)))

CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS'), CTD_ANON_159, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 13, 8)))

CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VMS'), CTD_ANON_160, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 28, 8)))

CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 35, 8)))

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 13, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 7, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 8, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 9, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 10, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 11, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NAME')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 12, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PERMISSIONS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 13, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VMS')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 28, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TEMPLATE')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 35, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_158._Automaton = _BuildAutomaton_171()




CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 16, 14)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 17, 14)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 18, 14)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 19, 14)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 20, 14)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 21, 14)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U'), pyxb.binding.datatypes.integer, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 22, 14)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M'), pyxb.binding.datatypes.integer, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 23, 14)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A'), pyxb.binding.datatypes.integer, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 24, 14)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 16, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 17, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OWNER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 18, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 19, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 20, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GROUP_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 21, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_U')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 22, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_M')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 23, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OTHER_A')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 24, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_159._Automaton = _BuildAutomaton_172()




CTD_ANON_160._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_160, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 31, 14)))

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 31, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_160._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ID')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 31, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_160._Automaton = _BuildAutomaton_173()




CTD_ANON_161._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VROUTER'), CTD_ANON_158, scope=CTD_ANON_161, location=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter.xsd', 4, 2)))

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter_pool.xsd', 8, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_161._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VROUTER')), pyxb.utils.utility.Location('/home/rafael/Development/privaz.io/python/pyone/pyone/xsd/vrouter_pool.xsd', 8, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_161._Automaton = _BuildAutomaton_174()

