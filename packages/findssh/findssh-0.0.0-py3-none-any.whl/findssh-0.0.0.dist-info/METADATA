Metadata-Version: 2.0
Name: findssh
Version: 0.0.0
Summary: find open servers on your IPv4 subnet, e.g. SSH.
Home-page: https://github.com/scivision/findssh
Author: Michael Hirsch, Ph.D.
Author-email: UNKNOWN
License: UNKNOWN
Description-Content-Type: UNKNOWN
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: System :: Networking
Classifier: Topic :: Utilities
Requires-Python: >=3.3
Provides-Extra: tests
Requires-Dist: coveralls; extra == 'tests'
Requires-Dist: nose; extra == 'tests'

.. image:: https://travis-ci.org/scivision/findssh.svg?branch=master
    :target: https://travis-ci.org/scivision/findssh

.. image:: https://coveralls.io/repos/github/scivision/findssh/badge.svg?branch=master
    :target: https://coveralls.io/github/scivision/findssh?branch=master

.. image:: https://api.codeclimate.com/v1/badges/c7409d3c78d12c3df14b/maintainability
   :target: https://codeclimate.com/github/scivision/findssh/maintainability
   :alt: Maintainability

=======
findssh
=======
Platform-independent Python >= 3.5 script that finds SSH servers (or other services with open ports) on an IPv4 subnet, WITHOUT NMAP.

:author: Michael Hirsch, Ph.D.

.. contents::

Install
=======
You can just run ``findssh.py`` directly, but to allow use from other programs, you can install by::

    pip install findssh

or from this repo::

    pip install -e .


Usage
=======
Takes about 40 seconds to scan an IPv4 subnet.

from Terminal::

  python findssh.py

or from within Python

.. code:: python

    import findssh

    findssh.run()


Command line options
---------------------

-s  checks the string from the server to attempt to verify the correct service has been found.
-t  timeout 
-b  baseip (check other subnet besides your own)
-p  port




Future
======
consider non-blocking/threading


Notes
=====
Python <= 3.2 is that ``socket`` doesn't have a context manager.


