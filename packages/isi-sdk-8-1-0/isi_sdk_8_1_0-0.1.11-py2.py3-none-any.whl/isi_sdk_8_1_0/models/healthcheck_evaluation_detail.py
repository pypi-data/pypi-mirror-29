# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class HealthcheckEvaluationDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HealthcheckEvaluationDetail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'details': 'Empty',
            'hash': 'str',
            'id': 'str',
            'node': 'str',
            'parameters': 'Empty',
            'status': 'str',
            'value': 'int'
        }

        self.attribute_map = {
            'details': 'details',
            'hash': 'hash',
            'id': 'id',
            'node': 'node',
            'parameters': 'parameters',
            'status': 'status',
            'value': 'value'
        }

        self._details = None
        self._hash = None
        self._id = None
        self._node = None
        self._parameters = None
        self._status = None
        self._value = None

    @property
    def details(self):
        """
        Gets the details of this HealthcheckEvaluationDetail.
        Optional details of the evaluation - raw data

        :return: The details of this HealthcheckEvaluationDetail.
        :rtype: Empty
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this HealthcheckEvaluationDetail.
        Optional details of the evaluation - raw data

        :param details: The details of this HealthcheckEvaluationDetail.
        :type: Empty
        """
        
        self._details = details

    @property
    def hash(self):
        """
        Gets the hash of this HealthcheckEvaluationDetail.
        Unique identifier

        :return: The hash of this HealthcheckEvaluationDetail.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this HealthcheckEvaluationDetail.
        Unique identifier

        :param hash: The hash of this HealthcheckEvaluationDetail.
        :type: str
        """
        
        self._hash = hash

    @property
    def id(self):
        """
        Gets the id of this HealthcheckEvaluationDetail.
        Unique identifier of item

        :return: The id of this HealthcheckEvaluationDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this HealthcheckEvaluationDetail.
        Unique identifier of item

        :param id: The id of this HealthcheckEvaluationDetail.
        :type: str
        """
        
        self._id = id

    @property
    def node(self):
        """
        Gets the node of this HealthcheckEvaluationDetail.
        Either 'cluster' or an lnn

        :return: The node of this HealthcheckEvaluationDetail.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """
        Sets the node of this HealthcheckEvaluationDetail.
        Either 'cluster' or an lnn

        :param node: The node of this HealthcheckEvaluationDetail.
        :type: str
        """
        
        self._node = node

    @property
    def parameters(self):
        """
        Gets the parameters of this HealthcheckEvaluationDetail.
        The parameters used in this item evaluation

        :return: The parameters of this HealthcheckEvaluationDetail.
        :rtype: Empty
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this HealthcheckEvaluationDetail.
        The parameters used in this item evaluation

        :param parameters: The parameters of this HealthcheckEvaluationDetail.
        :type: Empty
        """
        
        self._parameters = parameters

    @property
    def status(self):
        """
        Gets the status of this HealthcheckEvaluationDetail.
        Health status based on default thresholds

        :return: The status of this HealthcheckEvaluationDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this HealthcheckEvaluationDetail.
        Health status based on default thresholds

        :param status: The status of this HealthcheckEvaluationDetail.
        :type: str
        """
        allowed_values = ["OK", "WARNING", "CRITICAL", "EMERGENCY", "UNSUPPORTED", "ERROR"]
        if status is not None and status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )

        self._status = status

    @property
    def value(self):
        """
        Gets the value of this HealthcheckEvaluationDetail.
        Normalised measured value 0 (bad) to 100 (perfect)

        :return: The value of this HealthcheckEvaluationDetail.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this HealthcheckEvaluationDetail.
        Normalised measured value 0 (bad) to 100 (perfect)

        :param value: The value of this HealthcheckEvaluationDetail.
        :type: int
        """
        
        if value is not None  and value > 100.0:
            raise ValueError("Invalid value for `value`, must be a value less than or equal to `100.0`")
        if value is not None and value < 0.0:
            raise ValueError("Invalid value for `value`, must be a value greater than or equal to `0.0`")

        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

