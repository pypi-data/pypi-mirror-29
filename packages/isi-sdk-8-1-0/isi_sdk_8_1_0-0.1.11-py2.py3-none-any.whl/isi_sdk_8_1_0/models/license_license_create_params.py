# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class LicenseLicenseCreateParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LicenseLicenseCreateParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'evaluation': 'list[str]',
            'license_file_content': 'str',
            'license_file_path': 'str'
        }

        self.attribute_map = {
            'evaluation': 'evaluation',
            'license_file_content': 'license_file_content',
            'license_file_path': 'license_file_path'
        }

        self._evaluation = None
        self._license_file_content = None
        self._license_file_path = None

    @property
    def evaluation(self):
        """
        Gets the evaluation of this LicenseLicenseCreateParams.
        A list of evaluation licenses to enable on the cluster.

        :return: The evaluation of this LicenseLicenseCreateParams.
        :rtype: list[str]
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation):
        """
        Sets the evaluation of this LicenseLicenseCreateParams.
        A list of evaluation licenses to enable on the cluster.

        :param evaluation: The evaluation of this LicenseLicenseCreateParams.
        :type: list[str]
        """
        
        self._evaluation = evaluation

    @property
    def license_file_content(self):
        """
        Gets the license_file_content of this LicenseLicenseCreateParams.
        License file string content. The license file is obtained from EMC's SLC web portal. Do not use with the license_file_path option.

        :return: The license_file_content of this LicenseLicenseCreateParams.
        :rtype: str
        """
        return self._license_file_content

    @license_file_content.setter
    def license_file_content(self, license_file_content):
        """
        Sets the license_file_content of this LicenseLicenseCreateParams.
        License file string content. The license file is obtained from EMC's SLC web portal. Do not use with the license_file_path option.

        :param license_file_content: The license_file_content of this LicenseLicenseCreateParams.
        :type: str
        """
        
        if license_file_content is not None and len(license_file_content) > 2147483647: 
            raise ValueError("Invalid value for `license_file_content`, length must be less than `2147483647`")
        if license_file_content is not None and len(license_file_content) < 1:
            raise ValueError("Invalid value for `license_file_content`, length must be greater than or equal to `1`")
        if license_file_content is not None and not re.search('.+', license_file_content):
            raise ValueError("Invalid value for `license_file_content`, must be a follow pattern or equal to `/.+/`")

        self._license_file_content = license_file_content

    @property
    def license_file_path(self):
        """
        Gets the license_file_path of this LicenseLicenseCreateParams.
        Path to new license file, must be under /ifs. The license file is obtained from EMC's SLC web portal. Do not include the path when only enabling evaluation licenses. Do not use with the license_file_content option.

        :return: The license_file_path of this LicenseLicenseCreateParams.
        :rtype: str
        """
        return self._license_file_path

    @license_file_path.setter
    def license_file_path(self, license_file_path):
        """
        Sets the license_file_path of this LicenseLicenseCreateParams.
        Path to new license file, must be under /ifs. The license file is obtained from EMC's SLC web portal. Do not include the path when only enabling evaluation licenses. Do not use with the license_file_content option.

        :param license_file_path: The license_file_path of this LicenseLicenseCreateParams.
        :type: str
        """
        
        if license_file_path is not None and len(license_file_path) > 1024: 
            raise ValueError("Invalid value for `license_file_path`, length must be less than `1024`")
        if license_file_path is not None and len(license_file_path) < 4:
            raise ValueError("Invalid value for `license_file_path`, length must be greater than or equal to `4`")
        if license_file_path is not None and not re.search('^/ifs', license_file_path):
            raise ValueError("Invalid value for `license_file_path`, must be a follow pattern or equal to `/^/ifs/`")

        self._license_file_path = license_file_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

