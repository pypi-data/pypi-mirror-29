# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class CertificateServerItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CertificateServerItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'certificate_key_path': 'str',
            'certificate_path': 'str',
            'default': 'bool',
            'description': 'str'
        }

        self.attribute_map = {
            'certificate_key_path': 'certificate_key_path',
            'certificate_path': 'certificate_path',
            'default': 'default',
            'description': 'description'
        }

        self._certificate_key_path = None
        self._certificate_path = None
        self._default = None
        self._description = None

    @property
    def certificate_key_path(self):
        """
        Gets the certificate_key_path of this CertificateServerItem.
        Local path to the certificate key that is to be imported.

        :return: The certificate_key_path of this CertificateServerItem.
        :rtype: str
        """
        return self._certificate_key_path

    @certificate_key_path.setter
    def certificate_key_path(self, certificate_key_path):
        """
        Sets the certificate_key_path of this CertificateServerItem.
        Local path to the certificate key that is to be imported.

        :param certificate_key_path: The certificate_key_path of this CertificateServerItem.
        :type: str
        """
        
        self._certificate_key_path = certificate_key_path

    @property
    def certificate_path(self):
        """
        Gets the certificate_path of this CertificateServerItem.
        Local path to the certificate that is to be imported.

        :return: The certificate_path of this CertificateServerItem.
        :rtype: str
        """
        return self._certificate_path

    @certificate_path.setter
    def certificate_path(self, certificate_path):
        """
        Sets the certificate_path of this CertificateServerItem.
        Local path to the certificate that is to be imported.

        :param certificate_path: The certificate_path of this CertificateServerItem.
        :type: str
        """
        
        self._certificate_path = certificate_path

    @property
    def default(self):
        """
        Gets the default of this CertificateServerItem.
        Boolean identifying if a certificate is the default certificate.The default certificate is used as the fallback when no other certificates match a TLS enabled service's particular criteria. There must always be a configured default certificate.

        :return: The default of this CertificateServerItem.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """
        Sets the default of this CertificateServerItem.
        Boolean identifying if a certificate is the default certificate.The default certificate is used as the fallback when no other certificates match a TLS enabled service's particular criteria. There must always be a configured default certificate.

        :param default: The default of this CertificateServerItem.
        :type: bool
        """
        
        self._default = default

    @property
    def description(self):
        """
        Gets the description of this CertificateServerItem.
        Description field associated with a certificate provided for administrative convenience.

        :return: The description of this CertificateServerItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CertificateServerItem.
        Description field associated with a certificate provided for administrative convenience.

        :param description: The description of this CertificateServerItem.
        :type: str
        """
        
        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

