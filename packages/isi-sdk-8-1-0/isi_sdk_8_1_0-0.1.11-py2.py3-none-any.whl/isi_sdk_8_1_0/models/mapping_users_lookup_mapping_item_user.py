# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class MappingUsersLookupMappingItemUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MappingUsersLookupMappingItemUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'dn': 'str',
            'dns_domain': 'str',
            'domain': 'str',
            'email': 'str',
            'enabled': 'bool',
            'expired': 'bool',
            'expiry': 'int',
            'gecos': 'str',
            'generated_gid': 'bool',
            'generated_uid': 'bool',
            'generated_upn': 'bool',
            'gid': 'AuthAccessAccessItemFileGroup',
            'home_directory': 'str',
            'id': 'str',
            'locked': 'bool',
            'max_password_age': 'int',
            'member_of': 'list[AuthAccessAccessItemFileGroup]',
            'name': 'str',
            'object_history': 'list[AuthGroupObjectHistoryItem]',
            'on_disk_group_identity': 'AuthAccessAccessItemFileGroup',
            'on_disk_user_identity': 'AuthAccessAccessItemFileGroup',
            'password_expired': 'bool',
            'password_expires': 'bool',
            'password_expiry': 'int',
            'password_last_set': 'int',
            'primary_group_sid': 'AuthAccessAccessItemFileGroup',
            'prompt_password_change': 'bool',
            'provider': 'str',
            'sam_account_name': 'str',
            'shell': 'str',
            'sid': 'AuthAccessAccessItemFileGroup',
            'type': 'str',
            'uid': 'AuthAccessAccessItemFileGroup',
            'upn': 'str',
            'user_can_change_password': 'bool'
        }

        self.attribute_map = {
            'dn': 'dn',
            'dns_domain': 'dns_domain',
            'domain': 'domain',
            'email': 'email',
            'enabled': 'enabled',
            'expired': 'expired',
            'expiry': 'expiry',
            'gecos': 'gecos',
            'generated_gid': 'generated_gid',
            'generated_uid': 'generated_uid',
            'generated_upn': 'generated_upn',
            'gid': 'gid',
            'home_directory': 'home_directory',
            'id': 'id',
            'locked': 'locked',
            'max_password_age': 'max_password_age',
            'member_of': 'member_of',
            'name': 'name',
            'object_history': 'object_history',
            'on_disk_group_identity': 'on_disk_group_identity',
            'on_disk_user_identity': 'on_disk_user_identity',
            'password_expired': 'password_expired',
            'password_expires': 'password_expires',
            'password_expiry': 'password_expiry',
            'password_last_set': 'password_last_set',
            'primary_group_sid': 'primary_group_sid',
            'prompt_password_change': 'prompt_password_change',
            'provider': 'provider',
            'sam_account_name': 'sam_account_name',
            'shell': 'shell',
            'sid': 'sid',
            'type': 'type',
            'uid': 'uid',
            'upn': 'upn',
            'user_can_change_password': 'user_can_change_password'
        }

        self._dn = None
        self._dns_domain = None
        self._domain = None
        self._email = None
        self._enabled = None
        self._expired = None
        self._expiry = None
        self._gecos = None
        self._generated_gid = None
        self._generated_uid = None
        self._generated_upn = None
        self._gid = None
        self._home_directory = None
        self._id = None
        self._locked = None
        self._max_password_age = None
        self._member_of = None
        self._name = None
        self._object_history = None
        self._on_disk_group_identity = None
        self._on_disk_user_identity = None
        self._password_expired = None
        self._password_expires = None
        self._password_expiry = None
        self._password_last_set = None
        self._primary_group_sid = None
        self._prompt_password_change = None
        self._provider = None
        self._sam_account_name = None
        self._shell = None
        self._sid = None
        self._type = None
        self._uid = None
        self._upn = None
        self._user_can_change_password = None

    @property
    def dn(self):
        """
        Gets the dn of this MappingUsersLookupMappingItemUser.


        :return: The dn of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """
        Sets the dn of this MappingUsersLookupMappingItemUser.


        :param dn: The dn of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if dn is not None and len(dn) > 255: 
            raise ValueError("Invalid value for `dn`, length must be less than `255`")
        if dn is not None and len(dn) < 0:
            raise ValueError("Invalid value for `dn`, length must be greater than or equal to `0`")

        self._dn = dn

    @property
    def dns_domain(self):
        """
        Gets the dns_domain of this MappingUsersLookupMappingItemUser.


        :return: The dns_domain of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._dns_domain

    @dns_domain.setter
    def dns_domain(self, dns_domain):
        """
        Sets the dns_domain of this MappingUsersLookupMappingItemUser.


        :param dns_domain: The dns_domain of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if dns_domain is not None and len(dns_domain) > 255: 
            raise ValueError("Invalid value for `dns_domain`, length must be less than `255`")
        if dns_domain is not None and len(dns_domain) < 0:
            raise ValueError("Invalid value for `dns_domain`, length must be greater than or equal to `0`")

        self._dns_domain = dns_domain

    @property
    def domain(self):
        """
        Gets the domain of this MappingUsersLookupMappingItemUser.


        :return: The domain of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this MappingUsersLookupMappingItemUser.


        :param domain: The domain of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if domain is not None and len(domain) > 255: 
            raise ValueError("Invalid value for `domain`, length must be less than `255`")
        if domain is not None and len(domain) < 0:
            raise ValueError("Invalid value for `domain`, length must be greater than or equal to `0`")

        self._domain = domain

    @property
    def email(self):
        """
        Gets the email of this MappingUsersLookupMappingItemUser.


        :return: The email of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this MappingUsersLookupMappingItemUser.


        :param email: The email of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if email is not None and len(email) > 255: 
            raise ValueError("Invalid value for `email`, length must be less than `255`")
        if email is not None and len(email) < 0:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `0`")

        self._email = email

    @property
    def enabled(self):
        """
        Gets the enabled of this MappingUsersLookupMappingItemUser.
        True, if the authenticated user is enabled.

        :return: The enabled of this MappingUsersLookupMappingItemUser.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this MappingUsersLookupMappingItemUser.
        True, if the authenticated user is enabled.

        :param enabled: The enabled of this MappingUsersLookupMappingItemUser.
        :type: bool
        """
        
        self._enabled = enabled

    @property
    def expired(self):
        """
        Gets the expired of this MappingUsersLookupMappingItemUser.
        True, if the authenticated user has expired.

        :return: The expired of this MappingUsersLookupMappingItemUser.
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """
        Sets the expired of this MappingUsersLookupMappingItemUser.
        True, if the authenticated user has expired.

        :param expired: The expired of this MappingUsersLookupMappingItemUser.
        :type: bool
        """
        
        self._expired = expired

    @property
    def expiry(self):
        """
        Gets the expiry of this MappingUsersLookupMappingItemUser.


        :return: The expiry of this MappingUsersLookupMappingItemUser.
        :rtype: int
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """
        Sets the expiry of this MappingUsersLookupMappingItemUser.


        :param expiry: The expiry of this MappingUsersLookupMappingItemUser.
        :type: int
        """
        
        if expiry is not None  and expiry > 4.294967295E9:
            raise ValueError("Invalid value for `expiry`, must be a value less than or equal to `4.294967295E9`")
        if expiry is not None and expiry < 0.0:
            raise ValueError("Invalid value for `expiry`, must be a value greater than or equal to `0.0`")

        self._expiry = expiry

    @property
    def gecos(self):
        """
        Gets the gecos of this MappingUsersLookupMappingItemUser.


        :return: The gecos of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._gecos

    @gecos.setter
    def gecos(self, gecos):
        """
        Sets the gecos of this MappingUsersLookupMappingItemUser.


        :param gecos: The gecos of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if gecos is not None and len(gecos) > 255: 
            raise ValueError("Invalid value for `gecos`, length must be less than `255`")
        if gecos is not None and len(gecos) < 0:
            raise ValueError("Invalid value for `gecos`, length must be greater than or equal to `0`")

        self._gecos = gecos

    @property
    def generated_gid(self):
        """
        Gets the generated_gid of this MappingUsersLookupMappingItemUser.
        True, if the GID was generated.

        :return: The generated_gid of this MappingUsersLookupMappingItemUser.
        :rtype: bool
        """
        return self._generated_gid

    @generated_gid.setter
    def generated_gid(self, generated_gid):
        """
        Sets the generated_gid of this MappingUsersLookupMappingItemUser.
        True, if the GID was generated.

        :param generated_gid: The generated_gid of this MappingUsersLookupMappingItemUser.
        :type: bool
        """
        
        self._generated_gid = generated_gid

    @property
    def generated_uid(self):
        """
        Gets the generated_uid of this MappingUsersLookupMappingItemUser.
        True, if the UID was generated.

        :return: The generated_uid of this MappingUsersLookupMappingItemUser.
        :rtype: bool
        """
        return self._generated_uid

    @generated_uid.setter
    def generated_uid(self, generated_uid):
        """
        Sets the generated_uid of this MappingUsersLookupMappingItemUser.
        True, if the UID was generated.

        :param generated_uid: The generated_uid of this MappingUsersLookupMappingItemUser.
        :type: bool
        """
        
        self._generated_uid = generated_uid

    @property
    def generated_upn(self):
        """
        Gets the generated_upn of this MappingUsersLookupMappingItemUser.
        True, if the UPN was generated.

        :return: The generated_upn of this MappingUsersLookupMappingItemUser.
        :rtype: bool
        """
        return self._generated_upn

    @generated_upn.setter
    def generated_upn(self, generated_upn):
        """
        Sets the generated_upn of this MappingUsersLookupMappingItemUser.
        True, if the UPN was generated.

        :param generated_upn: The generated_upn of this MappingUsersLookupMappingItemUser.
        :type: bool
        """
        
        self._generated_upn = generated_upn

    @property
    def gid(self):
        """
        Gets the gid of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :return: The gid of this MappingUsersLookupMappingItemUser.
        :rtype: AuthAccessAccessItemFileGroup
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """
        Sets the gid of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :param gid: The gid of this MappingUsersLookupMappingItemUser.
        :type: AuthAccessAccessItemFileGroup
        """
        
        self._gid = gid

    @property
    def home_directory(self):
        """
        Gets the home_directory of this MappingUsersLookupMappingItemUser.


        :return: The home_directory of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._home_directory

    @home_directory.setter
    def home_directory(self, home_directory):
        """
        Sets the home_directory of this MappingUsersLookupMappingItemUser.


        :param home_directory: The home_directory of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if home_directory is not None and len(home_directory) > 4096: 
            raise ValueError("Invalid value for `home_directory`, length must be less than `4096`")
        if home_directory is not None and len(home_directory) < 0:
            raise ValueError("Invalid value for `home_directory`, length must be greater than or equal to `0`")

        self._home_directory = home_directory

    @property
    def id(self):
        """
        Gets the id of this MappingUsersLookupMappingItemUser.
        Specifies the user or group ID.

        :return: The id of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MappingUsersLookupMappingItemUser.
        Specifies the user or group ID.

        :param id: The id of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if len(id) > 255: 
            raise ValueError("Invalid value for `id`, length must be less than `255`")
        if len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")

        self._id = id

    @property
    def locked(self):
        """
        Gets the locked of this MappingUsersLookupMappingItemUser.
        If true, indicates that the account is locked.

        :return: The locked of this MappingUsersLookupMappingItemUser.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """
        Sets the locked of this MappingUsersLookupMappingItemUser.
        If true, indicates that the account is locked.

        :param locked: The locked of this MappingUsersLookupMappingItemUser.
        :type: bool
        """
        
        self._locked = locked

    @property
    def max_password_age(self):
        """
        Gets the max_password_age of this MappingUsersLookupMappingItemUser.
        Specifies the maximum time in seconds allowed before the password expires.

        :return: The max_password_age of this MappingUsersLookupMappingItemUser.
        :rtype: int
        """
        return self._max_password_age

    @max_password_age.setter
    def max_password_age(self, max_password_age):
        """
        Sets the max_password_age of this MappingUsersLookupMappingItemUser.
        Specifies the maximum time in seconds allowed before the password expires.

        :param max_password_age: The max_password_age of this MappingUsersLookupMappingItemUser.
        :type: int
        """
        
        self._max_password_age = max_password_age

    @property
    def member_of(self):
        """
        Gets the member_of of this MappingUsersLookupMappingItemUser.


        :return: The member_of of this MappingUsersLookupMappingItemUser.
        :rtype: list[AuthAccessAccessItemFileGroup]
        """
        return self._member_of

    @member_of.setter
    def member_of(self, member_of):
        """
        Sets the member_of of this MappingUsersLookupMappingItemUser.


        :param member_of: The member_of of this MappingUsersLookupMappingItemUser.
        :type: list[AuthAccessAccessItemFileGroup]
        """
        
        self._member_of = member_of

    @property
    def name(self):
        """
        Gets the name of this MappingUsersLookupMappingItemUser.
        Specifies a user or group name.

        :return: The name of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MappingUsersLookupMappingItemUser.
        Specifies a user or group name.

        :param name: The name of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if len(name) > 255: 
            raise ValueError("Invalid value for `name`, length must be less than `255`")
        if len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def object_history(self):
        """
        Gets the object_history of this MappingUsersLookupMappingItemUser.


        :return: The object_history of this MappingUsersLookupMappingItemUser.
        :rtype: list[AuthGroupObjectHistoryItem]
        """
        return self._object_history

    @object_history.setter
    def object_history(self, object_history):
        """
        Sets the object_history of this MappingUsersLookupMappingItemUser.


        :param object_history: The object_history of this MappingUsersLookupMappingItemUser.
        :type: list[AuthGroupObjectHistoryItem]
        """
        
        self._object_history = object_history

    @property
    def on_disk_group_identity(self):
        """
        Gets the on_disk_group_identity of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :return: The on_disk_group_identity of this MappingUsersLookupMappingItemUser.
        :rtype: AuthAccessAccessItemFileGroup
        """
        return self._on_disk_group_identity

    @on_disk_group_identity.setter
    def on_disk_group_identity(self, on_disk_group_identity):
        """
        Sets the on_disk_group_identity of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :param on_disk_group_identity: The on_disk_group_identity of this MappingUsersLookupMappingItemUser.
        :type: AuthAccessAccessItemFileGroup
        """
        
        self._on_disk_group_identity = on_disk_group_identity

    @property
    def on_disk_user_identity(self):
        """
        Gets the on_disk_user_identity of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :return: The on_disk_user_identity of this MappingUsersLookupMappingItemUser.
        :rtype: AuthAccessAccessItemFileGroup
        """
        return self._on_disk_user_identity

    @on_disk_user_identity.setter
    def on_disk_user_identity(self, on_disk_user_identity):
        """
        Sets the on_disk_user_identity of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :param on_disk_user_identity: The on_disk_user_identity of this MappingUsersLookupMappingItemUser.
        :type: AuthAccessAccessItemFileGroup
        """
        
        self._on_disk_user_identity = on_disk_user_identity

    @property
    def password_expired(self):
        """
        Gets the password_expired of this MappingUsersLookupMappingItemUser.
        If true, the password has expired.

        :return: The password_expired of this MappingUsersLookupMappingItemUser.
        :rtype: bool
        """
        return self._password_expired

    @password_expired.setter
    def password_expired(self, password_expired):
        """
        Sets the password_expired of this MappingUsersLookupMappingItemUser.
        If true, the password has expired.

        :param password_expired: The password_expired of this MappingUsersLookupMappingItemUser.
        :type: bool
        """
        
        self._password_expired = password_expired

    @property
    def password_expires(self):
        """
        Gets the password_expires of this MappingUsersLookupMappingItemUser.
        If true, the password is allowed to expire.

        :return: The password_expires of this MappingUsersLookupMappingItemUser.
        :rtype: bool
        """
        return self._password_expires

    @password_expires.setter
    def password_expires(self, password_expires):
        """
        Sets the password_expires of this MappingUsersLookupMappingItemUser.
        If true, the password is allowed to expire.

        :param password_expires: The password_expires of this MappingUsersLookupMappingItemUser.
        :type: bool
        """
        
        self._password_expires = password_expires

    @property
    def password_expiry(self):
        """
        Gets the password_expiry of this MappingUsersLookupMappingItemUser.


        :return: The password_expiry of this MappingUsersLookupMappingItemUser.
        :rtype: int
        """
        return self._password_expiry

    @password_expiry.setter
    def password_expiry(self, password_expiry):
        """
        Sets the password_expiry of this MappingUsersLookupMappingItemUser.


        :param password_expiry: The password_expiry of this MappingUsersLookupMappingItemUser.
        :type: int
        """
        
        if password_expiry is not None  and password_expiry > 4.294967295E9:
            raise ValueError("Invalid value for `password_expiry`, must be a value less than or equal to `4.294967295E9`")
        if password_expiry is not None and password_expiry < 0.0:
            raise ValueError("Invalid value for `password_expiry`, must be a value greater than or equal to `0.0`")

        self._password_expiry = password_expiry

    @property
    def password_last_set(self):
        """
        Gets the password_last_set of this MappingUsersLookupMappingItemUser.


        :return: The password_last_set of this MappingUsersLookupMappingItemUser.
        :rtype: int
        """
        return self._password_last_set

    @password_last_set.setter
    def password_last_set(self, password_last_set):
        """
        Sets the password_last_set of this MappingUsersLookupMappingItemUser.


        :param password_last_set: The password_last_set of this MappingUsersLookupMappingItemUser.
        :type: int
        """
        
        if password_last_set is not None  and password_last_set > 4.294967295E9:
            raise ValueError("Invalid value for `password_last_set`, must be a value less than or equal to `4.294967295E9`")
        if password_last_set is not None and password_last_set < 0.0:
            raise ValueError("Invalid value for `password_last_set`, must be a value greater than or equal to `0.0`")

        self._password_last_set = password_last_set

    @property
    def primary_group_sid(self):
        """
        Gets the primary_group_sid of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :return: The primary_group_sid of this MappingUsersLookupMappingItemUser.
        :rtype: AuthAccessAccessItemFileGroup
        """
        return self._primary_group_sid

    @primary_group_sid.setter
    def primary_group_sid(self, primary_group_sid):
        """
        Sets the primary_group_sid of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :param primary_group_sid: The primary_group_sid of this MappingUsersLookupMappingItemUser.
        :type: AuthAccessAccessItemFileGroup
        """
        
        self._primary_group_sid = primary_group_sid

    @property
    def prompt_password_change(self):
        """
        Gets the prompt_password_change of this MappingUsersLookupMappingItemUser.
        Prompts the user to change their password at the next login.

        :return: The prompt_password_change of this MappingUsersLookupMappingItemUser.
        :rtype: bool
        """
        return self._prompt_password_change

    @prompt_password_change.setter
    def prompt_password_change(self, prompt_password_change):
        """
        Sets the prompt_password_change of this MappingUsersLookupMappingItemUser.
        Prompts the user to change their password at the next login.

        :param prompt_password_change: The prompt_password_change of this MappingUsersLookupMappingItemUser.
        :type: bool
        """
        
        self._prompt_password_change = prompt_password_change

    @property
    def provider(self):
        """
        Gets the provider of this MappingUsersLookupMappingItemUser.


        :return: The provider of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this MappingUsersLookupMappingItemUser.


        :param provider: The provider of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if provider is not None and len(provider) > 255: 
            raise ValueError("Invalid value for `provider`, length must be less than `255`")
        if provider is not None and len(provider) < 0:
            raise ValueError("Invalid value for `provider`, length must be greater than or equal to `0`")

        self._provider = provider

    @property
    def sam_account_name(self):
        """
        Gets the sam_account_name of this MappingUsersLookupMappingItemUser.


        :return: The sam_account_name of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._sam_account_name

    @sam_account_name.setter
    def sam_account_name(self, sam_account_name):
        """
        Sets the sam_account_name of this MappingUsersLookupMappingItemUser.


        :param sam_account_name: The sam_account_name of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if sam_account_name is not None and len(sam_account_name) > 255: 
            raise ValueError("Invalid value for `sam_account_name`, length must be less than `255`")
        if sam_account_name is not None and len(sam_account_name) < 0:
            raise ValueError("Invalid value for `sam_account_name`, length must be greater than or equal to `0`")

        self._sam_account_name = sam_account_name

    @property
    def shell(self):
        """
        Gets the shell of this MappingUsersLookupMappingItemUser.


        :return: The shell of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._shell

    @shell.setter
    def shell(self, shell):
        """
        Sets the shell of this MappingUsersLookupMappingItemUser.


        :param shell: The shell of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if shell is not None and len(shell) > 4096: 
            raise ValueError("Invalid value for `shell`, length must be less than `4096`")
        if shell is not None and len(shell) < 0:
            raise ValueError("Invalid value for `shell`, length must be greater than or equal to `0`")

        self._shell = shell

    @property
    def sid(self):
        """
        Gets the sid of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :return: The sid of this MappingUsersLookupMappingItemUser.
        :rtype: AuthAccessAccessItemFileGroup
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """
        Sets the sid of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :param sid: The sid of this MappingUsersLookupMappingItemUser.
        :type: AuthAccessAccessItemFileGroup
        """
        
        self._sid = sid

    @property
    def type(self):
        """
        Gets the type of this MappingUsersLookupMappingItemUser.
        Specifies the object type.

        :return: The type of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this MappingUsersLookupMappingItemUser.
        Specifies the object type.

        :param type: The type of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if len(type) > 255: 
            raise ValueError("Invalid value for `type`, length must be less than `255`")
        if len(type) < 0:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `0`")

        self._type = type

    @property
    def uid(self):
        """
        Gets the uid of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :return: The uid of this MappingUsersLookupMappingItemUser.
        :rtype: AuthAccessAccessItemFileGroup
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this MappingUsersLookupMappingItemUser.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :param uid: The uid of this MappingUsersLookupMappingItemUser.
        :type: AuthAccessAccessItemFileGroup
        """
        
        self._uid = uid

    @property
    def upn(self):
        """
        Gets the upn of this MappingUsersLookupMappingItemUser.


        :return: The upn of this MappingUsersLookupMappingItemUser.
        :rtype: str
        """
        return self._upn

    @upn.setter
    def upn(self, upn):
        """
        Sets the upn of this MappingUsersLookupMappingItemUser.


        :param upn: The upn of this MappingUsersLookupMappingItemUser.
        :type: str
        """
        
        if upn is not None and len(upn) > 255: 
            raise ValueError("Invalid value for `upn`, length must be less than `255`")
        if upn is not None and len(upn) < 0:
            raise ValueError("Invalid value for `upn`, length must be greater than or equal to `0`")

        self._upn = upn

    @property
    def user_can_change_password(self):
        """
        Gets the user_can_change_password of this MappingUsersLookupMappingItemUser.
        Specifies whether the password for the user can be changed.

        :return: The user_can_change_password of this MappingUsersLookupMappingItemUser.
        :rtype: bool
        """
        return self._user_can_change_password

    @user_can_change_password.setter
    def user_can_change_password(self, user_can_change_password):
        """
        Sets the user_can_change_password of this MappingUsersLookupMappingItemUser.
        Specifies whether the password for the user can be changed.

        :param user_can_change_password: The user_can_change_password of this MappingUsersLookupMappingItemUser.
        :type: bool
        """
        
        self._user_can_change_password = user_can_change_password

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

