# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SummaryProtocolStatsProtocolStats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SummaryProtocolStatsProtocolStats - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cpu': 'SummaryProtocolStatsProtocolStatsCpu',
            'disk': 'SummaryProtocolStatsProtocolStatsDisk',
            'network': 'SummaryProtocolStatsProtocolStatsNetwork',
            'onefs': 'SummaryProtocolStatsProtocolStatsOnefs',
            'protocol': 'SummaryProtocolStatsProtocolStatsProtocol',
            'time': 'int'
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'disk': 'disk',
            'network': 'network',
            'onefs': 'onefs',
            'protocol': 'protocol',
            'time': 'time'
        }

        self._cpu = None
        self._disk = None
        self._network = None
        self._onefs = None
        self._protocol = None
        self._time = None

    @property
    def cpu(self):
        """
        Gets the cpu of this SummaryProtocolStatsProtocolStats.
        

        :return: The cpu of this SummaryProtocolStatsProtocolStats.
        :rtype: SummaryProtocolStatsProtocolStatsCpu
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this SummaryProtocolStatsProtocolStats.
        

        :param cpu: The cpu of this SummaryProtocolStatsProtocolStats.
        :type: SummaryProtocolStatsProtocolStatsCpu
        """
        
        self._cpu = cpu

    @property
    def disk(self):
        """
        Gets the disk of this SummaryProtocolStatsProtocolStats.
        

        :return: The disk of this SummaryProtocolStatsProtocolStats.
        :rtype: SummaryProtocolStatsProtocolStatsDisk
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """
        Sets the disk of this SummaryProtocolStatsProtocolStats.
        

        :param disk: The disk of this SummaryProtocolStatsProtocolStats.
        :type: SummaryProtocolStatsProtocolStatsDisk
        """
        
        self._disk = disk

    @property
    def network(self):
        """
        Gets the network of this SummaryProtocolStatsProtocolStats.
        

        :return: The network of this SummaryProtocolStatsProtocolStats.
        :rtype: SummaryProtocolStatsProtocolStatsNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this SummaryProtocolStatsProtocolStats.
        

        :param network: The network of this SummaryProtocolStatsProtocolStats.
        :type: SummaryProtocolStatsProtocolStatsNetwork
        """
        
        self._network = network

    @property
    def onefs(self):
        """
        Gets the onefs of this SummaryProtocolStatsProtocolStats.
        

        :return: The onefs of this SummaryProtocolStatsProtocolStats.
        :rtype: SummaryProtocolStatsProtocolStatsOnefs
        """
        return self._onefs

    @onefs.setter
    def onefs(self, onefs):
        """
        Sets the onefs of this SummaryProtocolStatsProtocolStats.
        

        :param onefs: The onefs of this SummaryProtocolStatsProtocolStats.
        :type: SummaryProtocolStatsProtocolStatsOnefs
        """
        
        self._onefs = onefs

    @property
    def protocol(self):
        """
        Gets the protocol of this SummaryProtocolStatsProtocolStats.
        A single protocol for which statistics should be reported.

        :return: The protocol of this SummaryProtocolStatsProtocolStats.
        :rtype: SummaryProtocolStatsProtocolStatsProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this SummaryProtocolStatsProtocolStats.
        A single protocol for which statistics should be reported.

        :param protocol: The protocol of this SummaryProtocolStatsProtocolStats.
        :type: SummaryProtocolStatsProtocolStatsProtocol
        """
        
        self._protocol = protocol

    @property
    def time(self):
        """
        Gets the time of this SummaryProtocolStatsProtocolStats.
        Unix Epoch time in seconds of the request.

        :return: The time of this SummaryProtocolStatsProtocolStats.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this SummaryProtocolStatsProtocolStats.
        Unix Epoch time in seconds of the request.

        :param time: The time of this SummaryProtocolStatsProtocolStats.
        :type: int
        """
        
        self._time = time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

