# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AuditProgressProgress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AuditProgressProgress - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'protocol_audit_cee_time': 'int',
            'protocol_audit_log_time': 'int',
            'protocol_audit_syslog_time': 'int'
        }

        self.attribute_map = {
            'protocol_audit_cee_time': 'protocol_audit_cee_time',
            'protocol_audit_log_time': 'protocol_audit_log_time',
            'protocol_audit_syslog_time': 'protocol_audit_syslog_time'
        }

        self._protocol_audit_cee_time = None
        self._protocol_audit_log_time = None
        self._protocol_audit_syslog_time = None

    @property
    def protocol_audit_cee_time(self):
        """
        Gets the protocol_audit_cee_time of this AuditProgressProgress.
        Specifies the last protocol audit event time consumed by the CEE forwarder.

        :return: The protocol_audit_cee_time of this AuditProgressProgress.
        :rtype: int
        """
        return self._protocol_audit_cee_time

    @protocol_audit_cee_time.setter
    def protocol_audit_cee_time(self, protocol_audit_cee_time):
        """
        Sets the protocol_audit_cee_time of this AuditProgressProgress.
        Specifies the last protocol audit event time consumed by the CEE forwarder.

        :param protocol_audit_cee_time: The protocol_audit_cee_time of this AuditProgressProgress.
        :type: int
        """
        
        if protocol_audit_cee_time is not None  and protocol_audit_cee_time > 4.294967295E9:
            raise ValueError("Invalid value for `protocol_audit_cee_time`, must be a value less than or equal to `4.294967295E9`")
        if protocol_audit_cee_time is not None and protocol_audit_cee_time < 0.0:
            raise ValueError("Invalid value for `protocol_audit_cee_time`, must be a value greater than or equal to `0.0`")

        self._protocol_audit_cee_time = protocol_audit_cee_time

    @property
    def protocol_audit_log_time(self):
        """
        Gets the protocol_audit_log_time of this AuditProgressProgress.
        Specifies the last logged audit protocol event time.

        :return: The protocol_audit_log_time of this AuditProgressProgress.
        :rtype: int
        """
        return self._protocol_audit_log_time

    @protocol_audit_log_time.setter
    def protocol_audit_log_time(self, protocol_audit_log_time):
        """
        Sets the protocol_audit_log_time of this AuditProgressProgress.
        Specifies the last logged audit protocol event time.

        :param protocol_audit_log_time: The protocol_audit_log_time of this AuditProgressProgress.
        :type: int
        """
        
        if protocol_audit_log_time is not None  and protocol_audit_log_time > 4.294967295E9:
            raise ValueError("Invalid value for `protocol_audit_log_time`, must be a value less than or equal to `4.294967295E9`")
        if protocol_audit_log_time is not None and protocol_audit_log_time < 0.0:
            raise ValueError("Invalid value for `protocol_audit_log_time`, must be a value greater than or equal to `0.0`")

        self._protocol_audit_log_time = protocol_audit_log_time

    @property
    def protocol_audit_syslog_time(self):
        """
        Gets the protocol_audit_syslog_time of this AuditProgressProgress.
        Specifies the last protocol audit event time consumed by the Syslog forwarder.

        :return: The protocol_audit_syslog_time of this AuditProgressProgress.
        :rtype: int
        """
        return self._protocol_audit_syslog_time

    @protocol_audit_syslog_time.setter
    def protocol_audit_syslog_time(self, protocol_audit_syslog_time):
        """
        Sets the protocol_audit_syslog_time of this AuditProgressProgress.
        Specifies the last protocol audit event time consumed by the Syslog forwarder.

        :param protocol_audit_syslog_time: The protocol_audit_syslog_time of this AuditProgressProgress.
        :type: int
        """
        
        if protocol_audit_syslog_time is not None  and protocol_audit_syslog_time > 4.294967295E9:
            raise ValueError("Invalid value for `protocol_audit_syslog_time`, must be a value less than or equal to `4.294967295E9`")
        if protocol_audit_syslog_time is not None and protocol_audit_syslog_time < 0.0:
            raise ValueError("Invalid value for `protocol_audit_syslog_time`, must be a value greater than or equal to `0.0`")

        self._protocol_audit_syslog_time = protocol_audit_syslog_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

