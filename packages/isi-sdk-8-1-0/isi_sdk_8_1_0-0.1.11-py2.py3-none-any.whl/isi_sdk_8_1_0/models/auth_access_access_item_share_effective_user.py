# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AuthAccessAccessItemShareEffectiveUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AuthAccessAccessItemShareEffectiveUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'type': 'str',
            'uid': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'uid': 'uid'
        }

        self._id = None
        self._name = None
        self._type = None
        self._uid = None

    @property
    def id(self):
        """
        Gets the id of this AuthAccessAccessItemShareEffectiveUser.
        Specifies the serialized form of the persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.

        :return: The id of this AuthAccessAccessItemShareEffectiveUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AuthAccessAccessItemShareEffectiveUser.
        Specifies the serialized form of the persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.

        :param id: The id of this AuthAccessAccessItemShareEffectiveUser.
        :type: str
        """
        
        if id is not None and len(id) > 255: 
            raise ValueError("Invalid value for `id`, length must be less than `255`")
        if id is not None and len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this AuthAccessAccessItemShareEffectiveUser.
        Specifies the persona name, which must be combined with a type.

        :return: The name of this AuthAccessAccessItemShareEffectiveUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AuthAccessAccessItemShareEffectiveUser.
        Specifies the persona name, which must be combined with a type.

        :param name: The name of this AuthAccessAccessItemShareEffectiveUser.
        :type: str
        """
        
        if name is not None and len(name) > 255: 
            raise ValueError("Invalid value for `name`, length must be less than `255`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this AuthAccessAccessItemShareEffectiveUser.
        Specifies the type, which must be combined with a name.

        :return: The type of this AuthAccessAccessItemShareEffectiveUser.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this AuthAccessAccessItemShareEffectiveUser.
        Specifies the type, which must be combined with a name.

        :param type: The type of this AuthAccessAccessItemShareEffectiveUser.
        :type: str
        """
        allowed_values = ["user", "group", "wellknown"]
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )

        self._type = type

    @property
    def uid(self):
        """
        Gets the uid of this AuthAccessAccessItemShareEffectiveUser.
        Specifies the uid of the user.

        :return: The uid of this AuthAccessAccessItemShareEffectiveUser.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this AuthAccessAccessItemShareEffectiveUser.
        Specifies the uid of the user.

        :param uid: The uid of this AuthAccessAccessItemShareEffectiveUser.
        :type: int
        """
        
        if uid is not None  and uid > 4.294967295E9:
            raise ValueError("Invalid value for `uid`, must be a value less than or equal to `4.294967295E9`")
        if uid is not None and uid < 0.0:
            raise ValueError("Invalid value for `uid`, must be a value greater than or equal to `0.0`")

        self._uid = uid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

