# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SmbSharesExtended(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SmbSharesExtended - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'shares': 'list[SmbShareExtended]',
            'digest': 'str',
            'resume': 'str',
            'total': 'int'
        }

        self.attribute_map = {
            'shares': 'shares',
            'digest': 'digest',
            'resume': 'resume',
            'total': 'total'
        }

        self._shares = None
        self._digest = None
        self._resume = None
        self._total = None

    @property
    def shares(self):
        """
        Gets the shares of this SmbSharesExtended.


        :return: The shares of this SmbSharesExtended.
        :rtype: list[SmbShareExtended]
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """
        Sets the shares of this SmbSharesExtended.


        :param shares: The shares of this SmbSharesExtended.
        :type: list[SmbShareExtended]
        """
        
        self._shares = shares

    @property
    def digest(self):
        """
        Gets the digest of this SmbSharesExtended.
        An identifier for a set of shares.

        :return: The digest of this SmbSharesExtended.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """
        Sets the digest of this SmbSharesExtended.
        An identifier for a set of shares.

        :param digest: The digest of this SmbSharesExtended.
        :type: str
        """
        
        self._digest = digest

    @property
    def resume(self):
        """
        Gets the resume of this SmbSharesExtended.
        Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).

        :return: The resume of this SmbSharesExtended.
        :rtype: str
        """
        return self._resume

    @resume.setter
    def resume(self, resume):
        """
        Sets the resume of this SmbSharesExtended.
        Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).

        :param resume: The resume of this SmbSharesExtended.
        :type: str
        """
        
        if resume is not None and len(resume) < 0:
            raise ValueError("Invalid value for `resume`, length must be greater than or equal to `0`")

        self._resume = resume

    @property
    def total(self):
        """
        Gets the total of this SmbSharesExtended.
        Total number of items available.

        :return: The total of this SmbSharesExtended.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this SmbSharesExtended.
        Total number of items available.

        :param total: The total of this SmbSharesExtended.
        :type: int
        """
        
        if total is not None  and total > 4.294967295E9:
            raise ValueError("Invalid value for `total`, must be a value less than or equal to `4.294967295E9`")
        if total is not None and total < 0.0:
            raise ValueError("Invalid value for `total`, must be a value greater than or equal to `0.0`")

        self._total = total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

