# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ClusterNodeDriveDConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ClusterNodeDriveDConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alert': 'NodeDriveconfigNodeAlert',
            'allow': 'NodeDriveconfigNodeAllow',
            'automatic_replacement_recognition': 'NodeDriveconfigNodeAutomaticReplacementRecognition',
            'log': 'NodeDriveconfigNodeLog',
            'reboot': 'NodeDriveconfigNodeReboot',
            'spin_wait': 'NodeDriveconfigNodeSpinWait',
            'stall': 'NodeDriveconfigNodeStall'
        }

        self.attribute_map = {
            'alert': 'alert',
            'allow': 'allow',
            'automatic_replacement_recognition': 'automatic_replacement_recognition',
            'log': 'log',
            'reboot': 'reboot',
            'spin_wait': 'spin_wait',
            'stall': 'stall'
        }

        self._alert = None
        self._allow = None
        self._automatic_replacement_recognition = None
        self._log = None
        self._reboot = None
        self._spin_wait = None
        self._stall = None

    @property
    def alert(self):
        """
        Gets the alert of this ClusterNodeDriveDConfig.
        Configuration setting for drive alerts.

        :return: The alert of this ClusterNodeDriveDConfig.
        :rtype: NodeDriveconfigNodeAlert
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """
        Sets the alert of this ClusterNodeDriveDConfig.
        Configuration setting for drive alerts.

        :param alert: The alert of this ClusterNodeDriveDConfig.
        :type: NodeDriveconfigNodeAlert
        """
        
        self._alert = alert

    @property
    def allow(self):
        """
        Gets the allow of this ClusterNodeDriveDConfig.
        Configuration settings for drive formatting.

        :return: The allow of this ClusterNodeDriveDConfig.
        :rtype: NodeDriveconfigNodeAllow
        """
        return self._allow

    @allow.setter
    def allow(self, allow):
        """
        Sets the allow of this ClusterNodeDriveDConfig.
        Configuration settings for drive formatting.

        :param allow: The allow of this ClusterNodeDriveDConfig.
        :type: NodeDriveconfigNodeAllow
        """
        
        self._allow = allow

    @property
    def automatic_replacement_recognition(self):
        """
        Gets the automatic_replacement_recognition of this ClusterNodeDriveDConfig.
        Configuration settings for automatic replacement recognition (ARR).

        :return: The automatic_replacement_recognition of this ClusterNodeDriveDConfig.
        :rtype: NodeDriveconfigNodeAutomaticReplacementRecognition
        """
        return self._automatic_replacement_recognition

    @automatic_replacement_recognition.setter
    def automatic_replacement_recognition(self, automatic_replacement_recognition):
        """
        Sets the automatic_replacement_recognition of this ClusterNodeDriveDConfig.
        Configuration settings for automatic replacement recognition (ARR).

        :param automatic_replacement_recognition: The automatic_replacement_recognition of this ClusterNodeDriveDConfig.
        :type: NodeDriveconfigNodeAutomaticReplacementRecognition
        """
        
        self._automatic_replacement_recognition = automatic_replacement_recognition

    @property
    def log(self):
        """
        Gets the log of this ClusterNodeDriveDConfig.
        Configuration settings for drive statistics logs.

        :return: The log of this ClusterNodeDriveDConfig.
        :rtype: NodeDriveconfigNodeLog
        """
        return self._log

    @log.setter
    def log(self, log):
        """
        Sets the log of this ClusterNodeDriveDConfig.
        Configuration settings for drive statistics logs.

        :param log: The log of this ClusterNodeDriveDConfig.
        :type: NodeDriveconfigNodeLog
        """
        
        self._log = log

    @property
    def reboot(self):
        """
        Gets the reboot of this ClusterNodeDriveDConfig.
        Configuration settings for a node reboot due to a drive error.

        :return: The reboot of this ClusterNodeDriveDConfig.
        :rtype: NodeDriveconfigNodeReboot
        """
        return self._reboot

    @reboot.setter
    def reboot(self, reboot):
        """
        Sets the reboot of this ClusterNodeDriveDConfig.
        Configuration settings for a node reboot due to a drive error.

        :param reboot: The reboot of this ClusterNodeDriveDConfig.
        :type: NodeDriveconfigNodeReboot
        """
        
        self._reboot = reboot

    @property
    def spin_wait(self):
        """
        Gets the spin_wait of this ClusterNodeDriveDConfig.
        Configuration settings for sleeping the drive daemon before node is rescanned.

        :return: The spin_wait of this ClusterNodeDriveDConfig.
        :rtype: NodeDriveconfigNodeSpinWait
        """
        return self._spin_wait

    @spin_wait.setter
    def spin_wait(self, spin_wait):
        """
        Sets the spin_wait of this ClusterNodeDriveDConfig.
        Configuration settings for sleeping the drive daemon before node is rescanned.

        :param spin_wait: The spin_wait of this ClusterNodeDriveDConfig.
        :type: NodeDriveconfigNodeSpinWait
        """
        
        self._spin_wait = spin_wait

    @property
    def stall(self):
        """
        Gets the stall of this ClusterNodeDriveDConfig.
        Configuration settings to evaluate a drive stall.

        :return: The stall of this ClusterNodeDriveDConfig.
        :rtype: NodeDriveconfigNodeStall
        """
        return self._stall

    @stall.setter
    def stall(self, stall):
        """
        Sets the stall of this ClusterNodeDriveDConfig.
        Configuration settings to evaluate a drive stall.

        :param stall: The stall of this ClusterNodeDriveDConfig.
        :type: NodeDriveconfigNodeStall
        """
        
        self._stall = stall

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

