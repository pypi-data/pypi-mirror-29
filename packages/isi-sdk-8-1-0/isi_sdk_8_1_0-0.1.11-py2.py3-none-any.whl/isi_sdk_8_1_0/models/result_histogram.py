# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ResultHistogram(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ResultHistogram - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'atime_enabled': 'bool',
            'attribute_count': 'int',
            'begin_time': 'int',
            'histogram': 'list[ResultHistogramHistogramItem]'
        }

        self.attribute_map = {
            'atime_enabled': 'atime_enabled',
            'attribute_count': 'attribute_count',
            'begin_time': 'begin_time',
            'histogram': 'histogram'
        }

        self._atime_enabled = None
        self._attribute_count = None
        self._begin_time = None
        self._histogram = None

    @property
    def atime_enabled(self):
        """
        Gets the atime_enabled of this ResultHistogram.
        Access time enabled.

        :return: The atime_enabled of this ResultHistogram.
        :rtype: bool
        """
        return self._atime_enabled

    @atime_enabled.setter
    def atime_enabled(self, atime_enabled):
        """
        Sets the atime_enabled of this ResultHistogram.
        Access time enabled.

        :param atime_enabled: The atime_enabled of this ResultHistogram.
        :type: bool
        """
        
        self._atime_enabled = atime_enabled

    @property
    def attribute_count(self):
        """
        Gets the attribute_count of this ResultHistogram.
        User attribute count.

        :return: The attribute_count of this ResultHistogram.
        :rtype: int
        """
        return self._attribute_count

    @attribute_count.setter
    def attribute_count(self, attribute_count):
        """
        Sets the attribute_count of this ResultHistogram.
        User attribute count.

        :param attribute_count: The attribute_count of this ResultHistogram.
        :type: int
        """
        
        self._attribute_count = attribute_count

    @property
    def begin_time(self):
        """
        Gets the begin_time of this ResultHistogram.
        Unix Epoch time of start of results collection job.

        :return: The begin_time of this ResultHistogram.
        :rtype: int
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """
        Sets the begin_time of this ResultHistogram.
        Unix Epoch time of start of results collection job.

        :param begin_time: The begin_time of this ResultHistogram.
        :type: int
        """
        
        self._begin_time = begin_time

    @property
    def histogram(self):
        """
        Gets the histogram of this ResultHistogram.
        Histogram data of specified file count parameter.

        :return: The histogram of this ResultHistogram.
        :rtype: list[ResultHistogramHistogramItem]
        """
        return self._histogram

    @histogram.setter
    def histogram(self, histogram):
        """
        Sets the histogram of this ResultHistogram.
        Histogram data of specified file count parameter.

        :param histogram: The histogram of this ResultHistogram.
        :type: list[ResultHistogramHistogramItem]
        """
        
        self._histogram = histogram

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

