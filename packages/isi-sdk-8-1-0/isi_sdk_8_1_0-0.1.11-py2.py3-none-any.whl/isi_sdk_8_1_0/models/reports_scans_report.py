# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ReportsScansReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ReportsScansReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bytes_sent': 'int',
            'duration': 'int',
            'end': 'int',
            'files': 'int',
            'id': 'str',
            'infections': 'int',
            'job_id': 'int',
            'policy_id': 'str',
            'size': 'int',
            'start': 'int',
            'status': 'str'
        }

        self.attribute_map = {
            'bytes_sent': 'bytes_sent',
            'duration': 'duration',
            'end': 'end',
            'files': 'files',
            'id': 'id',
            'infections': 'infections',
            'job_id': 'job_id',
            'policy_id': 'policy_id',
            'size': 'size',
            'start': 'start',
            'status': 'status'
        }

        self._bytes_sent = None
        self._duration = None
        self._end = None
        self._files = None
        self._id = None
        self._infections = None
        self._job_id = None
        self._policy_id = None
        self._size = None
        self._start = None
        self._status = None

    @property
    def bytes_sent(self):
        """
        Gets the bytes_sent of this ReportsScansReport.
        The number of bytes sent to the virus definition server to be scanned.

        :return: The bytes_sent of this ReportsScansReport.
        :rtype: int
        """
        return self._bytes_sent

    @bytes_sent.setter
    def bytes_sent(self, bytes_sent):
        """
        Sets the bytes_sent of this ReportsScansReport.
        The number of bytes sent to the virus definition server to be scanned.

        :param bytes_sent: The bytes_sent of this ReportsScansReport.
        :type: int
        """
        
        if bytes_sent is not None  and bytes_sent > 1.8446744073709552E19:
            raise ValueError("Invalid value for `bytes_sent`, must be a value less than or equal to `1.8446744073709552E19`")
        if bytes_sent is not None and bytes_sent < 0.0:
            raise ValueError("Invalid value for `bytes_sent`, must be a value greater than or equal to `0.0`")

        self._bytes_sent = bytes_sent

    @property
    def duration(self):
        """
        Gets the duration of this ReportsScansReport.
        The length of time the job ran for.

        :return: The duration of this ReportsScansReport.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this ReportsScansReport.
        The length of time the job ran for.

        :param duration: The duration of this ReportsScansReport.
        :type: int
        """
        
        if duration is not None  and duration > 4.294967295E9:
            raise ValueError("Invalid value for `duration`, must be a value less than or equal to `4.294967295E9`")
        if duration is not None and duration < 0.0:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0.0`")

        self._duration = duration

    @property
    def end(self):
        """
        Gets the end of this ReportsScansReport.


        :return: The end of this ReportsScansReport.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this ReportsScansReport.


        :param end: The end of this ReportsScansReport.
        :type: int
        """
        
        if end is not None  and end > 4.294967295E9:
            raise ValueError("Invalid value for `end`, must be a value less than or equal to `4.294967295E9`")
        if end is not None and end < 0.0:
            raise ValueError("Invalid value for `end`, must be a value greater than or equal to `0.0`")

        self._end = end

    @property
    def files(self):
        """
        Gets the files of this ReportsScansReport.
        The number of files scanned.

        :return: The files of this ReportsScansReport.
        :rtype: int
        """
        return self._files

    @files.setter
    def files(self, files):
        """
        Sets the files of this ReportsScansReport.
        The number of files scanned.

        :param files: The files of this ReportsScansReport.
        :type: int
        """
        
        if files is not None  and files > 4.294967295E9:
            raise ValueError("Invalid value for `files`, must be a value less than or equal to `4.294967295E9`")
        if files is not None and files < 0.0:
            raise ValueError("Invalid value for `files`, must be a value greater than or equal to `0.0`")

        self._files = files

    @property
    def id(self):
        """
        Gets the id of this ReportsScansReport.
        A unique identifier for the report.

        :return: The id of this ReportsScansReport.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ReportsScansReport.
        A unique identifier for the report.

        :param id: The id of this ReportsScansReport.
        :type: str
        """
        
        if id is not None and len(id) > 255: 
            raise ValueError("Invalid value for `id`, length must be less than `255`")
        if id is not None and len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")

        self._id = id

    @property
    def infections(self):
        """
        Gets the infections of this ReportsScansReport.
        The number of infections found.

        :return: The infections of this ReportsScansReport.
        :rtype: int
        """
        return self._infections

    @infections.setter
    def infections(self, infections):
        """
        Sets the infections of this ReportsScansReport.
        The number of infections found.

        :param infections: The infections of this ReportsScansReport.
        :type: int
        """
        
        if infections is not None  and infections > 4.294967295E9:
            raise ValueError("Invalid value for `infections`, must be a value less than or equal to `4.294967295E9`")
        if infections is not None and infections < 0.0:
            raise ValueError("Invalid value for `infections`, must be a value greater than or equal to `0.0`")

        self._infections = infections

    @property
    def job_id(self):
        """
        Gets the job_id of this ReportsScansReport.


        :return: The job_id of this ReportsScansReport.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this ReportsScansReport.


        :param job_id: The job_id of this ReportsScansReport.
        :type: int
        """
        
        if job_id is not None  and job_id > 4.294967295E9:
            raise ValueError("Invalid value for `job_id`, must be a value less than or equal to `4.294967295E9`")
        if job_id is not None and job_id < 0.0:
            raise ValueError("Invalid value for `job_id`, must be a value greater than or equal to `0.0`")

        self._job_id = job_id

    @property
    def policy_id(self):
        """
        Gets the policy_id of this ReportsScansReport.
        The id of the policy that this scan job executed.

        :return: The policy_id of this ReportsScansReport.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """
        Sets the policy_id of this ReportsScansReport.
        The id of the policy that this scan job executed.

        :param policy_id: The policy_id of this ReportsScansReport.
        :type: str
        """
        
        if policy_id is not None and len(policy_id) > 255: 
            raise ValueError("Invalid value for `policy_id`, length must be less than `255`")
        if policy_id is not None and len(policy_id) < 0:
            raise ValueError("Invalid value for `policy_id`, length must be greater than or equal to `0`")

        self._policy_id = policy_id

    @property
    def size(self):
        """
        Gets the size of this ReportsScansReport.
        The cumulative size of the files scanned.

        :return: The size of this ReportsScansReport.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this ReportsScansReport.
        The cumulative size of the files scanned.

        :param size: The size of this ReportsScansReport.
        :type: int
        """
        
        if size is not None  and size > 1.8446744073709552E19:
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `1.8446744073709552E19`")
        if size is not None and size < 0.0:
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0.0`")

        self._size = size

    @property
    def start(self):
        """
        Gets the start of this ReportsScansReport.


        :return: The start of this ReportsScansReport.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this ReportsScansReport.


        :param start: The start of this ReportsScansReport.
        :type: int
        """
        
        if start is not None  and start > 4.294967295E9:
            raise ValueError("Invalid value for `start`, must be a value less than or equal to `4.294967295E9`")
        if start is not None and start < 0.0:
            raise ValueError("Invalid value for `start`, must be a value greater than or equal to `0.0`")

        self._start = start

    @property
    def status(self):
        """
        Gets the status of this ReportsScansReport.
        The state of the job.

        :return: The status of this ReportsScansReport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ReportsScansReport.
        The state of the job.

        :param status: The status of this ReportsScansReport.
        :type: str
        """
        
        if status is not None and len(status) > 255: 
            raise ValueError("Invalid value for `status`, length must be less than `255`")
        if status is not None and len(status) < 0:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `0`")

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

