# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ClusterNodeHardware(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ClusterNodeHardware - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'chassis': 'str',
            'chassis_code': 'str',
            'chassis_count': 'str',
            'chassis_depth': 'str',
            '_class': 'str',
            'code_name': 'str',
            'compute_type': 'str',
            'configuration_id': 'str',
            'cpu': 'str',
            'disk_controller': 'str',
            'disk_expander': 'str',
            'family_code': 'str',
            'flash_drive': 'str',
            'generation_code': 'str',
            'hwgen': 'str',
            'imb_version': 'str',
            'infiniband': 'str',
            'lcd_version': 'str',
            'model': 'str',
            'model_code': 'str',
            'motherboard': 'str',
            'net_interfaces': 'str',
            'node_slot_id': 'int',
            'nvram': 'str',
            'peer_serial_number': 'str',
            'performance_code': 'str',
            'powersupplies': 'list[str]',
            'processor': 'str',
            'product': 'str',
            'ram': 'int',
            'serial_number': 'str',
            'series': 'str',
            'sled_drive_count': 'int',
            'storage_class': 'str',
            'tier': 'int',
            'top_level_assembly_serial_number': 'str'
        }

        self.attribute_map = {
            'chassis': 'chassis',
            'chassis_code': 'chassis_code',
            'chassis_count': 'chassis_count',
            'chassis_depth': 'chassis_depth',
            '_class': 'class',
            'code_name': 'code_name',
            'compute_type': 'compute_type',
            'configuration_id': 'configuration_id',
            'cpu': 'cpu',
            'disk_controller': 'disk_controller',
            'disk_expander': 'disk_expander',
            'family_code': 'family_code',
            'flash_drive': 'flash_drive',
            'generation_code': 'generation_code',
            'hwgen': 'hwgen',
            'imb_version': 'imb_version',
            'infiniband': 'infiniband',
            'lcd_version': 'lcd_version',
            'model': 'model',
            'model_code': 'model_code',
            'motherboard': 'motherboard',
            'net_interfaces': 'net_interfaces',
            'node_slot_id': 'node_slot_id',
            'nvram': 'nvram',
            'peer_serial_number': 'peer_serial_number',
            'performance_code': 'performance_code',
            'powersupplies': 'powersupplies',
            'processor': 'processor',
            'product': 'product',
            'ram': 'ram',
            'serial_number': 'serial_number',
            'series': 'series',
            'sled_drive_count': 'sled_drive_count',
            'storage_class': 'storage_class',
            'tier': 'tier',
            'top_level_assembly_serial_number': 'top_level_assembly_serial_number'
        }

        self._chassis = None
        self._chassis_code = None
        self._chassis_count = None
        self._chassis_depth = None
        self.__class = None
        self._code_name = None
        self._compute_type = None
        self._configuration_id = None
        self._cpu = None
        self._disk_controller = None
        self._disk_expander = None
        self._family_code = None
        self._flash_drive = None
        self._generation_code = None
        self._hwgen = None
        self._imb_version = None
        self._infiniband = None
        self._lcd_version = None
        self._model = None
        self._model_code = None
        self._motherboard = None
        self._net_interfaces = None
        self._node_slot_id = None
        self._nvram = None
        self._peer_serial_number = None
        self._performance_code = None
        self._powersupplies = None
        self._processor = None
        self._product = None
        self._ram = None
        self._serial_number = None
        self._series = None
        self._sled_drive_count = None
        self._storage_class = None
        self._tier = None
        self._top_level_assembly_serial_number = None

    @property
    def chassis(self):
        """
        Gets the chassis of this ClusterNodeHardware.
        Name of this node's chassis.

        :return: The chassis of this ClusterNodeHardware.
        :rtype: str
        """
        return self._chassis

    @chassis.setter
    def chassis(self, chassis):
        """
        Sets the chassis of this ClusterNodeHardware.
        Name of this node's chassis.

        :param chassis: The chassis of this ClusterNodeHardware.
        :type: str
        """
        
        if chassis is not None and len(chassis) < 0:
            raise ValueError("Invalid value for `chassis`, length must be greater than or equal to `0`")

        self._chassis = chassis

    @property
    def chassis_code(self):
        """
        Gets the chassis_code of this ClusterNodeHardware.
        Chassis code of this node (1U, 2U, etc.).

        :return: The chassis_code of this ClusterNodeHardware.
        :rtype: str
        """
        return self._chassis_code

    @chassis_code.setter
    def chassis_code(self, chassis_code):
        """
        Sets the chassis_code of this ClusterNodeHardware.
        Chassis code of this node (1U, 2U, etc.).

        :param chassis_code: The chassis_code of this ClusterNodeHardware.
        :type: str
        """
        
        if chassis_code is not None and len(chassis_code) < 0:
            raise ValueError("Invalid value for `chassis_code`, length must be greater than or equal to `0`")

        self._chassis_code = chassis_code

    @property
    def chassis_count(self):
        """
        Gets the chassis_count of this ClusterNodeHardware.
        Number of chassis making up this node.

        :return: The chassis_count of this ClusterNodeHardware.
        :rtype: str
        """
        return self._chassis_count

    @chassis_count.setter
    def chassis_count(self, chassis_count):
        """
        Sets the chassis_count of this ClusterNodeHardware.
        Number of chassis making up this node.

        :param chassis_count: The chassis_count of this ClusterNodeHardware.
        :type: str
        """
        
        if chassis_count is not None and len(chassis_count) < 0:
            raise ValueError("Invalid value for `chassis_count`, length must be greater than or equal to `0`")

        self._chassis_count = chassis_count

    @property
    def chassis_depth(self):
        """
        Gets the chassis_depth of this ClusterNodeHardware.
        Chassis depth for this node if applicable (Normal, Deep, Unknown). If not supported: Unknown. If Logic to determine chassis depth fails: Unknown. If PSI_Get fails: Unknown. PSI_Get can fail if PSI not initialized, or key does not exist.

        :return: The chassis_depth of this ClusterNodeHardware.
        :rtype: str
        """
        return self._chassis_depth

    @chassis_depth.setter
    def chassis_depth(self, chassis_depth):
        """
        Sets the chassis_depth of this ClusterNodeHardware.
        Chassis depth for this node if applicable (Normal, Deep, Unknown). If not supported: Unknown. If Logic to determine chassis depth fails: Unknown. If PSI_Get fails: Unknown. PSI_Get can fail if PSI not initialized, or key does not exist.

        :param chassis_depth: The chassis_depth of this ClusterNodeHardware.
        :type: str
        """
        
        self._chassis_depth = chassis_depth

    @property
    def _class(self):
        """
        Gets the _class of this ClusterNodeHardware.
        Class of this node (storage, accelerator, etc.).

        :return: The _class of this ClusterNodeHardware.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this ClusterNodeHardware.
        Class of this node (storage, accelerator, etc.).

        :param _class: The _class of this ClusterNodeHardware.
        :type: str
        """
        
        if _class is not None and len(_class) < 0:
            raise ValueError("Invalid value for `_class`, length must be greater than or equal to `0`")

        self.__class = _class

    @property
    def code_name(self):
        """
        Gets the code_name of this ClusterNodeHardware.
        Code name of this node if applicable (Minnetonka, MiniHuron, Huron, Union, Tahoe, Superior, Unknown). If not supported: Unknown. If Logic to determine code name fails: Unknown. If PSI_Get fails: Unknown. PSI_Get can fail if PSI not initialized, or key does not exist.

        :return: The code_name of this ClusterNodeHardware.
        :rtype: str
        """
        return self._code_name

    @code_name.setter
    def code_name(self, code_name):
        """
        Sets the code_name of this ClusterNodeHardware.
        Code name of this node if applicable (Minnetonka, MiniHuron, Huron, Union, Tahoe, Superior, Unknown). If not supported: Unknown. If Logic to determine code name fails: Unknown. If PSI_Get fails: Unknown. PSI_Get can fail if PSI not initialized, or key does not exist.

        :param code_name: The code_name of this ClusterNodeHardware.
        :type: str
        """
        
        self._code_name = code_name

    @property
    def compute_type(self):
        """
        Gets the compute_type of this ClusterNodeHardware.
        Type of compute node if applicable (Low, Medium, High, Turbo, Ultra, Unknown). If not supported: Unknown. If Logic to determine compute type fails: Unknown. If PSI_Get fails: Unknown. PSI_Get can fail if PSI not initialized, or key does not exist.

        :return: The compute_type of this ClusterNodeHardware.
        :rtype: str
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """
        Sets the compute_type of this ClusterNodeHardware.
        Type of compute node if applicable (Low, Medium, High, Turbo, Ultra, Unknown). If not supported: Unknown. If Logic to determine compute type fails: Unknown. If PSI_Get fails: Unknown. PSI_Get can fail if PSI not initialized, or key does not exist.

        :param compute_type: The compute_type of this ClusterNodeHardware.
        :type: str
        """
        
        self._compute_type = compute_type

    @property
    def configuration_id(self):
        """
        Gets the configuration_id of this ClusterNodeHardware.
        Node configuration ID.

        :return: The configuration_id of this ClusterNodeHardware.
        :rtype: str
        """
        return self._configuration_id

    @configuration_id.setter
    def configuration_id(self, configuration_id):
        """
        Sets the configuration_id of this ClusterNodeHardware.
        Node configuration ID.

        :param configuration_id: The configuration_id of this ClusterNodeHardware.
        :type: str
        """
        
        if configuration_id is not None and len(configuration_id) < 0:
            raise ValueError("Invalid value for `configuration_id`, length must be greater than or equal to `0`")

        self._configuration_id = configuration_id

    @property
    def cpu(self):
        """
        Gets the cpu of this ClusterNodeHardware.
        Manufacturer and model of this node's CPU.

        :return: The cpu of this ClusterNodeHardware.
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this ClusterNodeHardware.
        Manufacturer and model of this node's CPU.

        :param cpu: The cpu of this ClusterNodeHardware.
        :type: str
        """
        
        if cpu is not None and len(cpu) < 0:
            raise ValueError("Invalid value for `cpu`, length must be greater than or equal to `0`")

        self._cpu = cpu

    @property
    def disk_controller(self):
        """
        Gets the disk_controller of this ClusterNodeHardware.
        Manufacturer and model of this node's disk controller.

        :return: The disk_controller of this ClusterNodeHardware.
        :rtype: str
        """
        return self._disk_controller

    @disk_controller.setter
    def disk_controller(self, disk_controller):
        """
        Sets the disk_controller of this ClusterNodeHardware.
        Manufacturer and model of this node's disk controller.

        :param disk_controller: The disk_controller of this ClusterNodeHardware.
        :type: str
        """
        
        if disk_controller is not None and len(disk_controller) < 0:
            raise ValueError("Invalid value for `disk_controller`, length must be greater than or equal to `0`")

        self._disk_controller = disk_controller

    @property
    def disk_expander(self):
        """
        Gets the disk_expander of this ClusterNodeHardware.
        Manufacturer and model of this node's disk expander.

        :return: The disk_expander of this ClusterNodeHardware.
        :rtype: str
        """
        return self._disk_expander

    @disk_expander.setter
    def disk_expander(self, disk_expander):
        """
        Sets the disk_expander of this ClusterNodeHardware.
        Manufacturer and model of this node's disk expander.

        :param disk_expander: The disk_expander of this ClusterNodeHardware.
        :type: str
        """
        
        if disk_expander is not None and len(disk_expander) < 0:
            raise ValueError("Invalid value for `disk_expander`, length must be greater than or equal to `0`")

        self._disk_expander = disk_expander

    @property
    def family_code(self):
        """
        Gets the family_code of this ClusterNodeHardware.
        Family code of this node (X, S, NL, etc.).

        :return: The family_code of this ClusterNodeHardware.
        :rtype: str
        """
        return self._family_code

    @family_code.setter
    def family_code(self, family_code):
        """
        Sets the family_code of this ClusterNodeHardware.
        Family code of this node (X, S, NL, etc.).

        :param family_code: The family_code of this ClusterNodeHardware.
        :type: str
        """
        
        if family_code is not None and len(family_code) < 0:
            raise ValueError("Invalid value for `family_code`, length must be greater than or equal to `0`")

        self._family_code = family_code

    @property
    def flash_drive(self):
        """
        Gets the flash_drive of this ClusterNodeHardware.
        Manufacturer, model, and device id of this node's flash drive.

        :return: The flash_drive of this ClusterNodeHardware.
        :rtype: str
        """
        return self._flash_drive

    @flash_drive.setter
    def flash_drive(self, flash_drive):
        """
        Sets the flash_drive of this ClusterNodeHardware.
        Manufacturer, model, and device id of this node's flash drive.

        :param flash_drive: The flash_drive of this ClusterNodeHardware.
        :type: str
        """
        
        if flash_drive is not None and len(flash_drive) < 0:
            raise ValueError("Invalid value for `flash_drive`, length must be greater than or equal to `0`")

        self._flash_drive = flash_drive

    @property
    def generation_code(self):
        """
        Gets the generation_code of this ClusterNodeHardware.
        Generation code of this node.

        :return: The generation_code of this ClusterNodeHardware.
        :rtype: str
        """
        return self._generation_code

    @generation_code.setter
    def generation_code(self, generation_code):
        """
        Sets the generation_code of this ClusterNodeHardware.
        Generation code of this node.

        :param generation_code: The generation_code of this ClusterNodeHardware.
        :type: str
        """
        
        if generation_code is not None and len(generation_code) < 0:
            raise ValueError("Invalid value for `generation_code`, length must be greater than or equal to `0`")

        self._generation_code = generation_code

    @property
    def hwgen(self):
        """
        Gets the hwgen of this ClusterNodeHardware.
        Isilon hardware generation name.

        :return: The hwgen of this ClusterNodeHardware.
        :rtype: str
        """
        return self._hwgen

    @hwgen.setter
    def hwgen(self, hwgen):
        """
        Sets the hwgen of this ClusterNodeHardware.
        Isilon hardware generation name.

        :param hwgen: The hwgen of this ClusterNodeHardware.
        :type: str
        """
        
        if hwgen is not None and len(hwgen) < 0:
            raise ValueError("Invalid value for `hwgen`, length must be greater than or equal to `0`")

        self._hwgen = hwgen

    @property
    def imb_version(self):
        """
        Gets the imb_version of this ClusterNodeHardware.
        Version of this node's Isilon Management Board.

        :return: The imb_version of this ClusterNodeHardware.
        :rtype: str
        """
        return self._imb_version

    @imb_version.setter
    def imb_version(self, imb_version):
        """
        Sets the imb_version of this ClusterNodeHardware.
        Version of this node's Isilon Management Board.

        :param imb_version: The imb_version of this ClusterNodeHardware.
        :type: str
        """
        
        if imb_version is not None and len(imb_version) < 0:
            raise ValueError("Invalid value for `imb_version`, length must be greater than or equal to `0`")

        self._imb_version = imb_version

    @property
    def infiniband(self):
        """
        Gets the infiniband of this ClusterNodeHardware.
        Infiniband card type.

        :return: The infiniband of this ClusterNodeHardware.
        :rtype: str
        """
        return self._infiniband

    @infiniband.setter
    def infiniband(self, infiniband):
        """
        Sets the infiniband of this ClusterNodeHardware.
        Infiniband card type.

        :param infiniband: The infiniband of this ClusterNodeHardware.
        :type: str
        """
        
        if infiniband is not None and len(infiniband) < 0:
            raise ValueError("Invalid value for `infiniband`, length must be greater than or equal to `0`")

        self._infiniband = infiniband

    @property
    def lcd_version(self):
        """
        Gets the lcd_version of this ClusterNodeHardware.
        Version of the LCD panel.

        :return: The lcd_version of this ClusterNodeHardware.
        :rtype: str
        """
        return self._lcd_version

    @lcd_version.setter
    def lcd_version(self, lcd_version):
        """
        Sets the lcd_version of this ClusterNodeHardware.
        Version of the LCD panel.

        :param lcd_version: The lcd_version of this ClusterNodeHardware.
        :type: str
        """
        
        if lcd_version is not None and len(lcd_version) < 0:
            raise ValueError("Invalid value for `lcd_version`, length must be greater than or equal to `0`")

        self._lcd_version = lcd_version

    @property
    def model(self):
        """
        Gets the model of this ClusterNodeHardware.
        Isilon node model identifier string (S200, X410, Infinity-H500, etc.).

        :return: The model of this ClusterNodeHardware.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this ClusterNodeHardware.
        Isilon node model identifier string (S200, X410, Infinity-H500, etc.).

        :param model: The model of this ClusterNodeHardware.
        :type: str
        """
        
        self._model = model

    @property
    def model_code(self):
        """
        Gets the model_code of this ClusterNodeHardware.
        Isilon node model code string (S200, X410, H500, etc.).

        :return: The model_code of this ClusterNodeHardware.
        :rtype: str
        """
        return self._model_code

    @model_code.setter
    def model_code(self, model_code):
        """
        Sets the model_code of this ClusterNodeHardware.
        Isilon node model code string (S200, X410, H500, etc.).

        :param model_code: The model_code of this ClusterNodeHardware.
        :type: str
        """
        
        self._model_code = model_code

    @property
    def motherboard(self):
        """
        Gets the motherboard of this ClusterNodeHardware.
        Manufacturer and model of this node's motherboard.

        :return: The motherboard of this ClusterNodeHardware.
        :rtype: str
        """
        return self._motherboard

    @motherboard.setter
    def motherboard(self, motherboard):
        """
        Sets the motherboard of this ClusterNodeHardware.
        Manufacturer and model of this node's motherboard.

        :param motherboard: The motherboard of this ClusterNodeHardware.
        :type: str
        """
        
        if motherboard is not None and len(motherboard) < 0:
            raise ValueError("Invalid value for `motherboard`, length must be greater than or equal to `0`")

        self._motherboard = motherboard

    @property
    def net_interfaces(self):
        """
        Gets the net_interfaces of this ClusterNodeHardware.
        Description of all this node's network interfaces.

        :return: The net_interfaces of this ClusterNodeHardware.
        :rtype: str
        """
        return self._net_interfaces

    @net_interfaces.setter
    def net_interfaces(self, net_interfaces):
        """
        Sets the net_interfaces of this ClusterNodeHardware.
        Description of all this node's network interfaces.

        :param net_interfaces: The net_interfaces of this ClusterNodeHardware.
        :type: str
        """
        
        if net_interfaces is not None and len(net_interfaces) < 0:
            raise ValueError("Invalid value for `net_interfaces`, length must be greater than or equal to `0`")

        self._net_interfaces = net_interfaces

    @property
    def node_slot_id(self):
        """
        Gets the node_slot_id of this ClusterNodeHardware.
        Position of node within chassis (e.g., 1-4 for Infinity chassis). -1 for error or not supported.

        :return: The node_slot_id of this ClusterNodeHardware.
        :rtype: int
        """
        return self._node_slot_id

    @node_slot_id.setter
    def node_slot_id(self, node_slot_id):
        """
        Sets the node_slot_id of this ClusterNodeHardware.
        Position of node within chassis (e.g., 1-4 for Infinity chassis). -1 for error or not supported.

        :param node_slot_id: The node_slot_id of this ClusterNodeHardware.
        :type: int
        """
        
        self._node_slot_id = node_slot_id

    @property
    def nvram(self):
        """
        Gets the nvram of this ClusterNodeHardware.
        Manufacturer and model of this node's NVRAM board.

        :return: The nvram of this ClusterNodeHardware.
        :rtype: str
        """
        return self._nvram

    @nvram.setter
    def nvram(self, nvram):
        """
        Sets the nvram of this ClusterNodeHardware.
        Manufacturer and model of this node's NVRAM board.

        :param nvram: The nvram of this ClusterNodeHardware.
        :type: str
        """
        
        if nvram is not None and len(nvram) < 0:
            raise ValueError("Invalid value for `nvram`, length must be greater than or equal to `0`")

        self._nvram = nvram

    @property
    def peer_serial_number(self):
        """
        Gets the peer_serial_number of this ClusterNodeHardware.
        Serial number of this node's peer/buddy node.(Infinity Only)

        :return: The peer_serial_number of this ClusterNodeHardware.
        :rtype: str
        """
        return self._peer_serial_number

    @peer_serial_number.setter
    def peer_serial_number(self, peer_serial_number):
        """
        Sets the peer_serial_number of this ClusterNodeHardware.
        Serial number of this node's peer/buddy node.(Infinity Only)

        :param peer_serial_number: The peer_serial_number of this ClusterNodeHardware.
        :type: str
        """
        
        self._peer_serial_number = peer_serial_number

    @property
    def performance_code(self):
        """
        Gets the performance_code of this ClusterNodeHardware.
        Performance code of this node, if applicable (2, 4, 5, etc.).

        :return: The performance_code of this ClusterNodeHardware.
        :rtype: str
        """
        return self._performance_code

    @performance_code.setter
    def performance_code(self, performance_code):
        """
        Sets the performance_code of this ClusterNodeHardware.
        Performance code of this node, if applicable (2, 4, 5, etc.).

        :param performance_code: The performance_code of this ClusterNodeHardware.
        :type: str
        """
        
        self._performance_code = performance_code

    @property
    def powersupplies(self):
        """
        Gets the powersupplies of this ClusterNodeHardware.
        Description strings for each power supply on this node.

        :return: The powersupplies of this ClusterNodeHardware.
        :rtype: list[str]
        """
        return self._powersupplies

    @powersupplies.setter
    def powersupplies(self, powersupplies):
        """
        Sets the powersupplies of this ClusterNodeHardware.
        Description strings for each power supply on this node.

        :param powersupplies: The powersupplies of this ClusterNodeHardware.
        :type: list[str]
        """
        
        self._powersupplies = powersupplies

    @property
    def processor(self):
        """
        Gets the processor of this ClusterNodeHardware.
        Number of processors and cores on this node.

        :return: The processor of this ClusterNodeHardware.
        :rtype: str
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """
        Sets the processor of this ClusterNodeHardware.
        Number of processors and cores on this node.

        :param processor: The processor of this ClusterNodeHardware.
        :type: str
        """
        
        if processor is not None and len(processor) < 0:
            raise ValueError("Invalid value for `processor`, length must be greater than or equal to `0`")

        self._processor = processor

    @property
    def product(self):
        """
        Gets the product of this ClusterNodeHardware.
        Isilon product name.

        :return: The product of this ClusterNodeHardware.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this ClusterNodeHardware.
        Isilon product name.

        :param product: The product of this ClusterNodeHardware.
        :type: str
        """
        
        if product is not None and len(product) < 0:
            raise ValueError("Invalid value for `product`, length must be greater than or equal to `0`")

        self._product = product

    @property
    def ram(self):
        """
        Gets the ram of this ClusterNodeHardware.
        Size of RAM in bytes.

        :return: The ram of this ClusterNodeHardware.
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """
        Sets the ram of this ClusterNodeHardware.
        Size of RAM in bytes.

        :param ram: The ram of this ClusterNodeHardware.
        :type: int
        """
        
        if ram is not None  and ram > 1.8446744073709552E19:
            raise ValueError("Invalid value for `ram`, must be a value less than or equal to `1.8446744073709552E19`")

        self._ram = ram

    @property
    def serial_number(self):
        """
        Gets the serial_number of this ClusterNodeHardware.
        Serial number of this node.

        :return: The serial_number of this ClusterNodeHardware.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this ClusterNodeHardware.
        Serial number of this node.

        :param serial_number: The serial_number of this ClusterNodeHardware.
        :type: str
        """
        
        if serial_number is not None and len(serial_number) < 0:
            raise ValueError("Invalid value for `serial_number`, length must be greater than or equal to `0`")

        self._serial_number = serial_number

    @property
    def series(self):
        """
        Gets the series of this ClusterNodeHardware.
        Series of this node (X, I, NL, etc.).

        :return: The series of this ClusterNodeHardware.
        :rtype: str
        """
        return self._series

    @series.setter
    def series(self, series):
        """
        Sets the series of this ClusterNodeHardware.
        Series of this node (X, I, NL, etc.).

        :param series: The series of this ClusterNodeHardware.
        :type: str
        """
        
        if series is not None and len(series) < 0:
            raise ValueError("Invalid value for `series`, length must be greater than or equal to `0`")

        self._series = series

    @property
    def sled_drive_count(self):
        """
        Gets the sled_drive_count of this ClusterNodeHardware.
        Size of drive sleds in node, if applicable. Expected values: 3, 4, 6. 0 if unable to determine sled size. -1 for error or not supported. If PSI_Get fails: -1. PSI_Get can fail if PSI not initialized, or key does not exist.

        :return: The sled_drive_count of this ClusterNodeHardware.
        :rtype: int
        """
        return self._sled_drive_count

    @sled_drive_count.setter
    def sled_drive_count(self, sled_drive_count):
        """
        Sets the sled_drive_count of this ClusterNodeHardware.
        Size of drive sleds in node, if applicable. Expected values: 3, 4, 6. 0 if unable to determine sled size. -1 for error or not supported. If PSI_Get fails: -1. PSI_Get can fail if PSI not initialized, or key does not exist.

        :param sled_drive_count: The sled_drive_count of this ClusterNodeHardware.
        :type: int
        """
        
        self._sled_drive_count = sled_drive_count

    @property
    def storage_class(self):
        """
        Gets the storage_class of this ClusterNodeHardware.
        Storage class of this node (storage or diskless).

        :return: The storage_class of this ClusterNodeHardware.
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """
        Sets the storage_class of this ClusterNodeHardware.
        Storage class of this node (storage or diskless).

        :param storage_class: The storage_class of this ClusterNodeHardware.
        :type: str
        """
        
        if storage_class is not None and len(storage_class) < 0:
            raise ValueError("Invalid value for `storage_class`, length must be greater than or equal to `0`")

        self._storage_class = storage_class

    @property
    def tier(self):
        """
        Gets the tier of this ClusterNodeHardware.
        Platform tier level of this node if applicable (1-4 are defined, 0 for unknown or not supported, -1 for error). If not supported: 0. If Logic to determine tier fails: 0 for unknown. If PSI_Get fails: -1 for error. PSI_Get can fail if PSI not initialized, or key does not exist.

        :return: The tier of this ClusterNodeHardware.
        :rtype: int
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """
        Sets the tier of this ClusterNodeHardware.
        Platform tier level of this node if applicable (1-4 are defined, 0 for unknown or not supported, -1 for error). If not supported: 0. If Logic to determine tier fails: 0 for unknown. If PSI_Get fails: -1 for error. PSI_Get can fail if PSI not initialized, or key does not exist.

        :param tier: The tier of this ClusterNodeHardware.
        :type: int
        """
        
        self._tier = tier

    @property
    def top_level_assembly_serial_number(self):
        """
        Gets the top_level_assembly_serial_number of this ClusterNodeHardware.
        Serial number of the top level assembly of this node.(Infinity Only)

        :return: The top_level_assembly_serial_number of this ClusterNodeHardware.
        :rtype: str
        """
        return self._top_level_assembly_serial_number

    @top_level_assembly_serial_number.setter
    def top_level_assembly_serial_number(self, top_level_assembly_serial_number):
        """
        Sets the top_level_assembly_serial_number of this ClusterNodeHardware.
        Serial number of the top level assembly of this node.(Infinity Only)

        :param top_level_assembly_serial_number: The top_level_assembly_serial_number of this ClusterNodeHardware.
        :type: str
        """
        
        self._top_level_assembly_serial_number = top_level_assembly_serial_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

