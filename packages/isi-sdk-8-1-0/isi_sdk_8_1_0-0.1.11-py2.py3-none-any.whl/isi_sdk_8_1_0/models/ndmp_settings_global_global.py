# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NdmpSettingsGlobalGlobal(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NdmpSettingsGlobalGlobal - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bre_max_num_contexts': 'int',
            'dma': 'str',
            'msb_context_retention_duration': 'int',
            'msr_context_retention_duration': 'int',
            'port': 'int',
            'service': 'bool'
        }

        self.attribute_map = {
            'bre_max_num_contexts': 'bre_max_num_contexts',
            'dma': 'dma',
            'msb_context_retention_duration': 'msb_context_retention_duration',
            'msr_context_retention_duration': 'msr_context_retention_duration',
            'port': 'port',
            'service': 'service'
        }

        self._bre_max_num_contexts = None
        self._dma = None
        self._msb_context_retention_duration = None
        self._msr_context_retention_duration = None
        self._port = None
        self._service = None

    @property
    def bre_max_num_contexts(self):
        """
        Gets the bre_max_num_contexts of this NdmpSettingsGlobalGlobal.
        Maximum number of BRE contexts.

        :return: The bre_max_num_contexts of this NdmpSettingsGlobalGlobal.
        :rtype: int
        """
        return self._bre_max_num_contexts

    @bre_max_num_contexts.setter
    def bre_max_num_contexts(self, bre_max_num_contexts):
        """
        Sets the bre_max_num_contexts of this NdmpSettingsGlobalGlobal.
        Maximum number of BRE contexts.

        :param bre_max_num_contexts: The bre_max_num_contexts of this NdmpSettingsGlobalGlobal.
        :type: int
        """
        
        self._bre_max_num_contexts = bre_max_num_contexts

    @property
    def dma(self):
        """
        Gets the dma of this NdmpSettingsGlobalGlobal.
        A unique identifier for the dma vendor.

        :return: The dma of this NdmpSettingsGlobalGlobal.
        :rtype: str
        """
        return self._dma

    @dma.setter
    def dma(self, dma):
        """
        Sets the dma of this NdmpSettingsGlobalGlobal.
        A unique identifier for the dma vendor.

        :param dma: The dma of this NdmpSettingsGlobalGlobal.
        :type: str
        """
        allowed_values = ["generic", "atempo", "bakbone", "commvault", "emc", "symantec", "tivoli", "symantec-netbackup", "symantec-backupexec"]
        if dma is not None and dma not in allowed_values:
            raise ValueError(
                "Invalid value for `dma`, must be one of {0}"
                .format(allowed_values)
            )

        self._dma = dma

    @property
    def msb_context_retention_duration(self):
        """
        Gets the msb_context_retention_duration of this NdmpSettingsGlobalGlobal.
        Multi-Stream Backup context retention duration.

        :return: The msb_context_retention_duration of this NdmpSettingsGlobalGlobal.
        :rtype: int
        """
        return self._msb_context_retention_duration

    @msb_context_retention_duration.setter
    def msb_context_retention_duration(self, msb_context_retention_duration):
        """
        Sets the msb_context_retention_duration of this NdmpSettingsGlobalGlobal.
        Multi-Stream Backup context retention duration.

        :param msb_context_retention_duration: The msb_context_retention_duration of this NdmpSettingsGlobalGlobal.
        :type: int
        """
        
        self._msb_context_retention_duration = msb_context_retention_duration

    @property
    def msr_context_retention_duration(self):
        """
        Gets the msr_context_retention_duration of this NdmpSettingsGlobalGlobal.
        Multi-Stream Restore context retention duration.

        :return: The msr_context_retention_duration of this NdmpSettingsGlobalGlobal.
        :rtype: int
        """
        return self._msr_context_retention_duration

    @msr_context_retention_duration.setter
    def msr_context_retention_duration(self, msr_context_retention_duration):
        """
        Sets the msr_context_retention_duration of this NdmpSettingsGlobalGlobal.
        Multi-Stream Restore context retention duration.

        :param msr_context_retention_duration: The msr_context_retention_duration of this NdmpSettingsGlobalGlobal.
        :type: int
        """
        
        self._msr_context_retention_duration = msr_context_retention_duration

    @property
    def port(self):
        """
        Gets the port of this NdmpSettingsGlobalGlobal.
        The port to listen on.

        :return: The port of this NdmpSettingsGlobalGlobal.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this NdmpSettingsGlobalGlobal.
        The port to listen on.

        :param port: The port of this NdmpSettingsGlobalGlobal.
        :type: int
        """
        
        self._port = port

    @property
    def service(self):
        """
        Gets the service of this NdmpSettingsGlobalGlobal.
        Property to enable/diable the NDMP service.

        :return: The service of this NdmpSettingsGlobalGlobal.
        :rtype: bool
        """
        return self._service

    @service.setter
    def service(self, service):
        """
        Sets the service of this NdmpSettingsGlobalGlobal.
        Property to enable/diable the NDMP service.

        :param service: The service of this NdmpSettingsGlobalGlobal.
        :type: bool
        """
        
        self._service = service

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

