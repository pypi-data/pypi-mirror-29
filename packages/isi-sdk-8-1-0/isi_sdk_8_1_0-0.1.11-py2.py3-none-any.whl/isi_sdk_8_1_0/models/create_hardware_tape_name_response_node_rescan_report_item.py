# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class CreateHardwareTapeNameResponseNodeRescanReportItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CreateHardwareTapeNameResponseNodeRescanReportItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'devicename': 'str',
            'path': 'str',
            'product': 'str',
            'serial': 'str',
            'status_report': 'str',
            'wwnn': 'str'
        }

        self.attribute_map = {
            'devicename': 'devicename',
            'path': 'path',
            'product': 'product',
            'serial': 'serial',
            'status_report': 'status_report',
            'wwnn': 'wwnn'
        }

        self._devicename = None
        self._path = None
        self._product = None
        self._serial = None
        self._status_report = None
        self._wwnn = None

    @property
    def devicename(self):
        """
        Gets the devicename of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device name

        :return: The devicename of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :rtype: str
        """
        return self._devicename

    @devicename.setter
    def devicename(self, devicename):
        """
        Sets the devicename of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device name

        :param devicename: The devicename of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :type: str
        """
        
        self._devicename = devicename

    @property
    def path(self):
        """
        Gets the path of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device driver path

        :return: The path of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device driver path

        :param path: The path of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :type: str
        """
        
        self._path = path

    @property
    def product(self):
        """
        Gets the product of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device product name

        :return: The product of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device product name

        :param product: The product of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :type: str
        """
        
        self._product = product

    @property
    def serial(self):
        """
        Gets the serial of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device serial:L number

        :return: The serial of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device serial:L number

        :param serial: The serial of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :type: str
        """
        
        self._serial = serial

    @property
    def status_report(self):
        """
        Gets the status_report of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device change status

        :return: The status_report of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :rtype: str
        """
        return self._status_report

    @status_report.setter
    def status_report(self, status_report):
        """
        Sets the status_report of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device change status

        :param status_report: The status_report of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :type: str
        """
        
        self._status_report = status_report

    @property
    def wwnn(self):
        """
        Gets the wwnn of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device node world wide name

        :return: The wwnn of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :rtype: str
        """
        return self._wwnn

    @wwnn.setter
    def wwnn(self, wwnn):
        """
        Sets the wwnn of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        device node world wide name

        :param wwnn: The wwnn of this CreateHardwareTapeNameResponseNodeRescanReportItem.
        :type: str
        """
        
        self._wwnn = wwnn

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

