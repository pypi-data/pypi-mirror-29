# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class CloudAccessCluster(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CloudAccessCluster - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'accounts': 'list[str]',
            'current': 'bool',
            'guid': 'str',
            'id': 'str',
            'name': 'str',
            'policies': 'list[str]',
            'state': 'str',
            'synced_from': 'str'
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'current': 'current',
            'guid': 'guid',
            'id': 'id',
            'name': 'name',
            'policies': 'policies',
            'state': 'state',
            'synced_from': 'synced_from'
        }

        self._accounts = None
        self._current = None
        self._guid = None
        self._id = None
        self._name = None
        self._policies = None
        self._state = None
        self._synced_from = None

    @property
    def accounts(self):
        """
        Gets the accounts of this CloudAccessCluster.
        A list of accounts created on the cluster with this guid

        :return: The accounts of this CloudAccessCluster.
        :rtype: list[str]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """
        Sets the accounts of this CloudAccessCluster.
        A list of accounts created on the cluster with this guid

        :param accounts: The accounts of this CloudAccessCluster.
        :type: list[str]
        """
        
        self._accounts = accounts

    @property
    def current(self):
        """
        Gets the current of this CloudAccessCluster.
        Whether the guid is that of the current (local) cluster

        :return: The current of this CloudAccessCluster.
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """
        Sets the current of this CloudAccessCluster.
        Whether the guid is that of the current (local) cluster

        :param current: The current of this CloudAccessCluster.
        :type: bool
        """
        
        self._current = current

    @property
    def guid(self):
        """
        Gets the guid of this CloudAccessCluster.
        A cluster guid indicating the birth place of one or more accounts or policies on this cluster

        :return: The guid of this CloudAccessCluster.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """
        Sets the guid of this CloudAccessCluster.
        A cluster guid indicating the birth place of one or more accounts or policies on this cluster

        :param guid: The guid of this CloudAccessCluster.
        :type: str
        """
        
        self._guid = guid

    @property
    def id(self):
        """
        Gets the id of this CloudAccessCluster.
        A cluster guid indicating the birth place of one or more accounts or policies on this cluster

        :return: The id of this CloudAccessCluster.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CloudAccessCluster.
        A cluster guid indicating the birth place of one or more accounts or policies on this cluster

        :param id: The id of this CloudAccessCluster.
        :type: str
        """
        
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this CloudAccessCluster.
        The name of the cluster from which the above guid originated

        :return: The name of this CloudAccessCluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CloudAccessCluster.
        The name of the cluster from which the above guid originated

        :param name: The name of this CloudAccessCluster.
        :type: str
        """
        
        self._name = name

    @property
    def policies(self):
        """
        Gets the policies of this CloudAccessCluster.
        A list of policies created on the cluster with this guid

        :return: The policies of this CloudAccessCluster.
        :rtype: list[str]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """
        Sets the policies of this CloudAccessCluster.
        A list of policies created on the cluster with this guid

        :param policies: The policies of this CloudAccessCluster.
        :type: list[str]
        """
        
        self._policies = policies

    @property
    def state(self):
        """
        Gets the state of this CloudAccessCluster.
        Whether the guid has access to the cloud

        :return: The state of this CloudAccessCluster.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this CloudAccessCluster.
        Whether the guid has access to the cloud

        :param state: The state of this CloudAccessCluster.
        :type: str
        """
        allowed_values = ["permitted", "pending enable", "pending disable", "not permitted"]
        if state is not None and state not in allowed_values:
            raise ValueError(
                "Invalid value for `state`, must be one of {0}"
                .format(allowed_values)
            )

        self._state = state

    @property
    def synced_from(self):
        """
        Gets the synced_from of this CloudAccessCluster.
        The name of the cluster from which the above guid was synced

        :return: The synced_from of this CloudAccessCluster.
        :rtype: str
        """
        return self._synced_from

    @synced_from.setter
    def synced_from(self, synced_from):
        """
        Sets the synced_from of this CloudAccessCluster.
        The name of the cluster from which the above guid was synced

        :param synced_from: The synced_from of this CloudAccessCluster.
        :type: str
        """
        
        self._synced_from = synced_from

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

