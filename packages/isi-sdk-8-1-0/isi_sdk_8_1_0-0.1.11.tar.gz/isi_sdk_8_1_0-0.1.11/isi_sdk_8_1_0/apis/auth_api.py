# coding: utf-8

"""
AuthApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AuthApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_auth_cache_item(self, auth_cache_item, **kwargs):
        """
        
        Flush the Security Objects Cache.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_auth_cache_item(auth_cache_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthCacheItem auth_cache_item:  (required)
        :param str zone: Specifies access zone from which to flush objects.
        :return: CreateAuditTopicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_cache_item', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_auth_cache_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_cache_item' is set
        if ('auth_cache_item' not in params) or (params['auth_cache_item'] is None):
            raise ValueError("Missing the required parameter `auth_cache_item` when calling `create_auth_cache_item`")


        resource_path = '/platform/4/auth/cache'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_cache_item' in params:
            body_params = params['auth_cache_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuditTopicResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_auth_group(self, auth_group, **kwargs):
        """
        
        Create a new group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_auth_group(auth_group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthGroupCreateParams auth_group:  (required)
        :param bool force: Skip validation checks when creating a group.
        :param str zone: Optional zone.
        :param str provider: Optional provider type.
        :return: CreateAuditTopicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_group', 'force', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_auth_group" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_group' is set
        if ('auth_group' not in params) or (params['auth_group'] is None):
            raise ValueError("Missing the required parameter `auth_group` when calling `create_auth_group`")


        resource_path = '/platform/1/auth/groups'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_group' in params:
            body_params = params['auth_group']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuditTopicResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_auth_refresh_item(self, auth_refresh_item, **kwargs):
        """
        
        Refresh the authentication service configuration.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_auth_refresh_item(auth_refresh_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Empty auth_refresh_item:  (required)
        :return: CreateAuthRefreshItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_refresh_item']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_auth_refresh_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_refresh_item' is set
        if ('auth_refresh_item' not in params) or (params['auth_refresh_item'] is None):
            raise ValueError("Missing the required parameter `auth_refresh_item` when calling `create_auth_refresh_item`")


        resource_path = '/platform/3/auth/refresh'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_refresh_item' in params:
            body_params = params['auth_refresh_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuthRefreshItemResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_auth_role(self, auth_role, **kwargs):
        """
        
        Create a new role.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_auth_role(auth_role, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthRoleCreateParams auth_role:  (required)
        :return: CreateAuditTopicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_role']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_auth_role" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_role' is set
        if ('auth_role' not in params) or (params['auth_role'] is None):
            raise ValueError("Missing the required parameter `auth_role` when calling `create_auth_role`")


        resource_path = '/platform/1/auth/roles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_role' in params:
            body_params = params['auth_role']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuditTopicResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_auth_user(self, auth_user, **kwargs):
        """
        
        Create a new user.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_auth_user(auth_user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthUserCreateParams auth_user:  (required)
        :param bool force: Skip validation checks when creating user.
        :param str zone: Optional zone.
        :param str provider: Optional provider type.
        :return: CreateAuditTopicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_user', 'force', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_auth_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_user' is set
        if ('auth_user' not in params) or (params['auth_user'] is None):
            raise ValueError("Missing the required parameter `auth_user` when calling `create_auth_user`")


        resource_path = '/platform/1/auth/users'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_user' in params:
            body_params = params['auth_user']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuditTopicResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_mapping_identity(self, mapping_identity, **kwargs):
        """
        
        Manually set or modify a mapping between two personae.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_mapping_identity(mapping_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MappingIdentityCreateParams mapping_identity:  (required)
        :param bool _2way: Create a bi-directional mapping from source to target and target to source.
        :param str zone: Optional zone.
        :param bool replace: Replace existing mappings.
        :return: CreateMappingIdentityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mapping_identity', '_2way', 'zone', 'replace']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mapping_identity" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mapping_identity' is set
        if ('mapping_identity' not in params) or (params['mapping_identity'] is None):
            raise ValueError("Missing the required parameter `mapping_identity` when calling `create_mapping_identity`")


        resource_path = '/platform/1/auth/mapping/identities'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if '_2way' in params:
            query_params['2way'] = params['_2way']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'replace' in params:
            query_params['replace'] = params['replace']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mapping_identity' in params:
            body_params = params['mapping_identity']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateMappingIdentityResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_mapping_identity_0(self, mapping_identity, **kwargs):
        """
        
        Manually set or modify a mapping between two personae.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_mapping_identity_0(mapping_identity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Empty mapping_identity:  (required)
        :param str type: Desired mapping target to fetch/generate.
        :param str zone: Optional zone.
        :return: MappingIdentities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mapping_identity', 'type', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mapping_identity_0" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mapping_identity' is set
        if ('mapping_identity' not in params) or (params['mapping_identity'] is None):
            raise ValueError("Missing the required parameter `mapping_identity` when calling `create_mapping_identity_0`")


        resource_path = '/platform/1/auth/mapping/identities/{MappingIdentityId}'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mapping_identity' in params:
            body_params = params['mapping_identity']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MappingIdentities',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_providers_ads_item(self, providers_ads_item, **kwargs):
        """
        
        Create a new ADS provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_providers_ads_item(providers_ads_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProvidersAdsItem providers_ads_item:  (required)
        :return: CreateAuditTopicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_ads_item']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_providers_ads_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_ads_item' is set
        if ('providers_ads_item' not in params) or (params['providers_ads_item'] is None):
            raise ValueError("Missing the required parameter `providers_ads_item` when calling `create_providers_ads_item`")


        resource_path = '/platform/3/auth/providers/ads'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'providers_ads_item' in params:
            body_params = params['providers_ads_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuditTopicResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_providers_file_item(self, providers_file_item, **kwargs):
        """
        
        Create a new file provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_providers_file_item(providers_file_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProvidersFileItem providers_file_item:  (required)
        :return: CreateAuditTopicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_file_item']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_providers_file_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_file_item' is set
        if ('providers_file_item' not in params) or (params['providers_file_item'] is None):
            raise ValueError("Missing the required parameter `providers_file_item` when calling `create_providers_file_item`")


        resource_path = '/platform/1/auth/providers/file'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'providers_file_item' in params:
            body_params = params['providers_file_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuditTopicResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_providers_krb5_item(self, providers_krb5_item, **kwargs):
        """
        
        Create a new KRB5 provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_providers_krb5_item(providers_krb5_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProvidersKrb5Item providers_krb5_item:  (required)
        :return: CreateAuditTopicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_krb5_item']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_providers_krb5_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_krb5_item' is set
        if ('providers_krb5_item' not in params) or (params['providers_krb5_item'] is None):
            raise ValueError("Missing the required parameter `providers_krb5_item` when calling `create_providers_krb5_item`")


        resource_path = '/platform/3/auth/providers/krb5'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'providers_krb5_item' in params:
            body_params = params['providers_krb5_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuditTopicResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_providers_ldap_item(self, providers_ldap_item, **kwargs):
        """
        
        Create a new LDAP provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_providers_ldap_item(providers_ldap_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProvidersLdapItem providers_ldap_item:  (required)
        :param bool force: Ignore unresolvable server URIs.
        :return: CreateAuditTopicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_ldap_item', 'force']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_providers_ldap_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_ldap_item' is set
        if ('providers_ldap_item' not in params) or (params['providers_ldap_item'] is None):
            raise ValueError("Missing the required parameter `providers_ldap_item` when calling `create_providers_ldap_item`")


        resource_path = '/platform/4/auth/providers/ldap'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'providers_ldap_item' in params:
            body_params = params['providers_ldap_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuditTopicResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_providers_nis_item(self, providers_nis_item, **kwargs):
        """
        
        Create a new NIS provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_providers_nis_item(providers_nis_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProvidersNisItem providers_nis_item:  (required)
        :return: CreateAuditTopicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_nis_item']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_providers_nis_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_nis_item' is set
        if ('providers_nis_item' not in params) or (params['providers_nis_item'] is None):
            raise ValueError("Missing the required parameter `providers_nis_item` when calling `create_providers_nis_item`")


        resource_path = '/platform/3/auth/providers/nis'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'providers_nis_item' in params:
            body_params = params['providers_nis_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuditTopicResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_settings_krb5_domain(self, settings_krb5_domain, **kwargs):
        """
        
        Create a new krb5 domain.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_settings_krb5_domain(settings_krb5_domain, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsKrb5DomainCreateParams settings_krb5_domain:  (required)
        :return: CreateAuditTopicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_krb5_domain']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_settings_krb5_domain" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_krb5_domain' is set
        if ('settings_krb5_domain' not in params) or (params['settings_krb5_domain'] is None):
            raise ValueError("Missing the required parameter `settings_krb5_domain` when calling `create_settings_krb5_domain`")


        resource_path = '/platform/1/auth/settings/krb5/domains'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_krb5_domain' in params:
            body_params = params['settings_krb5_domain']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuditTopicResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_settings_krb5_realm(self, settings_krb5_realm, **kwargs):
        """
        
        Create a new krb5 realm.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_settings_krb5_realm(settings_krb5_realm, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsKrb5RealmCreateParams settings_krb5_realm:  (required)
        :return: CreateAuditTopicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_krb5_realm']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_settings_krb5_realm" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_krb5_realm' is set
        if ('settings_krb5_realm' not in params) or (params['settings_krb5_realm'] is None):
            raise ValueError("Missing the required parameter `settings_krb5_realm` when calling `create_settings_krb5_realm`")


        resource_path = '/platform/1/auth/settings/krb5/realms'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_krb5_realm' in params:
            body_params = params['settings_krb5_realm']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateAuditTopicResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_auth_group(self, auth_group_id, **kwargs):
        """
        
        Delete the group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_auth_group(auth_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth_group_id: Delete the group. (required)
        :param bool cached: If true, flush the group from the cache.
        :param str zone: Filter groups by zone.
        :param str provider: Filter groups by provider.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_group_id', 'cached', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_auth_group" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_group_id' is set
        if ('auth_group_id' not in params) or (params['auth_group_id'] is None):
            raise ValueError("Missing the required parameter `auth_group_id` when calling `delete_auth_group`")


        resource_path = '/platform/1/auth/groups/{AuthGroupId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_group_id' in params:
            path_params['AuthGroupId'] = params['auth_group_id']

        query_params = {}
        if 'cached' in params:
            query_params['cached'] = params['cached']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_auth_groups(self, **kwargs):
        """
        
        Flush the groups cache.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_auth_groups(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool cached: If true, only flush cached objects.
        :param str zone: Filter groups by zone.
        :param str provider: Filter groups by provider.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cached', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_auth_groups" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/groups'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'cached' in params:
            query_params['cached'] = params['cached']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_auth_role(self, auth_role_id, **kwargs):
        """
        
        Delete the role.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_auth_role(auth_role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth_role_id: Delete the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_role_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_auth_role" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_role_id' is set
        if ('auth_role_id' not in params) or (params['auth_role_id'] is None):
            raise ValueError("Missing the required parameter `auth_role_id` when calling `delete_auth_role`")


        resource_path = '/platform/1/auth/roles/{AuthRoleId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_role_id' in params:
            path_params['AuthRoleId'] = params['auth_role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_auth_user(self, auth_user_id, **kwargs):
        """
        
        Delete the user.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_auth_user(auth_user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth_user_id: Delete the user. (required)
        :param bool cached: If true, flush the user from the cache.
        :param str zone: Filter users by zone.
        :param str provider: Filter users by provider.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_user_id', 'cached', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_auth_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_user_id' is set
        if ('auth_user_id' not in params) or (params['auth_user_id'] is None):
            raise ValueError("Missing the required parameter `auth_user_id` when calling `delete_auth_user`")


        resource_path = '/platform/1/auth/users/{AuthUserId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_user_id' in params:
            path_params['AuthUserId'] = params['auth_user_id']

        query_params = {}
        if 'cached' in params:
            query_params['cached'] = params['cached']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_auth_users(self, **kwargs):
        """
        
        Flush the users cache.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_auth_users(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool cached: If true, only flush cached objects.
        :param str zone: Filter users by zone.
        :param str provider: Filter users by provider.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cached', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_auth_users" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/users'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'cached' in params:
            query_params['cached'] = params['cached']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_mapping_identities(self, **kwargs):
        """
        
        Flush the entire idmap cache.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_mapping_identities(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: Filter to apply when deleting identity mappings.
        :param str zone: Optional zone.
        :param bool remove: Delete mapping instead of flush mapping cache.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'zone', 'remove']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_mapping_identities" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/mapping/identities'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'remove' in params:
            query_params['remove'] = params['remove']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_mapping_identity(self, mapping_identity_id, **kwargs):
        """
        
        Flush the entire idmap cache.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_mapping_identity(mapping_identity_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mapping_identity_id: Flush the entire idmap cache. (required)
        :param str zone: Optional zone.
        :param bool _2way: Delete the bi-directional mapping from source to target and target to source.
        :param str target: Target identity persona.
        :param bool remove: Delete mapping instead of flush mapping from cache.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mapping_identity_id', 'zone', '_2way', 'target', 'remove']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_mapping_identity" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mapping_identity_id' is set
        if ('mapping_identity_id' not in params) or (params['mapping_identity_id'] is None):
            raise ValueError("Missing the required parameter `mapping_identity_id` when calling `delete_mapping_identity`")


        resource_path = '/platform/1/auth/mapping/identities/{MappingIdentityId}'.replace('{format}', 'json')
        path_params = {}
        if 'mapping_identity_id' in params:
            path_params['MappingIdentityId'] = params['mapping_identity_id']

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if '_2way' in params:
            query_params['2way'] = params['_2way']
        if 'target' in params:
            query_params['target'] = params['target']
        if 'remove' in params:
            query_params['remove'] = params['remove']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_providers_ads_by_id(self, providers_ads_id, **kwargs):
        """
        
        Delete the ADS provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_providers_ads_by_id(providers_ads_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_ads_id: Delete the ADS provider. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_ads_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_providers_ads_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_ads_id' is set
        if ('providers_ads_id' not in params) or (params['providers_ads_id'] is None):
            raise ValueError("Missing the required parameter `providers_ads_id` when calling `delete_providers_ads_by_id`")


        resource_path = '/platform/3/auth/providers/ads/{ProvidersAdsId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_ads_id' in params:
            path_params['ProvidersAdsId'] = params['providers_ads_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_providers_file_by_id(self, providers_file_id, **kwargs):
        """
        
        Delete the file provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_providers_file_by_id(providers_file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_file_id: Delete the file provider. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_file_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_providers_file_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_file_id' is set
        if ('providers_file_id' not in params) or (params['providers_file_id'] is None):
            raise ValueError("Missing the required parameter `providers_file_id` when calling `delete_providers_file_by_id`")


        resource_path = '/platform/1/auth/providers/file/{ProvidersFileId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_file_id' in params:
            path_params['ProvidersFileId'] = params['providers_file_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_providers_krb5_by_id(self, providers_krb5_id, **kwargs):
        """
        
        Delete the KRB5 provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_providers_krb5_by_id(providers_krb5_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_krb5_id: Delete the KRB5 provider. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_krb5_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_providers_krb5_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_krb5_id' is set
        if ('providers_krb5_id' not in params) or (params['providers_krb5_id'] is None):
            raise ValueError("Missing the required parameter `providers_krb5_id` when calling `delete_providers_krb5_by_id`")


        resource_path = '/platform/3/auth/providers/krb5/{ProvidersKrb5Id}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_krb5_id' in params:
            path_params['ProvidersKrb5Id'] = params['providers_krb5_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_providers_ldap_by_id(self, providers_ldap_id, **kwargs):
        """
        
        Delete the LDAP provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_providers_ldap_by_id(providers_ldap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_ldap_id: Delete the LDAP provider. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_ldap_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_providers_ldap_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_ldap_id' is set
        if ('providers_ldap_id' not in params) or (params['providers_ldap_id'] is None):
            raise ValueError("Missing the required parameter `providers_ldap_id` when calling `delete_providers_ldap_by_id`")


        resource_path = '/platform/4/auth/providers/ldap/{ProvidersLdapId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_ldap_id' in params:
            path_params['ProvidersLdapId'] = params['providers_ldap_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_providers_local_by_id(self, providers_local_id, **kwargs):
        """
        
        Delete the local provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_providers_local_by_id(providers_local_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_local_id: Delete the local provider. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_local_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_providers_local_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_local_id' is set
        if ('providers_local_id' not in params) or (params['providers_local_id'] is None):
            raise ValueError("Missing the required parameter `providers_local_id` when calling `delete_providers_local_by_id`")


        resource_path = '/platform/1/auth/providers/local/{ProvidersLocalId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_local_id' in params:
            path_params['ProvidersLocalId'] = params['providers_local_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_providers_nis_by_id(self, providers_nis_id, **kwargs):
        """
        
        Delete the NIS provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_providers_nis_by_id(providers_nis_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_nis_id: Delete the NIS provider. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_nis_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_providers_nis_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_nis_id' is set
        if ('providers_nis_id' not in params) or (params['providers_nis_id'] is None):
            raise ValueError("Missing the required parameter `providers_nis_id` when calling `delete_providers_nis_by_id`")


        resource_path = '/platform/3/auth/providers/nis/{ProvidersNisId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_nis_id' in params:
            path_params['ProvidersNisId'] = params['providers_nis_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_settings_krb5_domain(self, settings_krb5_domain_id, **kwargs):
        """
        
        Remove a krb5 domain.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_settings_krb5_domain(settings_krb5_domain_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str settings_krb5_domain_id: Remove a krb5 domain. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_krb5_domain_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_settings_krb5_domain" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_krb5_domain_id' is set
        if ('settings_krb5_domain_id' not in params) or (params['settings_krb5_domain_id'] is None):
            raise ValueError("Missing the required parameter `settings_krb5_domain_id` when calling `delete_settings_krb5_domain`")


        resource_path = '/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_krb5_domain_id' in params:
            path_params['SettingsKrb5DomainId'] = params['settings_krb5_domain_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_settings_krb5_realm(self, settings_krb5_realm_id, **kwargs):
        """
        
        Remove a realm.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_settings_krb5_realm(settings_krb5_realm_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str settings_krb5_realm_id: Remove a realm. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_krb5_realm_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_settings_krb5_realm" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_krb5_realm_id' is set
        if ('settings_krb5_realm_id' not in params) or (params['settings_krb5_realm_id'] is None):
            raise ValueError("Missing the required parameter `settings_krb5_realm_id` when calling `delete_settings_krb5_realm`")


        resource_path = '/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_krb5_realm_id' in params:
            path_params['SettingsKrb5RealmId'] = params['settings_krb5_realm_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_access_user(self, auth_access_user, **kwargs):
        """
        
        Determine user's access rights to a file

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_access_user(auth_access_user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth_access_user: Determine user's access rights to a file (required)
        :param str path: Path to the file. Must be within /ifs.
        :param str share: SMB share name
        :param str zone: Access zone the user is in.
        :param bool numeric: Show the user's numeric identifier.
        :return: AuthAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_access_user', 'path', 'share', 'zone', 'numeric']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_access_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_access_user' is set
        if ('auth_access_user' not in params) or (params['auth_access_user'] is None):
            raise ValueError("Missing the required parameter `auth_access_user` when calling `get_auth_access_user`")


        resource_path = '/platform/1/auth/access/{AuthAccessUser}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_access_user' in params:
            path_params['AuthAccessUser'] = params['auth_access_user']

        query_params = {}
        if 'path' in params:
            query_params['path'] = params['path']
        if 'share' in params:
            query_params['share'] = params['share']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'numeric' in params:
            query_params['numeric'] = params['numeric']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthAccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_group(self, auth_group_id, **kwargs):
        """
        
        Retrieve the group information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_group(auth_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth_group_id: Retrieve the group information. (required)
        :param bool cached: If true, only return cached objects.
        :param bool resolve_names: Resolve names of personas.
        :param bool query_member_of: Enumerate all groups that a group is a member of.
        :param str zone: Filter groups by zone.
        :param str provider: Filter groups by provider.
        :return: AuthGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_group_id', 'cached', 'resolve_names', 'query_member_of', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_group" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_group_id' is set
        if ('auth_group_id' not in params) or (params['auth_group_id'] is None):
            raise ValueError("Missing the required parameter `auth_group_id` when calling `get_auth_group`")


        resource_path = '/platform/1/auth/groups/{AuthGroupId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_group_id' in params:
            path_params['AuthGroupId'] = params['auth_group_id']

        query_params = {}
        if 'cached' in params:
            query_params['cached'] = params['cached']
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']
        if 'query_member_of' in params:
            query_params['query_member_of'] = params['query_member_of']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthGroups',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_id(self, **kwargs):
        """
        
        Retrieve the current security token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_id(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AuthId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_id" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/id'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthId',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_ldap_template(self, auth_ldap_template_id, **kwargs):
        """
        
        Retrieve the LDAP provider template.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_ldap_template(auth_ldap_template_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth_ldap_template_id: Retrieve the LDAP provider template. (required)
        :return: AuthLdapTemplates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_ldap_template_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_ldap_template" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_ldap_template_id' is set
        if ('auth_ldap_template_id' not in params) or (params['auth_ldap_template_id'] is None):
            raise ValueError("Missing the required parameter `auth_ldap_template_id` when calling `get_auth_ldap_template`")


        resource_path = '/platform/4/auth/ldap-templates/{AuthLdapTemplateId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_ldap_template_id' in params:
            path_params['AuthLdapTemplateId'] = params['auth_ldap_template_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthLdapTemplates',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_ldap_templates(self, **kwargs):
        """
        
        List all LDAP provider templates.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_ldap_templates(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AuthLdapTemplatesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_ldap_templates" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/4/auth/ldap-templates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthLdapTemplatesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_log_level(self, **kwargs):
        """
        
        Get the current authentications service and netlogon logging level.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_log_level(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AuthLogLevel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_log_level" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/auth/log-level'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthLogLevel',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_netgroup(self, auth_netgroup_id, **kwargs):
        """
        
        Retrieve the user information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_netgroup(auth_netgroup_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth_netgroup_id: Retrieve the user information. (required)
        :param bool ignore_errors: Ignore netgroup errors.
        :param bool recursive: Perform recursive search.
        :param str zone: Filter users by zone.
        :param str provider: Filter users by provider.
        :return: AuthNetgroups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_netgroup_id', 'ignore_errors', 'recursive', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_netgroup" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_netgroup_id' is set
        if ('auth_netgroup_id' not in params) or (params['auth_netgroup_id'] is None):
            raise ValueError("Missing the required parameter `auth_netgroup_id` when calling `get_auth_netgroup`")


        resource_path = '/platform/1/auth/netgroups/{AuthNetgroupId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_netgroup_id' in params:
            path_params['AuthNetgroupId'] = params['auth_netgroup_id']

        query_params = {}
        if 'ignore_errors' in params:
            query_params['ignore_errors'] = params['ignore_errors']
        if 'recursive' in params:
            query_params['recursive'] = params['recursive']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthNetgroups',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_privileges(self, **kwargs):
        """
        
        List all privileges.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_privileges(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AuthPrivileges
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_privileges" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/privileges'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthPrivileges',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_role(self, auth_role_id, **kwargs):
        """
        
        Retrieve the role information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_role(auth_role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth_role_id: Retrieve the role information. (required)
        :param bool resolve_names: Resolve names of personas.
        :return: AuthRoles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_role_id', 'resolve_names']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_role" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_role_id' is set
        if ('auth_role_id' not in params) or (params['auth_role_id'] is None):
            raise ValueError("Missing the required parameter `auth_role_id` when calling `get_auth_role`")


        resource_path = '/platform/1/auth/roles/{AuthRoleId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_role_id' in params:
            path_params['AuthRoleId'] = params['auth_role_id']

        query_params = {}
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthRoles',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_shells(self, **kwargs):
        """
        
        List all shells.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_shells(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AuthShells
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_shells" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/shells'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthShells',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_user(self, auth_user_id, **kwargs):
        """
        
        Retrieve the user information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_user(auth_user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth_user_id: Retrieve the user information. (required)
        :param bool cached: If true, only return cached objects.
        :param bool resolve_names: Resolve names of personas.
        :param bool query_member_of: Enumerate all users that a group is a member of.
        :param str zone: Filter users by zone.
        :param str provider: Filter users by provider.
        :return: AuthUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_user_id', 'cached', 'resolve_names', 'query_member_of', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_user_id' is set
        if ('auth_user_id' not in params) or (params['auth_user_id'] is None):
            raise ValueError("Missing the required parameter `auth_user_id` when calling `get_auth_user`")


        resource_path = '/platform/1/auth/users/{AuthUserId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_user_id' in params:
            path_params['AuthUserId'] = params['auth_user_id']

        query_params = {}
        if 'cached' in params:
            query_params['cached'] = params['cached']
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']
        if 'query_member_of' in params:
            query_params['query_member_of'] = params['query_member_of']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthUsers',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_wellknown(self, auth_wellknown_id, **kwargs):
        """
        
        Retrieve the wellknown persona.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_wellknown(auth_wellknown_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth_wellknown_id: Retrieve the wellknown persona. (required)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: AuthWellknowns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_wellknown_id', 'scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_wellknown" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_wellknown_id' is set
        if ('auth_wellknown_id' not in params) or (params['auth_wellknown_id'] is None):
            raise ValueError("Missing the required parameter `auth_wellknown_id` when calling `get_auth_wellknown`")


        resource_path = '/platform/1/auth/wellknowns/{AuthWellknownId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_wellknown_id' in params:
            path_params['AuthWellknownId'] = params['auth_wellknown_id']

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthWellknowns',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_auth_wellknowns(self, **kwargs):
        """
        
        List all wellknown personas.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_auth_wellknowns(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AuthWellknowns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auth_wellknowns" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/wellknowns'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthWellknowns',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_mapping_dump(self, **kwargs):
        """
        
        Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_mapping_dump(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool nocreate: Idmap should attempt to create missing identity mappings.
        :param str zone: Optional zone.
        :return: MappingDump
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nocreate', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mapping_dump" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/auth/mapping/dump'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'nocreate' in params:
            query_params['nocreate'] = params['nocreate']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MappingDump',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_mapping_identity(self, mapping_identity_id, **kwargs):
        """
        
        Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_mapping_identity(mapping_identity_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mapping_identity_id: Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona. (required)
        :param bool nocreate: Idmap should attempt to create missing identity mappings.
        :param str zone: Optional zone.
        :return: MappingIdentities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mapping_identity_id', 'nocreate', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mapping_identity" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mapping_identity_id' is set
        if ('mapping_identity_id' not in params) or (params['mapping_identity_id'] is None):
            raise ValueError("Missing the required parameter `mapping_identity_id` when calling `get_mapping_identity`")


        resource_path = '/platform/1/auth/mapping/identities/{MappingIdentityId}'.replace('{format}', 'json')
        path_params = {}
        if 'mapping_identity_id' in params:
            path_params['MappingIdentityId'] = params['mapping_identity_id']

        query_params = {}
        if 'nocreate' in params:
            query_params['nocreate'] = params['nocreate']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MappingIdentities',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_mapping_users_lookup(self, **kwargs):
        """
        
        Retrieve the user information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_mapping_users_lookup(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int primary_gid: The user's primary group ID.
        :param int uid: The user ID.
        :param str zone: The zone the user belongs to.
        :param list[int] gid: The IDs of the groups that the user belongs to.
        :param str user: The user name.
        :param str kerberos_principal: The Kerberos principal name, of the form user@realm.
        :return: MappingUsersLookup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['primary_gid', 'uid', 'zone', 'gid', 'user', 'kerberos_principal']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mapping_users_lookup" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/mapping/users/lookup'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'primary_gid' in params:
            query_params['primary_gid'] = params['primary_gid']
        if 'uid' in params:
            query_params['uid'] = params['uid']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'gid' in params:
            query_params['gid'] = params['gid']
        if 'user' in params:
            query_params['user'] = params['user']
        if 'kerberos_principal' in params:
            query_params['kerberos_principal'] = params['kerberos_principal']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MappingUsersLookup',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_mapping_users_rules(self, **kwargs):
        """
        
        Retrieve the user mapping rules.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_mapping_users_rules(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str zone: The zone to which the user mapping applies.
        :return: MappingUsersRules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mapping_users_rules" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/mapping/users/rules'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MappingUsersRules',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_providers_ads_by_id(self, providers_ads_id, **kwargs):
        """
        
        Retrieve the ADS provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_providers_ads_by_id(providers_ads_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_ads_id: Retrieve the ADS provider. (required)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersAds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_ads_id', 'scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_providers_ads_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_ads_id' is set
        if ('providers_ads_id' not in params) or (params['providers_ads_id'] is None):
            raise ValueError("Missing the required parameter `providers_ads_id` when calling `get_providers_ads_by_id`")


        resource_path = '/platform/3/auth/providers/ads/{ProvidersAdsId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_ads_id' in params:
            path_params['ProvidersAdsId'] = params['providers_ads_id']

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersAds',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_providers_file_by_id(self, providers_file_id, **kwargs):
        """
        
        Retrieve the file provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_providers_file_by_id(providers_file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_file_id: Retrieve the file provider. (required)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_file_id', 'scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_providers_file_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_file_id' is set
        if ('providers_file_id' not in params) or (params['providers_file_id'] is None):
            raise ValueError("Missing the required parameter `providers_file_id` when calling `get_providers_file_by_id`")


        resource_path = '/platform/1/auth/providers/file/{ProvidersFileId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_file_id' in params:
            path_params['ProvidersFileId'] = params['providers_file_id']

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersFile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_providers_krb5_by_id(self, providers_krb5_id, **kwargs):
        """
        
        Retrieve the KRB5 provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_providers_krb5_by_id(providers_krb5_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_krb5_id: Retrieve the KRB5 provider. (required)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersKrb5
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_krb5_id', 'scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_providers_krb5_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_krb5_id' is set
        if ('providers_krb5_id' not in params) or (params['providers_krb5_id'] is None):
            raise ValueError("Missing the required parameter `providers_krb5_id` when calling `get_providers_krb5_by_id`")


        resource_path = '/platform/3/auth/providers/krb5/{ProvidersKrb5Id}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_krb5_id' in params:
            path_params['ProvidersKrb5Id'] = params['providers_krb5_id']

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersKrb5',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_providers_ldap_by_id(self, providers_ldap_id, **kwargs):
        """
        
        Retrieve the LDAP provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_providers_ldap_by_id(providers_ldap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_ldap_id: Retrieve the LDAP provider. (required)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_ldap_id', 'scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_providers_ldap_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_ldap_id' is set
        if ('providers_ldap_id' not in params) or (params['providers_ldap_id'] is None):
            raise ValueError("Missing the required parameter `providers_ldap_id` when calling `get_providers_ldap_by_id`")


        resource_path = '/platform/4/auth/providers/ldap/{ProvidersLdapId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_ldap_id' in params:
            path_params['ProvidersLdapId'] = params['providers_ldap_id']

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersLdap',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_providers_local(self, **kwargs):
        """
        
        List all local providers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_providers_local(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersLocal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_providers_local" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/providers/local'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersLocal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_providers_local_by_id(self, providers_local_id, **kwargs):
        """
        
        Retrieve the local provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_providers_local_by_id(providers_local_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_local_id: Retrieve the local provider. (required)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersLocal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_local_id', 'scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_providers_local_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_local_id' is set
        if ('providers_local_id' not in params) or (params['providers_local_id'] is None):
            raise ValueError("Missing the required parameter `providers_local_id` when calling `get_providers_local_by_id`")


        resource_path = '/platform/1/auth/providers/local/{ProvidersLocalId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_local_id' in params:
            path_params['ProvidersLocalId'] = params['providers_local_id']

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersLocal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_providers_nis_by_id(self, providers_nis_id, **kwargs):
        """
        
        Retrieve the NIS provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_providers_nis_by_id(providers_nis_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str providers_nis_id: Retrieve the NIS provider. (required)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersNis
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_nis_id', 'scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_providers_nis_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_nis_id' is set
        if ('providers_nis_id' not in params) or (params['providers_nis_id'] is None):
            raise ValueError("Missing the required parameter `providers_nis_id` when calling `get_providers_nis_by_id`")


        resource_path = '/platform/3/auth/providers/nis/{ProvidersNisId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_nis_id' in params:
            path_params['ProvidersNisId'] = params['providers_nis_id']

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersNis',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_providers_summary(self, **kwargs):
        """
        
        Retrieve the summary information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_providers_summary(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupnet: Filter providers by groupnet.
        :param str zone: Filter providers by zone.
        :return: ProvidersSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupnet', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_providers_summary" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/auth/providers/summary'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'groupnet' in params:
            query_params['groupnet'] = params['groupnet']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersSummary',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_settings_acls(self, **kwargs):
        """
        
        Retrieve the ACL policy settings and preset configurations.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_settings_acls(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str preset: If specified the preset configuration values for all applicable ACL policies are returned.
        :return: SettingsAcls
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['preset']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_acls" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/auth/settings/acls'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'preset' in params:
            query_params['preset'] = params['preset']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingsAcls',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_settings_global(self, **kwargs):
        """
        
        Retrieve the global settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_settings_global(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :param str zone: Zone which contains any per-zone settings.
        :return: SettingsGlobal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_global" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/settings/global'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingsGlobal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_settings_krb5_defaults(self, **kwargs):
        """
        
        Retrieve the krb5 settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_settings_krb5_defaults(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SettingsKrb5Defaults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_krb5_defaults" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/settings/krb5/defaults'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingsKrb5Defaults',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_settings_krb5_domain(self, settings_krb5_domain_id, **kwargs):
        """
        
        View the krb5 domain settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_settings_krb5_domain(settings_krb5_domain_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str settings_krb5_domain_id: View the krb5 domain settings. (required)
        :return: SettingsKrb5Domains
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_krb5_domain_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_krb5_domain" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_krb5_domain_id' is set
        if ('settings_krb5_domain_id' not in params) or (params['settings_krb5_domain_id'] is None):
            raise ValueError("Missing the required parameter `settings_krb5_domain_id` when calling `get_settings_krb5_domain`")


        resource_path = '/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_krb5_domain_id' in params:
            path_params['SettingsKrb5DomainId'] = params['settings_krb5_domain_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingsKrb5Domains',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_settings_krb5_realm(self, settings_krb5_realm_id, **kwargs):
        """
        
        Retrieve the krb5 settings for realms.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_settings_krb5_realm(settings_krb5_realm_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str settings_krb5_realm_id: Retrieve the krb5 settings for realms. (required)
        :return: SettingsKrb5Realms
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_krb5_realm_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_krb5_realm" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_krb5_realm_id' is set
        if ('settings_krb5_realm_id' not in params) or (params['settings_krb5_realm_id'] is None):
            raise ValueError("Missing the required parameter `settings_krb5_realm_id` when calling `get_settings_krb5_realm`")


        resource_path = '/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_krb5_realm_id' in params:
            path_params['SettingsKrb5RealmId'] = params['settings_krb5_realm_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingsKrb5Realms',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_settings_mapping(self, **kwargs):
        """
        
        Retrieve the mapping settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_settings_mapping(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :param str zone: Access zone which contains mapping settings.
        :return: SettingsMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_mapping" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/settings/mapping'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingsMapping',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_auth_groups(self, **kwargs):
        """
        
        List all groups.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_auth_groups(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str domain: Filter groups by domain.
        :param str zone: Filter groups by zone.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param bool cached: If true, only return cached objects.
        :param bool resolve_names: Resolve names of personas.
        :param str filter: Filter groups by name prefix.
        :param int limit: Return no more than this many results at once (see resume).
        :param str provider: Filter groups by provider.
        :param bool query_member_of: Enumerate all groups that a group is a member of.
        :return: AuthGroupsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'zone', 'resume', 'cached', 'resolve_names', 'filter', 'limit', 'provider', 'query_member_of']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_auth_groups" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] > 4.294967295E9: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_auth_groups`, must be a value less than or equal to  `4.294967295E9`")
        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_auth_groups`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/auth/groups'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'domain' in params:
            query_params['domain'] = params['domain']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'cached' in params:
            query_params['cached'] = params['cached']
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'provider' in params:
            query_params['provider'] = params['provider']
        if 'query_member_of' in params:
            query_params['query_member_of'] = params['query_member_of']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthGroupsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_auth_roles(self, **kwargs):
        """
        
        List all roles.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_auth_roles(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: The field that will be used for sorting.
        :param bool resolve_names: Filter users by zone.
        :param int limit: Return no more than this many results at once (see resume).
        :param str dir: The direction of the sort.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: AuthRolesExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'resolve_names', 'limit', 'dir', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_auth_roles" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] > 4.294967295E9: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_auth_roles`, must be a value less than or equal to  `4.294967295E9`")
        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_auth_roles`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/auth/roles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'dir' in params:
            query_params['dir'] = params['dir']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthRolesExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_auth_users(self, **kwargs):
        """
        
        List all users.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_auth_users(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str domain: Filter users by domain.
        :param str zone: Filter users by zone.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param bool cached: If true, only return cached objects.
        :param bool resolve_names: Resolve names of personas.
        :param str filter: Filter users by name prefix.
        :param int limit: Return no more than this many results at once (see resume).
        :param str provider: Filter users by provider.
        :param bool query_member_of: Enumerate all users that a group is a member of.
        :return: AuthUsersExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'zone', 'resume', 'cached', 'resolve_names', 'filter', 'limit', 'provider', 'query_member_of']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_auth_users" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] > 4.294967295E9: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_auth_users`, must be a value less than or equal to  `4.294967295E9`")
        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_auth_users`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/auth/users'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'domain' in params:
            query_params['domain'] = params['domain']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'resume' in params:
            query_params['resume'] = params['resume']
        if 'cached' in params:
            query_params['cached'] = params['cached']
        if 'resolve_names' in params:
            query_params['resolve_names'] = params['resolve_names']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'provider' in params:
            query_params['provider'] = params['provider']
        if 'query_member_of' in params:
            query_params['query_member_of'] = params['query_member_of']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthUsersExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_providers_ads(self, **kwargs):
        """
        
        List all ADS providers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_providers_ads(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersAdsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_providers_ads" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/auth/providers/ads'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersAdsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_providers_file(self, **kwargs):
        """
        
        List all file providers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_providers_file(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_providers_file" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/providers/file'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersFile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_providers_krb5(self, **kwargs):
        """
        
        List all KRB5 providers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_providers_krb5(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersKrb5Extended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_providers_krb5" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/auth/providers/krb5'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersKrb5Extended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_providers_ldap(self, **kwargs):
        """
        
        List all LDAP providers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_providers_ldap(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersLdap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_providers_ldap" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/4/auth/providers/ldap'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersLdap',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_providers_nis(self, **kwargs):
        """
        
        List all NIS providers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_providers_nis(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: If specified as \"effective\" or not specified, all fields are returned.  If specified as \"user\", only fields with non-default values are shown.  If specified as \"default\", the original values are returned.
        :return: ProvidersNisExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_providers_nis" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/auth/providers/nis'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'scope' in params:
            query_params['scope'] = params['scope']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProvidersNisExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_settings_krb5_domains(self, **kwargs):
        """
        
        Retrieve the krb5 settings for domains.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_settings_krb5_domains(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SettingsKrb5Domains
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_settings_krb5_domains" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/settings/krb5/domains'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingsKrb5Domains',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_settings_krb5_realms(self, **kwargs):
        """
        
        Retrieve the krb5 settings for realms.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_settings_krb5_realms(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SettingsKrb5Realms
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_settings_krb5_realms" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/auth/settings/krb5/realms'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingsKrb5Realms',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_auth_group(self, auth_group, auth_group_id, **kwargs):
        """
        
        Modify the group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_auth_group(auth_group, auth_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthGroup auth_group:  (required)
        :param str auth_group_id: Modify the group. (required)
        :param bool force: Changes to the group ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for group ID changes.
        :param str zone: Optional zone.
        :param str provider: Optional provider type.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_group', 'auth_group_id', 'force', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_auth_group" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_group' is set
        if ('auth_group' not in params) or (params['auth_group'] is None):
            raise ValueError("Missing the required parameter `auth_group` when calling `update_auth_group`")
        # verify the required parameter 'auth_group_id' is set
        if ('auth_group_id' not in params) or (params['auth_group_id'] is None):
            raise ValueError("Missing the required parameter `auth_group_id` when calling `update_auth_group`")


        resource_path = '/platform/1/auth/groups/{AuthGroupId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_group_id' in params:
            path_params['AuthGroupId'] = params['auth_group_id']

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_group' in params:
            body_params = params['auth_group']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_auth_log_level(self, auth_log_level, **kwargs):
        """
        
        Set the current authentication service and netlogon logging level.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_auth_log_level(auth_log_level, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthLogLevelExtended auth_log_level:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_log_level']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_auth_log_level" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_log_level' is set
        if ('auth_log_level' not in params) or (params['auth_log_level'] is None):
            raise ValueError("Missing the required parameter `auth_log_level` when calling `update_auth_log_level`")


        resource_path = '/platform/3/auth/log-level'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_log_level' in params:
            body_params = params['auth_log_level']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_auth_role(self, auth_role, auth_role_id, **kwargs):
        """
        
        Modify the role.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_auth_role(auth_role, auth_role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthRole auth_role:  (required)
        :param str auth_role_id: Modify the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_role', 'auth_role_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_auth_role" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_role' is set
        if ('auth_role' not in params) or (params['auth_role'] is None):
            raise ValueError("Missing the required parameter `auth_role` when calling `update_auth_role`")
        # verify the required parameter 'auth_role_id' is set
        if ('auth_role_id' not in params) or (params['auth_role_id'] is None):
            raise ValueError("Missing the required parameter `auth_role_id` when calling `update_auth_role`")


        resource_path = '/platform/1/auth/roles/{AuthRoleId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_role_id' in params:
            path_params['AuthRoleId'] = params['auth_role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_role' in params:
            body_params = params['auth_role']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_auth_user(self, auth_user, auth_user_id, **kwargs):
        """
        
        Modify the user.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_auth_user(auth_user, auth_user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthUser auth_user:  (required)
        :param str auth_user_id: Modify the user. (required)
        :param bool force: Changes to the user ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for user ID changes.
        :param str zone: Optional zone.
        :param str provider: Optional provider type.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_user', 'auth_user_id', 'force', 'zone', 'provider']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_auth_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'auth_user' is set
        if ('auth_user' not in params) or (params['auth_user'] is None):
            raise ValueError("Missing the required parameter `auth_user` when calling `update_auth_user`")
        # verify the required parameter 'auth_user_id' is set
        if ('auth_user_id' not in params) or (params['auth_user_id'] is None):
            raise ValueError("Missing the required parameter `auth_user_id` when calling `update_auth_user`")


        resource_path = '/platform/1/auth/users/{AuthUserId}'.replace('{format}', 'json')
        path_params = {}
        if 'auth_user_id' in params:
            path_params['AuthUserId'] = params['auth_user_id']

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'provider' in params:
            query_params['provider'] = params['provider']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_user' in params:
            body_params = params['auth_user']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_mapping_import(self, mapping_import, **kwargs):
        """
        
        Set or update a list of mappings between two personae.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_mapping_import(mapping_import, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MappingImport mapping_import:  (required)
        :param str zone: Optional zone.
        :param bool replace: Specify whether existing mappings should be replaced. The default behavior is to leave existing mappings intact and return an error.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mapping_import', 'zone', 'replace']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_mapping_import" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mapping_import' is set
        if ('mapping_import' not in params) or (params['mapping_import'] is None):
            raise ValueError("Missing the required parameter `mapping_import` when calling `update_mapping_import`")


        resource_path = '/platform/3/auth/mapping/import'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']
        if 'replace' in params:
            query_params['replace'] = params['replace']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mapping_import' in params:
            body_params = params['mapping_import']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_mapping_users_rules(self, mapping_users_rules, **kwargs):
        """
        
        Modify the user mapping rules.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_mapping_users_rules(mapping_users_rules, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MappingUsersRulesExtended mapping_users_rules:  (required)
        :param str zone: The zone to which the user mapping applies.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mapping_users_rules', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_mapping_users_rules" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'mapping_users_rules' is set
        if ('mapping_users_rules' not in params) or (params['mapping_users_rules'] is None):
            raise ValueError("Missing the required parameter `mapping_users_rules` when calling `update_mapping_users_rules`")


        resource_path = '/platform/1/auth/mapping/users/rules'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mapping_users_rules' in params:
            body_params = params['mapping_users_rules']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_providers_ads_by_id(self, providers_ads_id_params, providers_ads_id, **kwargs):
        """
        
        Modify the ADS provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_providers_ads_by_id(providers_ads_id_params, providers_ads_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProvidersAdsIdParams providers_ads_id_params:  (required)
        :param str providers_ads_id: Modify the ADS provider. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_ads_id_params', 'providers_ads_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_providers_ads_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_ads_id_params' is set
        if ('providers_ads_id_params' not in params) or (params['providers_ads_id_params'] is None):
            raise ValueError("Missing the required parameter `providers_ads_id_params` when calling `update_providers_ads_by_id`")
        # verify the required parameter 'providers_ads_id' is set
        if ('providers_ads_id' not in params) or (params['providers_ads_id'] is None):
            raise ValueError("Missing the required parameter `providers_ads_id` when calling `update_providers_ads_by_id`")


        resource_path = '/platform/3/auth/providers/ads/{ProvidersAdsId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_ads_id' in params:
            path_params['ProvidersAdsId'] = params['providers_ads_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'providers_ads_id_params' in params:
            body_params = params['providers_ads_id_params']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_providers_file_by_id(self, providers_file_id_params, providers_file_id, **kwargs):
        """
        
        Modify the file provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_providers_file_by_id(providers_file_id_params, providers_file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProvidersFileIdParams providers_file_id_params:  (required)
        :param str providers_file_id: Modify the file provider. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_file_id_params', 'providers_file_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_providers_file_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_file_id_params' is set
        if ('providers_file_id_params' not in params) or (params['providers_file_id_params'] is None):
            raise ValueError("Missing the required parameter `providers_file_id_params` when calling `update_providers_file_by_id`")
        # verify the required parameter 'providers_file_id' is set
        if ('providers_file_id' not in params) or (params['providers_file_id'] is None):
            raise ValueError("Missing the required parameter `providers_file_id` when calling `update_providers_file_by_id`")


        resource_path = '/platform/1/auth/providers/file/{ProvidersFileId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_file_id' in params:
            path_params['ProvidersFileId'] = params['providers_file_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'providers_file_id_params' in params:
            body_params = params['providers_file_id_params']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_providers_krb5_by_id(self, providers_krb5_id_params, providers_krb5_id, **kwargs):
        """
        
        Modify the KRB5 provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_providers_krb5_by_id(providers_krb5_id_params, providers_krb5_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProvidersKrb5IdParams providers_krb5_id_params:  (required)
        :param str providers_krb5_id: Modify the KRB5 provider. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_krb5_id_params', 'providers_krb5_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_providers_krb5_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_krb5_id_params' is set
        if ('providers_krb5_id_params' not in params) or (params['providers_krb5_id_params'] is None):
            raise ValueError("Missing the required parameter `providers_krb5_id_params` when calling `update_providers_krb5_by_id`")
        # verify the required parameter 'providers_krb5_id' is set
        if ('providers_krb5_id' not in params) or (params['providers_krb5_id'] is None):
            raise ValueError("Missing the required parameter `providers_krb5_id` when calling `update_providers_krb5_by_id`")


        resource_path = '/platform/3/auth/providers/krb5/{ProvidersKrb5Id}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_krb5_id' in params:
            path_params['ProvidersKrb5Id'] = params['providers_krb5_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'providers_krb5_id_params' in params:
            body_params = params['providers_krb5_id_params']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_providers_ldap_by_id(self, providers_ldap_id_params, providers_ldap_id, **kwargs):
        """
        
        Modify the LDAP provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_providers_ldap_by_id(providers_ldap_id_params, providers_ldap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProvidersLdapIdParams providers_ldap_id_params:  (required)
        :param str providers_ldap_id: Modify the LDAP provider. (required)
        :param bool force: Ignore unresolvable server URIs.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_ldap_id_params', 'providers_ldap_id', 'force']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_providers_ldap_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_ldap_id_params' is set
        if ('providers_ldap_id_params' not in params) or (params['providers_ldap_id_params'] is None):
            raise ValueError("Missing the required parameter `providers_ldap_id_params` when calling `update_providers_ldap_by_id`")
        # verify the required parameter 'providers_ldap_id' is set
        if ('providers_ldap_id' not in params) or (params['providers_ldap_id'] is None):
            raise ValueError("Missing the required parameter `providers_ldap_id` when calling `update_providers_ldap_by_id`")


        resource_path = '/platform/4/auth/providers/ldap/{ProvidersLdapId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_ldap_id' in params:
            path_params['ProvidersLdapId'] = params['providers_ldap_id']

        query_params = {}
        if 'force' in params:
            query_params['force'] = params['force']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'providers_ldap_id_params' in params:
            body_params = params['providers_ldap_id_params']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_providers_local_by_id(self, providers_local_id_params, providers_local_id, **kwargs):
        """
        
        Modify the local provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_providers_local_by_id(providers_local_id_params, providers_local_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProvidersLocalIdParams providers_local_id_params:  (required)
        :param str providers_local_id: Modify the local provider. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_local_id_params', 'providers_local_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_providers_local_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_local_id_params' is set
        if ('providers_local_id_params' not in params) or (params['providers_local_id_params'] is None):
            raise ValueError("Missing the required parameter `providers_local_id_params` when calling `update_providers_local_by_id`")
        # verify the required parameter 'providers_local_id' is set
        if ('providers_local_id' not in params) or (params['providers_local_id'] is None):
            raise ValueError("Missing the required parameter `providers_local_id` when calling `update_providers_local_by_id`")


        resource_path = '/platform/1/auth/providers/local/{ProvidersLocalId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_local_id' in params:
            path_params['ProvidersLocalId'] = params['providers_local_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'providers_local_id_params' in params:
            body_params = params['providers_local_id_params']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_providers_nis_by_id(self, providers_nis_id_params, providers_nis_id, **kwargs):
        """
        
        Modify the NIS provider.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_providers_nis_by_id(providers_nis_id_params, providers_nis_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProvidersNisIdParams providers_nis_id_params:  (required)
        :param str providers_nis_id: Modify the NIS provider. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['providers_nis_id_params', 'providers_nis_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_providers_nis_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'providers_nis_id_params' is set
        if ('providers_nis_id_params' not in params) or (params['providers_nis_id_params'] is None):
            raise ValueError("Missing the required parameter `providers_nis_id_params` when calling `update_providers_nis_by_id`")
        # verify the required parameter 'providers_nis_id' is set
        if ('providers_nis_id' not in params) or (params['providers_nis_id'] is None):
            raise ValueError("Missing the required parameter `providers_nis_id` when calling `update_providers_nis_by_id`")


        resource_path = '/platform/3/auth/providers/nis/{ProvidersNisId}'.replace('{format}', 'json')
        path_params = {}
        if 'providers_nis_id' in params:
            path_params['ProvidersNisId'] = params['providers_nis_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'providers_nis_id_params' in params:
            body_params = params['providers_nis_id_params']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_settings_acls(self, settings_acls, **kwargs):
        """
        
        Modify cluster ACL policy settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_settings_acls(settings_acls, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsAclsAclPolicySettings settings_acls:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_acls']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_settings_acls" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_acls' is set
        if ('settings_acls' not in params) or (params['settings_acls'] is None):
            raise ValueError("Missing the required parameter `settings_acls` when calling `update_settings_acls`")


        resource_path = '/platform/3/auth/settings/acls'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_acls' in params:
            body_params = params['settings_acls']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_settings_global(self, settings_global, **kwargs):
        """
        
        Modify the global settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_settings_global(settings_global, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsGlobalGlobalSettings settings_global:  (required)
        :param str zone: Zone which contains any per-zone settings.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_global', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_settings_global" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_global' is set
        if ('settings_global' not in params) or (params['settings_global'] is None):
            raise ValueError("Missing the required parameter `settings_global` when calling `update_settings_global`")


        resource_path = '/platform/1/auth/settings/global'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_global' in params:
            body_params = params['settings_global']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_settings_krb5_defaults(self, settings_krb5_defaults, **kwargs):
        """
        
        Modify the krb5 settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_settings_krb5_defaults(settings_krb5_defaults, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsKrb5DefaultsKrb5Settings settings_krb5_defaults:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_krb5_defaults']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_settings_krb5_defaults" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_krb5_defaults' is set
        if ('settings_krb5_defaults' not in params) or (params['settings_krb5_defaults'] is None):
            raise ValueError("Missing the required parameter `settings_krb5_defaults` when calling `update_settings_krb5_defaults`")


        resource_path = '/platform/1/auth/settings/krb5/defaults'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_krb5_defaults' in params:
            body_params = params['settings_krb5_defaults']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_settings_krb5_domain(self, settings_krb5_domain, settings_krb5_domain_id, **kwargs):
        """
        
        Modify the krb5 domain settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_settings_krb5_domain(settings_krb5_domain, settings_krb5_domain_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsKrb5Domain settings_krb5_domain:  (required)
        :param str settings_krb5_domain_id: Modify the krb5 domain settings. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_krb5_domain', 'settings_krb5_domain_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_settings_krb5_domain" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_krb5_domain' is set
        if ('settings_krb5_domain' not in params) or (params['settings_krb5_domain'] is None):
            raise ValueError("Missing the required parameter `settings_krb5_domain` when calling `update_settings_krb5_domain`")
        # verify the required parameter 'settings_krb5_domain_id' is set
        if ('settings_krb5_domain_id' not in params) or (params['settings_krb5_domain_id'] is None):
            raise ValueError("Missing the required parameter `settings_krb5_domain_id` when calling `update_settings_krb5_domain`")


        resource_path = '/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_krb5_domain_id' in params:
            path_params['SettingsKrb5DomainId'] = params['settings_krb5_domain_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_krb5_domain' in params:
            body_params = params['settings_krb5_domain']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_settings_krb5_realm(self, settings_krb5_realm, settings_krb5_realm_id, **kwargs):
        """
        
        Modify the krb5 realm settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_settings_krb5_realm(settings_krb5_realm, settings_krb5_realm_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsKrb5Realm settings_krb5_realm:  (required)
        :param str settings_krb5_realm_id: Modify the krb5 realm settings. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_krb5_realm', 'settings_krb5_realm_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_settings_krb5_realm" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_krb5_realm' is set
        if ('settings_krb5_realm' not in params) or (params['settings_krb5_realm'] is None):
            raise ValueError("Missing the required parameter `settings_krb5_realm` when calling `update_settings_krb5_realm`")
        # verify the required parameter 'settings_krb5_realm_id' is set
        if ('settings_krb5_realm_id' not in params) or (params['settings_krb5_realm_id'] is None):
            raise ValueError("Missing the required parameter `settings_krb5_realm_id` when calling `update_settings_krb5_realm`")


        resource_path = '/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}'.replace('{format}', 'json')
        path_params = {}
        if 'settings_krb5_realm_id' in params:
            path_params['SettingsKrb5RealmId'] = params['settings_krb5_realm_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_krb5_realm' in params:
            body_params = params['settings_krb5_realm']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_settings_mapping(self, settings_mapping, **kwargs):
        """
        
        Modify the mapping settings.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_settings_mapping(settings_mapping, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsMappingMappingSettings settings_mapping:  (required)
        :param str zone: Access zone which contains mapping settings.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_mapping', 'zone']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_settings_mapping" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'settings_mapping' is set
        if ('settings_mapping' not in params) or (params['settings_mapping'] is None):
            raise ValueError("Missing the required parameter `settings_mapping` when calling `update_settings_mapping`")


        resource_path = '/platform/1/auth/settings/mapping'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'zone' in params:
            query_params['zone'] = params['zone']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_mapping' in params:
            body_params = params['settings_mapping']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
