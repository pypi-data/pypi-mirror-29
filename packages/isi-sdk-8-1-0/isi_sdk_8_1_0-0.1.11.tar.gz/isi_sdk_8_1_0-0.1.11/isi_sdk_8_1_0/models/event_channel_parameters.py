# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class EventChannelParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EventChannelParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'list[str]',
            'batch': 'str',
            'batch_period': 'int',
            'custom_template': 'str',
            'send_as': 'str',
            'smtp_host': 'str',
            'smtp_password': 'str',
            'smtp_port': 'int',
            'smtp_security': 'str',
            'smtp_use_auth': 'bool',
            'smtp_username': 'str',
            'subject': 'str'
        }

        self.attribute_map = {
            'address': 'address',
            'batch': 'batch',
            'batch_period': 'batch_period',
            'custom_template': 'custom_template',
            'send_as': 'send_as',
            'smtp_host': 'smtp_host',
            'smtp_password': 'smtp_password',
            'smtp_port': 'smtp_port',
            'smtp_security': 'smtp_security',
            'smtp_use_auth': 'smtp_use_auth',
            'smtp_username': 'smtp_username',
            'subject': 'subject'
        }

        self._address = None
        self._batch = None
        self._batch_period = None
        self._custom_template = None
        self._send_as = None
        self._smtp_host = None
        self._smtp_password = None
        self._smtp_port = None
        self._smtp_security = None
        self._smtp_use_auth = None
        self._smtp_username = None
        self._subject = None

    @property
    def address(self):
        """
        Gets the address of this EventChannelParameters.
        Email addresses to send to.

        :return: The address of this EventChannelParameters.
        :rtype: list[str]
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this EventChannelParameters.
        Email addresses to send to.

        :param address: The address of this EventChannelParameters.
        :type: list[str]
        """
        
        self._address = address

    @property
    def batch(self):
        """
        Gets the batch of this EventChannelParameters.
        Batching criterion.

        :return: The batch of this EventChannelParameters.
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """
        Sets the batch of this EventChannelParameters.
        Batching criterion.

        :param batch: The batch of this EventChannelParameters.
        :type: str
        """
        allowed_values = ["NONE", "ALL", "CATEGORY", "SEVERITY"]
        if batch is not None and batch not in allowed_values:
            raise ValueError(
                "Invalid value for `batch`, must be one of {0}"
                .format(allowed_values)
            )

        self._batch = batch

    @property
    def batch_period(self):
        """
        Gets the batch_period of this EventChannelParameters.
        Period over which batching is to be performed.

        :return: The batch_period of this EventChannelParameters.
        :rtype: int
        """
        return self._batch_period

    @batch_period.setter
    def batch_period(self, batch_period):
        """
        Sets the batch_period of this EventChannelParameters.
        Period over which batching is to be performed.

        :param batch_period: The batch_period of this EventChannelParameters.
        :type: int
        """
        
        self._batch_period = batch_period

    @property
    def custom_template(self):
        """
        Gets the custom_template of this EventChannelParameters.
        Path to custom notification template.

        :return: The custom_template of this EventChannelParameters.
        :rtype: str
        """
        return self._custom_template

    @custom_template.setter
    def custom_template(self, custom_template):
        """
        Sets the custom_template of this EventChannelParameters.
        Path to custom notification template.

        :param custom_template: The custom_template of this EventChannelParameters.
        :type: str
        """
        
        self._custom_template = custom_template

    @property
    def send_as(self):
        """
        Gets the send_as of this EventChannelParameters.
        Email address to use as from.

        :return: The send_as of this EventChannelParameters.
        :rtype: str
        """
        return self._send_as

    @send_as.setter
    def send_as(self, send_as):
        """
        Sets the send_as of this EventChannelParameters.
        Email address to use as from.

        :param send_as: The send_as of this EventChannelParameters.
        :type: str
        """
        
        self._send_as = send_as

    @property
    def smtp_host(self):
        """
        Gets the smtp_host of this EventChannelParameters.
        SMTP relay host.

        :return: The smtp_host of this EventChannelParameters.
        :rtype: str
        """
        return self._smtp_host

    @smtp_host.setter
    def smtp_host(self, smtp_host):
        """
        Sets the smtp_host of this EventChannelParameters.
        SMTP relay host.

        :param smtp_host: The smtp_host of this EventChannelParameters.
        :type: str
        """
        
        self._smtp_host = smtp_host

    @property
    def smtp_password(self):
        """
        Gets the smtp_password of this EventChannelParameters.
        Password for SMTP authentication - only if smtp_use_auth true.

        :return: The smtp_password of this EventChannelParameters.
        :rtype: str
        """
        return self._smtp_password

    @smtp_password.setter
    def smtp_password(self, smtp_password):
        """
        Sets the smtp_password of this EventChannelParameters.
        Password for SMTP authentication - only if smtp_use_auth true.

        :param smtp_password: The smtp_password of this EventChannelParameters.
        :type: str
        """
        
        self._smtp_password = smtp_password

    @property
    def smtp_port(self):
        """
        Gets the smtp_port of this EventChannelParameters.
        SMTP relay port - optional defaults to 25.

        :return: The smtp_port of this EventChannelParameters.
        :rtype: int
        """
        return self._smtp_port

    @smtp_port.setter
    def smtp_port(self, smtp_port):
        """
        Sets the smtp_port of this EventChannelParameters.
        SMTP relay port - optional defaults to 25.

        :param smtp_port: The smtp_port of this EventChannelParameters.
        :type: int
        """
        
        self._smtp_port = smtp_port

    @property
    def smtp_security(self):
        """
        Gets the smtp_security of this EventChannelParameters.
        Encryption protocol to use for SMTP.

        :return: The smtp_security of this EventChannelParameters.
        :rtype: str
        """
        return self._smtp_security

    @smtp_security.setter
    def smtp_security(self, smtp_security):
        """
        Sets the smtp_security of this EventChannelParameters.
        Encryption protocol to use for SMTP.

        :param smtp_security: The smtp_security of this EventChannelParameters.
        :type: str
        """
        allowed_values = ["NONE", "STARTTLS"]
        if smtp_security is not None and smtp_security not in allowed_values:
            raise ValueError(
                "Invalid value for `smtp_security`, must be one of {0}"
                .format(allowed_values)
            )

        self._smtp_security = smtp_security

    @property
    def smtp_use_auth(self):
        """
        Gets the smtp_use_auth of this EventChannelParameters.
        Use SMTP authentication - optional defaulst to false.

        :return: The smtp_use_auth of this EventChannelParameters.
        :rtype: bool
        """
        return self._smtp_use_auth

    @smtp_use_auth.setter
    def smtp_use_auth(self, smtp_use_auth):
        """
        Sets the smtp_use_auth of this EventChannelParameters.
        Use SMTP authentication - optional defaulst to false.

        :param smtp_use_auth: The smtp_use_auth of this EventChannelParameters.
        :type: bool
        """
        
        self._smtp_use_auth = smtp_use_auth

    @property
    def smtp_username(self):
        """
        Gets the smtp_username of this EventChannelParameters.
        Username for SMTP authentication - only if smtp_use_auth true.

        :return: The smtp_username of this EventChannelParameters.
        :rtype: str
        """
        return self._smtp_username

    @smtp_username.setter
    def smtp_username(self, smtp_username):
        """
        Sets the smtp_username of this EventChannelParameters.
        Username for SMTP authentication - only if smtp_use_auth true.

        :param smtp_username: The smtp_username of this EventChannelParameters.
        :type: str
        """
        
        self._smtp_username = smtp_username

    @property
    def subject(self):
        """
        Gets the subject of this EventChannelParameters.
        Subject for emails.

        :return: The subject of this EventChannelParameters.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this EventChannelParameters.
        Subject for emails.

        :param subject: The subject of this EventChannelParameters.
        :type: str
        """
        
        self._subject = subject

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

