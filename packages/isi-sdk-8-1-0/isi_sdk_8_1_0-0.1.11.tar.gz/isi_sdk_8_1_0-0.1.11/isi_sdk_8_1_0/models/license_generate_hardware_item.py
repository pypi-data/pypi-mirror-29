# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class LicenseGenerateHardwareItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LicenseGenerateHardwareItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'drive_capacity': 'int',
            'node_count': 'int',
            'nodes_with_seds_count': 'int',
            'tier': 'str'
        }

        self.attribute_map = {
            'drive_capacity': 'drive_capacity',
            'node_count': 'node_count',
            'nodes_with_seds_count': 'nodes_with_seds_count',
            'tier': 'tier'
        }

        self._drive_capacity = None
        self._node_count = None
        self._nodes_with_seds_count = None
        self._tier = None

    @property
    def drive_capacity(self):
        """
        Gets the drive_capacity of this LicenseGenerateHardwareItem.
        Licensed terabyte (TB, 10^12 bytes) drive capacity allocated as storage associated with tier. Included if tier is not NONINF and license is not a base only license.

        :return: The drive_capacity of this LicenseGenerateHardwareItem.
        :rtype: int
        """
        return self._drive_capacity

    @drive_capacity.setter
    def drive_capacity(self, drive_capacity):
        """
        Sets the drive_capacity of this LicenseGenerateHardwareItem.
        Licensed terabyte (TB, 10^12 bytes) drive capacity allocated as storage associated with tier. Included if tier is not NONINF and license is not a base only license.

        :param drive_capacity: The drive_capacity of this LicenseGenerateHardwareItem.
        :type: int
        """
        
        if drive_capacity is not None  and drive_capacity > 2.147483647E9:
            raise ValueError("Invalid value for `drive_capacity`, must be a value less than or equal to `2.147483647E9`")
        if drive_capacity is not None and drive_capacity < 0.0:
            raise ValueError("Invalid value for `drive_capacity`, must be a value greater than or equal to `0.0`")

        self._drive_capacity = drive_capacity

    @property
    def node_count(self):
        """
        Gets the node_count of this LicenseGenerateHardwareItem.
        Licensed number of nodes in this tier.

        :return: The node_count of this LicenseGenerateHardwareItem.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """
        Sets the node_count of this LicenseGenerateHardwareItem.
        Licensed number of nodes in this tier.

        :param node_count: The node_count of this LicenseGenerateHardwareItem.
        :type: int
        """
        
        if node_count is not None  and node_count > 2.147483647E9:
            raise ValueError("Invalid value for `node_count`, must be a value less than or equal to `2.147483647E9`")
        if node_count is not None and node_count < 0.0:
            raise ValueError("Invalid value for `node_count`, must be a value greater than or equal to `0.0`")

        self._node_count = node_count

    @property
    def nodes_with_seds_count(self):
        """
        Gets the nodes_with_seds_count of this LicenseGenerateHardwareItem.
        Licensed number of nodes of this tier that contain self-encrypting drives. Included only if license is ONEFS and tier is not NONINF.

        :return: The nodes_with_seds_count of this LicenseGenerateHardwareItem.
        :rtype: int
        """
        return self._nodes_with_seds_count

    @nodes_with_seds_count.setter
    def nodes_with_seds_count(self, nodes_with_seds_count):
        """
        Sets the nodes_with_seds_count of this LicenseGenerateHardwareItem.
        Licensed number of nodes of this tier that contain self-encrypting drives. Included only if license is ONEFS and tier is not NONINF.

        :param nodes_with_seds_count: The nodes_with_seds_count of this LicenseGenerateHardwareItem.
        :type: int
        """
        
        if nodes_with_seds_count is not None  and nodes_with_seds_count > 2.147483647E9:
            raise ValueError("Invalid value for `nodes_with_seds_count`, must be a value less than or equal to `2.147483647E9`")
        if nodes_with_seds_count is not None and nodes_with_seds_count < 0.0:
            raise ValueError("Invalid value for `nodes_with_seds_count`, must be a value greater than or equal to `0.0`")

        self._nodes_with_seds_count = nodes_with_seds_count

    @property
    def tier(self):
        """
        Gets the tier of this LicenseGenerateHardwareItem.
        OneFS hardware tier. Tier is a number, NONINF, or NO_TIER. NONINF indicates a non infinity tier. NO_TIER indicates a license that is not tier based.

        :return: The tier of this LicenseGenerateHardwareItem.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """
        Sets the tier of this LicenseGenerateHardwareItem.
        OneFS hardware tier. Tier is a number, NONINF, or NO_TIER. NONINF indicates a non infinity tier. NO_TIER indicates a license that is not tier based.

        :param tier: The tier of this LicenseGenerateHardwareItem.
        :type: str
        """
        
        if tier is not None and len(tier) > 50: 
            raise ValueError("Invalid value for `tier`, length must be less than `50`")
        if tier is not None and len(tier) < 1:
            raise ValueError("Invalid value for `tier`, length must be greater than or equal to `1`")
        if tier is not None and not re.search('^NONINF$|^NO_TIER$|^\\d+$', tier):
            raise ValueError("Invalid value for `tier`, must be a follow pattern or equal to `/^NONINF$|^NO_TIER$|^\\d+$/`")

        self._tier = tier

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

