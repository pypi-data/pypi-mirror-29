# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class DiagnosticsNetloggerSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DiagnosticsNetloggerSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'clients': 'str',
            'count': 'int',
            'duration': 'int',
            'interfaces': 'str',
            'nodelist': 'str',
            'ports': 'str',
            'protocols': 'str',
            'snaplength': 'int'
        }

        self.attribute_map = {
            'clients': 'clients',
            'count': 'count',
            'duration': 'duration',
            'interfaces': 'interfaces',
            'nodelist': 'nodelist',
            'ports': 'ports',
            'protocols': 'protocols',
            'snaplength': 'snaplength'
        }

        self._clients = None
        self._count = None
        self._duration = None
        self._interfaces = None
        self._nodelist = None
        self._ports = None
        self._protocols = None
        self._snaplength = None

    @property
    def clients(self):
        """
        Gets the clients of this DiagnosticsNetloggerSettings.
        IP Addresses or host names of clients

        :return: The clients of this DiagnosticsNetloggerSettings.
        :rtype: str
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """
        Sets the clients of this DiagnosticsNetloggerSettings.
        IP Addresses or host names of clients

        :param clients: The clients of this DiagnosticsNetloggerSettings.
        :type: str
        """
        
        self._clients = clients

    @property
    def count(self):
        """
        Gets the count of this DiagnosticsNetloggerSettings.
        Count of capture files to keep, 0 is infinite.

        :return: The count of this DiagnosticsNetloggerSettings.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this DiagnosticsNetloggerSettings.
        Count of capture files to keep, 0 is infinite.

        :param count: The count of this DiagnosticsNetloggerSettings.
        :type: int
        """
        
        if count is not None  and count > 1024.0:
            raise ValueError("Invalid value for `count`, must be a value less than or equal to `1024.0`")
        if count is not None and count < 0.0:
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `0.0`")

        self._count = count

    @property
    def duration(self):
        """
        Gets the duration of this DiagnosticsNetloggerSettings.
        Duration in minutes of each capture file

        :return: The duration of this DiagnosticsNetloggerSettings.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this DiagnosticsNetloggerSettings.
        Duration in minutes of each capture file

        :param duration: The duration of this DiagnosticsNetloggerSettings.
        :type: int
        """
        
        if duration is not None  and duration > 255.0:
            raise ValueError("Invalid value for `duration`, must be a value less than or equal to `255.0`")
        if duration is not None and duration < 1.0:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `1.0`")

        self._duration = duration

    @property
    def interfaces(self):
        """
        Gets the interfaces of this DiagnosticsNetloggerSettings.
        Network interfaces to capture on.

        :return: The interfaces of this DiagnosticsNetloggerSettings.
        :rtype: str
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """
        Sets the interfaces of this DiagnosticsNetloggerSettings.
        Network interfaces to capture on.

        :param interfaces: The interfaces of this DiagnosticsNetloggerSettings.
        :type: str
        """
        
        self._interfaces = interfaces

    @property
    def nodelist(self):
        """
        Gets the nodelist of this DiagnosticsNetloggerSettings.
        List of nodes, or empty for all

        :return: The nodelist of this DiagnosticsNetloggerSettings.
        :rtype: str
        """
        return self._nodelist

    @nodelist.setter
    def nodelist(self, nodelist):
        """
        Sets the nodelist of this DiagnosticsNetloggerSettings.
        List of nodes, or empty for all

        :param nodelist: The nodelist of this DiagnosticsNetloggerSettings.
        :type: str
        """
        
        self._nodelist = nodelist

    @property
    def ports(self):
        """
        Gets the ports of this DiagnosticsNetloggerSettings.
        List of Integers of TCP or UDP ports

        :return: The ports of this DiagnosticsNetloggerSettings.
        :rtype: str
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """
        Sets the ports of this DiagnosticsNetloggerSettings.
        List of Integers of TCP or UDP ports

        :param ports: The ports of this DiagnosticsNetloggerSettings.
        :type: str
        """
        
        self._ports = ports

    @property
    def protocols(self):
        """
        Gets the protocols of this DiagnosticsNetloggerSettings.
        which protocol(s) to gather on

        :return: The protocols of this DiagnosticsNetloggerSettings.
        :rtype: str
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """
        Sets the protocols of this DiagnosticsNetloggerSettings.
        which protocol(s) to gather on

        :param protocols: The protocols of this DiagnosticsNetloggerSettings.
        :type: str
        """
        
        self._protocols = protocols

    @property
    def snaplength(self):
        """
        Gets the snaplength of this DiagnosticsNetloggerSettings.
        Amount of bytes per packet to capture

        :return: The snaplength of this DiagnosticsNetloggerSettings.
        :rtype: int
        """
        return self._snaplength

    @snaplength.setter
    def snaplength(self, snaplength):
        """
        Sets the snaplength of this DiagnosticsNetloggerSettings.
        Amount of bytes per packet to capture

        :param snaplength: The snaplength of this DiagnosticsNetloggerSettings.
        :type: int
        """
        
        if snaplength is not None  and snaplength > 9100.0:
            raise ValueError("Invalid value for `snaplength`, must be a value less than or equal to `9100.0`")
        if snaplength is not None and snaplength < 64.0:
            raise ValueError("Invalid value for `snaplength`, must be a value greater than or equal to `64.0`")

        self._snaplength = snaplength

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

