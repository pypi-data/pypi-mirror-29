# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class CertificateServerCertificate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CertificateServerCertificate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'default': 'bool',
            'description': 'str',
            'dnsnames': 'list[str]',
            'expired': 'bool',
            'fingerprints': 'list[CertificateServerCertificateFingerprint]',
            'id': 'str',
            'issuer': 'str',
            'name': 'str',
            'not_after': 'int',
            'not_before': 'int',
            'subject': 'str',
            'valid': 'bool'
        }

        self.attribute_map = {
            'default': 'default',
            'description': 'description',
            'dnsnames': 'dnsnames',
            'expired': 'expired',
            'fingerprints': 'fingerprints',
            'id': 'id',
            'issuer': 'issuer',
            'name': 'name',
            'not_after': 'not_after',
            'not_before': 'not_before',
            'subject': 'subject',
            'valid': 'valid'
        }

        self._default = None
        self._description = None
        self._dnsnames = None
        self._expired = None
        self._fingerprints = None
        self._id = None
        self._issuer = None
        self._name = None
        self._not_after = None
        self._not_before = None
        self._subject = None
        self._valid = None

    @property
    def default(self):
        """
        Gets the default of this CertificateServerCertificate.
        Boolean identifying if a certificate is the default certificate.The default certificate is used as the fallback when no other certificates match a TLS enabled service's particular criteria. There must always be a configured default certificate.

        :return: The default of this CertificateServerCertificate.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """
        Sets the default of this CertificateServerCertificate.
        Boolean identifying if a certificate is the default certificate.The default certificate is used as the fallback when no other certificates match a TLS enabled service's particular criteria. There must always be a configured default certificate.

        :param default: The default of this CertificateServerCertificate.
        :type: bool
        """
        
        self._default = default

    @property
    def description(self):
        """
        Gets the description of this CertificateServerCertificate.
        Description field associated with a certificate provided for administrative convenience.

        :return: The description of this CertificateServerCertificate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CertificateServerCertificate.
        Description field associated with a certificate provided for administrative convenience.

        :param description: The description of this CertificateServerCertificate.
        :type: str
        """
        
        self._description = description

    @property
    def dnsnames(self):
        """
        Gets the dnsnames of this CertificateServerCertificate.
        A list of DNS names/patterns for which this certificate is valid. This list is extracted from the certificates CN (Common Name) and subjectAtlName extension fields.

        :return: The dnsnames of this CertificateServerCertificate.
        :rtype: list[str]
        """
        return self._dnsnames

    @dnsnames.setter
    def dnsnames(self, dnsnames):
        """
        Sets the dnsnames of this CertificateServerCertificate.
        A list of DNS names/patterns for which this certificate is valid. This list is extracted from the certificates CN (Common Name) and subjectAtlName extension fields.

        :param dnsnames: The dnsnames of this CertificateServerCertificate.
        :type: list[str]
        """
        
        self._dnsnames = dnsnames

    @property
    def expired(self):
        """
        Gets the expired of this CertificateServerCertificate.
        True if the certificate has expired and is no longer valid.

        :return: The expired of this CertificateServerCertificate.
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """
        Sets the expired of this CertificateServerCertificate.
        True if the certificate has expired and is no longer valid.

        :param expired: The expired of this CertificateServerCertificate.
        :type: bool
        """
        
        self._expired = expired

    @property
    def fingerprints(self):
        """
        Gets the fingerprints of this CertificateServerCertificate.
        A list of zero or more certificate fingerprints which can be used for certificate identification.

        :return: The fingerprints of this CertificateServerCertificate.
        :rtype: list[CertificateServerCertificateFingerprint]
        """
        return self._fingerprints

    @fingerprints.setter
    def fingerprints(self, fingerprints):
        """
        Sets the fingerprints of this CertificateServerCertificate.
        A list of zero or more certificate fingerprints which can be used for certificate identification.

        :param fingerprints: The fingerprints of this CertificateServerCertificate.
        :type: list[CertificateServerCertificateFingerprint]
        """
        
        self._fingerprints = fingerprints

    @property
    def id(self):
        """
        Gets the id of this CertificateServerCertificate.
        Unique server certificate identifier.

        :return: The id of this CertificateServerCertificate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CertificateServerCertificate.
        Unique server certificate identifier.

        :param id: The id of this CertificateServerCertificate.
        :type: str
        """
        
        self._id = id

    @property
    def issuer(self):
        """
        Gets the issuer of this CertificateServerCertificate.
        Certificate issuer field extracted from the certificate.

        :return: The issuer of this CertificateServerCertificate.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """
        Sets the issuer of this CertificateServerCertificate.
        Certificate issuer field extracted from the certificate.

        :param issuer: The issuer of this CertificateServerCertificate.
        :type: str
        """
        
        self._issuer = issuer

    @property
    def name(self):
        """
        Gets the name of this CertificateServerCertificate.
        Subject common name extracted from the certificate.

        :return: The name of this CertificateServerCertificate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CertificateServerCertificate.
        Subject common name extracted from the certificate.

        :param name: The name of this CertificateServerCertificate.
        :type: str
        """
        
        self._name = name

    @property
    def not_after(self):
        """
        Gets the not_after of this CertificateServerCertificate.
        Certificate notAfter field extracted from the certificate encoded as a UNIX epoch timestamp.  The certificate is not valid after this timestamp.

        :return: The not_after of this CertificateServerCertificate.
        :rtype: int
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """
        Sets the not_after of this CertificateServerCertificate.
        Certificate notAfter field extracted from the certificate encoded as a UNIX epoch timestamp.  The certificate is not valid after this timestamp.

        :param not_after: The not_after of this CertificateServerCertificate.
        :type: int
        """
        
        self._not_after = not_after

    @property
    def not_before(self):
        """
        Gets the not_before of this CertificateServerCertificate.
        Certificate notBefore field extracted from the certificate encoded as a UNIX epoch timestamp.  The certificate is not valid before this timestamp.

        :return: The not_before of this CertificateServerCertificate.
        :rtype: int
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """
        Sets the not_before of this CertificateServerCertificate.
        Certificate notBefore field extracted from the certificate encoded as a UNIX epoch timestamp.  The certificate is not valid before this timestamp.

        :param not_before: The not_before of this CertificateServerCertificate.
        :type: int
        """
        
        self._not_before = not_before

    @property
    def subject(self):
        """
        Gets the subject of this CertificateServerCertificate.
        Certificate subject field extracted from the certificate.

        :return: The subject of this CertificateServerCertificate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this CertificateServerCertificate.
        Certificate subject field extracted from the certificate.

        :param subject: The subject of this CertificateServerCertificate.
        :type: str
        """
        
        self._subject = subject

    @property
    def valid(self):
        """
        Gets the valid of this CertificateServerCertificate.
        True if the certificate is valid (ie: not_before <= now <= not_after).

        :return: The valid of this CertificateServerCertificate.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """
        Sets the valid of this CertificateServerCertificate.
        True if the certificate is valid (ie: not_before <= now <= not_after).

        :param valid: The valid of this CertificateServerCertificate.
        :type: bool
        """
        
        self._valid = valid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

