# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ClusterPatchPatchesPatche(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ClusterPatchPatchesPatche - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'comment': 'str',
            'conflicts': 'list[str]',
            'dependencies': 'list[str]',
            'description': 'str',
            'files': 'list[ClusterPatchPatchesPatcheFile]',
            'id': 'str',
            'name': 'str',
            'nodes': 'list[int]',
            'reboot': 'str',
            'services': 'list[ClusterPatchPatchesPatcheService]',
            'status': 'str'
        }

        self.attribute_map = {
            'comment': 'comment',
            'conflicts': 'conflicts',
            'dependencies': 'dependencies',
            'description': 'description',
            'files': 'files',
            'id': 'id',
            'name': 'name',
            'nodes': 'nodes',
            'reboot': 'reboot',
            'services': 'services',
            'status': 'status'
        }

        self._comment = None
        self._conflicts = None
        self._dependencies = None
        self._description = None
        self._files = None
        self._id = None
        self._name = None
        self._nodes = None
        self._reboot = None
        self._services = None
        self._status = None

    @property
    def comment(self):
        """
        Gets the comment of this ClusterPatchPatchesPatche.
        A long comment about the patch.

        :return: The comment of this ClusterPatchPatchesPatche.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this ClusterPatchPatchesPatche.
        A long comment about the patch.

        :param comment: The comment of this ClusterPatchPatchesPatche.
        :type: str
        """
        
        self._comment = comment

    @property
    def conflicts(self):
        """
        Gets the conflicts of this ClusterPatchPatchesPatche.
        Other patches that this patch conflicts with.

        :return: The conflicts of this ClusterPatchPatchesPatche.
        :rtype: list[str]
        """
        return self._conflicts

    @conflicts.setter
    def conflicts(self, conflicts):
        """
        Sets the conflicts of this ClusterPatchPatchesPatche.
        Other patches that this patch conflicts with.

        :param conflicts: The conflicts of this ClusterPatchPatchesPatche.
        :type: list[str]
        """
        
        self._conflicts = conflicts

    @property
    def dependencies(self):
        """
        Gets the dependencies of this ClusterPatchPatchesPatche.
        Other patches that this patch depends on.

        :return: The dependencies of this ClusterPatchPatchesPatche.
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """
        Sets the dependencies of this ClusterPatchPatchesPatche.
        Other patches that this patch depends on.

        :param dependencies: The dependencies of this ClusterPatchPatchesPatche.
        :type: list[str]
        """
        
        self._dependencies = dependencies

    @property
    def description(self):
        """
        Gets the description of this ClusterPatchPatchesPatche.
        A short description of the patch.

        :return: The description of this ClusterPatchPatchesPatche.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ClusterPatchPatchesPatche.
        A short description of the patch.

        :param description: The description of this ClusterPatchPatchesPatche.
        :type: str
        """
        
        self._description = description

    @property
    def files(self):
        """
        Gets the files of this ClusterPatchPatchesPatche.
        The files contained in this patch.

        :return: The files of this ClusterPatchPatchesPatche.
        :rtype: list[ClusterPatchPatchesPatcheFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """
        Sets the files of this ClusterPatchPatchesPatche.
        The files contained in this patch.

        :param files: The files of this ClusterPatchPatchesPatche.
        :type: list[ClusterPatchPatchesPatcheFile]
        """
        
        self._files = files

    @property
    def id(self):
        """
        Gets the id of this ClusterPatchPatchesPatche.
        A unique identifier for the patch.

        :return: The id of this ClusterPatchPatchesPatche.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ClusterPatchPatchesPatche.
        A unique identifier for the patch.

        :param id: The id of this ClusterPatchPatchesPatche.
        :type: str
        """
        
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ClusterPatchPatchesPatche.
        The name of the patch.

        :return: The name of this ClusterPatchPatchesPatche.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ClusterPatchPatchesPatche.
        The name of the patch.

        :param name: The name of this ClusterPatchPatchesPatche.
        :type: str
        """
        
        self._name = name

    @property
    def nodes(self):
        """
        Gets the nodes of this ClusterPatchPatchesPatche.
        The nodes that this patch is installed on.

        :return: The nodes of this ClusterPatchPatchesPatche.
        :rtype: list[int]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """
        Sets the nodes of this ClusterPatchPatchesPatche.
        The nodes that this patch is installed on.

        :param nodes: The nodes of this ClusterPatchPatchesPatche.
        :type: list[int]
        """
        
        self._nodes = nodes

    @property
    def reboot(self):
        """
        Gets the reboot of this ClusterPatchPatchesPatche.
        Describes the reboot requirements

        :return: The reboot of this ClusterPatchPatchesPatche.
        :rtype: str
        """
        return self._reboot

    @reboot.setter
    def reboot(self, reboot):
        """
        Sets the reboot of this ClusterPatchPatchesPatche.
        Describes the reboot requirements

        :param reboot: The reboot of this ClusterPatchPatchesPatche.
        :type: str
        """
        
        self._reboot = reboot

    @property
    def services(self):
        """
        Gets the services of this ClusterPatchPatchesPatche.
        The services affected during the patch deployment

        :return: The services of this ClusterPatchPatchesPatche.
        :rtype: list[ClusterPatchPatchesPatcheService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """
        Sets the services of this ClusterPatchPatchesPatche.
        The services affected during the patch deployment

        :param services: The services of this ClusterPatchPatchesPatche.
        :type: list[ClusterPatchPatchesPatcheService]
        """
        
        self._services = services

    @property
    def status(self):
        """
        Gets the status of this ClusterPatchPatchesPatche.
        The intallation status of this patch on the cluster.

        :return: The status of this ClusterPatchPatchesPatche.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ClusterPatchPatchesPatche.
        The intallation status of this patch on the cluster.

        :param status: The status of this ClusterPatchPatchesPatche.
        :type: str
        """
        
        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

