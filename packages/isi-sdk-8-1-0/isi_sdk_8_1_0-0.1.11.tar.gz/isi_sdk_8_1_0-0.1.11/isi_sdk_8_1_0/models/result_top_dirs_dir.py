# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ResultTopDirsDir(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ResultTopDirsDir - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'atime': 'int',
            'btime': 'int',
            'ctime': 'int',
            'path': 'str'
        }

        self.attribute_map = {
            'atime': 'atime',
            'btime': 'btime',
            'ctime': 'ctime',
            'path': 'path'
        }

        self._atime = None
        self._btime = None
        self._ctime = None
        self._path = None

    @property
    def atime(self):
        """
        Gets the atime of this ResultTopDirsDir.
        Directory access time

        :return: The atime of this ResultTopDirsDir.
        :rtype: int
        """
        return self._atime

    @atime.setter
    def atime(self, atime):
        """
        Sets the atime of this ResultTopDirsDir.
        Directory access time

        :param atime: The atime of this ResultTopDirsDir.
        :type: int
        """
        
        self._atime = atime

    @property
    def btime(self):
        """
        Gets the btime of this ResultTopDirsDir.
        Directory creation begin time.

        :return: The btime of this ResultTopDirsDir.
        :rtype: int
        """
        return self._btime

    @btime.setter
    def btime(self, btime):
        """
        Sets the btime of this ResultTopDirsDir.
        Directory creation begin time.

        :param btime: The btime of this ResultTopDirsDir.
        :type: int
        """
        
        self._btime = btime

    @property
    def ctime(self):
        """
        Gets the ctime of this ResultTopDirsDir.
        Unix inode change time.

        :return: The ctime of this ResultTopDirsDir.
        :rtype: int
        """
        return self._ctime

    @ctime.setter
    def ctime(self, ctime):
        """
        Sets the ctime of this ResultTopDirsDir.
        Unix inode change time.

        :param ctime: The ctime of this ResultTopDirsDir.
        :type: int
        """
        
        self._ctime = ctime

    @property
    def path(self):
        """
        Gets the path of this ResultTopDirsDir.
        Relative directory path under /ifs/.

        :return: The path of this ResultTopDirsDir.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this ResultTopDirsDir.
        Relative directory path under /ifs/.

        :param path: The path of this ResultTopDirsDir.
        :type: str
        """
        
        self._path = path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

