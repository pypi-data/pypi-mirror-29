# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SmbSession(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SmbSession - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'active_time': 'int',
            'client_type': 'str',
            'computer': 'str',
            'encryption': 'bool',
            'guest_login': 'bool',
            'id': 'int',
            'idle_time': 'int',
            'openfiles': 'int',
            'user': 'str'
        }

        self.attribute_map = {
            'active_time': 'active_time',
            'client_type': 'client_type',
            'computer': 'computer',
            'encryption': 'encryption',
            'guest_login': 'guest_login',
            'id': 'id',
            'idle_time': 'idle_time',
            'openfiles': 'openfiles',
            'user': 'user'
        }

        self._active_time = None
        self._client_type = None
        self._computer = None
        self._encryption = None
        self._guest_login = None
        self._id = None
        self._idle_time = None
        self._openfiles = None
        self._user = None

    @property
    def active_time(self):
        """
        Gets the active_time of this SmbSession.
        Number of seconds since session start.

        :return: The active_time of this SmbSession.
        :rtype: int
        """
        return self._active_time

    @active_time.setter
    def active_time(self, active_time):
        """
        Sets the active_time of this SmbSession.
        Number of seconds since session start.

        :param active_time: The active_time of this SmbSession.
        :type: int
        """
        
        self._active_time = active_time

    @property
    def client_type(self):
        """
        Gets the client_type of this SmbSession.
        Client type.

        :return: The client_type of this SmbSession.
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """
        Sets the client_type of this SmbSession.
        Client type.

        :param client_type: The client_type of this SmbSession.
        :type: str
        """
        
        self._client_type = client_type

    @property
    def computer(self):
        """
        Gets the computer of this SmbSession.
        Client internet address.

        :return: The computer of this SmbSession.
        :rtype: str
        """
        return self._computer

    @computer.setter
    def computer(self, computer):
        """
        Sets the computer of this SmbSession.
        Client internet address.

        :param computer: The computer of this SmbSession.
        :type: str
        """
        
        self._computer = computer

    @property
    def encryption(self):
        """
        Gets the encryption of this SmbSession.
        True if session is encrypted.

        :return: The encryption of this SmbSession.
        :rtype: bool
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """
        Sets the encryption of this SmbSession.
        True if session is encrypted.

        :param encryption: The encryption of this SmbSession.
        :type: bool
        """
        
        self._encryption = encryption

    @property
    def guest_login(self):
        """
        Gets the guest_login of this SmbSession.
        True for guest logins.

        :return: The guest_login of this SmbSession.
        :rtype: bool
        """
        return self._guest_login

    @guest_login.setter
    def guest_login(self, guest_login):
        """
        Sets the guest_login of this SmbSession.
        True for guest logins.

        :param guest_login: The guest_login of this SmbSession.
        :type: bool
        """
        
        self._guest_login = guest_login

    @property
    def id(self):
        """
        Gets the id of this SmbSession.
        The session ID.

        :return: The id of this SmbSession.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SmbSession.
        The session ID.

        :param id: The id of this SmbSession.
        :type: int
        """
        
        self._id = id

    @property
    def idle_time(self):
        """
        Gets the idle_time of this SmbSession.
        Number of seconds since last client operation.

        :return: The idle_time of this SmbSession.
        :rtype: int
        """
        return self._idle_time

    @idle_time.setter
    def idle_time(self, idle_time):
        """
        Sets the idle_time of this SmbSession.
        Number of seconds since last client operation.

        :param idle_time: The idle_time of this SmbSession.
        :type: int
        """
        
        self._idle_time = idle_time

    @property
    def openfiles(self):
        """
        Gets the openfiles of this SmbSession.
        Number of files open by client.

        :return: The openfiles of this SmbSession.
        :rtype: int
        """
        return self._openfiles

    @openfiles.setter
    def openfiles(self, openfiles):
        """
        Sets the openfiles of this SmbSession.
        Number of files open by client.

        :param openfiles: The openfiles of this SmbSession.
        :type: int
        """
        
        self._openfiles = openfiles

    @property
    def user(self):
        """
        Gets the user of this SmbSession.
        Local user name.

        :return: The user of this SmbSession.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this SmbSession.
        Local user name.

        :param user: The user of this SmbSession.
        :type: str
        """
        
        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

