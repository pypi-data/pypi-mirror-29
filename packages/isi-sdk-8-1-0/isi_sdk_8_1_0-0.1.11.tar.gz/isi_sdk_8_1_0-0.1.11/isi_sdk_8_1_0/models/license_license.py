# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class LicenseLicense(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LicenseLicense - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'days_since_expiry': 'int',
            'days_to_expiry': 'int',
            'expiration': 'str',
            'expired_alert': 'bool',
            'expiring_alert': 'bool',
            'id': 'str',
            'name': 'str',
            'status': 'str',
            'tiers': 'list[LicenseLicenseTier]'
        }

        self.attribute_map = {
            'days_since_expiry': 'days_since_expiry',
            'days_to_expiry': 'days_to_expiry',
            'expiration': 'expiration',
            'expired_alert': 'expired_alert',
            'expiring_alert': 'expiring_alert',
            'id': 'id',
            'name': 'name',
            'status': 'status',
            'tiers': 'tiers'
        }

        self._days_since_expiry = None
        self._days_to_expiry = None
        self._expiration = None
        self._expired_alert = None
        self._expiring_alert = None
        self._id = None
        self._name = None
        self._status = None
        self._tiers = None

    @property
    def days_since_expiry(self):
        """
        Gets the days_since_expiry of this LicenseLicense.
        Number of days since a license expired.

        :return: The days_since_expiry of this LicenseLicense.
        :rtype: int
        """
        return self._days_since_expiry

    @days_since_expiry.setter
    def days_since_expiry(self, days_since_expiry):
        """
        Sets the days_since_expiry of this LicenseLicense.
        Number of days since a license expired.

        :param days_since_expiry: The days_since_expiry of this LicenseLicense.
        :type: int
        """
        
        if days_since_expiry is not None  and days_since_expiry > 4.294967295E9:
            raise ValueError("Invalid value for `days_since_expiry`, must be a value less than or equal to `4.294967295E9`")
        if days_since_expiry is not None and days_since_expiry < 0.0:
            raise ValueError("Invalid value for `days_since_expiry`, must be a value greater than or equal to `0.0`")

        self._days_since_expiry = days_since_expiry

    @property
    def days_to_expiry(self):
        """
        Gets the days_to_expiry of this LicenseLicense.
        Number of days before a license expires.

        :return: The days_to_expiry of this LicenseLicense.
        :rtype: int
        """
        return self._days_to_expiry

    @days_to_expiry.setter
    def days_to_expiry(self, days_to_expiry):
        """
        Sets the days_to_expiry of this LicenseLicense.
        Number of days before a license expires.

        :param days_to_expiry: The days_to_expiry of this LicenseLicense.
        :type: int
        """
        
        if days_to_expiry is not None  and days_to_expiry > 4.294967295E9:
            raise ValueError("Invalid value for `days_to_expiry`, must be a value less than or equal to `4.294967295E9`")
        if days_to_expiry is not None and days_to_expiry < 0.0:
            raise ValueError("Invalid value for `days_to_expiry`, must be a value greater than or equal to `0.0`")

        self._days_to_expiry = days_to_expiry

    @property
    def expiration(self):
        """
        Gets the expiration of this LicenseLicense.
        Date of license expiry. Format is YYYY-MM-DD. It is not included if there is no expiration. Feature is considered expired at end of this day. The cluster time is used to determine expiry.

        :return: The expiration of this LicenseLicense.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """
        Sets the expiration of this LicenseLicense.
        Date of license expiry. Format is YYYY-MM-DD. It is not included if there is no expiration. Feature is considered expired at end of this day. The cluster time is used to determine expiry.

        :param expiration: The expiration of this LicenseLicense.
        :type: str
        """
        
        if expiration is not None and len(expiration) > 10: 
            raise ValueError("Invalid value for `expiration`, length must be less than `10`")
        if expiration is not None and len(expiration) < 10:
            raise ValueError("Invalid value for `expiration`, length must be greater than or equal to `10`")
        if expiration is not None and not re.search('^\\d\\d\\d\\d-\\d\\d-\\d\\d$', expiration):
            raise ValueError("Invalid value for `expiration`, must be a follow pattern or equal to `/^\\d\\d\\d\\d-\\d\\d-\\d\\d$/`")

        self._expiration = expiration

    @property
    def expired_alert(self):
        """
        Gets the expired_alert of this LicenseLicense.
        True when we are generating an alert that this feature has expired.

        :return: The expired_alert of this LicenseLicense.
        :rtype: bool
        """
        return self._expired_alert

    @expired_alert.setter
    def expired_alert(self, expired_alert):
        """
        Sets the expired_alert of this LicenseLicense.
        True when we are generating an alert that this feature has expired.

        :param expired_alert: The expired_alert of this LicenseLicense.
        :type: bool
        """
        
        self._expired_alert = expired_alert

    @property
    def expiring_alert(self):
        """
        Gets the expiring_alert of this LicenseLicense.
        True when we are generating an alert that this feature is expiring.

        :return: The expiring_alert of this LicenseLicense.
        :rtype: bool
        """
        return self._expiring_alert

    @expiring_alert.setter
    def expiring_alert(self, expiring_alert):
        """
        Sets the expiring_alert of this LicenseLicense.
        True when we are generating an alert that this feature is expiring.

        :param expiring_alert: The expiring_alert of this LicenseLicense.
        :type: bool
        """
        
        self._expiring_alert = expiring_alert

    @property
    def id(self):
        """
        Gets the id of this LicenseLicense.
        Name of the licensed feature.

        :return: The id of this LicenseLicense.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LicenseLicense.
        Name of the licensed feature.

        :param id: The id of this LicenseLicense.
        :type: str
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if len(id) > 50: 
            raise ValueError("Invalid value for `id`, length must be less than `50`")
        if len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")
        if not re.search('.+', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/.+/`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this LicenseLicense.
        Name of the licensed feature.

        :return: The name of this LicenseLicense.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LicenseLicense.
        Name of the licensed feature.

        :param name: The name of this LicenseLicense.
        :type: str
        """
        
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if len(name) > 50: 
            raise ValueError("Invalid value for `name`, length must be less than `50`")
        if len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if not re.search('.+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/.+/`")

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this LicenseLicense.
        Current status of the license.

        :return: The status of this LicenseLicense.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this LicenseLicense.
        Current status of the license.

        :param status: The status of this LicenseLicense.
        :type: str
        """
        allowed_values = ["Unlicensed", "Licensed", "Expired", "Evaluation", "Evaluation Expired"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )

        self._status = status

    @property
    def tiers(self):
        """
        Gets the tiers of this LicenseLicense.
        Tiered License details.

        :return: The tiers of this LicenseLicense.
        :rtype: list[LicenseLicenseTier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """
        Sets the tiers of this LicenseLicense.
        Tiered License details.

        :param tiers: The tiers of this LicenseLicense.
        :type: list[LicenseLicenseTier]
        """
        
        self._tiers = tiers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

