# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class HardwareStatu(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HardwareStatu - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'nodepool_name': 'str',
            'unupgraded_lnns': 'list[int]',
            'upgrade_type': 'str',
            'upgraded_lnns': 'list[int]'
        }

        self.attribute_map = {
            'id': 'id',
            'nodepool_name': 'nodepool_name',
            'unupgraded_lnns': 'unupgraded_lnns',
            'upgrade_type': 'upgrade_type',
            'upgraded_lnns': 'upgraded_lnns'
        }

        self._id = None
        self._nodepool_name = None
        self._unupgraded_lnns = None
        self._upgrade_type = None
        self._upgraded_lnns = None

    @property
    def id(self):
        """
        Gets the id of this HardwareStatu.
        The ID of this upgrade.

        :return: The id of this HardwareStatu.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this HardwareStatu.
        The ID of this upgrade.

        :param id: The id of this HardwareStatu.
        :type: str
        """
        
        self._id = id

    @property
    def nodepool_name(self):
        """
        Gets the nodepool_name of this HardwareStatu.
        Name of the upgrading pool.

        :return: The nodepool_name of this HardwareStatu.
        :rtype: str
        """
        return self._nodepool_name

    @nodepool_name.setter
    def nodepool_name(self, nodepool_name):
        """
        Sets the nodepool_name of this HardwareStatu.
        Name of the upgrading pool.

        :param nodepool_name: The nodepool_name of this HardwareStatu.
        :type: str
        """
        
        self._nodepool_name = nodepool_name

    @property
    def unupgraded_lnns(self):
        """
        Gets the unupgraded_lnns of this HardwareStatu.
        The lnns of the nodes in the pool that haven't been upgraded yet.

        :return: The unupgraded_lnns of this HardwareStatu.
        :rtype: list[int]
        """
        return self._unupgraded_lnns

    @unupgraded_lnns.setter
    def unupgraded_lnns(self, unupgraded_lnns):
        """
        Sets the unupgraded_lnns of this HardwareStatu.
        The lnns of the nodes in the pool that haven't been upgraded yet.

        :param unupgraded_lnns: The unupgraded_lnns of this HardwareStatu.
        :type: list[int]
        """
        
        self._unupgraded_lnns = unupgraded_lnns

    @property
    def upgrade_type(self):
        """
        Gets the upgrade_type of this HardwareStatu.
        The type of upgrade this is.

        :return: The upgrade_type of this HardwareStatu.
        :rtype: str
        """
        return self._upgrade_type

    @upgrade_type.setter
    def upgrade_type(self, upgrade_type):
        """
        Sets the upgrade_type of this HardwareStatu.
        The type of upgrade this is.

        :param upgrade_type: The upgrade_type of this HardwareStatu.
        :type: str
        """
        
        self._upgrade_type = upgrade_type

    @property
    def upgraded_lnns(self):
        """
        Gets the upgraded_lnns of this HardwareStatu.
        The lnns of the nodes in the pool that have been successsfully upgraded.

        :return: The upgraded_lnns of this HardwareStatu.
        :rtype: list[int]
        """
        return self._upgraded_lnns

    @upgraded_lnns.setter
    def upgraded_lnns(self, upgraded_lnns):
        """
        Sets the upgraded_lnns of this HardwareStatu.
        The lnns of the nodes in the pool that have been successsfully upgraded.

        :param upgraded_lnns: The upgraded_lnns of this HardwareStatu.
        :type: list[int]
        """
        
        self._upgraded_lnns = upgraded_lnns

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

