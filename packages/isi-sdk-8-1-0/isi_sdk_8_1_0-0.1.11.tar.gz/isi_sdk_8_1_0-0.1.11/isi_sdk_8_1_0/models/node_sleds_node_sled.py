# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NodeSledsNodeSled(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NodeSledsNodeSled - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_removeable': 'bool',
            'sled_letter': 'str',
            'sled_state': 'str'
        }

        self.attribute_map = {
            'is_removeable': 'is_removeable',
            'sled_letter': 'sled_letter',
            'sled_state': 'sled_state'
        }

        self._is_removeable = None
        self._sled_letter = None
        self._sled_state = None

    @property
    def is_removeable(self):
        """
        Gets the is_removeable of this NodeSledsNodeSled.
        Boolean to indicate whether or not the sled is safe to remove.

        :return: The is_removeable of this NodeSledsNodeSled.
        :rtype: bool
        """
        return self._is_removeable

    @is_removeable.setter
    def is_removeable(self, is_removeable):
        """
        Sets the is_removeable of this NodeSledsNodeSled.
        Boolean to indicate whether or not the sled is safe to remove.

        :param is_removeable: The is_removeable of this NodeSledsNodeSled.
        :type: bool
        """
        
        self._is_removeable = is_removeable

    @property
    def sled_letter(self):
        """
        Gets the sled_letter of this NodeSledsNodeSled.
        The sled letter which OneFS uses to refer to this sled in the node.

        :return: The sled_letter of this NodeSledsNodeSled.
        :rtype: str
        """
        return self._sled_letter

    @sled_letter.setter
    def sled_letter(self, sled_letter):
        """
        Sets the sled_letter of this NodeSledsNodeSled.
        The sled letter which OneFS uses to refer to this sled in the node.

        :param sled_letter: The sled_letter of this NodeSledsNodeSled.
        :type: str
        """
        
        if sled_letter is None:
            raise ValueError("Invalid value for `sled_letter`, must not be `None`")
        if len(sled_letter) > 1: 
            raise ValueError("Invalid value for `sled_letter`, length must be less than `1`")
        if len(sled_letter) < 1:
            raise ValueError("Invalid value for `sled_letter`, length must be greater than or equal to `1`")
        if not re.search('^[a-eA-E]$', sled_letter):
            raise ValueError("Invalid value for `sled_letter`, must be a follow pattern or equal to `/^[a-eA-E]$/`")

        self._sled_letter = sled_letter

    @property
    def sled_state(self):
        """
        Gets the sled_state of this NodeSledsNodeSled.
        The state of physical presence of a sled.

        :return: The sled_state of this NodeSledsNodeSled.
        :rtype: str
        """
        return self._sled_state

    @sled_state.setter
    def sled_state(self, sled_state):
        """
        Sets the sled_state of this NodeSledsNodeSled.
        The state of physical presence of a sled.

        :param sled_state: The sled_state of this NodeSledsNodeSled.
        :type: str
        """
        allowed_values = ["Present", "Absent", "Unknown"]
        if sled_state not in allowed_values:
            raise ValueError(
                "Invalid value for `sled_state`, must be one of {0}"
                .format(allowed_values)
            )

        self._sled_state = sled_state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

