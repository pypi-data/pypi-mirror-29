# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class DiagnosticsGatherSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DiagnosticsGatherSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'esrs': 'bool',
            'ftp_upload': 'bool',
            'ftp_upload_host': 'str',
            'ftp_upload_mode': 'str',
            'ftp_upload_path': 'str',
            'ftp_upload_proxy': 'str',
            'ftp_upload_proxy_port': 'int',
            'ftp_upload_user': 'str',
            'gather_mode': 'str',
            'http_upload': 'bool',
            'http_upload_host': 'str',
            'http_upload_path': 'str',
            'http_upload_proxy': 'str',
            'http_upload_proxy_port': 'int',
            'upload': 'bool'
        }

        self.attribute_map = {
            'esrs': 'esrs',
            'ftp_upload': 'ftp_upload',
            'ftp_upload_host': 'ftp_upload_host',
            'ftp_upload_mode': 'ftp_upload_mode',
            'ftp_upload_path': 'ftp_upload_path',
            'ftp_upload_proxy': 'ftp_upload_proxy',
            'ftp_upload_proxy_port': 'ftp_upload_proxy_port',
            'ftp_upload_user': 'ftp_upload_user',
            'gather_mode': 'gather_mode',
            'http_upload': 'http_upload',
            'http_upload_host': 'http_upload_host',
            'http_upload_path': 'http_upload_path',
            'http_upload_proxy': 'http_upload_proxy',
            'http_upload_proxy_port': 'http_upload_proxy_port',
            'upload': 'upload'
        }

        self._esrs = None
        self._ftp_upload = None
        self._ftp_upload_host = None
        self._ftp_upload_mode = None
        self._ftp_upload_path = None
        self._ftp_upload_proxy = None
        self._ftp_upload_proxy_port = None
        self._ftp_upload_user = None
        self._gather_mode = None
        self._http_upload = None
        self._http_upload_host = None
        self._http_upload_path = None
        self._http_upload_proxy = None
        self._http_upload_proxy_port = None
        self._upload = None

    @property
    def esrs(self):
        """
        Gets the esrs of this DiagnosticsGatherSettings.
        Use ESRS for upload of gather.

        :return: The esrs of this DiagnosticsGatherSettings.
        :rtype: bool
        """
        return self._esrs

    @esrs.setter
    def esrs(self, esrs):
        """
        Sets the esrs of this DiagnosticsGatherSettings.
        Use ESRS for upload of gather.

        :param esrs: The esrs of this DiagnosticsGatherSettings.
        :type: bool
        """
        
        self._esrs = esrs

    @property
    def ftp_upload(self):
        """
        Gets the ftp_upload of this DiagnosticsGatherSettings.


        :return: The ftp_upload of this DiagnosticsGatherSettings.
        :rtype: bool
        """
        return self._ftp_upload

    @ftp_upload.setter
    def ftp_upload(self, ftp_upload):
        """
        Sets the ftp_upload of this DiagnosticsGatherSettings.


        :param ftp_upload: The ftp_upload of this DiagnosticsGatherSettings.
        :type: bool
        """
        
        self._ftp_upload = ftp_upload

    @property
    def ftp_upload_host(self):
        """
        Gets the ftp_upload_host of this DiagnosticsGatherSettings.
        Alternate FTP host to upload to.

        :return: The ftp_upload_host of this DiagnosticsGatherSettings.
        :rtype: str
        """
        return self._ftp_upload_host

    @ftp_upload_host.setter
    def ftp_upload_host(self, ftp_upload_host):
        """
        Sets the ftp_upload_host of this DiagnosticsGatherSettings.
        Alternate FTP host to upload to.

        :param ftp_upload_host: The ftp_upload_host of this DiagnosticsGatherSettings.
        :type: str
        """
        
        self._ftp_upload_host = ftp_upload_host

    @property
    def ftp_upload_mode(self):
        """
        Gets the ftp_upload_mode of this DiagnosticsGatherSettings.
        FTP upload mode.

        :return: The ftp_upload_mode of this DiagnosticsGatherSettings.
        :rtype: str
        """
        return self._ftp_upload_mode

    @ftp_upload_mode.setter
    def ftp_upload_mode(self, ftp_upload_mode):
        """
        Sets the ftp_upload_mode of this DiagnosticsGatherSettings.
        FTP upload mode.

        :param ftp_upload_mode: The ftp_upload_mode of this DiagnosticsGatherSettings.
        :type: str
        """
        allowed_values = ["both", "passive", "active"]
        if ftp_upload_mode is not None and ftp_upload_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `ftp_upload_mode`, must be one of {0}"
                .format(allowed_values)
            )

        self._ftp_upload_mode = ftp_upload_mode

    @property
    def ftp_upload_path(self):
        """
        Gets the ftp_upload_path of this DiagnosticsGatherSettings.
        Alternate FTP path to upload to.

        :return: The ftp_upload_path of this DiagnosticsGatherSettings.
        :rtype: str
        """
        return self._ftp_upload_path

    @ftp_upload_path.setter
    def ftp_upload_path(self, ftp_upload_path):
        """
        Sets the ftp_upload_path of this DiagnosticsGatherSettings.
        Alternate FTP path to upload to.

        :param ftp_upload_path: The ftp_upload_path of this DiagnosticsGatherSettings.
        :type: str
        """
        
        self._ftp_upload_path = ftp_upload_path

    @property
    def ftp_upload_proxy(self):
        """
        Gets the ftp_upload_proxy of this DiagnosticsGatherSettings.
        FTP proxy to use for upload.

        :return: The ftp_upload_proxy of this DiagnosticsGatherSettings.
        :rtype: str
        """
        return self._ftp_upload_proxy

    @ftp_upload_proxy.setter
    def ftp_upload_proxy(self, ftp_upload_proxy):
        """
        Sets the ftp_upload_proxy of this DiagnosticsGatherSettings.
        FTP proxy to use for upload.

        :param ftp_upload_proxy: The ftp_upload_proxy of this DiagnosticsGatherSettings.
        :type: str
        """
        
        self._ftp_upload_proxy = ftp_upload_proxy

    @property
    def ftp_upload_proxy_port(self):
        """
        Gets the ftp_upload_proxy_port of this DiagnosticsGatherSettings.
        FTP proxy port to use for upload.

        :return: The ftp_upload_proxy_port of this DiagnosticsGatherSettings.
        :rtype: int
        """
        return self._ftp_upload_proxy_port

    @ftp_upload_proxy_port.setter
    def ftp_upload_proxy_port(self, ftp_upload_proxy_port):
        """
        Sets the ftp_upload_proxy_port of this DiagnosticsGatherSettings.
        FTP proxy port to use for upload.

        :param ftp_upload_proxy_port: The ftp_upload_proxy_port of this DiagnosticsGatherSettings.
        :type: int
        """
        
        if ftp_upload_proxy_port is not None  and ftp_upload_proxy_port > 65535.0:
            raise ValueError("Invalid value for `ftp_upload_proxy_port`, must be a value less than or equal to `65535.0`")
        if ftp_upload_proxy_port is not None and ftp_upload_proxy_port < 1.0:
            raise ValueError("Invalid value for `ftp_upload_proxy_port`, must be a value greater than or equal to `1.0`")

        self._ftp_upload_proxy_port = ftp_upload_proxy_port

    @property
    def ftp_upload_user(self):
        """
        Gets the ftp_upload_user of this DiagnosticsGatherSettings.
        FTP user for upload.

        :return: The ftp_upload_user of this DiagnosticsGatherSettings.
        :rtype: str
        """
        return self._ftp_upload_user

    @ftp_upload_user.setter
    def ftp_upload_user(self, ftp_upload_user):
        """
        Sets the ftp_upload_user of this DiagnosticsGatherSettings.
        FTP user for upload.

        :param ftp_upload_user: The ftp_upload_user of this DiagnosticsGatherSettings.
        :type: str
        """
        
        self._ftp_upload_user = ftp_upload_user

    @property
    def gather_mode(self):
        """
        Gets the gather_mode of this DiagnosticsGatherSettings.
        Set gather to full or incremental.

        :return: The gather_mode of this DiagnosticsGatherSettings.
        :rtype: str
        """
        return self._gather_mode

    @gather_mode.setter
    def gather_mode(self, gather_mode):
        """
        Sets the gather_mode of this DiagnosticsGatherSettings.
        Set gather to full or incremental.

        :param gather_mode: The gather_mode of this DiagnosticsGatherSettings.
        :type: str
        """
        allowed_values = ["full", "incremental"]
        if gather_mode is not None and gather_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `gather_mode`, must be one of {0}"
                .format(allowed_values)
            )

        self._gather_mode = gather_mode

    @property
    def http_upload(self):
        """
        Gets the http_upload of this DiagnosticsGatherSettings.
        Whether or not to use HTTP upload on completed gather.

        :return: The http_upload of this DiagnosticsGatherSettings.
        :rtype: bool
        """
        return self._http_upload

    @http_upload.setter
    def http_upload(self, http_upload):
        """
        Sets the http_upload of this DiagnosticsGatherSettings.
        Whether or not to use HTTP upload on completed gather.

        :param http_upload: The http_upload of this DiagnosticsGatherSettings.
        :type: bool
        """
        
        self._http_upload = http_upload

    @property
    def http_upload_host(self):
        """
        Gets the http_upload_host of this DiagnosticsGatherSettings.
        Alternate HTTP Host to upload to.

        :return: The http_upload_host of this DiagnosticsGatherSettings.
        :rtype: str
        """
        return self._http_upload_host

    @http_upload_host.setter
    def http_upload_host(self, http_upload_host):
        """
        Sets the http_upload_host of this DiagnosticsGatherSettings.
        Alternate HTTP Host to upload to.

        :param http_upload_host: The http_upload_host of this DiagnosticsGatherSettings.
        :type: str
        """
        
        self._http_upload_host = http_upload_host

    @property
    def http_upload_path(self):
        """
        Gets the http_upload_path of this DiagnosticsGatherSettings.
        Alternate path to write gather to.

        :return: The http_upload_path of this DiagnosticsGatherSettings.
        :rtype: str
        """
        return self._http_upload_path

    @http_upload_path.setter
    def http_upload_path(self, http_upload_path):
        """
        Sets the http_upload_path of this DiagnosticsGatherSettings.
        Alternate path to write gather to.

        :param http_upload_path: The http_upload_path of this DiagnosticsGatherSettings.
        :type: str
        """
        
        self._http_upload_path = http_upload_path

    @property
    def http_upload_proxy(self):
        """
        Gets the http_upload_proxy of this DiagnosticsGatherSettings.
        Proxy to use for HTTP upload.

        :return: The http_upload_proxy of this DiagnosticsGatherSettings.
        :rtype: str
        """
        return self._http_upload_proxy

    @http_upload_proxy.setter
    def http_upload_proxy(self, http_upload_proxy):
        """
        Sets the http_upload_proxy of this DiagnosticsGatherSettings.
        Proxy to use for HTTP upload.

        :param http_upload_proxy: The http_upload_proxy of this DiagnosticsGatherSettings.
        :type: str
        """
        
        self._http_upload_proxy = http_upload_proxy

    @property
    def http_upload_proxy_port(self):
        """
        Gets the http_upload_proxy_port of this DiagnosticsGatherSettings.
        Alternate port for proxy server

        :return: The http_upload_proxy_port of this DiagnosticsGatherSettings.
        :rtype: int
        """
        return self._http_upload_proxy_port

    @http_upload_proxy_port.setter
    def http_upload_proxy_port(self, http_upload_proxy_port):
        """
        Sets the http_upload_proxy_port of this DiagnosticsGatherSettings.
        Alternate port for proxy server

        :param http_upload_proxy_port: The http_upload_proxy_port of this DiagnosticsGatherSettings.
        :type: int
        """
        
        if http_upload_proxy_port is not None  and http_upload_proxy_port > 65535.0:
            raise ValueError("Invalid value for `http_upload_proxy_port`, must be a value less than or equal to `65535.0`")
        if http_upload_proxy_port is not None and http_upload_proxy_port < 1.0:
            raise ValueError("Invalid value for `http_upload_proxy_port`, must be a value greater than or equal to `1.0`")

        self._http_upload_proxy_port = http_upload_proxy_port

    @property
    def upload(self):
        """
        Gets the upload of this DiagnosticsGatherSettings.
        Upload gather to EMC.

        :return: The upload of this DiagnosticsGatherSettings.
        :rtype: bool
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """
        Sets the upload of this DiagnosticsGatherSettings.
        Upload gather to EMC.

        :param upload: The upload of this DiagnosticsGatherSettings.
        :type: bool
        """
        
        self._upload = upload

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

