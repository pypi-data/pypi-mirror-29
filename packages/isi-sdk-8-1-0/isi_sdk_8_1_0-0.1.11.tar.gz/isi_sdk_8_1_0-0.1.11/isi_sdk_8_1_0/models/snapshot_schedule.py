# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SnapshotSchedule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SnapshotSchedule - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alias': 'str',
            'duration': 'int',
            'name': 'str',
            'path': 'str',
            'pattern': 'str',
            'schedule': 'str'
        }

        self.attribute_map = {
            'alias': 'alias',
            'duration': 'duration',
            'name': 'name',
            'path': 'path',
            'pattern': 'pattern',
            'schedule': 'schedule'
        }

        self._alias = None
        self._duration = None
        self._name = None
        self._path = None
        self._pattern = None
        self._schedule = None

    @property
    def alias(self):
        """
        Gets the alias of this SnapshotSchedule.
        Alias name to create for each snapshot.

        :return: The alias of this SnapshotSchedule.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this SnapshotSchedule.
        Alias name to create for each snapshot.

        :param alias: The alias of this SnapshotSchedule.
        :type: str
        """
        
        self._alias = alias

    @property
    def duration(self):
        """
        Gets the duration of this SnapshotSchedule.
        Time in seconds added to creation time to construction expiration time.

        :return: The duration of this SnapshotSchedule.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this SnapshotSchedule.
        Time in seconds added to creation time to construction expiration time.

        :param duration: The duration of this SnapshotSchedule.
        :type: int
        """
        
        if duration is not None and duration < 0.0:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0.0`")

        self._duration = duration

    @property
    def name(self):
        """
        Gets the name of this SnapshotSchedule.
        The schedule name.

        :return: The name of this SnapshotSchedule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SnapshotSchedule.
        The schedule name.

        :param name: The name of this SnapshotSchedule.
        :type: str
        """
        
        self._name = name

    @property
    def path(self):
        """
        Gets the path of this SnapshotSchedule.
        The /ifs path snapshotted.

        :return: The path of this SnapshotSchedule.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this SnapshotSchedule.
        The /ifs path snapshotted.

        :param path: The path of this SnapshotSchedule.
        :type: str
        """
        
        self._path = path

    @property
    def pattern(self):
        """
        Gets the pattern of this SnapshotSchedule.
        Pattern expanded with strftime to create snapshot names.

        :return: The pattern of this SnapshotSchedule.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """
        Sets the pattern of this SnapshotSchedule.
        Pattern expanded with strftime to create snapshot names.

        :param pattern: The pattern of this SnapshotSchedule.
        :type: str
        """
        
        self._pattern = pattern

    @property
    def schedule(self):
        """
        Gets the schedule of this SnapshotSchedule.
        The isidate compatible natural language description of the schedule.

        :return: The schedule of this SnapshotSchedule.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this SnapshotSchedule.
        The isidate compatible natural language description of the schedule.

        :param schedule: The schedule of this SnapshotSchedule.
        :type: str
        """
        
        self._schedule = schedule

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

