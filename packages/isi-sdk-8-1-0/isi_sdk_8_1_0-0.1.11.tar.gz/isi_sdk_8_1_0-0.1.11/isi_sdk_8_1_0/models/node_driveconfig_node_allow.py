# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NodeDriveconfigNodeAllow(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NodeDriveconfigNodeAllow - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'format_unknown_firmware': 'bool',
            'format_unknown_model': 'bool'
        }

        self.attribute_map = {
            'format_unknown_firmware': 'format_unknown_firmware',
            'format_unknown_model': 'format_unknown_model'
        }

        self._format_unknown_firmware = True
        self._format_unknown_model = True

    @property
    def format_unknown_firmware(self):
        """
        Gets the format_unknown_firmware of this NodeDriveconfigNodeAllow.
        Allow formatting a drive model with unknown firmware.

        :return: The format_unknown_firmware of this NodeDriveconfigNodeAllow.
        :rtype: bool
        """
        return self._format_unknown_firmware

    @format_unknown_firmware.setter
    def format_unknown_firmware(self, format_unknown_firmware):
        """
        Sets the format_unknown_firmware of this NodeDriveconfigNodeAllow.
        Allow formatting a drive model with unknown firmware.

        :param format_unknown_firmware: The format_unknown_firmware of this NodeDriveconfigNodeAllow.
        :type: bool
        """
        
        self._format_unknown_firmware = format_unknown_firmware

    @property
    def format_unknown_model(self):
        """
        Gets the format_unknown_model of this NodeDriveconfigNodeAllow.
        Allow formatting an unknown drive model.

        :return: The format_unknown_model of this NodeDriveconfigNodeAllow.
        :rtype: bool
        """
        return self._format_unknown_model

    @format_unknown_model.setter
    def format_unknown_model(self, format_unknown_model):
        """
        Sets the format_unknown_model of this NodeDriveconfigNodeAllow.
        Allow formatting an unknown drive model.

        :param format_unknown_model: The format_unknown_model of this NodeDriveconfigNodeAllow.
        :type: bool
        """
        
        self._format_unknown_model = format_unknown_model

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

