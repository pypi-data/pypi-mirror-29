# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class LicenseLicensesExtended(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LicenseLicensesExtended - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'licenses': 'list[LicenseLicense]',
            'activation_incomplete_alert': 'bool',
            'base_only_licenses': 'list[str]',
            'evaluatable': 'list[str]',
            'swid': 'str',
            'valid_signature': 'bool'
        }

        self.attribute_map = {
            'licenses': 'licenses',
            'activation_incomplete_alert': 'activation_incomplete_alert',
            'base_only_licenses': 'base_only_licenses',
            'evaluatable': 'evaluatable',
            'swid': 'swid',
            'valid_signature': 'valid_signature'
        }

        self._licenses = None
        self._activation_incomplete_alert = None
        self._base_only_licenses = None
        self._evaluatable = None
        self._swid = None
        self._valid_signature = None

    @property
    def licenses(self):
        """
        Gets the licenses of this LicenseLicensesExtended.


        :return: The licenses of this LicenseLicensesExtended.
        :rtype: list[LicenseLicense]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """
        Sets the licenses of this LicenseLicensesExtended.


        :param licenses: The licenses of this LicenseLicensesExtended.
        :type: list[LicenseLicense]
        """
        
        self._licenses = licenses

    @property
    def activation_incomplete_alert(self):
        """
        Gets the activation_incomplete_alert of this LicenseLicensesExtended.
        True when we are generating an activation incomplete alert. An activation incomplete alert is generated if we do not have a signed license file 90 days after OneFS is upgraded.

        :return: The activation_incomplete_alert of this LicenseLicensesExtended.
        :rtype: bool
        """
        return self._activation_incomplete_alert

    @activation_incomplete_alert.setter
    def activation_incomplete_alert(self, activation_incomplete_alert):
        """
        Sets the activation_incomplete_alert of this LicenseLicensesExtended.
        True when we are generating an activation incomplete alert. An activation incomplete alert is generated if we do not have a signed license file 90 days after OneFS is upgraded.

        :param activation_incomplete_alert: The activation_incomplete_alert of this LicenseLicensesExtended.
        :type: bool
        """
        
        self._activation_incomplete_alert = activation_incomplete_alert

    @property
    def base_only_licenses(self):
        """
        Gets the base_only_licenses of this LicenseLicensesExtended.


        :return: The base_only_licenses of this LicenseLicensesExtended.
        :rtype: list[str]
        """
        return self._base_only_licenses

    @base_only_licenses.setter
    def base_only_licenses(self, base_only_licenses):
        """
        Sets the base_only_licenses of this LicenseLicensesExtended.


        :param base_only_licenses: The base_only_licenses of this LicenseLicensesExtended.
        :type: list[str]
        """
        
        self._base_only_licenses = base_only_licenses

    @property
    def evaluatable(self):
        """
        Gets the evaluatable of this LicenseLicensesExtended.


        :return: The evaluatable of this LicenseLicensesExtended.
        :rtype: list[str]
        """
        return self._evaluatable

    @evaluatable.setter
    def evaluatable(self, evaluatable):
        """
        Sets the evaluatable of this LicenseLicensesExtended.


        :param evaluatable: The evaluatable of this LicenseLicensesExtended.
        :type: list[str]
        """
        
        self._evaluatable = evaluatable

    @property
    def swid(self):
        """
        Gets the swid of this LicenseLicensesExtended.
        Software license identifier. SWID will be absent if not yet obtained from a license file.

        :return: The swid of this LicenseLicensesExtended.
        :rtype: str
        """
        return self._swid

    @swid.setter
    def swid(self, swid):
        """
        Sets the swid of this LicenseLicensesExtended.
        Software license identifier. SWID will be absent if not yet obtained from a license file.

        :param swid: The swid of this LicenseLicensesExtended.
        :type: str
        """
        
        if swid is not None and len(swid) > 50: 
            raise ValueError("Invalid value for `swid`, length must be less than `50`")
        if swid is not None and len(swid) < 1:
            raise ValueError("Invalid value for `swid`, length must be greater than or equal to `1`")
        if swid is not None and not re.search('.+', swid):
            raise ValueError("Invalid value for `swid`, must be a follow pattern or equal to `/.+/`")

        self._swid = swid

    @property
    def valid_signature(self):
        """
        Gets the valid_signature of this LicenseLicensesExtended.
        True if license file contains a valid signature.

        :return: The valid_signature of this LicenseLicensesExtended.
        :rtype: bool
        """
        return self._valid_signature

    @valid_signature.setter
    def valid_signature(self, valid_signature):
        """
        Sets the valid_signature of this LicenseLicensesExtended.
        True if license file contains a valid signature.

        :param valid_signature: The valid_signature of this LicenseLicensesExtended.
        :type: bool
        """
        
        self._valid_signature = valid_signature

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

