# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class HealthcheckItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HealthcheckItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'freshness': 'int',
            'id': 'str',
            'node': 'bool',
            'parameters': 'list[HealthcheckItemParameter]',
            'reference': 'str',
            'summary': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'freshness': 'freshness',
            'id': 'id',
            'node': 'node',
            'parameters': 'parameters',
            'reference': 'reference',
            'summary': 'summary'
        }

        self._description = None
        self._freshness = None
        self._id = None
        self._node = None
        self._parameters = None
        self._reference = None
        self._summary = None

    @property
    def description(self):
        """
        Gets the description of this HealthcheckItem.
        Optional extended description of item

        :return: The description of this HealthcheckItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this HealthcheckItem.
        Optional extended description of item

        :param description: The description of this HealthcheckItem.
        :type: str
        """
        
        self._description = description

    @property
    def freshness(self):
        """
        Gets the freshness of this HealthcheckItem.
        Maximum age in seconds of acceptable earlier results

        :return: The freshness of this HealthcheckItem.
        :rtype: int
        """
        return self._freshness

    @freshness.setter
    def freshness(self, freshness):
        """
        Sets the freshness of this HealthcheckItem.
        Maximum age in seconds of acceptable earlier results

        :param freshness: The freshness of this HealthcheckItem.
        :type: int
        """
        
        if freshness is not None and freshness < 0.0:
            raise ValueError("Invalid value for `freshness`, must be a value greater than or equal to `0.0`")

        self._freshness = freshness

    @property
    def id(self):
        """
        Gets the id of this HealthcheckItem.
        Unique identifier

        :return: The id of this HealthcheckItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this HealthcheckItem.
        Unique identifier

        :param id: The id of this HealthcheckItem.
        :type: str
        """
        
        self._id = id

    @property
    def node(self):
        """
        Gets the node of this HealthcheckItem.
        True if this item is to be evaluated on each node

        :return: The node of this HealthcheckItem.
        :rtype: bool
        """
        return self._node

    @node.setter
    def node(self, node):
        """
        Sets the node of this HealthcheckItem.
        True if this item is to be evaluated on each node

        :param node: The node of this HealthcheckItem.
        :type: bool
        """
        
        self._node = node

    @property
    def parameters(self):
        """
        Gets the parameters of this HealthcheckItem.
        Accepted and required parameters

        :return: The parameters of this HealthcheckItem.
        :rtype: list[HealthcheckItemParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this HealthcheckItem.
        Accepted and required parameters

        :param parameters: The parameters of this HealthcheckItem.
        :type: list[HealthcheckItemParameter]
        """
        
        self._parameters = parameters

    @property
    def reference(self):
        """
        Gets the reference of this HealthcheckItem.
        KB URL or similar reference link

        :return: The reference of this HealthcheckItem.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """
        Sets the reference of this HealthcheckItem.
        KB URL or similar reference link

        :param reference: The reference of this HealthcheckItem.
        :type: str
        """
        
        self._reference = reference

    @property
    def summary(self):
        """
        Gets the summary of this HealthcheckItem.
        Brief description of item

        :return: The summary of this HealthcheckItem.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """
        Sets the summary of this HealthcheckItem.
        Brief description of item

        :param summary: The summary of this HealthcheckItem.
        :type: str
        """
        
        self._summary = summary

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

