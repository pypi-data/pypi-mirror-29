# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class LicenseGenerate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LicenseGenerate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activated_license_list': 'list[str]',
            'activation': 'str',
            'hardware': 'list[LicenseGenerateHardwareItem]',
            'not_activated_license_list': 'list[str]'
        }

        self.attribute_map = {
            'activated_license_list': 'activated_license_list',
            'activation': 'activation',
            'hardware': 'hardware',
            'not_activated_license_list': 'not_activated_license_list'
        }

        self._activated_license_list = None
        self._activation = None
        self._hardware = None
        self._not_activated_license_list = None

    @property
    def activated_license_list(self):
        """
        Gets the activated_license_list of this LicenseGenerate.
        Array of licenses included in activation file.

        :return: The activated_license_list of this LicenseGenerate.
        :rtype: list[str]
        """
        return self._activated_license_list

    @activated_license_list.setter
    def activated_license_list(self, activated_license_list):
        """
        Sets the activated_license_list of this LicenseGenerate.
        Array of licenses included in activation file.

        :param activated_license_list: The activated_license_list of this LicenseGenerate.
        :type: list[str]
        """
        
        self._activated_license_list = activated_license_list

    @property
    def activation(self):
        """
        Gets the activation of this LicenseGenerate.
        Contents of licensing activation file.

        :return: The activation of this LicenseGenerate.
        :rtype: str
        """
        return self._activation

    @activation.setter
    def activation(self, activation):
        """
        Sets the activation of this LicenseGenerate.
        Contents of licensing activation file.

        :param activation: The activation of this LicenseGenerate.
        :type: str
        """
        
        if activation is not None and len(activation) > 2147483647: 
            raise ValueError("Invalid value for `activation`, length must be less than `2147483647`")
        if activation is not None and len(activation) < 1:
            raise ValueError("Invalid value for `activation`, length must be greater than or equal to `1`")
        if activation is not None and not re.search('.+', activation):
            raise ValueError("Invalid value for `activation`, must be a follow pattern or equal to `/.+/`")

        self._activation = activation

    @property
    def hardware(self):
        """
        Gets the hardware of this LicenseGenerate.
        Array of licenses included in activation file.

        :return: The hardware of this LicenseGenerate.
        :rtype: list[LicenseGenerateHardwareItem]
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """
        Sets the hardware of this LicenseGenerate.
        Array of licenses included in activation file.

        :param hardware: The hardware of this LicenseGenerate.
        :type: list[LicenseGenerateHardwareItem]
        """
        
        self._hardware = hardware

    @property
    def not_activated_license_list(self):
        """
        Gets the not_activated_license_list of this LicenseGenerate.
        An array of licenses not included in activation file.

        :return: The not_activated_license_list of this LicenseGenerate.
        :rtype: list[str]
        """
        return self._not_activated_license_list

    @not_activated_license_list.setter
    def not_activated_license_list(self, not_activated_license_list):
        """
        Sets the not_activated_license_list of this LicenseGenerate.
        An array of licenses not included in activation file.

        :param not_activated_license_list: The not_activated_license_list of this LicenseGenerate.
        :type: list[str]
        """
        
        self._not_activated_license_list = not_activated_license_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

