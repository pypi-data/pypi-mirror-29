# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AuthGroupObjectHistoryItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AuthGroupObjectHistoryItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'gid': 'AuthAccessAccessItemFileGroup',
            'sid': 'AuthAccessAccessItemFileGroup',
            'uid': 'AuthAccessAccessItemFileGroup'
        }

        self.attribute_map = {
            'gid': 'gid',
            'sid': 'sid',
            'uid': 'uid'
        }

        self._gid = None
        self._sid = None
        self._uid = None

    @property
    def gid(self):
        """
        Gets the gid of this AuthGroupObjectHistoryItem.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :return: The gid of this AuthGroupObjectHistoryItem.
        :rtype: AuthAccessAccessItemFileGroup
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """
        Sets the gid of this AuthGroupObjectHistoryItem.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :param gid: The gid of this AuthGroupObjectHistoryItem.
        :type: AuthAccessAccessItemFileGroup
        """
        
        self._gid = gid

    @property
    def sid(self):
        """
        Gets the sid of this AuthGroupObjectHistoryItem.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :return: The sid of this AuthGroupObjectHistoryItem.
        :rtype: AuthAccessAccessItemFileGroup
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """
        Sets the sid of this AuthGroupObjectHistoryItem.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :param sid: The sid of this AuthGroupObjectHistoryItem.
        :type: AuthAccessAccessItemFileGroup
        """
        
        self._sid = sid

    @property
    def uid(self):
        """
        Gets the uid of this AuthGroupObjectHistoryItem.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :return: The uid of this AuthGroupObjectHistoryItem.
        :rtype: AuthAccessAccessItemFileGroup
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this AuthGroupObjectHistoryItem.
        Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.

        :param uid: The uid of this AuthGroupObjectHistoryItem.
        :type: AuthAccessAccessItemFileGroup
        """
        
        self._uid = uid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

