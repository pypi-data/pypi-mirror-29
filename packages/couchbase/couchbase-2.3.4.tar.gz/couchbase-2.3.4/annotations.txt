[
    {
        "type_comments": [
            "(function, function) -> Tuple[function, function]"
        ], 
        "path": "couchbase/__init__.py", 
        "line": 38, 
        "samples": 4, 
        "func_name": "set_json_converters"
    }, 
    {
        "type_comments": [
            "(function, function) -> Tuple[function, function]"
        ], 
        "path": "couchbase/__init__.py", 
        "line": 66, 
        "samples": 4, 
        "func_name": "set_pickle_converters"
    }, 
    {
        "type_comments": [
            "(*Dict[str, Union[List[str], bool, str]]) -> str", 
            "(*Dict[str, Union[bool, str]]) -> str", 
            "(*Dict[str, Dict[int, Tuple[long, str]]]) -> str", 
            "(*Dict[str, Union[Tuple[str, str], bool, str]]) -> str", 
            "(*Dict[str, str]) -> str"
        ], 
        "path": "couchbase/__init__.py", 
        "line": 93, 
        "samples": 24, 
        "func_name": "_to_json"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/__init__.py", 
        "line": 115, 
        "samples": 2, 
        "func_name": "enable_logging"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/__init__.py", 
        "line": 133, 
        "samples": 2, 
        "func_name": "disable_logging"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/_bootstrap.py", 
        "line": 41, 
        "samples": 78, 
        "func_name": "_result__repr__"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/_bootstrap.py", 
        "line": 80, 
        "samples": 6, 
        "func_name": "_observeinfo__repr__"
    }, 
    {
        "type_comments": [
            "(*Dict[str, int]) -> str", 
            "(*Dict[str, str]) -> str", 
            "(*List[int]) -> str", 
            "(*Dict[str, Union[List[int], bool, str]]) -> str", 
            "(*str) -> str", 
            "(*Dict[str, Dict[int, Tuple[long, str]]]) -> str", 
            "(*int) -> str", 
            "(*Dict) -> str"
        ], 
        "path": "couchbase/_bootstrap.py", 
        "line": 103, 
        "samples": 457, 
        "func_name": "_json_encode_wrapper"
    }, 
    {
        "type_comments": [
            "(couchbase.views.params.Query) -> Tuple[str, str]", 
            "(couchbase.views.params.ViewQuery) -> Tuple[str, str]", 
            "(couchbase.views.params.SpatialQuery) -> Tuple[str, str]"
        ], 
        "path": "couchbase/_bootstrap.py", 
        "line": 117, 
        "samples": 44, 
        "func_name": "_view_path_helper"
    }, 
    {
        "type_comments": [
            "() -> bool", 
            "() -> None", 
            "() -> unicode", 
            "() -> str"
        ], 
        "path": "couchbase/_ixmgmt.py", 
        "line": 26, 
        "samples": 13, 
        "func_name": "fget"
    }, 
    {
        "type_comments": [
            "(Tuple[str, str]) -> None", 
            "(bool) -> None", 
            "(str) -> None"
        ], 
        "path": "couchbase/_ixmgmt.py", 
        "line": 29, 
        "samples": 20, 
        "func_name": "fset"
    }, 
    {
        "type_comments": [
            "(Dict[unicode, Union[List[unicode], unicode]]) -> None", 
            "(Dict[unicode, Union[bool, unicode]]) -> None", 
            "(None) -> None"
        ], 
        "path": "couchbase/_ixmgmt.py", 
        "line": 42, 
        "samples": 21, 
        "func_name": "N1qlIndex.__init__"
    }, 
    {
        "type_comments": [
            "(couchbase._ixmgmt.N1qlIndex, str) -> couchbase._ixmgmt.N1qlIndex"
        ], 
        "path": "couchbase/_ixmgmt.py", 
        "line": 65, 
        "samples": 5, 
        "func_name": "from_any"
    }, 
    {
        "type_comments": [
            "(couchbase._ixmgmt.N1qlIndex) -> str"
        ], 
        "path": "couchbase/_ixmgmt.py", 
        "line": 84, 
        "samples": 20, 
        "func_name": "index_to_rawjson"
    }, 
    {
        "type_comments": [
            "(couchbase.bucket.Bucket, str, couchbase._ixmgmt.N1qlIndex) -> None"
        ], 
        "path": "couchbase/_ixmgmt.py", 
        "line": 99, 
        "samples": 20, 
        "func_name": "IxmgmtRequest.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/_ixmgmt.py", 
        "line": 123, 
        "samples": 20, 
        "func_name": "IxmgmtRequest._start"
    }, 
    {
        "type_comments": [
            "(List) -> List", 
            "(List[Dict[unicode, Union[bool, unicode]]]) -> List[Dict[unicode, Union[bool, unicode]]]"
        ], 
        "path": "couchbase/_ixmgmt.py", 
        "line": 136, 
        "samples": 20, 
        "func_name": "IxmgmtRequest._process_payload"
    }, 
    {
        "type_comments": [
            "() -> ViewResult"
        ], 
        "path": "couchbase/_ixmgmt.py", 
        "line": 139, 
        "samples": 20, 
        "func_name": "raw"
    }, 
    {
        "type_comments": [
            "() -> couchbase._ixmgmt.N1qlIndex", 
            "() -> None"
        ], 
        "path": "couchbase/_ixmgmt.py", 
        "line": 143, 
        "samples": 21, 
        "func_name": "IxmgmtRequest.__iter__"
    }, 
    {
        "type_comments": [
            "() -> List", 
            "() -> List[couchbase._ixmgmt.N1qlIndex]"
        ], 
        "path": "couchbase/_ixmgmt.py", 
        "line": 159, 
        "samples": 20, 
        "func_name": "IxmgmtRequest.execute"
    }, 
    {
        "type_comments": [
            "(bool) -> None"
        ], 
        "path": "couchbase/_logutil.py", 
        "line": 36, 
        "samples": 4, 
        "func_name": "configure"
    }, 
    {
        "type_comments": [
            "(Dict[str, Dict[int, Tuple[int, str]]]) -> str", 
            "(Dict[unicode, Dict[unicode, unicode]]) -> unicode"
        ], 
        "path": "couchbase/_pyport.py", 
        "line": 47, 
        "samples": 12, 
        "func_name": "single_dict_key"
    }, 
    {
        "type_comments": [
            "(str, str, str, int) -> None", 
            "(str, str, unicode, int) -> None", 
            "(unicode, unicode, unicode, int) -> None"
        ], 
        "path": "couchbase/admin.py", 
        "line": 55, 
        "samples": 40, 
        "func_name": "Admin.__init__"
    }, 
    {
        "type_comments": [
            "(str, str, None, str, long) -> None", 
            "(str, str, str, str, long) -> HttpResult", 
            "(None, str, None, str, long) -> None", 
            "(str, str, None, str, long) -> HttpResult"
        ], 
        "path": "couchbase/admin.py", 
        "line": 94, 
        "samples": 46, 
        "func_name": "Admin.http_request"
    }, 
    {
        "type_comments": [
            "(Dict[str, str]) -> str", 
            "(Dict[str, Union[int, str]]) -> str"
        ], 
        "path": "couchbase/admin.py", 
        "line": 155, 
        "samples": 14, 
        "func_name": "Admin._mk_formstr"
    }, 
    {
        "type_comments": [
            "(str, str, str, int, int, bool) -> HttpResult"
        ], 
        "path": "couchbase/admin.py", 
        "line": 162, 
        "samples": 2, 
        "func_name": "Admin.bucket_create"
    }, 
    {
        "type_comments": [
            "(str) -> HttpResult", 
            "(str) -> None"
        ], 
        "path": "couchbase/admin.py", 
        "line": 212, 
        "samples": 4, 
        "func_name": "Admin.bucket_remove"
    }, 
    {
        "type_comments": [
            "(str) -> HttpResult", 
            "(str) -> None"
        ], 
        "path": "couchbase/admin.py", 
        "line": 225, 
        "samples": 12, 
        "func_name": "Admin.bucket_info"
    }, 
    {
        "type_comments": [
            "(str, int, float) -> None"
        ], 
        "path": "couchbase/admin.py", 
        "line": 241, 
        "samples": 2, 
        "func_name": "Admin.wait_ready"
    }, 
    {
        "type_comments": [
            "(None, str) -> None", 
            "(int, str) -> str", 
            "(None, None) -> None", 
            "(int, None) -> str"
        ], 
        "path": "couchbase/admin.py", 
        "line": 331, 
        "samples": 44, 
        "func_name": "_get_management_path"
    }, 
    {
        "type_comments": [
            "(int) -> HttpResult", 
            "(None) -> None"
        ], 
        "path": "couchbase/admin.py", 
        "line": 347, 
        "samples": 6, 
        "func_name": "Admin.users_get"
    }, 
    {
        "type_comments": [
            "(int, str) -> HttpResult", 
            "(None, str) -> None"
        ], 
        "path": "couchbase/admin.py", 
        "line": 358, 
        "samples": 6, 
        "func_name": "Admin.user_get"
    }, 
    {
        "type_comments": [
            "(int, str, str, List[Tuple[str, str]], None) -> HttpResult", 
            "(None, str, str, List[Tuple[str, str]], None) -> None"
        ], 
        "path": "couchbase/admin.py", 
        "line": 372, 
        "samples": 12, 
        "func_name": "Admin.user_upsert"
    }, 
    {
        "type_comments": [
            "(int, str) -> HttpResult", 
            "(None, str) -> None"
        ], 
        "path": "couchbase/admin.py", 
        "line": 422, 
        "samples": 12, 
        "func_name": "Admin.user_remove"
    }, 
    {
        "type_comments": [
            "(gcouchbase.iops_gevent10.IOPS, *str) -> None", 
            "(gcouchbase.iops_gevent10.IOPS) -> None"
        ], 
        "path": "couchbase/async/bucket.py", 
        "line": 111, 
        "samples": 197, 
        "func_name": "AsyncBucket.__init__"
    }, 
    {
        "type_comments": [
            "(*Union[str, unicode]) -> gcouchbase.bucket.GView", 
            "(*str) -> gcouchbase.bucket.GView", 
            "(*str) -> None"
        ], 
        "path": "couchbase/async/bucket.py", 
        "line": 154, 
        "samples": 24, 
        "func_name": "AsyncBucket.query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/async/rowsbase.py", 
        "line": 91, 
        "samples": 23, 
        "func_name": "AsyncRowsBase._start"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/async/rowsbase.py", 
        "line": 96, 
        "samples": 23, 
        "func_name": "AsyncRowsBase.start"
    }, 
    {
        "type_comments": [
            "(*Union[gcouchbase.bucket.Bucket, str, unicode]) -> None", 
            "(*Union[gcouchbase.bucket.Bucket, str]) -> None"
        ], 
        "path": "couchbase/async/view.py", 
        "line": 27, 
        "samples": 24, 
        "func_name": "AsyncViewBase.__init__"
    }, 
    {
        "type_comments": [
            "(str, str, int) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 42, 
        "samples": 52, 
        "func_name": "_depr"
    }, 
    {
        "type_comments": [
            "(couchbase.bucket.Bucket) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 49, 
        "samples": 9, 
        "func_name": "Pipeline.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 59, 
        "samples": 9, 
        "func_name": "Pipeline.__enter__"
    }, 
    {
        "type_comments": [
            "(*None) -> None", 
            "(*Union[couchbase.exceptions.PipelineError, traceback, type]) -> bool", 
            "(*Union[couchbase.exceptions.ArgumentError, traceback, type]) -> bool", 
            "(*None) -> bool"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 62, 
        "samples": 8, 
        "func_name": "Pipeline.__exit__"
    }, 
    {
        "type_comments": [
            "() -> List[MultiResult]", 
            "() -> List[OperationResult]", 
            "() -> List[Union[OperationResult, ValueResult]]"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 66, 
        "samples": 5, 
        "func_name": "results"
    }, 
    {
        "type_comments": [
            "(str, *int) -> couchbase.items.Item", 
            "(str, *int) -> pyannotate_runtime.collect_types.UnknownType", 
            "(str) -> pyannotate_runtime.collect_types.UnknownType", 
            "(str) -> int", 
            "(str, *str) -> None", 
            "(str, *str) -> couchbase.items.Item", 
            "(str, *int) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 105, 
        "samples": 40, 
        "func_name": "newfn"
    }, 
    {
        "type_comments": [
            "(*str) -> None", 
            "() -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 128, 
        "samples": 415, 
        "func_name": "Bucket.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 257, 
        "samples": 217, 
        "func_name": "Bucket._do_ctor_connect"
    }, 
    {
        "type_comments": [
            "() -> couchbase.bucket.Pipeline"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 263, 
        "samples": 9, 
        "func_name": "Bucket.pipeline"
    }, 
    {
        "type_comments": [
            "(str, str, int, int, None, int, int) -> None", 
            "(Tuple[str], str, int, int, None, int, int) -> None", 
            "(Tuple[], str, int, int, None, int, int) -> None", 
            "(str, Tuple[str], int, int, long, int, int) -> None", 
            "(str, str, int, int, None, int, int) -> OperationResult", 
            "(str, str, int, object, None, int, int) -> None", 
            "(str, str, int, str, None, int, int) -> None", 
            "(str, Tuple[], int, int, long, int, int) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 321, 
        "samples": 281, 
        "func_name": "Bucket.upsert"
    }, 
    {
        "type_comments": [
            "(str, Dict, int, None, int, int) -> AsyncResult", 
            "(str, str, int, None, int, int) -> AsyncResult", 
            "(str, Dict, int, None, int, int) -> OperationResult", 
            "(str, str, int, None, int, int) -> None", 
            "(str, List, int, None, int, int) -> OperationResult", 
            "(str, str, int, None, int, int) -> OperationResult", 
            "(str, str, int, long, int, int) -> None", 
            "(str, List, int, None, int, int) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 399, 
        "samples": 13, 
        "func_name": "Bucket.insert"
    }, 
    {
        "type_comments": [
            "(str, str, int, int, None, int, int) -> None", 
            "(str, str, long, int, None, int, int) -> AsyncResult", 
            "(str, str, long, int, None, int, int) -> OperationResult", 
            "(str, str, int, int, None, int, int) -> OperationResult", 
            "(str, str, int, int, None, int, int) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 417, 
        "samples": 8, 
        "func_name": "Bucket.replace"
    }, 
    {
        "type_comments": [
            "(str, List, int, None, int, int) -> None", 
            "(str, str, int, long, int, int) -> OperationResult", 
            "(str, Tuple[str], int, None, int, int) -> None", 
            "(str, Tuple[], int, None, int, int) -> None", 
            "(str, str, int, None, int, int) -> OperationResult", 
            "(str, str, int, None, int, int) -> None", 
            "(str, Set, int, None, int, int) -> None", 
            "(str, Dict[str, str], int, None, int, int) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 431, 
        "samples": 23, 
        "func_name": "Bucket.append"
    }, 
    {
        "type_comments": [
            "(str, str, int, None, int, int) -> None", 
            "(str, str, int, None, int, int) -> AsyncResult", 
            "(str, str, int, None, int, int) -> OperationResult", 
            "(str, str, int, long, int, int) -> OperationResult", 
            "(str, str, int, long, int, int) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 462, 
        "samples": 5, 
        "func_name": "Bucket.prepend"
    }, 
    {
        "type_comments": [
            "(str, str, None, bool, bool) -> None", 
            "(List, int, None, bool, bool) -> None", 
            "(Tuple[str], int, None, bool, bool) -> None", 
            "(Tuple[], int, None, bool, bool) -> None", 
            "(str, object, None, bool, bool) -> None", 
            "(Set, int, None, bool, bool) -> None", 
            "(Dict[str, str], int, None, bool, bool) -> None", 
            "(str, int, None, bool, bool) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 471, 
        "samples": 312, 
        "func_name": "Bucket.get"
    }, 
    {
        "type_comments": [
            "(str, List[int]) -> None", 
            "(str, int) -> OperationResult", 
            "(str, str) -> None", 
            "(str, int) -> None", 
            "(str, Dict[str, str]) -> None", 
            "(str, object) -> None", 
            "(str, int) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 543, 
        "samples": 16, 
        "func_name": "Bucket.touch"
    }, 
    {
        "type_comments": [
            "(str, List[int]) -> None", 
            "(str, int) -> None", 
            "(str, str) -> None", 
            "(str, int) -> ValueResult", 
            "(str, Dict[str, int]) -> None", 
            "(str, Dict[str, str]) -> None", 
            "(str, object) -> None", 
            "(str, int) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 569, 
        "samples": 30, 
        "func_name": "Bucket.lock"
    }, 
    {
        "type_comments": [
            "(str, int) -> AsyncResult", 
            "(str, int) -> None", 
            "(str, long) -> OperationResult", 
            "(str, long) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 638, 
        "samples": 10, 
        "func_name": "Bucket.unlock"
    }, 
    {
        "type_comments": [
            "(List, int, None, int, int) -> None", 
            "(str, int, bool, int, int) -> OperationResult", 
            "(Tuple[str], int, None, int, int) -> None", 
            "(Tuple[], int, None, int, int) -> None", 
            "(str, int, None, int, int) -> OperationResult", 
            "(str, int, None, int, int) -> None", 
            "(Set, int, None, int, int) -> None", 
            "(Dict[str, str], int, None, int, int) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 657, 
        "samples": 67, 
        "func_name": "Bucket.remove"
    }, 
    {
        "type_comments": [
            "(str, int, None, int) -> None", 
            "(List, int, None, int) -> None", 
            "(Tuple[str], int, None, int) -> None", 
            "(Tuple[], int, None, int) -> None", 
            "(str, int, None, str) -> None", 
            "(Set, int, None, int) -> None", 
            "(Dict[str, str], int, None, int) -> None", 
            "(str, int, None, object) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 716, 
        "samples": 38, 
        "func_name": "Bucket.counter"
    }, 
    {
        "type_comments": [
            "(str, *couchbase.subdocument.Spec) -> couchbase.result.SubdocResult", 
            "(str, *couchbase.subdocument.Spec) -> AsyncResult", 
            "(str, *couchbase.subdocument.Spec) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 775, 
        "samples": 76, 
        "func_name": "Bucket.mutate_in"
    }, 
    {
        "type_comments": [
            "(str, *couchbase.subdocument.Spec) -> None", 
            "(str, *couchbase.subdocument.Spec) -> AsyncResult", 
            "(couchbase.subdocument.Spec) -> None", 
            "(str, *couchbase.subdocument.Spec) -> couchbase.result.SubdocResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 819, 
        "samples": 78, 
        "func_name": "Bucket.lookup_in"
    }, 
    {
        "type_comments": [
            "(str, *str) -> None", 
            "(str, *str) -> couchbase.result.SubdocResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 844, 
        "samples": 48, 
        "func_name": "Bucket.retrieve_in"
    }, 
    {
        "type_comments": [
            "(str, bool) -> AsyncResult", 
            "(None, bool) -> AsyncResult", 
            "(None, bool) -> MultiResult", 
            "(List[str], bool) -> None", 
            "(str, bool) -> MultiResult", 
            "(List[str], bool) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 887, 
        "samples": 6, 
        "func_name": "Bucket.stats"
    }, 
    {
        "type_comments": [
            "() -> Dict[str, List[Dict[str, Union[long, str]]]]", 
            "() -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 916, 
        "samples": 2, 
        "func_name": "Bucket.ping"
    }, 
    {
        "type_comments": [
            "() -> Dict[unicode, Union[List[Dict[unicode, Union[int, unicode]]], int, unicode]]"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 936, 
        "samples": 2, 
        "func_name": "Bucket.diagnostics"
    }, 
    {
        "type_comments": [
            "(str, bool) -> None", 
            "(str, bool) -> ValueResult", 
            "(str, bool) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 966, 
        "samples": 4, 
        "func_name": "Bucket.observe"
    }, 
    {
        "type_comments": [
            "(Dict, int, None, int, int) -> None", 
            "(None, int, None, int, int) -> None", 
            "(str, int, None, int, int) -> None", 
            "(Set, int, None, int, int) -> None", 
            "(Dict[str, str], int, long, int, int) -> MultiResult", 
            "(couchbase.items.ItemSequence, int, None, int, int) -> MultiResult", 
            "(List, int, None, int, int) -> None", 
            "(Dict[str, str], int, None, int, int) -> MultiResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1098, 
        "samples": 89, 
        "func_name": "Bucket.upsert_multi"
    }, 
    {
        "type_comments": [
            "(couchbase.items.ItemSequence, int, None, int, int) -> MultiResult", 
            "(couchbase.items.ItemSequence, int, None, int, int) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1148, 
        "samples": 2, 
        "func_name": "Bucket.replace_multi"
    }, 
    {
        "type_comments": [
            "(couchbase.items.ItemOptionDict, long, int, int) -> AsyncResult", 
            "(couchbase.items.ItemSequence, None, int, int) -> None", 
            "(couchbase.items.ItemOptionDict, long, int, int) -> MultiResult", 
            "(couchbase.items.ItemOptionDict, None, int, int) -> None", 
            "(Dict[str, str], None, int, int) -> MultiResult", 
            "(Dict[str, str], None, int, int) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1158, 
        "samples": 8, 
        "func_name": "Bucket.append_multi"
    }, 
    {
        "type_comments": [
            "(couchbase.items.ItemOptionDict, long, int, int) -> AsyncResult", 
            "(Dict[str, str], None, int, int) -> AsyncResult", 
            "(Dict[str, str], None, int, int) -> MultiResult", 
            "(couchbase.items.ItemOptionDict, long, int, int) -> MultiResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1174, 
        "samples": 4, 
        "func_name": "Bucket.prepend_multi"
    }, 
    {
        "type_comments": [
            "(Dict[str, str], int, None, bool, bool) -> None", 
            "(Dict, int, None, bool, bool) -> None", 
            "(None, int, None, bool, bool) -> None", 
            "(str, int, None, bool, bool) -> None", 
            "(Dict[str, object], int, None, bool, bool) -> None", 
            "(Set, int, None, bool, bool) -> None", 
            "(List, int, None, bool, bool) -> None", 
            "(List[str], int, None, bool, bool) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1183, 
        "samples": 89, 
        "func_name": "Bucket.get_multi"
    }, 
    {
        "type_comments": [
            "(List[str], int) -> AsyncResult", 
            "(Dict[str, int], int) -> AsyncResult", 
            "(Dict[str, int], int) -> MultiResult", 
            "(List[str], int) -> MultiResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1200, 
        "samples": 6, 
        "func_name": "Bucket.touch_multi"
    }, 
    {
        "type_comments": [
            "(Tuple[str, str], int) -> None", 
            "(str, List[int]) -> None", 
            "(str, str) -> None", 
            "(str, int) -> None", 
            "(str, Dict[str, str]) -> None", 
            "(str, object) -> None", 
            "(List[str], int) -> MultiResult", 
            "(List[str], int) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1224, 
        "samples": 18, 
        "func_name": "Bucket.lock_multi"
    }, 
    {
        "type_comments": [
            "(Tuple[str, str]) -> None", 
            "(Tuple[OperationResult, OperationResult]) -> None", 
            "(Dict[str, ValueResult]) -> MultiResult", 
            "(Dict[str, long]) -> MultiResult", 
            "(Dict[str, int]) -> None", 
            "(MultiResult) -> MultiResult", 
            "(List[ValueResult]) -> MultiResult", 
            "(AsyncResult) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1237, 
        "samples": 18, 
        "func_name": "Bucket.unlock_multi"
    }, 
    {
        "type_comments": [
            "(Tuple[str, str], bool) -> MultiResult", 
            "(str, bool) -> None", 
            "(Tuple[str, str], bool) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1259, 
        "samples": 4, 
        "func_name": "Bucket.observe_multi"
    }, 
    {
        "type_comments": [
            "(Dict, None) -> None", 
            "(None, None) -> None", 
            "(str, None) -> None", 
            "(Set, None) -> None", 
            "(couchbase.items.ItemSequence, None) -> MultiResult", 
            "(List[str], None) -> MultiResult", 
            "(List, None) -> None", 
            "(List[str], bool) -> MultiResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1285, 
        "samples": 40, 
        "func_name": "Bucket.remove_multi"
    }, 
    {
        "type_comments": [
            "(str, None, int, str) -> None", 
            "(Dict, None, int, int) -> None", 
            "(None, None, int, int) -> None", 
            "(str, None, int, int) -> None", 
            "(str, None, int, object) -> None", 
            "(Set, None, int, int) -> None", 
            "(List, None, int, int) -> None", 
            "(str, None, int, List[int]) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1298, 
        "samples": 42, 
        "func_name": "Bucket.counter_multi"
    }, 
    {
        "type_comments": [
            "(str, str, bool, Dict[str, List[str]], bool, bool) -> HttpResult", 
            "(str, str, bool, str, bool, bool) -> HttpResult", 
            "(str, str, bool, Dict[str, int], bool, bool) -> HttpResult", 
            "(str, str, bool, None, bool, bool) -> None", 
            "(str, str, bool, Dict[str, str], bool, bool) -> HttpResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1377, 
        "samples": 20, 
        "func_name": "Bucket._view"
    }, 
    {
        "type_comments": [
            "(str, bool) -> str"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1409, 
        "samples": 87, 
        "func_name": "_mk_devmode"
    }, 
    {
        "type_comments": [
            "() -> couchbase.bucketmanager.BucketManager"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1415, 
        "samples": 32, 
        "func_name": "Bucket.bucket_manager"
    }, 
    {
        "type_comments": [
            "(str, unicode, bool) -> couchbase.views.iterator.View", 
            "(str, str, bool) -> couchbase.views.iterator.View", 
            "(str, unicode, bool) -> gcouchbase.bucket.GView", 
            "(str, str, bool) -> gcouchbase.bucket.GView", 
            "(str, str, bool) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1424, 
        "samples": 49, 
        "func_name": "Bucket.query"
    }, 
    {
        "type_comments": [
            "(str) -> couchbase.n1ql.N1QLRequest"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1468, 
        "samples": 6, 
        "func_name": "Bucket.n1ql_query"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1541, 
        "samples": 12, 
        "func_name": "Bucket.__repr__"
    }, 
    {
        "type_comments": [
            "(couchbase.items.ItemOptionDict) -> None", 
            "(couchbase.items.ItemOptionDict) -> MultiResult", 
            "(couchbase.items.ItemSequence) -> None", 
            "(couchbase.items.ItemOptionDict) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1548, 
        "samples": 6, 
        "func_name": "Bucket.append_items"
    }, 
    {
        "type_comments": [
            "(couchbase.items.ItemOptionDict) -> MultiResult", 
            "(couchbase.items.ItemOptionDict) -> AsyncResult"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1575, 
        "samples": 2, 
        "func_name": "Bucket.prepend_items"
    }, 
    {
        "type_comments": [
            "() -> long"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1586, 
        "samples": 161, 
        "func_name": "closed"
    }, 
    {
        "type_comments": [
            "(long) -> float"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1591, 
        "samples": 4, 
        "func_name": "Bucket._get_timeout_common"
    }, 
    {
        "type_comments": [
            "(long, str) -> None", 
            "(long, float) -> None", 
            "(long, None) -> None", 
            "(long, int) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1594, 
        "samples": 10, 
        "func_name": "Bucket._set_timeout_common"
    }, 
    {
        "type_comments": [
            "() -> float"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1601, 
        "samples": 4, 
        "func_name": "timeout"
    }, 
    {
        "type_comments": [
            "(str) -> None", 
            "(float) -> None", 
            "(None) -> None", 
            "(int) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1617, 
        "samples": 10, 
        "func_name": "timeout"
    }, 
    {
        "type_comments": [
            "(*List) -> None", 
            "(*str) -> None", 
            "(*Tuple[str, None, str]) -> None", 
            "(*Tuple[str]) -> None", 
            "(*None) -> None", 
            "(*Tuple[]) -> None", 
            "(*Union[object, str]) -> None", 
            "(*Union[Tuple[], str]) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1680, 
        "samples": 50, 
        "func_name": "_tmpmeth"
    }, 
    {
        "type_comments": [
            "(*int) -> None", 
            "(*Union[int, long]) -> long", 
            "(*int) -> unicode", 
            "(*int) -> float", 
            "(*int) -> long", 
            "(*Union[int, str]) -> None", 
            "(*long) -> float", 
            "(*long) -> bool"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1723, 
        "samples": 24, 
        "func_name": "Bucket._cntl"
    }, 
    {
        "type_comments": [
            "(str, str) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1772, 
        "samples": 819, 
        "func_name": "Bucket._cntlstr"
    }, 
    {
        "type_comments": [
            "() -> Tuple[str, int]"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1793, 
        "samples": 6, 
        "func_name": "lcb_version"
    }, 
    {
        "type_comments": [
            "(str, str) -> None", 
            "(str, unicode) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1840, 
        "samples": 8, 
        "func_name": "Bucket.add_bucket_creds"
    }, 
    {
        "type_comments": [
            "(couchbase.result.SubdocResult, bool) -> couchbase.items.Item"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1845, 
        "samples": 30, 
        "func_name": "Bucket._wrap_dsop"
    }, 
    {
        "type_comments": [
            "(str, str, str, bool) -> couchbase.items.Item", 
            "(str, str, str, bool) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1853, 
        "samples": 6, 
        "func_name": "map_add"
    }, 
    {
        "type_comments": [
            "(str, str) -> couchbase.items.Item", 
            "(str, str) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1889, 
        "samples": 16, 
        "func_name": "map_get"
    }, 
    {
        "type_comments": [
            "(str, str) -> couchbase.items.Item", 
            "(str, str) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1906, 
        "samples": 14, 
        "func_name": "map_remove"
    }, 
    {
        "type_comments": [
            "(str) -> int"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1927, 
        "samples": 10, 
        "func_name": "map_size"
    }, 
    {
        "type_comments": [
            "(str, str, bool) -> couchbase.items.Item", 
            "(str, str, bool) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1945, 
        "samples": 8, 
        "func_name": "list_append"
    }, 
    {
        "type_comments": [
            "(str, int, bool) -> couchbase.items.Item", 
            "(str, str, bool) -> couchbase.items.Item", 
            "(str, int, bool) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1970, 
        "samples": 12, 
        "func_name": "list_prepend"
    }, 
    {
        "type_comments": [
            "(str, int, str) -> couchbase.items.Item"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 1993, 
        "samples": 2, 
        "func_name": "list_set"
    }, 
    {
        "type_comments": [
            "(str, int, bool) -> couchbase.items.Item", 
            "(str, int, bool) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 2018, 
        "samples": 8, 
        "func_name": "set_add"
    }, 
    {
        "type_comments": [
            "(str, int) -> couchbase.items.Item", 
            "(str, int) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 2040, 
        "samples": 4, 
        "func_name": "set_remove"
    }, 
    {
        "type_comments": [
            "(str) -> int"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 2065, 
        "samples": 4, 
        "func_name": "Bucket.set_size"
    }, 
    {
        "type_comments": [
            "(str, int) -> bool"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 2076, 
        "samples": 4, 
        "func_name": "Bucket.set_contains"
    }, 
    {
        "type_comments": [
            "(str, int) -> couchbase.items.Item", 
            "(str, int) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 2087, 
        "samples": 14, 
        "func_name": "list_get"
    }, 
    {
        "type_comments": [
            "(str, int) -> couchbase.items.Item"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 2100, 
        "samples": 10, 
        "func_name": "list_remove"
    }, 
    {
        "type_comments": [
            "(str) -> int"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 2114, 
        "samples": 6, 
        "func_name": "list_size"
    }, 
    {
        "type_comments": [
            "(str, int, bool) -> couchbase.items.Item", 
            "(str, int, bool) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 2125, 
        "samples": 10, 
        "func_name": "queue_push"
    }, 
    {
        "type_comments": [
            "(str) -> couchbase.items.Item", 
            "(str) -> None"
        ], 
        "path": "couchbase/bucket.py", 
        "line": 2148, 
        "samples": 8, 
        "func_name": "queue_pop"
    }, 
    {
        "type_comments": [
            "(gcouchbase.bucket.Bucket) -> None", 
            "(couchbase.bucket.Bucket) -> None"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 35, 
        "samples": 32, 
        "func_name": "BucketManager.__init__"
    }, 
    {
        "type_comments": [
            "() -> HttpResult", 
            "() -> None"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 38, 
        "samples": 22, 
        "func_name": "BucketManager._http_request"
    }, 
    {
        "type_comments": [
            "(*Union[bool, str]) -> str"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 41, 
        "samples": 22, 
        "func_name": "BucketManager._mk_devmode"
    }, 
    {
        "type_comments": [
            "(HttpResult) -> unicode"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 47, 
        "samples": 6, 
        "func_name": "BucketManager._doc_rev"
    }, 
    {
        "type_comments": [
            "(str, bool, Dict[unicode, Union[Dict[unicode, Dict[unicode, unicode]], unicode]]) -> bool", 
            "(str, bool, Dict[unicode, Union[Dict[unicode, Dict[unicode, unicode]], unicode]]) -> None"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 55, 
        "samples": 10, 
        "func_name": "BucketManager._poll_vq_single"
    }, 
    {
        "type_comments": [
            "(str, str, None, int, bool) -> bool", 
            "(str, str, HttpResult, int, bool) -> bool"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 83, 
        "samples": 26, 
        "func_name": "BucketManager._design_poll"
    }, 
    {
        "type_comments": [
            "(str, Dict[str, Union[Dict[str, str], str]], bool, int) -> HttpResult", 
            "(str, Dict[str, Union[Dict[str, Dict[str, str]], str]], bool, int) -> HttpResult", 
            "(str, Dict[unicode, Union[Dict[unicode, Dict[unicode, unicode]], unicode]], bool, int) -> HttpResult"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 130, 
        "samples": 20, 
        "func_name": "BucketManager.design_create"
    }, 
    {
        "type_comments": [
            "(str, bool) -> HttpResult", 
            "(str, bool) -> None"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 192, 
        "samples": 22, 
        "func_name": "BucketManager.design_get"
    }, 
    {
        "type_comments": [
            "(str, int) -> HttpResult"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 217, 
        "samples": 2, 
        "func_name": "BucketManager.design_publish"
    }, 
    {
        "type_comments": [
            "(str, bool, int) -> HttpResult", 
            "(str, bool, int) -> None"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 249, 
        "samples": 12, 
        "func_name": "BucketManager.design_delete"
    }, 
    {
        "type_comments": [
            "(couchbase._ixmgmt.N1qlIndex, bool) -> couchbase._ixmgmt.N1qlIndex", 
            "(str, bool) -> couchbase._ixmgmt.N1qlIndex"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 340, 
        "samples": 17, 
        "func_name": "BucketManager._mk_index_def"
    }, 
    {
        "type_comments": [
            "(str) -> List", 
            "(str) -> None"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 355, 
        "samples": 16, 
        "func_name": "BucketManager.n1ql_index_create"
    }, 
    {
        "type_comments": [
            "(bool, bool) -> List", 
            "(bool, bool) -> None"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 414, 
        "samples": 6, 
        "func_name": "BucketManager.n1ql_index_create_primary"
    }, 
    {
        "type_comments": [
            "(str, bool) -> List", 
            "(couchbase._ixmgmt.N1qlIndex, bool) -> List", 
            "(str, bool) -> None"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 430, 
        "samples": 16, 
        "func_name": "BucketManager.n1ql_index_drop"
    }, 
    {
        "type_comments": [
            "() -> List", 
            "() -> None"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 444, 
        "samples": 4, 
        "func_name": "BucketManager.n1ql_index_drop_primary"
    }, 
    {
        "type_comments": [
            "(bool) -> List", 
            "(bool) -> List[couchbase._ixmgmt.N1qlIndex]"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 452, 
        "samples": 13, 
        "func_name": "BucketManager.n1ql_index_list"
    }, 
    {
        "type_comments": [
            "(bool) -> List[couchbase._ixmgmt.N1qlIndex]"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 466, 
        "samples": 1, 
        "func_name": "BucketManager.n1ql_index_build_deferred"
    }, 
    {
        "type_comments": [
            "(List[couchbase._ixmgmt.N1qlIndex], int, float, bool) -> List[couchbase._ixmgmt.N1qlIndex]", 
            "(List[str], int, float, bool) -> None"
        ], 
        "path": "couchbase/bucketmanager.py", 
        "line": 499, 
        "samples": 3, 
        "func_name": "BucketManager.n1ql_index_watch"
    }, 
    {
        "type_comments": [
            "(couchbase.connstr.ConnectionString, type) -> None"
        ], 
        "path": "couchbase/cluster.py", 
        "line": 39, 
        "samples": 12, 
        "func_name": "Cluster.__init__"
    }, 
    {
        "type_comments": [
            "(couchbase.cluster.PasswordAuthenticator, None, None) -> None", 
            "(None, None, None) -> None", 
            "(None, str, str) -> None", 
            "(couchbase.cluster.ClassicAuthenticator, None, None) -> None", 
            "(None, str, None) -> None"
        ], 
        "path": "couchbase/cluster.py", 
        "line": 58, 
        "samples": 24, 
        "func_name": "Cluster.authenticate"
    }, 
    {
        "type_comments": [
            "(str) -> gcouchbase.bucket.Bucket", 
            "(str) -> couchbase.bucket.Bucket", 
            "(str) -> None"
        ], 
        "path": "couchbase/cluster.py", 
        "line": 75, 
        "samples": 12, 
        "func_name": "Cluster.open_bucket"
    }, 
    {
        "type_comments": [
            "(str) -> None"
        ], 
        "path": "couchbase/cluster.py", 
        "line": 117, 
        "samples": 2, 
        "func_name": "Cluster.n1ql_query"
    }, 
    {
        "type_comments": [
            "(str, unicode) -> None", 
            "(str, str) -> None"
        ], 
        "path": "couchbase/cluster.py", 
        "line": 159, 
        "samples": 4, 
        "func_name": "PasswordAuthenticator.__init__"
    }, 
    {
        "type_comments": [
            "(*str) -> Tuple[str, unicode]", 
            "(*str) -> Tuple[str, str]"
        ], 
        "path": "couchbase/cluster.py", 
        "line": 178, 
        "samples": 6, 
        "func_name": "PasswordAuthenticator.get_credentials"
    }, 
    {
        "type_comments": [
            "(None, None, Dict[str, unicode]) -> None"
        ], 
        "path": "couchbase/cluster.py", 
        "line": 183, 
        "samples": 12, 
        "func_name": "ClassicAuthenticator.__init__"
    }, 
    {
        "type_comments": [
            "(str) -> Tuple[None, unicode]"
        ], 
        "path": "couchbase/cluster.py", 
        "line": 199, 
        "samples": 6, 
        "func_name": "ClassicAuthenticator.get_credentials"
    }, 
    {
        "type_comments": [
            "(unicode, List[unicode], None, str) -> None", 
            "(str, List[str], Dict[str, List[str]], str) -> None", 
            "(unicode, List[unicode], Dict[unicode, List[unicode]], unicode) -> None"
        ], 
        "path": "couchbase/connstr.py", 
        "line": 45, 
        "samples": 50, 
        "func_name": "ConnectionString.__init__"
    }, 
    {
        "type_comments": [
            "(unicode) -> couchbase.connstr.ConnectionString", 
            "(str) -> couchbase.connstr.ConnectionString"
        ], 
        "path": "couchbase/connstr.py", 
        "line": 75, 
        "samples": 48, 
        "func_name": "parse"
    }, 
    {
        "type_comments": [
            "(str, str) -> None"
        ], 
        "path": "couchbase/connstr.py", 
        "line": 120, 
        "samples": 6, 
        "func_name": "ConnectionString.set_option"
    }, 
    {
        "type_comments": [
            "(str) -> None"
        ], 
        "path": "couchbase/connstr.py", 
        "line": 123, 
        "samples": 12, 
        "func_name": "ConnectionString.clear_option"
    }, 
    {
        "type_comments": [
            "() -> str", 
            "() -> unicode"
        ], 
        "path": "couchbase/connstr.py", 
        "line": 126, 
        "samples": 48, 
        "func_name": "ConnectionString.encode"
    }, 
    {
        "type_comments": [
            "() -> str", 
            "() -> unicode"
        ], 
        "path": "couchbase/connstr.py", 
        "line": 145, 
        "samples": 36, 
        "func_name": "ConnectionString.__str__"
    }, 
    {
        "type_comments": [
            "(str) -> type", 
            "(str) -> None"
        ], 
        "path": "couchbase/deprecation.py", 
        "line": 9, 
        "samples": 4, 
        "func_name": "Wrapper.__getattr__"
    }, 
    {
        "type_comments": [
            "(int) -> type"
        ], 
        "path": "couchbase/exceptions.py", 
        "line": 87, 
        "samples": 37, 
        "func_name": "rc_to_exctype"
    }, 
    {
        "type_comments": [
            "(int) -> bool"
        ], 
        "path": "couchbase/exceptions.py", 
        "line": 103, 
        "samples": 24, 
        "func_name": "_can_derive"
    }, 
    {
        "type_comments": [
            "(Dict[str, Union[Tuple[str, int], TypeError, int, str]]) -> None", 
            "(Dict[str, Union[List[str], Tuple[str, int], str]]) -> None", 
            "(Dict[str, Optional[Union[Tuple[str, int], str]]]) -> None", 
            "(Dict[str, Union[Tuple[str, int], str]]) -> None", 
            "(Dict[str, Union[OverflowError, Tuple[str, int], long, str]]) -> None", 
            "(Dict[str, Union[Tuple[str, int], object, str]]) -> None", 
            "(Dict[str, Union[Tuple[], Tuple[str, int], str]]) -> None", 
            "(Dict[str, Union[Tuple[str, int], int, str, unicode]]) -> None"
        ], 
        "path": "couchbase/exceptions.py", 
        "line": 112, 
        "samples": 512, 
        "func_name": "CouchbaseError.__init__"
    }, 
    {
        "type_comments": [
            "(str, Dict[str, str], None) -> couchbase.exceptions.ArgumentError", 
            "(str, object, TypeError) -> couchbase.exceptions.ArgumentError", 
            "(str, None, None) -> couchbase.exceptions.ArgumentError", 
            "(str, int, None) -> couchbase.exceptions.ArgumentError", 
            "(str, str, None) -> couchbase.exceptions.ArgumentError", 
            "(str, str, ValueError) -> couchbase.exceptions.ArgumentError", 
            "(str, bool, None) -> couchbase.exceptions.ArgumentError", 
            "(str, object, None) -> couchbase.exceptions.ArgumentError"
        ], 
        "path": "couchbase/exceptions.py", 
        "line": 130, 
        "samples": 100, 
        "func_name": "pyexc"
    }, 
    {
        "type_comments": [
            "() -> Tuple[Dict[unicode, ValueResult], Dict[unicode, ValueResult]]"
        ], 
        "path": "couchbase/exceptions.py", 
        "line": 159, 
        "samples": 2, 
        "func_name": "CouchbaseError.split_results"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/exceptions.py", 
        "line": 202, 
        "samples": 76, 
        "func_name": "CouchbaseError.__str__"
    }, 
    {
        "type_comments": [
            "(int, None, type, str, List) -> type"
        ], 
        "path": "couchbase/exceptions.py", 
        "line": 583, 
        "samples": 2, 
        "func_name": "_mk_lcberr"
    }, 
    {
        "type_comments": [
            "(int, None, int) -> couchbase.exceptions._SubdocPathNotFoundError_0x3F ", 
            "(int, None, str) -> couchbase.exceptions._SubdocPathNotFoundError_0x3F "
        ], 
        "path": "couchbase/exceptions.py", 
        "line": 639, 
        "samples": 12, 
        "func_name": "exc_from_rc"
    }, 
    {
        "type_comments": [
            "() -> List", 
            "() -> int", 
            "() -> List[Dict[str, Union[int, str]]]", 
            "() -> None", 
            "() -> List[str]"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 31, 
        "samples": 120, 
        "func_name": "fget"
    }, 
    {
        "type_comments": [
            "(float) -> None", 
            "(List) -> None", 
            "(str) -> None", 
            "(bool) -> None", 
            "(Tuple[str, str]) -> None", 
            "(List[str]) -> None", 
            "(int) -> None", 
            "(Tuple[]) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 40, 
        "samples": 122, 
        "func_name": "fset"
    }, 
    {
        "type_comments": [
            "(str) -> str"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 69, 
        "samples": 4, 
        "func_name": "_highlight"
    }, 
    {
        "type_comments": [
            "(Dict[str, Union[float, int, str]]) -> None", 
            "(Dict[str, Union[int, str]]) -> None", 
            "(Dict[str, bool]) -> None", 
            "(Dict) -> None", 
            "(Dict[str, int]) -> None", 
            "(Dict[str, List]) -> None", 
            "(Dict[str, str]) -> None", 
            "(Dict[str, Union[float, str]]) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 86, 
        "samples": 100, 
        "func_name": "_assign_kwargs"
    }, 
    {
        "type_comments": [
            "(str) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 101, 
        "samples": 12, 
        "func_name": "Facet.__init__"
    }, 
    {
        "type_comments": [
            "() -> Dict[str, Union[List[Dict[str, str]], str]]", 
            "() -> Dict[str, str]", 
            "() -> Dict[str, Union[List[Dict[str, Union[float, str]]], str]]", 
            "() -> Dict[str, Union[int, str]]"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 104, 
        "samples": 12, 
        "func_name": "encodable"
    }, 
    {
        "type_comments": [
            "(str, int) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 124, 
        "samples": 4, 
        "func_name": "TermFacet.__init__"
    }, 
    {
        "type_comments": [
            "(str, str, str, str, str) -> Dict[str, str]", 
            "(str, str, str, None, str) -> Dict[str, str]", 
            "(str, str, str, float, float) -> Dict[str, Union[float, str]]", 
            "(str, str, str, int, int) -> Dict[str, Union[int, str]]", 
            "(str, str, str, str, None) -> Dict[str, str]", 
            "(str, str, str, None, None) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 133, 
        "samples": 14, 
        "func_name": "_mk_range_bucket"
    }, 
    {
        "type_comments": [
            "(str) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 166, 
        "samples": 4, 
        "func_name": "DateFacet.__init__"
    }, 
    {
        "type_comments": [
            "(str, str, str) -> couchbase.fulltext.DateFacet", 
            "(str, None, str) -> couchbase.fulltext.DateFacet", 
            "(str, str, None) -> couchbase.fulltext.DateFacet"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 170, 
        "samples": 8, 
        "func_name": "DateFacet.add_range"
    }, 
    {
        "type_comments": [
            "(str) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 193, 
        "samples": 4, 
        "func_name": "NumericFacet.__init__"
    }, 
    {
        "type_comments": [
            "(str, int, int) -> couchbase.fulltext.NumericFacet", 
            "(str, float, float) -> couchbase.fulltext.NumericFacet", 
            "(str, None, None) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 197, 
        "samples": 6, 
        "func_name": "NumericFacet.add_range"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 220, 
        "samples": 22, 
        "func_name": "_FacetDict.__init__"
    }, 
    {
        "type_comments": [
            "(str, couchbase.fulltext.DateFacet) -> None", 
            "(str, couchbase.fulltext.TermFacet) -> None", 
            "(str, couchbase.fulltext.NumericFacet) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 223, 
        "samples": 10, 
        "func_name": "_FacetDict.__setitem__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 231, 
        "samples": 22, 
        "func_name": "_FacetDict.update"
    }, 
    {
        "type_comments": [
            "(str) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 248, 
        "samples": 10, 
        "func_name": "Sort.__init__"
    }, 
    {
        "type_comments": [
            "() -> Dict[str, str]", 
            "() -> Dict[str, Union[bool, str]]", 
            "() -> List[str]", 
            "() -> Dict[str, Union[str, unicode]]"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 256, 
        "samples": 12, 
        "func_name": "Sort.as_encodable"
    }, 
    {
        "type_comments": [
            "(*str) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 265, 
        "samples": 2, 
        "func_name": "SortString.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 273, 
        "samples": 4, 
        "func_name": "SortScore.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 281, 
        "samples": 2, 
        "func_name": "SortID.__init__"
    }, 
    {
        "type_comments": [
            "(str) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 289, 
        "samples": 4, 
        "func_name": "SortField.__init__"
    }, 
    {
        "type_comments": [
            "(List[str]) -> List[str]", 
            "(couchbase.fulltext.SortString) -> couchbase.fulltext.SortString"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 324, 
        "samples": 4, 
        "func_name": "_convert_sort"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 348, 
        "samples": 22, 
        "func_name": "Params.__init__"
    }, 
    {
        "type_comments": [
            "(str) -> Dict[str, bool]", 
            "(str) -> Dict[str, int]", 
            "(str) -> Dict[str, Union[bool, int]]", 
            "(str) -> Dict[str, Dict[str, str]]", 
            "(str) -> Dict[str, Dict[str, Dict[str, Union[Dict[str, Dict[str, int]], str]]]]", 
            "(str) -> Dict"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 354, 
        "samples": 20, 
        "func_name": "Params.as_encodable"
    }, 
    {
        "type_comments": [
            "(couchbase.mutation_state.MutationState) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 423, 
        "samples": 2, 
        "func_name": "Params.consistent_with"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 447, 
        "samples": 68, 
        "func_name": "Query.__init__"
    }, 
    {
        "type_comments": [
            "() -> Dict[str, str]", 
            "() -> Dict[str, List[str]]", 
            "() -> Dict[str, None]", 
            "() -> Dict[str, unicode]", 
            "() -> Dict[str, Union[float, str]]", 
            "() -> Dict[str, bool]", 
            "() -> None", 
            "() -> Dict[str, Union[float, int, str, unicode]]"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 457, 
        "samples": 64, 
        "func_name": "encodable"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 469, 
        "samples": 74, 
        "func_name": "Query.validate"
    }, 
    {
        "type_comments": [
            "(Dict[str, str]) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 482, 
        "samples": 2, 
        "func_name": "RawQuery.__init__"
    }, 
    {
        "type_comments": [
            "(List) -> None", 
            "(Tuple[str, str]) -> None", 
            "(bool) -> None", 
            "(str) -> None", 
            "(Tuple[]) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 494, 
        "samples": 32, 
        "func_name": "_SingleQuery.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 604, 
        "samples": 4, 
        "func_name": "DocIdQuery.validate"
    }, 
    {
        "type_comments": [
            "(*str) -> None", 
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 655, 
        "samples": 4, 
        "func_name": "PhraseQuery.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 658, 
        "samples": 6, 
        "func_name": "PhraseQuery.validate"
    }, 
    {
        "type_comments": [
            "(float, float) -> None", 
            "(str, str) -> None", 
            "(None, str) -> None", 
            "(None, None) -> None", 
            "(None, float) -> None", 
            "(int, int) -> None", 
            "(str, None) -> None", 
            "(float, None) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 726, 
        "samples": 20, 
        "func_name": "_RangeQuery.__init__"
    }, 
    {
        "type_comments": [
            "(float, float) -> None", 
            "(None, float) -> None", 
            "(int, int) -> None", 
            "(None, None) -> None", 
            "(float, None) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 746, 
        "samples": 10, 
        "func_name": "NumericRangeQuery.__init__"
    }, 
    {
        "type_comments": [
            "(str, None) -> None", 
            "(str, str) -> None", 
            "(None, str) -> None", 
            "(None, None) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 789, 
        "samples": 10, 
        "func_name": "DateRangeQuery.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 854, 
        "samples": 12, 
        "func_name": "_CompoundQuery.__init__"
    }, 
    {
        "type_comments": [
            "() -> Dict[str, List[Dict[str, Union[float, str]]]]", 
            "() -> Dict[str, Union[List[Dict[str, Union[float, str]]], int]]", 
            "() -> Dict[str, Union[List[Dict[str, str]], int]]", 
            "() -> None", 
            "() -> Dict[str, List[Dict[str, str]]]"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 858, 
        "samples": 18, 
        "func_name": "encodable"
    }, 
    {
        "type_comments": [
            "(*couchbase.fulltext.PrefixQuery) -> None", 
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 880, 
        "samples": 6, 
        "func_name": "ConjunctionQuery.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 884, 
        "samples": 8, 
        "func_name": "ConjunctionQuery.validate"
    }, 
    {
        "type_comments": [
            "(int) -> int", 
            "(int) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 890, 
        "samples": 10, 
        "func_name": "_convert_gt0"
    }, 
    {
        "type_comments": [
            "(*couchbase.fulltext.PrefixQuery) -> None", 
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 905, 
        "samples": 6, 
        "func_name": "DisjunctionQuery.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 915, 
        "samples": 10, 
        "func_name": "DisjunctionQuery.validate"
    }, 
    {
        "type_comments": [
            "() -> couchbase.fulltext.ConjunctionQuery", 
            "() -> None", 
            "() -> couchbase.fulltext.DisjunctionQuery"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 930, 
        "samples": 10, 
        "func_name": "fget"
    }, 
    {
        "type_comments": [
            "(None) -> None", 
            "(List[couchbase.fulltext.PrefixQuery]) -> None", 
            "(couchbase.fulltext.PrefixQuery) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 933, 
        "samples": 10, 
        "func_name": "fset"
    }, 
    {
        "type_comments": [
            "(List[couchbase.fulltext.PrefixQuery], None, None) -> None", 
            "(couchbase.fulltext.PrefixQuery, couchbase.fulltext.PrefixQuery, couchbase.fulltext.PrefixQuery) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 961, 
        "samples": 4, 
        "func_name": "BooleanQuery.__init__"
    }, 
    {
        "type_comments": [
            "() -> Dict[str, Dict[str, List[Dict[str, Union[float, str]]]]]"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 999, 
        "samples": 2, 
        "func_name": "encodable"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 1010, 
        "samples": 2, 
        "func_name": "BooleanQuery.validate"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 1020, 
        "samples": 2, 
        "func_name": "MatchAllQuery.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 1030, 
        "samples": 4, 
        "func_name": "MatchNoneQuery.__init__"
    }, 
    {
        "type_comments": [
            "(str) -> None"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 1052, 
        "samples": 10, 
        "func_name": "NoChildrenError.__init__"
    }, 
    {
        "type_comments": [
            "(str, couchbase.fulltext.MatchNoneQuery, couchbase.fulltext.Params) -> Dict[str, Union[Dict[str, Optional[Dict[str, Union[Dict[str, Dict[str, int]], str]]]], str]]", 
            "(str, couchbase.fulltext.TermQuery, couchbase.fulltext.Params) -> Dict[str, Union[Dict[str, Union[float, int, str, unicode]], bool, str]]", 
            "(str, couchbase.fulltext.QueryStringQuery, couchbase.fulltext.Params) -> Dict[str, Union[Dict[str, Union[float, unicode]], bool, int, str]]", 
            "(str, couchbase.fulltext.MatchQuery, couchbase.fulltext.Params) -> Dict[str, Union[Dict[str, Union[float, int, str]], int, str]]", 
            "(str, couchbase.fulltext.MatchPhraseQuery, couchbase.fulltext.Params) -> Dict[str, Union[Dict[str, Union[float, str, unicode]], int, str]]"
        ], 
        "path": "couchbase/fulltext.py", 
        "line": 1056, 
        "samples": 10, 
        "func_name": "make_search_body"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 32, 
        "samples": 10, 
        "func_name": "SelectTimer.__init__"
    }, 
    {
        "type_comments": [
            "() -> float"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 36, 
        "samples": 68, 
        "func_name": "exptime"
    }, 
    {
        "type_comments": [
            "(float) -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 40, 
        "samples": 12, 
        "func_name": "exptime"
    }, 
    {
        "type_comments": [
            "(int) -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 44, 
        "samples": 12, 
        "func_name": "SelectTimer.activate"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 47, 
        "samples": 10, 
        "func_name": "SelectTimer.deactivate"
    }, 
    {
        "type_comments": [
            "() -> bool"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 50, 
        "samples": 29, 
        "func_name": "active"
    }, 
    {
        "type_comments": [
            "(couchbase.iops.select.SelectTimer) -> bool"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 55, 
        "samples": 27, 
        "func_name": "SelectTimer.__lt__"
    }, 
    {
        "type_comments": [
            "(couchbase.iops.select.SelectTimer) -> bool"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 60, 
        "samples": 16, 
        "func_name": "SelectTimer.__eq__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 64, 
        "samples": 2, 
        "func_name": "SelectIOPS.__init__"
    }, 
    {
        "type_comments": [
            "(couchbase.iops.select.SelectTimer) -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 75, 
        "samples": 10, 
        "func_name": "SelectIOPS._unregister_timer"
    }, 
    {
        "type_comments": [
            "(IOEvent) -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 80, 
        "samples": 2, 
        "func_name": "SelectIOPS._unregister_event"
    }, 
    {
        "type_comments": [
            "(couchbase.iops.select.SelectTimer, int, int) -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 94, 
        "samples": 13, 
        "func_name": "SelectIOPS.update_timer"
    }, 
    {
        "type_comments": [
            "(IOEvent, int, int, None) -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 104, 
        "samples": 10, 
        "func_name": "SelectIOPS.update_event"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 126, 
        "samples": 11, 
        "func_name": "SelectIOPS._poll"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 172, 
        "samples": 4, 
        "func_name": "SelectIOPS.start_watching"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 180, 
        "samples": 4, 
        "func_name": "SelectIOPS.stop_watching"
    }, 
    {
        "type_comments": [
            "() -> couchbase.iops.select.SelectTimer"
        ], 
        "path": "couchbase/iops/select.py", 
        "line": 183, 
        "samples": 10, 
        "func_name": "SelectIOPS.timer_event_factory"
    }, 
    {
        "type_comments": [
            "(str, Dict) -> None", 
            "(None, None) -> None", 
            "(str, str) -> None", 
            "(str, None) -> None"
        ], 
        "path": "couchbase/items.py", 
        "line": 29, 
        "samples": 50, 
        "func_name": "Item.__init__"
    }, 
    {
        "type_comments": [
            "() -> couchbase.items.ItemSequence", 
            "() -> couchbase.items.ItemOptionDict"
        ], 
        "path": "couchbase/items.py", 
        "line": 80, 
        "samples": 4, 
        "func_name": "Item.as_itcoll"
    }, 
    {
        "type_comments": [
            "(None) -> None", 
            "(Dict[couchbase.items.Item, Dict[str, bool]]) -> None"
        ], 
        "path": "couchbase/items.py", 
        "line": 123, 
        "samples": 14, 
        "func_name": "ItemOptionDict.__init__"
    }, 
    {
        "type_comments": [
            "() -> Dict[couchbase.items.Item, Dict[str, int]]", 
            "() -> Dict", 
            "() -> Dict[couchbase.items.Item, Dict[str, str]]"
        ], 
        "path": "couchbase/items.py", 
        "line": 137, 
        "samples": 8, 
        "func_name": "dict"
    }, 
    {
        "type_comments": [
            "(None) -> None", 
            "(couchbase.items.Item) -> None"
        ], 
        "path": "couchbase/items.py", 
        "line": 144, 
        "samples": 20, 
        "func_name": "ItemOptionDict.add"
    }, 
    {
        "type_comments": [
            "(str, None, int) -> None", 
            "(str, str, int) -> None"
        ], 
        "path": "couchbase/items.py", 
        "line": 160, 
        "samples": 6, 
        "func_name": "ItemOptionDict.create_and_add"
    }, 
    {
        "type_comments": [
            "() -> Tuple[couchbase.items.Item, Dict[str, long]]", 
            "() -> Tuple[couchbase.items.Item, None]", 
            "() -> Tuple[None, None]", 
            "() -> None", 
            "() -> Tuple[couchbase.items.Item, Dict[str, str]]", 
            "() -> Tuple[couchbase.items.Item, Dict[str, bool]]"
        ], 
        "path": "couchbase/items.py", 
        "line": 171, 
        "samples": 36, 
        "func_name": "ItemOptionDict.__iter__"
    }, 
    {
        "type_comments": [
            "() -> int"
        ], 
        "path": "couchbase/items.py", 
        "line": 175, 
        "samples": 22, 
        "func_name": "ItemOptionDict.__len__"
    }, 
    {
        "type_comments": [
            "(List) -> None", 
            "(List[couchbase.tests.cases.itmops_t.MyItem]) -> None", 
            "(couchbase.items.Item) -> None", 
            "(List[couchbase.items.Item]) -> None", 
            "(List[couchbase.tests.cases.itmops_t.MyItem]) -> None"
        ], 
        "path": "couchbase/items.py", 
        "line": 179, 
        "samples": 16, 
        "func_name": "ItemSequence.__init__"
    }, 
    {
        "type_comments": [
            "() -> int"
        ], 
        "path": "couchbase/items.py", 
        "line": 197, 
        "samples": 20, 
        "func_name": "ItemSequence.__len__"
    }, 
    {
        "type_comments": [
            "() -> Tuple[None, None]", 
            "() -> Tuple[couchbase.tests.cases.itmops_t.MyItem, None]", 
            "() -> Tuple[couchbase.tests.cases.itmops_t.MyItem, None]", 
            "() -> None", 
            "() -> Tuple[couchbase.items.Item, None]"
        ], 
        "path": "couchbase/items.py", 
        "line": 200, 
        "samples": 30, 
        "func_name": "ItemSequence.__iter__"
    }, 
    {
        "type_comments": [
            "(*OperationResult) -> None", 
            "() -> None"
        ], 
        "path": "couchbase/mutation_state.py", 
        "line": 67, 
        "samples": 8, 
        "func_name": "MutationState.__init__"
    }, 
    {
        "type_comments": [
            "(Tuple[int, str, int, str]) -> None", 
            "(Tuple[int, int, int, str]) -> None", 
            "(Tuple[int, long, long, str]) -> None"
        ], 
        "path": "couchbase/mutation_state.py", 
        "line": 72, 
        "samples": 14, 
        "func_name": "MutationState._add_scanvec"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/mutation_state.py", 
        "line": 81, 
        "samples": 4, 
        "func_name": "MutationState.encode"
    }, 
    {
        "type_comments": [
            "() -> Dict[str, int]"
        ], 
        "path": "couchbase/mutation_state.py", 
        "line": 90, 
        "samples": 2, 
        "func_name": "MutationState._to_fts_encodable"
    }, 
    {
        "type_comments": [
            "(*OperationResult) -> bool"
        ], 
        "path": "couchbase/mutation_state.py", 
        "line": 111, 
        "samples": 4, 
        "func_name": "MutationState.add_results"
    }, 
    {
        "type_comments": [
            "() -> bool"
        ], 
        "path": "couchbase/mutation_state.py", 
        "line": 170, 
        "samples": 4, 
        "func_name": "MutationState.__nonzero__"
    }, 
    {
        "type_comments": [
            "(str, *str) -> None", 
            "(str) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 70, 
        "samples": 28, 
        "func_name": "N1QLQuery.__init__"
    }, 
    {
        "type_comments": [
            "() -> couchbase.n1ql.N1QLQuery"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 129, 
        "samples": 4, 
        "func_name": "N1QLQuery._set_named_args"
    }, 
    {
        "type_comments": [
            "(*str) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 143, 
        "samples": 4, 
        "func_name": "N1QLQuery._add_pos_args"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 164, 
        "samples": 2, 
        "func_name": "statement"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 168, 
        "samples": 2, 
        "func_name": "consistency"
    }, 
    {
        "type_comments": [
            "(str) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 177, 
        "samples": 6, 
        "func_name": "consistency"
    }, 
    {
        "type_comments": [
            "(couchbase.mutation_state.MutationState) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 181, 
        "samples": 2, 
        "func_name": "N1QLQuery.consistent_with"
    }, 
    {
        "type_comments": [
            "() -> bool"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 201, 
        "samples": 6, 
        "func_name": "adhoc"
    }, 
    {
        "type_comments": [
            "() -> bool"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 219, 
        "samples": 6, 
        "func_name": "cross_bucket"
    }, 
    {
        "type_comments": [
            "(bool) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 229, 
        "samples": 2, 
        "func_name": "cross_bucket"
    }, 
    {
        "type_comments": [
            "() -> float"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 233, 
        "samples": 2, 
        "func_name": "timeout"
    }, 
    {
        "type_comments": [
            "(int) -> None", 
            "(str) -> None", 
            "(float) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 251, 
        "samples": 6, 
        "func_name": "timeout"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 259, 
        "samples": 24, 
        "func_name": "encoded"
    }, 
    {
        "type_comments": [
            "() -> int"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 269, 
        "samples": 2, 
        "func_name": "scan_cap"
    }, 
    {
        "type_comments": [
            "(int) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 281, 
        "samples": 2, 
        "func_name": "scan_cap"
    }, 
    {
        "type_comments": [
            "() -> int"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 285, 
        "samples": 2, 
        "func_name": "pipeline_batch"
    }, 
    {
        "type_comments": [
            "(int) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 296, 
        "samples": 2, 
        "func_name": "pipeline_batch"
    }, 
    {
        "type_comments": [
            "() -> int"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 300, 
        "samples": 2, 
        "func_name": "pipeline_cap"
    }, 
    {
        "type_comments": [
            "(int) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 311, 
        "samples": 2, 
        "func_name": "pipeline_cap"
    }, 
    {
        "type_comments": [
            "() -> bool"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 315, 
        "samples": 2, 
        "func_name": "readonly"
    }, 
    {
        "type_comments": [
            "(bool) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 333, 
        "samples": 2, 
        "func_name": "readonly"
    }, 
    {
        "type_comments": [
            "(couchbase.n1ql.N1QLQuery, couchbase.bucket.Bucket, function) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 345, 
        "samples": 6, 
        "func_name": "N1QLRequest.__init__"
    }, 
    {
        "type_comments": [
            "() -> MultiResult"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 377, 
        "samples": 6, 
        "func_name": "N1QLRequest._submit_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 382, 
        "samples": 6, 
        "func_name": "N1QLRequest._start"
    }, 
    {
        "type_comments": [
            "() -> ViewResult"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 389, 
        "samples": 9, 
        "func_name": "raw"
    }, 
    {
        "type_comments": [
            "(Dict[unicode, Union[Dict[unicode, Union[int, unicode]], List, unicode]]) -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 421, 
        "samples": 3, 
        "func_name": "N1QLRequest._handle_meta"
    }, 
    {
        "type_comments": [
            "(List) -> List", 
            "(List[Dict[unicode, unicode]]) -> List[Dict[unicode, unicode]]"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 429, 
        "samples": 5, 
        "func_name": "N1QLRequest._process_payload"
    }, 
    {
        "type_comments": [
            "() -> couchbase.n1ql.N1QLRequest", 
            "() -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 442, 
        "samples": 6, 
        "func_name": "N1QLRequest.execute"
    }, 
    {
        "type_comments": [
            "() -> Dict[unicode, unicode]", 
            "() -> None"
        ], 
        "path": "couchbase/n1ql.py", 
        "line": 468, 
        "samples": 7, 
        "func_name": "N1QLRequest.__iter__"
    }, 
    {
        "type_comments": [
            "(str) -> int", 
            "(str) -> None"
        ], 
        "path": "couchbase/result.py", 
        "line": 64, 
        "samples": 20, 
        "func_name": "__path2index"
    }, 
    {
        "type_comments": [
            "(int) -> Tuple[int, unicode]", 
            "(int) -> Tuple[int, List[Union[bool, int]]]", 
            "(int) -> Tuple[int, List[Union[List[int], bool, int]]]", 
            "(int) -> Tuple[int, None]", 
            "(int) -> Tuple[int, List[unicode]]", 
            "(str) -> Tuple[int, unicode]", 
            "(int) -> Tuple[int, int]", 
            "(int) -> Tuple[int, List[bool]]"
        ], 
        "path": "couchbase/result.py", 
        "line": 73, 
        "samples": 66, 
        "func_name": "SubdocResult._resolve"
    }, 
    {
        "type_comments": [
            "(int) -> int", 
            "(int) -> List[Union[List[int], bool, int]]", 
            "(str) -> None", 
            "(str) -> unicode", 
            "(int) -> List[bool]", 
            "(int) -> unicode", 
            "(int) -> List[Union[bool, int]]", 
            "(int) -> None"
        ], 
        "path": "couchbase/result.py", 
        "line": 80, 
        "samples": 64, 
        "func_name": "SubdocResult.__getitem__"
    }, 
    {
        "type_comments": [
            "() -> int", 
            "() -> None"
        ], 
        "path": "couchbase/result.py", 
        "line": 87, 
        "samples": 10, 
        "func_name": "SubdocResult.__iter__"
    }, 
    {
        "type_comments": [
            "() -> int"
        ], 
        "path": "couchbase/result.py", 
        "line": 104, 
        "samples": 2, 
        "func_name": "result_count"
    }, 
    {
        "type_comments": [
            "(int, None) -> Tuple[int, None]", 
            "(int, None) -> Tuple[int, unicode]", 
            "(str, None) -> Tuple[int, None]", 
            "(int, None) -> None", 
            "(str, None) -> Tuple[int, unicode]"
        ], 
        "path": "couchbase/result.py", 
        "line": 115, 
        "samples": 20, 
        "func_name": "SubdocResult.get"
    }, 
    {
        "type_comments": [
            "(str) -> bool", 
            "(int) -> bool"
        ], 
        "path": "couchbase/result.py", 
        "line": 135, 
        "samples": 18, 
        "func_name": "SubdocResult.exists"
    }, 
    {
        "type_comments": [
            "(int) -> bool", 
            "(str) -> bool"
        ], 
        "path": "couchbase/result.py", 
        "line": 153, 
        "samples": 4, 
        "func_name": "SubdocResult.__contains__"
    }, 
    {
        "type_comments": [
            "() -> bool"
        ], 
        "path": "couchbase/result.py", 
        "line": 156, 
        "samples": 2, 
        "func_name": "access_ok"
    }, 
    {
        "type_comments": [
            "(*Union[couchbase.subdocument.MultiValue, int, long, str]) -> couchbase.subdocument.Spec", 
            "(*Union[int, long, str]) -> couchbase.subdocument.Spec", 
            "(*Union[int, str]) -> couchbase.subdocument.Spec", 
            "(*Union[List[str], int, long, str]) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 23, 
        "samples": 126, 
        "func_name": "__new__"
    }, 
    {
        "type_comments": [
            "(long, str, bool) -> couchbase.subdocument.Spec", 
            "(int, str, bool) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 34, 
        "samples": 94, 
        "func_name": "_gen_3spec"
    }, 
    {
        "type_comments": [
            "(long, str, couchbase.subdocument.MultiValue, bool, bool, bool) -> couchbase.subdocument.Spec", 
            "(long, str, List[str], bool, bool, bool) -> couchbase.subdocument.Spec", 
            "(long, str, Dict, bool, bool, bool) -> couchbase.subdocument.Spec", 
            "(long, str, None, bool, bool, bool) -> couchbase.subdocument.Spec", 
            "(long, str, str, bool, bool, bool) -> couchbase.subdocument.Spec", 
            "(long, str, int, bool, bool, bool) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 49, 
        "samples": 72, 
        "func_name": "_gen_4spec"
    }, 
    {
        "type_comments": [
            "(*bool) -> couchbase.subdocument.MultiValue", 
            "(*List[int]) -> couchbase.subdocument.MultiValue", 
            "(*str) -> couchbase.subdocument.MultiValue", 
            "(*int) -> couchbase.subdocument.MultiValue"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 67, 
        "samples": 26, 
        "func_name": "__new__"
    }, 
    {
        "type_comments": [
            "(str) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 77, 
        "samples": 78, 
        "func_name": "get"
    }, 
    {
        "type_comments": [
            "(str) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 88, 
        "samples": 12, 
        "func_name": "exists"
    }, 
    {
        "type_comments": [
            "(str, Dict, bool) -> couchbase.subdocument.Spec", 
            "(str, None, bool) -> couchbase.subdocument.Spec", 
            "(str, str, bool) -> couchbase.subdocument.Spec", 
            "(str, List[str], bool) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 99, 
        "samples": 28, 
        "func_name": "upsert"
    }, 
    {
        "type_comments": [
            "(str, str) -> couchbase.subdocument.Spec", 
            "(str, Dict[str, str]) -> couchbase.subdocument.Spec", 
            "(str, Dict) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 131, 
        "samples": 6, 
        "func_name": "replace"
    }, 
    {
        "type_comments": [
            "(str, str, bool) -> couchbase.subdocument.Spec", 
            "(str, Dict, bool) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 143, 
        "samples": 6, 
        "func_name": "insert"
    }, 
    {
        "type_comments": [
            "(str, *str) -> couchbase.subdocument.Spec", 
            "(str, *bool) -> couchbase.subdocument.Spec", 
            "(str, *int) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 156, 
        "samples": 12, 
        "func_name": "array_append"
    }, 
    {
        "type_comments": [
            "(str, *int) -> couchbase.subdocument.Spec", 
            "(str, *List[int]) -> couchbase.subdocument.Spec", 
            "(str, *str) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 183, 
        "samples": 14, 
        "func_name": "array_prepend"
    }, 
    {
        "type_comments": [
            "(str, int, bool) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 218, 
        "samples": 8, 
        "func_name": "array_addunique"
    }, 
    {
        "type_comments": [
            "(str, int, bool) -> couchbase.subdocument.Spec", 
            "(str, str, bool) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 242, 
        "samples": 10, 
        "func_name": "counter"
    }, 
    {
        "type_comments": [
            "(str) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 270, 
        "samples": 14, 
        "func_name": "remove"
    }, 
    {
        "type_comments": [
            "(str) -> couchbase.subdocument.Spec"
        ], 
        "path": "couchbase/subdocument.py", 
        "line": 281, 
        "samples": 4, 
        "func_name": "get_count"
    }, 
    {
        "type_comments": [
            "(Dict) -> Dict", 
            "(Dict[str, unicode]) -> Dict", 
            "(Dict[str, str]) -> Dict[str, str]", 
            "(Dict[str, couchbase.iops.select.SelectIOPS]) -> Dict", 
            "(Dict[str, Union[bool, long]]) -> Dict", 
            "(Dict[str, unicode]) -> Dict[str, Union[str, unicode]]", 
            "(Dict[str, str]) -> Dict", 
            "(Dict[str, long]) -> Dict"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 56, 
        "samples": 805, 
        "func_name": "filter_opts"
    }, 
    {
        "type_comments": [
            "() -> Dict[str, Union[str, unicode]]", 
            "() -> Dict[str, Union[couchbase.iops.select.SelectIOPS, unicode]]", 
            "() -> Dict[str, Union[type, unicode]]", 
            "() -> Dict[str, Union[bool, long, unicode]]", 
            "() -> Dict[str, Union[int, unicode]]", 
            "() -> Dict[str, unicode]", 
            "() -> Dict[str, Union[long, unicode]]", 
            "() -> Dict[str, Union[float, unicode]]"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 61, 
        "samples": 409, 
        "func_name": "ClusterInformation.make_connargs"
    }, 
    {
        "type_comments": [
            "(type) -> gcouchbase.bucket.Bucket", 
            "(type) -> couchbase.bucket.Bucket"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 89, 
        "samples": 369, 
        "func_name": "ClusterInformation.make_connection"
    }, 
    {
        "type_comments": [
            "() -> couchbase.admin.Admin"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 93, 
        "samples": 32, 
        "func_name": "ClusterInformation.make_admin_connection"
    }, 
    {
        "type_comments": [
            "(*Dict) -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 146, 
        "samples": 4, 
        "func_name": "MockResourceManager.make"
    }, 
    {
        "type_comments": [
            "() -> bool"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 179, 
        "samples": 502, 
        "func_name": "MockResourceManager.isDirty"
    }, 
    {
        "type_comments": [
            "(*Dict) -> couchbase.tests.base.ClusterInformation"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 188, 
        "samples": 4, 
        "func_name": "RealServerResourceManager.make"
    }, 
    {
        "type_comments": [
            "() -> bool"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 191, 
        "samples": 502, 
        "func_name": "RealServerResourceManager.isDirty"
    }, 
    {
        "type_comments": [
            "() -> couchbase.tests.base.ClusterInformation"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 239, 
        "samples": 467, 
        "func_name": "cluster_info"
    }, 
    {
        "type_comments": [
            "() -> bool"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 246, 
        "samples": 4, 
        "func_name": "is_realserver"
    }, 
    {
        "type_comments": [
            "() -> bool"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 250, 
        "samples": 2, 
        "func_name": "is_mock"
    }, 
    {
        "type_comments": [
            "() -> couchbase.tests.base.ClusterInformation"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 254, 
        "samples": 16, 
        "func_name": "realserver_info"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 260, 
        "samples": 2, 
        "func_name": "mock"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 267, 
        "samples": 24, 
        "func_name": "mock_info"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 273, 
        "samples": 506, 
        "func_name": "CouchbaseTestCase.setUp"
    }, 
    {
        "type_comments": [
            "(str) -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 303, 
        "samples": 2, 
        "func_name": "CouchbaseTestCase.skipLcbMin"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 332, 
        "samples": 48, 
        "func_name": "CouchbaseTestCase.skipIfMock"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 335, 
        "samples": 2, 
        "func_name": "CouchbaseTestCase.skipUnlessMock"
    }, 
    {
        "type_comments": [
            "() -> Dict[str, unicode]", 
            "() -> Dict[str, Union[type, unicode]]"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 338, 
        "samples": 40, 
        "func_name": "CouchbaseTestCase.make_connargs"
    }, 
    {
        "type_comments": [
            "() -> gcouchbase.bucket.Bucket", 
            "() -> couchbase.bucket.Bucket"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 341, 
        "samples": 369, 
        "func_name": "CouchbaseTestCase.make_connection"
    }, 
    {
        "type_comments": [
            "() -> couchbase.admin.Admin"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 344, 
        "samples": 32, 
        "func_name": "CouchbaseTestCase.make_admin_connection"
    }, 
    {
        "type_comments": [
            "(str) -> str", 
            "(None) -> str"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 347, 
        "samples": 338, 
        "func_name": "CouchbaseTestCase.gen_key"
    }, 
    {
        "type_comments": [
            "(int, str) -> List[str]"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 355, 
        "samples": 41, 
        "func_name": "CouchbaseTestCase.gen_key_list"
    }, 
    {
        "type_comments": [
            "(int, str) -> Dict[str, str]"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 359, 
        "samples": 33, 
        "func_name": "CouchbaseTestCase.gen_kv_dict"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 368, 
        "samples": 170, 
        "func_name": "ConnectionTestCase.checkCbRefcount"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 386, 
        "samples": 355, 
        "func_name": "ConnectionTestCase.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 390, 
        "samples": 327, 
        "func_name": "ConnectionTestCase.tearDown"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 402, 
        "samples": 10, 
        "func_name": "RealServerTestCase.setUp"
    }, 
    {
        "type_comments": [
            "() -> couchbase.tests.base.ClusterInformation"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 408, 
        "samples": 10, 
        "func_name": "cluster_info"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 415, 
        "samples": 24, 
        "func_name": "MockTestCase.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/base.py", 
        "line": 420, 
        "samples": 24, 
        "func_name": "MockTestCase.make_connection"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 35, 
        "samples": 28, 
        "func_name": "AdminSimpleTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 39, 
        "samples": 28, 
        "func_name": "AdminSimpleTest.tearDown"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 48, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_http_request"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 56, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_connection_string_param"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 64, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_bucket_param"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 73, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_bad_request"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 85, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_bad_args"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 95, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_bad_auth"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 101, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_bad_host"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 106, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_bad_handle"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 114, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_actions"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 153, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_create_ephemeral_bucket_and_use"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 213, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_build_user_management_path"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 227, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_create_list_get_remove_internal_user"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 247, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_invalid_domain_raises_argument_error"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/admin_t.py", 
        "line": 259, 
        "samples": 2, 
        "func_name": "AdminSimpleTest.test_user_api_aliases"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/append_t.py", 
        "line": 29, 
        "samples": 2, 
        "func_name": "AppendTest.test_append_prepend"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/append_t.py", 
        "line": 39, 
        "samples": 2, 
        "func_name": "AppendTest.test_append_binary"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/append_t.py", 
        "line": 49, 
        "samples": 2, 
        "func_name": "AppendTest.test_append_nostr"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/append_t.py", 
        "line": 58, 
        "samples": 2, 
        "func_name": "AppendTest.test_append_enoent"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/append_t.py", 
        "line": 68, 
        "samples": 2, 
        "func_name": "AppendTest.test_append_multi"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/arithmetic_t.py", 
        "line": 24, 
        "samples": 2, 
        "func_name": "ArithmeticTest.test_trivial_incrdecr"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/arithmetic_t.py", 
        "line": 44, 
        "samples": 2, 
        "func_name": "ArithmeticTest.test_incr_notfound"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/arithmetic_t.py", 
        "line": 49, 
        "samples": 2, 
        "func_name": "ArithmeticTest.test_incr_badval"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/arithmetic_t.py", 
        "line": 54, 
        "samples": 2, 
        "func_name": "ArithmeticTest.test_incr_multi"
    }, 
    {
        "type_comments": [
            "(int) -> None"
        ], 
        "path": "couchbase/tests/cases/arithmetic_t.py", 
        "line": 57, 
        "samples": 10, 
        "func_name": "_multi_lim_assert"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/arithmetic_t.py", 
        "line": 82, 
        "samples": 2, 
        "func_name": "ArithmeticTest.test_incr_extended"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/badargs_t.py", 
        "line": 28, 
        "samples": 2, 
        "func_name": "BadArgsTest.test_bad_single"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/badargs_t.py", 
        "line": 57, 
        "samples": 2, 
        "func_name": "BadArgsTest.test_bad_multi"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/badargs_t.py", 
        "line": 75, 
        "samples": 2, 
        "func_name": "BadArgsTest.test_bad_timeout"
    }, 
    {
        "type_comments": [
            "(str) -> None", 
            "(None) -> None", 
            "(int) -> None"
        ], 
        "path": "couchbase/tests/cases/badargs_t.py", 
        "line": 76, 
        "samples": 8, 
        "func_name": "_set_timeout"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/badargs_t.py", 
        "line": 88, 
        "samples": 2, 
        "func_name": "BadArgsTest.test_bad_quiet"
    }, 
    {
        "type_comments": [
            "(bool) -> None", 
            "(None) -> None", 
            "(str) -> None"
        ], 
        "path": "couchbase/tests/cases/badargs_t.py", 
        "line": 89, 
        "samples": 8, 
        "func_name": "_set_quiet"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/badargs_t.py", 
        "line": 97, 
        "samples": 2, 
        "func_name": "BadArgsTest.test_badargs_get"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/badargs_t.py", 
        "line": 106, 
        "samples": 2, 
        "func_name": "BadArgsTest.test_bad_default_format"
    }, 
    {
        "type_comments": [
            "(str) -> None", 
            "(long) -> None"
        ], 
        "path": "couchbase/tests/cases/badargs_t.py", 
        "line": 107, 
        "samples": 10, 
        "func_name": "_set_fmt"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/badargs_t.py", 
        "line": 127, 
        "samples": 2, 
        "func_name": "BadArgsTest.test_negative_ttl"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 9, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_fuzzy"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 28, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_match_phrase"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 45, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_match_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 64, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_string_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 78, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_params"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 139, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_facets"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 166, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_raw_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 170, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_wildcard_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 174, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_docid_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 180, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_boolean_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 204, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_daterange_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 215, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_numrange_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 226, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_disjunction_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 238, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_conjunction_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 245, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_match_all_none_queries"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 249, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_phrase_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 258, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_prefix_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 262, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_regexp_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 266, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_booleanfield_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 270, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_consistency"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cbftstrings_t.py", 
        "line": 301, 
        "samples": 2, 
        "func_name": "FTStringsTest.test_advanced_sort"
    }, 
    {
        "type_comments": [
            "() -> Tuple[couchbase.cluster.Cluster, str]"
        ], 
        "path": "couchbase/tests/cases/cluster_t.py", 
        "line": 26, 
        "samples": 12, 
        "func_name": "ClusterTest._create_cluster"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cluster_t.py", 
        "line": 39, 
        "samples": 2, 
        "func_name": "ClusterTest.test_cluster"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cluster_t.py", 
        "line": 45, 
        "samples": 2, 
        "func_name": "ClusterTest.test_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cluster_t.py", 
        "line": 63, 
        "samples": 2, 
        "func_name": "ClusterTest.test_no_mixed_auth"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cluster_t.py", 
        "line": 77, 
        "samples": 2, 
        "func_name": "ClusterTest.test_pathless_connstr"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cluster_t.py", 
        "line": 83, 
        "samples": 2, 
        "func_name": "ClusterTest.test_validate_authenticate"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/cluster_t.py", 
        "line": 93, 
        "samples": 2, 
        "func_name": "ClusterTest.test_can_authenticate_with_username_password"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/connection_t.py", 
        "line": 33, 
        "samples": 2, 
        "func_name": "ConnectionTest.test_server_not_found"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/connection_t.py", 
        "line": 45, 
        "samples": 2, 
        "func_name": "ConnectionTest.test_bucket"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/connection_t.py", 
        "line": 49, 
        "samples": 2, 
        "func_name": "ConnectionTest.test_bucket_not_found"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/connection_t.py", 
        "line": 54, 
        "samples": 2, 
        "func_name": "ConnectionTest.test_quiet"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/connection_t.py", 
        "line": 68, 
        "samples": 2, 
        "func_name": "ConnectionTest.test_configcache"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/connection_t.py", 
        "line": 95, 
        "samples": 2, 
        "func_name": "ConnectionTest.test_invalid_hostname"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/connection_t.py", 
        "line": 99, 
        "samples": 2, 
        "func_name": "ConnectionTest.test_multi_hosts"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/connection_t.py", 
        "line": 117, 
        "samples": 2, 
        "func_name": "ConnectionTest.test_enable_error_map"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/connstr_t.py", 
        "line": 27, 
        "samples": 2, 
        "func_name": "ConnStrTest.test_pathless_connstr"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/connstr_t.py", 
        "line": 32, 
        "samples": 2, 
        "func_name": "ConnStrTest.test_does_not_encode_slashes"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/datastructures_t.py", 
        "line": 23, 
        "samples": 2, 
        "func_name": "DatastructureTest.test_map"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/datastructures_t.py", 
        "line": 43, 
        "samples": 2, 
        "func_name": "DatastructureTest.test_list"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/datastructures_t.py", 
        "line": 75, 
        "samples": 2, 
        "func_name": "DatastructureTest.test_sets"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/datastructures_t.py", 
        "line": 95, 
        "samples": 2, 
        "func_name": "DatastructureTest.test_queue"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/delete_t.py", 
        "line": 23, 
        "samples": 2, 
        "func_name": "DeleteTest.test_trivial_delete"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/delete_t.py", 
        "line": 34, 
        "samples": 2, 
        "func_name": "DeleteTest.test_delete_notfound"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/delete_t.py", 
        "line": 44, 
        "samples": 2, 
        "func_name": "DeleteTest.test_delete_cas"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/delete_t.py", 
        "line": 53, 
        "samples": 2, 
        "func_name": "DeleteTest.test_delete_badcas"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/delete_t.py", 
        "line": 61, 
        "samples": 2, 
        "func_name": "DeleteTest.test_delete_multi"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/delete_t.py", 
        "line": 76, 
        "samples": 2, 
        "func_name": "DeleteTest.test_delete_dict"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/delete_t.py", 
        "line": 90, 
        "samples": 2, 
        "func_name": "DeleteTest.test_delete_mixed"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/design_t.py", 
        "line": 38, 
        "samples": 4, 
        "func_name": "DesignDocManagementTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/design_t.py", 
        "line": 53, 
        "samples": 4, 
        "func_name": "DesignDocManagementTest.tearDown"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/design_t.py", 
        "line": 58, 
        "samples": 2, 
        "func_name": "DesignDocManagementTest.test_design_management"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/design_t.py", 
        "line": 88, 
        "samples": 2, 
        "func_name": "DesignDocManagementTest.test_design_headers"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/diag_t.py", 
        "line": 100, 
        "samples": 4, 
        "func_name": "DiagnosticsTests.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/diag_t.py", 
        "line": 103, 
        "samples": 2, 
        "func_name": "DiagnosticsTests.test_ping"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/diag_t.py", 
        "line": 107, 
        "samples": 2, 
        "func_name": "DiagnosticsTests.test_diagnostics"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/dupkeys_t.py", 
        "line": 24, 
        "samples": 2, 
        "func_name": "DupKeyTest.setUp"
    }, 
    {
        "type_comments": [
            "(List[warnings.WarningMessage]) -> None"
        ], 
        "path": "couchbase/tests/cases/dupkeys_t.py", 
        "line": 27, 
        "samples": 10, 
        "func_name": "DupKeyTest._assertWarned"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/dupkeys_t.py", 
        "line": 38, 
        "samples": 2, 
        "func_name": "DupKeyTest.test_duplicate_keys"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/empty_key_t.py", 
        "line": 23, 
        "samples": 2, 
        "func_name": "EmptyKeyTest.test_empty_key"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/encodings_t.py", 
        "line": 29, 
        "samples": 2, 
        "func_name": "EncodingTest.test_default_format"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/encodings_t.py", 
        "line": 32, 
        "samples": 2, 
        "func_name": "EncodingTest.test_unicode"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/encodings_t.py", 
        "line": 39, 
        "samples": 2, 
        "func_name": "EncodingTest.test_json_unicode"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/encodings_t.py", 
        "line": 48, 
        "samples": 2, 
        "func_name": "EncodingTest.test_json_compact"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/encodings_t.py", 
        "line": 63, 
        "samples": 2, 
        "func_name": "EncodingTest.test_blob"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/encodings_t.py", 
        "line": 71, 
        "samples": 2, 
        "func_name": "EncodingTest.test_bytearray"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/encodings_t.py", 
        "line": 77, 
        "samples": 2, 
        "func_name": "EncodingTest.test_passthrough"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/encodings_t.py", 
        "line": 90, 
        "samples": 2, 
        "func_name": "EncodingTest.test_zerolength"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/encodings_t.py", 
        "line": 98, 
        "samples": 2, 
        "func_name": "EncodingTest.test_blob_keys_py2"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/encodings_t.py", 
        "line": 105, 
        "samples": 2, 
        "func_name": "EncodingTest.test_compat_interop"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/enh_err_t.py", 
        "line": 30, 
        "samples": 2, 
        "func_name": "EnhancedErrorTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> couchbase.tests.base.ClusterInformation"
        ], 
        "path": "couchbase/tests/cases/enh_err_t.py", 
        "line": 38, 
        "samples": 6, 
        "func_name": "cluster_info"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/enh_err_t.py", 
        "line": 42, 
        "samples": 2, 
        "func_name": "EnhancedErrorTest.tearDown"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/enh_err_t.py", 
        "line": 51, 
        "samples": 2, 
        "func_name": "EnhancedErrorTest.test_enhanced_err_present_authorisation"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/excextra_t.py", 
        "line": 26, 
        "samples": 2, 
        "func_name": "ExceptionsTest.test_simple_excextra"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/excextra_t.py", 
        "line": 50, 
        "samples": 2, 
        "func_name": "ExceptionsTest.test_multi_exc"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/format_t.py", 
        "line": 27, 
        "samples": 2, 
        "func_name": "FormatTest.test_set_autoformat"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/format_t.py", 
        "line": 59, 
        "samples": 2, 
        "func_name": "FormatTest.test_set_format"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/format_t.py", 
        "line": 88, 
        "samples": 2, 
        "func_name": "FormatTest.test_get_noformat"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/format_t.py", 
        "line": 105, 
        "samples": 2, 
        "func_name": "FormatTest.test_get_format"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/get_t.py", 
        "line": 32, 
        "samples": 2, 
        "func_name": "GetTest.test_trivial_get"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/get_t.py", 
        "line": 44, 
        "samples": 2, 
        "func_name": "GetTest.test_get_missing_key"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/get_t.py", 
        "line": 53, 
        "samples": 2, 
        "func_name": "GetTest.test_multi_get"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/get_t.py", 
        "line": 69, 
        "samples": 2, 
        "func_name": "GetTest.test_multi_mixed"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/get_t.py", 
        "line": 123, 
        "samples": 2, 
        "func_name": "GetTest.test_extended_get"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/get_t.py", 
        "line": 163, 
        "samples": 2, 
        "func_name": "GetTest.test_get_ttl"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/get_t.py", 
        "line": 175, 
        "samples": 2, 
        "func_name": "GetTest.test_get_multi_ttl"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/iops_t.py", 
        "line": 25, 
        "samples": 2, 
        "func_name": "IopsTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> couchbase.bucket.Bucket"
        ], 
        "path": "couchbase/tests/cases/iops_t.py", 
        "line": 28, 
        "samples": 2, 
        "func_name": "IopsTest._iops_connection"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/iops_t.py", 
        "line": 31, 
        "samples": 1, 
        "func_name": "IopsTest.test_creation"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/iops_t.py", 
        "line": 35, 
        "samples": 1, 
        "func_name": "IopsTest.test_simple_ops"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itertypes_t.py", 
        "line": 24, 
        "samples": 2, 
        "func_name": "ItertypeTest.test_itertypes"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itertypes_t.py", 
        "line": 36, 
        "samples": 2, 
        "func_name": "ItertypeTest.test_bad_elements"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itertypes_t.py", 
        "line": 55, 
        "samples": 2, 
        "func_name": "ItertypeTest.test_iterclass"
    }, 
    {
        "type_comments": [
            "() -> Dict[str, Union[function, str]]"
        ], 
        "path": "couchbase/tests/cases/itertypes_t.py", 
        "line": 56, 
        "samples": 2, 
        "func_name": "IterTemp"
    }, 
    {
        "type_comments": [
            "(bool, bool) -> None"
        ], 
        "path": "couchbase/tests/cases/itertypes_t.py", 
        "line": 57, 
        "samples": 10, 
        "func_name": "IterTemp.__init__"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/tests/cases/itertypes_t.py", 
        "line": 63, 
        "samples": 10, 
        "func_name": "IterTemp.__iter__"
    }, 
    {
        "type_comments": [
            "() -> int"
        ], 
        "path": "couchbase/tests/cases/itertypes_t.py", 
        "line": 71, 
        "samples": 10, 
        "func_name": "IterTemp.__len__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 29, 
        "samples": 20, 
        "func_name": "ItemTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 32, 
        "samples": 2, 
        "func_name": "ItemTest.test_construction"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 44, 
        "samples": 2, 
        "func_name": "ItemTest.test_simple_get"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 73, 
        "samples": 2, 
        "func_name": "ItemTest.test_item_format"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 81, 
        "samples": 2, 
        "func_name": "ItemTest.test_items_append"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 107, 
        "samples": 2, 
        "func_name": "ItemTest.test_items_ignorecas"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 129, 
        "samples": 2, 
        "func_name": "ItemTest.test_subclass_descriptors"
    }, 
    {
        "type_comments": [
            "() -> Dict[str, Union[function, property, str]]"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 130, 
        "samples": 2, 
        "func_name": "MyItem"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 131, 
        "samples": 2, 
        "func_name": "MyItem.__init__"
    }, 
    {
        "type_comments": [
            "(str) -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 136, 
        "samples": 2, 
        "func_name": "value"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 148, 
        "samples": 2, 
        "func_name": "ItemTest.test_apiwrap"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 159, 
        "samples": 2, 
        "func_name": "ItemTest.test_invalid_item"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 167, 
        "samples": 2, 
        "func_name": "ItemTest.test_create_and_add"
    }, 
    {
        "type_comments": [
            "(str) -> Tuple[couchbase.items.Item, Dict[str, int]]"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 175, 
        "samples": 4, 
        "func_name": "_find_item"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/itmops_t.py", 
        "line": 196, 
        "samples": 2, 
        "func_name": "ItemTest.test_pycbc366"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/ixmgmt_t.py", 
        "line": 25, 
        "samples": 8, 
        "func_name": "IndexManagementTestCase._clear_indexes"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/ixmgmt_t.py", 
        "line": 32, 
        "samples": 8, 
        "func_name": "IndexManagementTestCase.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/ixmgmt_t.py", 
        "line": 43, 
        "samples": 4, 
        "func_name": "IndexManagementTestCase.tearDown"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/ixmgmt_t.py", 
        "line": 47, 
        "samples": 1, 
        "func_name": "IndexManagementTestCase.test_create_primary"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/ixmgmt_t.py", 
        "line": 89, 
        "samples": 1, 
        "func_name": "IndexManagementTestCase.test_alt_indexes"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/ixmgmt_t.py", 
        "line": 125, 
        "samples": 1, 
        "func_name": "IndexManagementTestCase.test_list_indexes"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/ixmgmt_t.py", 
        "line": 139, 
        "samples": 1, 
        "func_name": "IndexManagementTestCase.test_deferred"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/lock_t.py", 
        "line": 30, 
        "samples": 2, 
        "func_name": "LockTest.test_simple_lock"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/lock_t.py", 
        "line": 59, 
        "samples": 2, 
        "func_name": "LockTest.test_timed_lock"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/lock_t.py", 
        "line": 68, 
        "samples": 2, 
        "func_name": "LockTest.test_multi_lock"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/lock_t.py", 
        "line": 80, 
        "samples": 2, 
        "func_name": "LockTest.test_unlock_multi"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/lock_t.py", 
        "line": 96, 
        "samples": 2, 
        "func_name": "LockTest.test_missing_expiry"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/lock_t.py", 
        "line": 102, 
        "samples": 2, 
        "func_name": "LockTest.test_missing_cas"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/lock_t.py", 
        "line": 110, 
        "samples": 2, 
        "func_name": "LockTest.test_resobjs"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/lockmode_t.py", 
        "line": 26, 
        "samples": 1, 
        "func_name": "LockmodeTest.test_lockmode_defaults"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/lockmode_t.py", 
        "line": 54, 
        "samples": 1, 
        "func_name": "LockmodeTest.test_lockmode_exc"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/lockmode_t.py", 
        "line": 68, 
        "samples": 1, 
        "func_name": "LockmodeTest.test_lockmode_wait"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/lockmode_t.py", 
        "line": 76, 
        "samples": 1, 
        "func_name": "runfunc"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 29, 
        "samples": 2, 
        "func_name": "MiscTest.test_server_nodes"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 36, 
        "samples": 2, 
        "func_name": "_set_nodes"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 40, 
        "samples": 2, 
        "func_name": "MiscTest.test_lcb_version"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 45, 
        "samples": 2, 
        "func_name": "MiscTest.test_bucket"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 52, 
        "samples": 2, 
        "func_name": "MiscTest.test_conn_repr"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 56, 
        "samples": 2, 
        "func_name": "MiscTest.test_connection_defaults"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 75, 
        "samples": 2, 
        "func_name": "MiscTest.test_closed"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 83, 
        "samples": 2, 
        "func_name": "MiscTest.test_fmt_args"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 95, 
        "samples": 2, 
        "func_name": "MiscTest.test_cntl"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 120, 
        "samples": 2, 
        "func_name": "MiscTest.test_newer_ctls"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 130, 
        "samples": 2, 
        "func_name": "MiscTest.test_cntl_string"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 135, 
        "samples": 2, 
        "func_name": "MiscTest.test_vbmap"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 143, 
        "samples": 2, 
        "func_name": "MiscTest.test_logging"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 159, 
        "samples": 2, 
        "func_name": "MiscTest.test_compat_timeout"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/misc_t.py", 
        "line": 163, 
        "samples": 2, 
        "func_name": "MiscTest.test_multi_auth"
    }, 
    {
        "type_comments": [
            "() -> gcouchbase.bucket.Bucket", 
            "() -> couchbase.bucket.Bucket"
        ], 
        "path": "couchbase/tests/cases/mutationtokens_t.py", 
        "line": 27, 
        "samples": 8, 
        "func_name": "MutationTokensTest.make_connection"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/mutationtokens_t.py", 
        "line": 37, 
        "samples": 2, 
        "func_name": "MutationTokensTest.test_mutinfo_enabled"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/mutationtokens_t.py", 
        "line": 58, 
        "samples": 2, 
        "func_name": "MutationTokensTest.test_mutinfo_disabled"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/mutationtokens_t.py", 
        "line": 65, 
        "samples": 2, 
        "func_name": "MutationTokensTest.test_mutation_state"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 27, 
        "samples": 20, 
        "func_name": "N1QLStringTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 30, 
        "samples": 2, 
        "func_name": "N1QLStringTest.test_encode_namedargs"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 41, 
        "samples": 2, 
        "func_name": "N1QLStringTest.test_encode_posargs"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 49, 
        "samples": 2, 
        "func_name": "N1QLStringTest.test_encode_mixed_args"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 57, 
        "samples": 2, 
        "func_name": "N1QLStringTest.test_encoded_consistency"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 68, 
        "samples": 2, 
        "func_name": "N1QLStringTest.test_encode_scanvec"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 102, 
        "samples": 2, 
        "func_name": "N1QLStringTest.test_timeout"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 108, 
        "samples": 2, 
        "func_name": "setfn"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 117, 
        "samples": 2, 
        "func_name": "N1QLStringTest.test_scan_cap"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 124, 
        "samples": 2, 
        "func_name": "N1QLStringTest.test_pipeline_batch"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 131, 
        "samples": 2, 
        "func_name": "N1QLStringTest.test_pipeline_cap"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/n1qlstrings_t.py", 
        "line": 138, 
        "samples": 2, 
        "func_name": "N1QLStringTest.test_readonly"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/observe_t.py", 
        "line": 23, 
        "samples": 2, 
        "func_name": "ObserveTest.test_single_observe"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/observe_t.py", 
        "line": 52, 
        "samples": 2, 
        "func_name": "ObserveTest.test_multi_observe"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/pipeline_t.py", 
        "line": 24, 
        "samples": 1, 
        "func_name": "PipelineTest.test_simple_pipeline"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/pipeline_t.py", 
        "line": 36, 
        "samples": 1, 
        "func_name": "PipelineTest.test_empty_pipeline"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/pipeline_t.py", 
        "line": 46, 
        "samples": 1, 
        "func_name": "PipelineTest.test_pipeline_results"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/pipeline_t.py", 
        "line": 67, 
        "samples": 1, 
        "func_name": "PipelineTest.test_pipeline_operrors"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/pipeline_t.py", 
        "line": 72, 
        "samples": 1, 
        "func_name": "run_pipeline"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/pipeline_t.py", 
        "line": 81, 
        "samples": 1, 
        "func_name": "PipelineTest.test_pipeline_state_errors"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/pipeline_t.py", 
        "line": 82, 
        "samples": 1, 
        "func_name": "fun"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/pipeline_t.py", 
        "line": 89, 
        "samples": 1, 
        "func_name": "fun"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/pipeline_t.py", 
        "line": 95, 
        "samples": 1, 
        "func_name": "PipelineTest.test_pipeline_argerrors"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/pipeline_t.py", 
        "line": 101, 
        "samples": 1, 
        "func_name": "fun"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/pipeline_t.py", 
        "line": 111, 
        "samples": 1, 
        "func_name": "PipelineTest.test_multi_pipeline"
    }, 
    {
        "type_comments": [
            "(ValueResult, bool, int) -> None", 
            "(OperationResult, bool, int) -> None"
        ], 
        "path": "couchbase/tests/cases/results_t.py", 
        "line": 28, 
        "samples": 20, 
        "func_name": "__test_oprsesult"
    }, 
    {
        "type_comments": [
            "(ValueResult, int) -> None", 
            "(ValueResult, str) -> None"
        ], 
        "path": "couchbase/tests/cases/results_t.py", 
        "line": 48, 
        "samples": 18, 
        "func_name": "__test_valresult"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/results_t.py", 
        "line": 55, 
        "samples": 2, 
        "func_name": "ResultsTest.test_results"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/results_t.py", 
        "line": 84, 
        "samples": 2, 
        "func_name": "ResultsTest.test_multi_results"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/rget_t.py", 
        "line": 24, 
        "samples": 4, 
        "func_name": "ReplicaGetTest.setUp"
    }, 
    {
        "type_comments": [
            "(function, str, function, function) -> Tuple[function, function]"
        ], 
        "path": "couchbase/tests/cases/set_converters_t.py", 
        "line": 26, 
        "samples": 8, 
        "func_name": "ConverertSetTest._swap_converters"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/set_converters_t.py", 
        "line": 38, 
        "samples": 2, 
        "func_name": "ConverertSetTest.test_json_conversions"
    }, 
    {
        "type_comments": [
            "(List[str]) -> str"
        ], 
        "path": "couchbase/tests/cases/set_converters_t.py", 
        "line": 44, 
        "samples": 2, 
        "func_name": "_encode"
    }, 
    {
        "type_comments": [
            "(unicode) -> List[unicode]"
        ], 
        "path": "couchbase/tests/cases/set_converters_t.py", 
        "line": 48, 
        "samples": 2, 
        "func_name": "_decode"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/set_converters_t.py", 
        "line": 70, 
        "samples": 2, 
        "func_name": "ConverertSetTest.test_pickle_conversions"
    }, 
    {
        "type_comments": [
            "(Set[int]) -> str"
        ], 
        "path": "couchbase/tests/cases/set_converters_t.py", 
        "line": 76, 
        "samples": 2, 
        "func_name": "_encode"
    }, 
    {
        "type_comments": [
            "(str) -> Set[int]"
        ], 
        "path": "couchbase/tests/cases/set_converters_t.py", 
        "line": 80, 
        "samples": 2, 
        "func_name": "_decode"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/set_t.py", 
        "line": 32, 
        "samples": 2, 
        "func_name": "UpsertTest.test_trivial_set"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/set_t.py", 
        "line": 39, 
        "samples": 2, 
        "func_name": "UpsertTest.test_utf8_set"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/set_t.py", 
        "line": 47, 
        "samples": 2, 
        "func_name": "UpsertTest.test_utf8_set_nonascii"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/set_t.py", 
        "line": 56, 
        "samples": 2, 
        "func_name": "UpsertTest.test_set_with_cas"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/set_t.py", 
        "line": 73, 
        "samples": 2, 
        "func_name": "UpsertTest.test_set_with_ttl"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/set_t.py", 
        "line": 83, 
        "samples": 2, 
        "func_name": "UpsertTest.test_set_objects"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/set_t.py", 
        "line": 93, 
        "samples": 2, 
        "func_name": "UpsertTest.test_multi_set"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/set_t.py", 
        "line": 108, 
        "samples": 2, 
        "func_name": "UpsertTest.test_add"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/set_t.py", 
        "line": 117, 
        "samples": 2, 
        "func_name": "UpsertTest.test_replace"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/spatial_t.py", 
        "line": 56, 
        "samples": 2, 
        "func_name": "SpatialTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/spatial_t.py", 
        "line": 63, 
        "samples": 2, 
        "func_name": "SpatialTest.test_simple_spatial"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/stats_t.py", 
        "line": 30, 
        "samples": 2, 
        "func_name": "StatsTest.test_trivial_stats_without_argument"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/stats_t.py", 
        "line": 40, 
        "samples": 2, 
        "func_name": "StatsTest.test_stats_with_argument"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/stats_t.py", 
        "line": 49, 
        "samples": 2, 
        "func_name": "StatsTest.test_stats_with_argument_list"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/subdoc_t.py", 
        "line": 8, 
        "samples": 18, 
        "func_name": "SubdocTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/subdoc_t.py", 
        "line": 19, 
        "samples": 2, 
        "func_name": "SubdocTest.test_lookup_in"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/subdoc_t.py", 
        "line": 78, 
        "samples": 2, 
        "func_name": "SubdocTest.test_mutate_in"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/subdoc_t.py", 
        "line": 144, 
        "samples": 2, 
        "func_name": "SubdocTest.test_counter_in"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/subdoc_t.py", 
        "line": 175, 
        "samples": 2, 
        "func_name": "SubdocTest.test_multi_lookup"
    }, 
    {
        "type_comments": [
            "(couchbase.result.SubdocResult, str) -> None", 
            "(couchbase.result.SubdocResult, int) -> None"
        ], 
        "path": "couchbase/tests/cases/subdoc_t.py", 
        "line": 215, 
        "samples": 4, 
        "func_name": "_getix"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/subdoc_t.py", 
        "line": 229, 
        "samples": 2, 
        "func_name": "SubdocTest.test_multi_value"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/subdoc_t.py", 
        "line": 243, 
        "samples": 2, 
        "func_name": "SubdocTest.test_result_iter"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/subdoc_t.py", 
        "line": 259, 
        "samples": 2, 
        "func_name": "SubdocTest.test_access_ok"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/subdoc_t.py", 
        "line": 272, 
        "samples": 2, 
        "func_name": "SubdocTest.test_get_count"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/subdoc_t.py", 
        "line": 282, 
        "samples": 2, 
        "func_name": "SubdocTest.test_create_doc"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/touch_t.py", 
        "line": 27, 
        "samples": 6, 
        "func_name": "TouchTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/touch_t.py", 
        "line": 31, 
        "samples": 2, 
        "func_name": "TouchTest.test_trivial_touch"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/touch_t.py", 
        "line": 47, 
        "samples": 2, 
        "func_name": "TouchTest.test_trivial_multi_touch"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/touch_t.py", 
        "line": 64, 
        "samples": 2, 
        "func_name": "TouchTest.test_dict_touch_multi"
    }, 
    {
        "type_comments": [
            "(*str) -> unicode", 
            "(*Union[int, str]) -> Tuple[str, int]", 
            "(*Union[int, str]) -> None", 
            "(*str) -> object", 
            "(*object) -> Tuple[str, int]", 
            "(*str) -> str", 
            "(*Union[int, str]) -> Tuple[str, long]", 
            "(*object) -> str"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 30, 
        "samples": 56, 
        "func_name": "fn"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 46, 
        "samples": 14, 
        "func_name": "MangledTranscoder.__init__"
    }, 
    {
        "type_comments": [
            "(List) -> None", 
            "(str) -> None", 
            "(Tuple[]) -> None", 
            "(None) -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 50, 
        "samples": 8, 
        "func_name": "MangledTranscoder.set_all"
    }, 
    {
        "type_comments": [
            "(str, function) -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 54, 
        "samples": 2, 
        "func_name": "MangledTranscoder.set_next"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 64, 
        "samples": 2, 
        "func_name": "TranscoderTest.test_simple_transcoder"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 78, 
        "samples": 2, 
        "func_name": "TranscoderTest.test_empty_transcoder"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 83, 
        "samples": 2, 
        "func_name": "TranscoderTest.test_bad_transcoder"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 111, 
        "samples": 2, 
        "func_name": "TranscoderTest.test_transcoder_bad_encvals"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 147, 
        "samples": 2, 
        "func_name": "TranscoderTest.test_transcoder_kdec_err"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 153, 
        "samples": 2, 
        "func_name": "exthrow"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 161, 
        "samples": 2, 
        "func_name": "TranscoderTest.test_transcoder_anyobject"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 179, 
        "samples": 2, 
        "func_name": "TranscoderTest.test_transcoder_unhashable_keys"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 195, 
        "samples": 2, 
        "func_name": "TranscoderTest.test_transcoder_class"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 204, 
        "samples": 2, 
        "func_name": "TranscoderTest.test_mask_sanity"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/transcoder_t.py", 
        "line": 209, 
        "samples": 2, 
        "func_name": "TranscoderTest.test_pycbc295"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 93, 
        "samples": 2, 
        "func_name": "BreweryBeerRowProcessor.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 165, 
        "samples": 32, 
        "func_name": "ViewIteratorTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> gcouchbase.bucket.Bucket", 
            "() -> couchbase.bucket.Bucket"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 169, 
        "samples": 32, 
        "func_name": "ViewIteratorTest.make_connection"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 176, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_simple_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 187, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_include_docs"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 207, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_bad_view"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 213, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_streaming"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 228, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_streaming_dtor"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 241, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_mixed_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 250, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_range_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 273, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_key_query"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 287, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_row_processor"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 315, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_already_queried"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 320, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_no_rows"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 326, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_long_uri"
    }, 
    {
        "type_comments": [
            "(gcouchbase.bucket.GView) -> None", 
            "(couchbase.views.iterator.View) -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 347, 
        "samples": 4, 
        "func_name": "ViewIteratorTest._verify_data"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 355, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_http_data"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 360, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_http_data_streaming"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 365, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_pycbc_206"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 383, 
        "samples": 2, 
        "func_name": "ViewIteratorTest.test_props_before_rows"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 386, 
        "samples": 2, 
        "func_name": "get_rowcount"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_iterator_t.py", 
        "line": 389, 
        "samples": 2, 
        "func_name": "get_errors"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_t.py", 
        "line": 68, 
        "samples": 12, 
        "func_name": "ViewTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_t.py", 
        "line": 76, 
        "samples": 2, 
        "func_name": "ViewTest.test_simple_view"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_t.py", 
        "line": 86, 
        "samples": 2, 
        "func_name": "ViewTest.test_with_params"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_t.py", 
        "line": 93, 
        "samples": 2, 
        "func_name": "ViewTest.test_with_strparam"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_t.py", 
        "line": 98, 
        "samples": 2, 
        "func_name": "ViewTest.test_with_jparams"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_t.py", 
        "line": 131, 
        "samples": 2, 
        "func_name": "ViewTest.test_missing_view"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/view_t.py", 
        "line": 136, 
        "samples": 2, 
        "func_name": "ViewTest.test_reject_ephemeral_attempt"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 31, 
        "samples": 22, 
        "func_name": "ViewStringTest.setUp"
    }, 
    {
        "type_comments": [
            "(str, str, Dict[str, str]) -> None", 
            "(str, str, bool) -> None", 
            "(str, str, None) -> None", 
            "(str, str, str) -> None", 
            "(str, str, List) -> None", 
            "(str, str, List[str]) -> None", 
            "(str, str, int) -> None", 
            "(str, str, couchbase.views.params._Unspec) -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 34, 
        "samples": 76, 
        "func_name": "ViewStringTest._assert_vopteq"
    }, 
    {
        "type_comments": [
            "(Dict[str, str], str, List[str]) -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 38, 
        "samples": 4, 
        "func_name": "ViewStringTest._assert_vopteq_multi"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 52, 
        "samples": 2, 
        "func_name": "ViewStringTest.test_stale_params"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 61, 
        "samples": 2, 
        "func_name": "ViewStringTest.test_bad_stale"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 70, 
        "samples": 2, 
        "func_name": "ViewStringTest.test_unrecognized_params"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 75, 
        "samples": 2, 
        "func_name": "ViewStringTest.test_misc_booleans"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 101, 
        "samples": 2, 
        "func_name": "ViewStringTest.test_misc_numeric"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 128, 
        "samples": 2, 
        "func_name": "ViewStringTest.test_encode_string_to_json"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 157, 
        "samples": 2, 
        "func_name": "ViewStringTest.test_encode_to_jarray"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 182, 
        "samples": 2, 
        "func_name": "ViewStringTest.test_passthrough"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 211, 
        "samples": 2, 
        "func_name": "ViewStringTest.test_unrecognized"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 229, 
        "samples": 2, 
        "func_name": "ViewStringTest.test_string_params"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/tests/cases/viewstrings_t.py", 
        "line": 249, 
        "samples": 2, 
        "func_name": "ViewStringTest.test_ranges"
    }, 
    {
        "type_comments": [
            "(long) -> Tuple[long, bool]"
        ], 
        "path": "couchbase/transcoder.py", 
        "line": 43, 
        "samples": 36, 
        "func_name": "get_decode_format"
    }, 
    {
        "type_comments": [
            "(str) -> str"
        ], 
        "path": "couchbase/transcoder.py", 
        "line": 70, 
        "samples": 44, 
        "func_name": "TranscoderPP.encode_key"
    }, 
    {
        "type_comments": [
            "(str) -> unicode"
        ], 
        "path": "couchbase/transcoder.py", 
        "line": 74, 
        "samples": 34, 
        "func_name": "TranscoderPP.decode_key"
    }, 
    {
        "type_comments": [
            "(str, long) -> Tuple[str, long]", 
            "(Dict[str, str], int) -> Tuple[str, long]", 
            "(Dict, int) -> Tuple[str, long]", 
            "(str, int) -> Tuple[str, long]", 
            "(List, int) -> Tuple[str, long]"
        ], 
        "path": "couchbase/transcoder.py", 
        "line": 77, 
        "samples": 52, 
        "func_name": "TranscoderPP.encode_value"
    }, 
    {
        "type_comments": [
            "(str, long) -> Dict[unicode, unicode]", 
            "(str, long) -> Dict", 
            "(str, long) -> unicode"
        ], 
        "path": "couchbase/transcoder.py", 
        "line": 117, 
        "samples": 36, 
        "func_name": "TranscoderPP.decode_value"
    }, 
    {
        "type_comments": [
            "(Dict[str, str]) -> str", 
            "(str) -> str", 
            "(bool) -> str", 
            "(Dict) -> str", 
            "(List) -> str", 
            "(None) -> str", 
            "(int) -> str"
        ], 
        "path": "couchbase/transcoder.py", 
        "line": 134, 
        "samples": 20, 
        "func_name": "TranscoderPP._do_json_encode"
    }, 
    {
        "type_comments": [
            "(unicode) -> Dict", 
            "(unicode) -> unicode", 
            "(unicode) -> int", 
            "(unicode) -> Dict[unicode, unicode]", 
            "(unicode) -> bool", 
            "(unicode) -> List", 
            "(unicode) -> None"
        ], 
        "path": "couchbase/transcoder.py", 
        "line": 142, 
        "samples": 16, 
        "func_name": "TranscoderPP._do_json_decode"
    }, 
    {
        "type_comments": [
            "(str, long) -> Tuple[str, long]", 
            "(Dict[str, str], int) -> Tuple[str, long]"
        ], 
        "path": "couchbase/transcoder.py", 
        "line": 170, 
        "samples": 10, 
        "func_name": "LegacyTranscoderPP.encode_value"
    }, 
    {
        "type_comments": [
            "(type) -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 87, 
        "samples": 45, 
        "func_name": "RowProcessor.__init__"
    }, 
    {
        "type_comments": [
            "(type) -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 111, 
        "samples": 6, 
        "func_name": "SpatialRowProcessor.__init__"
    }, 
    {
        "type_comments": [
            "(List[Dict[str, Optional[Union[Dict[unicode, Union[List[int], unicode]], List[List[int]], unicode]]]], *Union[bool, couchbase.bucket.Bucket]) -> None", 
            "(List[Dict[str, Optional[Union[Dict[unicode, Union[List[int], unicode]], List[List[int]], unicode]]]], *Union[bool, gcouchbase.bucket.Bucket]) -> None", 
            "(List[Dict[str, Optional[Union[Dict[unicode, Union[List[int], unicode]], List[List[int]], unicode]]]], *Union[bool, couchbase.bucket.Bucket]) -> couchbase.views.iterator.SpatialRow", 
            "(List[Dict[str, Optional[Union[Dict[unicode, Union[List[int], unicode]], List[List[int]], unicode]]]], *Union[bool, gcouchbase.bucket.Bucket]) -> couchbase.views.iterator.SpatialRow"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 114, 
        "samples": 10, 
        "func_name": "SpatialRowProcessor.handle_rows"
    }, 
    {
        "type_comments": [
            "(Dict[str, Optional[Union[Dict[unicode, Union[List[int], unicode]], List[List[int]], unicode]]]) -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 120, 
        "samples": 10, 
        "func_name": "get_row_doc"
    }, 
    {
        "type_comments": [
            "(gcouchbase.bucket.Bucket, str, unicode, None, bool, couchbase.views.params.Query, bool) -> None", 
            "(couchbase.bucket.Bucket, str, str, couchbase.tests.cases.view_iterator_t.BreweryBeerRowProcessor, bool, couchbase.views.params.Query, bool) -> None", 
            "(couchbase.bucket.Bucket, str, str, None, bool, None, bool) -> None", 
            "(couchbase.bucket.Bucket, str, unicode, None, bool, couchbase.views.params.Query, bool) -> None", 
            "(gcouchbase.bucket.Bucket, str, str, None, bool, None, bool) -> None", 
            "(couchbase.bucket.Bucket, str, str, None, bool, couchbase.views.params.SpatialQuery, bool) -> None", 
            "(couchbase.bucket.Bucket, str, str, None, bool, couchbase.views.params.Query, bool) -> None", 
            "(gcouchbase.bucket.Bucket, str, str, None, bool, couchbase.views.params.Query, bool) -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 136, 
        "samples": 49, 
        "func_name": "View.__init__"
    }, 
    {
        "type_comments": [
            "() -> long"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 286, 
        "samples": 45, 
        "func_name": "_spatial"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 290, 
        "samples": 45, 
        "func_name": "View._start"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 299, 
        "samples": 23, 
        "func_name": "View._clear"
    }, 
    {
        "type_comments": [
            "() -> couchbase.views.params.Query", 
            "() -> couchbase.views.params.ViewQuery", 
            "() -> couchbase.views.params.SpatialQuery"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 308, 
        "samples": 45, 
        "func_name": "query"
    }, 
    {
        "type_comments": [
            "() -> ViewResult"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 320, 
        "samples": 56, 
        "func_name": "raw"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 324, 
        "samples": 4, 
        "func_name": "__meta_or_raise"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 333, 
        "samples": 2, 
        "func_name": "indexed_rows"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 338, 
        "samples": 2, 
        "func_name": "errors"
    }, 
    {
        "type_comments": [
            "(None) -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 343, 
        "samples": 14, 
        "func_name": "View._handle_errors"
    }, 
    {
        "type_comments": [
            "(Dict[unicode, Union[List, int]]) -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 356, 
        "samples": 14, 
        "func_name": "View._handle_meta"
    }, 
    {
        "type_comments": [
            "(List) -> List", 
            "(List[Dict[str, Optional[Union[Dict[unicode, Union[List[int], unicode]], List[List[int]], unicode]]]]) -> generator"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 363, 
        "samples": 18, 
        "func_name": "View._process_payload"
    }, 
    {
        "type_comments": [
            "() -> couchbase.views.iterator.SpatialRow", 
            "() -> None"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 374, 
        "samples": 24, 
        "func_name": "View.__iter__"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/views/iterator.py", 
        "line": 405, 
        "samples": 12, 
        "func_name": "View.__repr__"
    }, 
    {
        "type_comments": [
            "() -> bool"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 37, 
        "samples": 8, 
        "func_name": "_Unspec.__nonzero__"
    }, 
    {
        "type_comments": [
            "(None) -> None", 
            "(int) -> str", 
            "(bool) -> str", 
            "(str) -> None", 
            "(str) -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 51, 
        "samples": 30, 
        "func_name": "_bool_param_handler"
    }, 
    {
        "type_comments": [
            "(str) -> None", 
            "(int) -> str", 
            "(bool) -> None", 
            "(str) -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 77, 
        "samples": 46, 
        "func_name": "_num_param_handler"
    }, 
    {
        "type_comments": [
            "(str, bool) -> str", 
            "(bool, bool) -> None", 
            "(int, bool) -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 88, 
        "samples": 84, 
        "func_name": "_string_param_common"
    }, 
    {
        "type_comments": [
            "(str) -> str", 
            "(bool) -> None", 
            "(int) -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 113, 
        "samples": 84, 
        "func_name": "_string_param_handler"
    }, 
    {
        "type_comments": [
            "(None) -> None", 
            "(int) -> str", 
            "(str) -> str", 
            "(str) -> None", 
            "(bool) -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 121, 
        "samples": 26, 
        "func_name": "_stale_param_handler"
    }, 
    {
        "type_comments": [
            "(List[str]) -> str", 
            "(List[Union[str, unicode]]) -> str", 
            "(Dict[str, str]) -> str", 
            "(str) -> str", 
            "(int) -> str", 
            "(object) -> None", 
            "(bool) -> str", 
            "(None) -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 139, 
        "samples": 50, 
        "func_name": "_jval_param_handler"
    }, 
    {
        "type_comments": [
            "(Dict[str, str]) -> None", 
            "(List[str]) -> str", 
            "(bool) -> None", 
            "(List[Optional[int]]) -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 147, 
        "samples": 22, 
        "func_name": "_jarry_param_handler"
    }, 
    {
        "type_comments": [
            "() -> couchbase.views.params._Unspec"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 223, 
        "samples": 10, 
        "func_name": "getter"
    }, 
    {
        "type_comments": [
            "(List) -> None", 
            "(List[str]) -> None", 
            "(List[Union[List[Union[str, unicode]], List[str]]]) -> None"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 226, 
        "samples": 12, 
        "func_name": "setter"
    }, 
    {
        "type_comments": [
            "() -> couchbase.views.params._Unspec"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 233, 
        "samples": 122, 
        "func_name": "getter"
    }, 
    {
        "type_comments": [
            "(Dict[str, str]) -> None", 
            "(List[str]) -> None", 
            "(int) -> None", 
            "(str) -> None", 
            "(List[Optional[int]]) -> None", 
            "(None) -> None", 
            "(bool) -> None"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 236, 
        "samples": 142, 
        "func_name": "setter"
    }, 
    {
        "type_comments": [
            "(str, None, bool) -> None", 
            "(str, List[str], bool) -> None", 
            "(str, int, bool) -> None", 
            "(str, str, bool) -> None", 
            "(str, Dict[str, str], bool) -> None", 
            "(str, List[Union[str, unicode]], bool) -> None", 
            "(str, bool, bool) -> None", 
            "(str, couchbase.views.params._Unspec, bool) -> None"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 243, 
        "samples": 166, 
        "func_name": "QueryBase._set_common"
    }, 
    {
        "type_comments": [
            "(str) -> couchbase.views.params._Unspec"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 271, 
        "samples": 122, 
        "func_name": "QueryBase._get_common"
    }, 
    {
        "type_comments": [
            "(str, str, str, List) -> None", 
            "(str, str, str, List[str]) -> None", 
            "(str, str, str, List[Union[List[Union[str, unicode]], List[str]]]) -> None"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 276, 
        "samples": 12, 
        "func_name": "QueryBase._set_range_common"
    }, 
    {
        "type_comments": [
            "(bool, bool) -> None"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 326, 
        "samples": 155, 
        "func_name": "QueryBase.__init__"
    }, 
    {
        "type_comments": [
            "(bool) -> couchbase.views.params.Query", 
            "(bool) -> None", 
            "(bool) -> couchbase.views.params.ViewQuery", 
            "(bool) -> couchbase.views.params.SpatialQuery"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 362, 
        "samples": 157, 
        "func_name": "QueryBase.update"
    }, 
    {
        "type_comments": [
            "(Dict[str, None]) -> None", 
            "(Dict[str, str]) -> couchbase.views.params.ViewQuery", 
            "(Dict[str, bool]) -> couchbase.views.params.ViewQuery", 
            "(Dict[str, None]) -> couchbase.views.params.ViewQuery", 
            "(Dict) -> couchbase.views.params.ViewQuery", 
            "(Dict[str, str]) -> None", 
            "(Dict[str, int]) -> couchbase.views.params.ViewQuery", 
            "(Dict[str, List[str]]) -> couchbase.views.params.ViewQuery"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 403, 
        "samples": 127, 
        "func_name": "from_any"
    }, 
    {
        "type_comments": [
            "(bool) -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 453, 
        "samples": 143, 
        "func_name": "QueryBase._encode"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 474, 
        "samples": 152, 
        "func_name": "encoded"
    }, 
    {
        "type_comments": [
            "() -> Tuple[str, str]"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 488, 
        "samples": 2, 
        "func_name": "_long_query_encoded"
    }, 
    {
        "type_comments": [
            "() -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 515, 
        "samples": 12, 
        "func_name": "QueryBase.__repr__"
    }, 
    {
        "type_comments": [
            "(Dict[str, List[str]], bool, bool) -> str", 
            "(Dict[str, str], bool, bool) -> None", 
            "(Dict[str, bool], bool, bool) -> None", 
            "(Dict[str, None], bool, bool) -> str", 
            "(Dict[str, bool], bool, bool) -> str", 
            "(Dict[str, None], bool, bool) -> None", 
            "(Dict[str, int], bool, bool) -> str", 
            "(Dict[str, str], bool, bool) -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 567, 
        "samples": 110, 
        "func_name": "make_options_string"
    }, 
    {
        "type_comments": [
            "(str, str) -> str"
        ], 
        "path": "couchbase/views/params.py", 
        "line": 574, 
        "samples": 20, 
        "func_name": "make_dvpath"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 16, 
        "samples": 23, 
        "func_name": "GRowsHandler.__init__"
    }, 
    {
        "type_comments": [
            "(*AsyncResult) -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 31, 
        "samples": 9, 
        "func_name": "GRowsHandler._callback"
    }, 
    {
        "type_comments": [
            "(AsyncResult, *Optional[Union[couchbase.exceptions.HTTPError, type]]) -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 45, 
        "samples": 16, 
        "func_name": "GRowsHandler._errback"
    }, 
    {
        "type_comments": [
            "() -> couchbase.views.iterator.SpatialRow", 
            "() -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 49, 
        "samples": 23, 
        "func_name": "GRowsHandler.__iter__"
    }, 
    {
        "type_comments": [
            "(*Union[gcouchbase.bucket.Bucket, str, unicode]) -> None", 
            "(*Union[gcouchbase.bucket.Bucket, str]) -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 66, 
        "samples": 24, 
        "func_name": "GView.__init__"
    }, 
    {
        "type_comments": [
            "(*ValueResult) -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 77, 
        "samples": 63, 
        "func_name": "dummy_callback"
    }, 
    {
        "type_comments": [
            "(*str) -> None", 
            "() -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 82, 
        "samples": 197, 
        "func_name": "Bucket.__init__"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 90, 
        "samples": 196, 
        "func_name": "Bucket._do_ctor_connect"
    }, 
    {
        "type_comments": [
            "(couchbase.exceptions._TimeoutError_0x17 ) -> None", 
            "(couchbase.exceptions._AuthError_0x2 ) -> None", 
            "(None) -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 100, 
        "samples": 196, 
        "func_name": "Bucket._on_connected"
    }, 
    {
        "type_comments": [
            "(AsyncResult) -> None", 
            "(AsyncResult) -> couchbase.result.SubdocResult", 
            "(AsyncResult) -> ValueResult", 
            "(AsyncResult) -> OperationResult", 
            "(AsyncResult) -> AsyncResult"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 106, 
        "samples": 442, 
        "func_name": "Bucket._waitwrap"
    }, 
    {
        "type_comments": [
            "(*Union[Tuple[], str]) -> None", 
            "(*Tuple[]) -> None", 
            "(*None) -> None", 
            "(*Dict[str, str]) -> None", 
            "(*List[str]) -> None", 
            "(*str) -> OperationResult", 
            "(*Dict[str, object]) -> None", 
            "(*str) -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 118, 
        "samples": 498, 
        "func_name": "ret"
    }, 
    {
        "type_comments": [
            "() -> HttpResult", 
            "() -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 122, 
        "samples": 24, 
        "func_name": "Bucket._http_request"
    }, 
    {
        "type_comments": [
            "(*Union[str, unicode]) -> gcouchbase.bucket.GView", 
            "(*str) -> gcouchbase.bucket.GView", 
            "(*str) -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 130, 
        "samples": 24, 
        "func_name": "Bucket.query"
    }, 
    {
        "type_comments": [
            "() -> gevent.event.Event"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 138, 
        "samples": 156, 
        "func_name": "Bucket._get_close_future"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/bucket.py", 
        "line": 140, 
        "samples": 154, 
        "func_name": "_dtor_cb"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/iops_gevent10.py", 
        "line": 30, 
        "samples": 448, 
        "func_name": "GEventIOEvent.__init__"
    }, 
    {
        "type_comments": [
            "(int) -> None"
        ], 
        "path": "gcouchbase/iops_gevent10.py", 
        "line": 34, 
        "samples": 1010, 
        "func_name": "GEventIOEvent.ready_proxy"
    }, 
    {
        "type_comments": [
            "(int) -> None"
        ], 
        "path": "gcouchbase/iops_gevent10.py", 
        "line": 37, 
        "samples": 990, 
        "func_name": "GEventIOEvent.watch"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/iops_gevent10.py", 
        "line": 45, 
        "samples": 881, 
        "func_name": "GEventTimer.__init__"
    }, 
    {
        "type_comments": [
            "(*int) -> None"
        ], 
        "path": "gcouchbase/iops_gevent10.py", 
        "line": 49, 
        "samples": 1407, 
        "func_name": "GEventTimer.ready_proxy"
    }, 
    {
        "type_comments": [
            "(int) -> None"
        ], 
        "path": "gcouchbase/iops_gevent10.py", 
        "line": 52, 
        "samples": 1441, 
        "func_name": "GEventTimer.schedule"
    }, 
    {
        "type_comments": [
            "(gcouchbase.iops_gevent10.GEventIOEvent, int, int) -> None"
        ], 
        "path": "gcouchbase/iops_gevent10.py", 
        "line": 61, 
        "samples": 995, 
        "func_name": "IOPS.update_event"
    }, 
    {
        "type_comments": [
            "(gcouchbase.iops_gevent10.GEventTimer, int, int) -> None"
        ], 
        "path": "gcouchbase/iops_gevent10.py", 
        "line": 70, 
        "samples": 2198, 
        "func_name": "IOPS.update_timer"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/iops_gevent10.py", 
        "line": 78, 
        "samples": 196, 
        "func_name": "IOPS.start_watching"
    }, 
    {
        "type_comments": [
            "() -> gcouchbase.iops_gevent10.GEventIOEvent"
        ], 
        "path": "gcouchbase/iops_gevent10.py", 
        "line": 84, 
        "samples": 448, 
        "func_name": "IOPS.io_event_factory"
    }, 
    {
        "type_comments": [
            "() -> gcouchbase.iops_gevent10.GEventTimer"
        ], 
        "path": "gcouchbase/iops_gevent10.py", 
        "line": 87, 
        "samples": 881, 
        "func_name": "IOPS.timer_event_factory"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/tests/test_api.py", 
        "line": 16, 
        "samples": 157, 
        "func_name": "GEventImplMixin._implDtorHook"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/tests/test_gevent.py", 
        "line": 18, 
        "samples": 2, 
        "func_name": "GeventSpecificTest.setUp"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/tests/test_gevent.py", 
        "line": 25, 
        "samples": 1, 
        "func_name": "GeventSpecificTest.test_killing_greenlet"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/tests/test_gevent.py", 
        "line": 26, 
        "samples": 1, 
        "func_name": "load_foo_and_bar_forever"
    }, 
    {
        "type_comments": [
            "(gevent.greenlet.Greenlet) -> None"
        ], 
        "path": "gcouchbase/tests/test_gevent.py", 
        "line": 34, 
        "samples": 1, 
        "func_name": "kill_greenlet_forever"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/tests/test_gevent.py", 
        "line": 46, 
        "samples": 1, 
        "func_name": "GeventSpecificTest.test_timeout"
    }, 
    {
        "type_comments": [
            "() -> None"
        ], 
        "path": "gcouchbase/tests/test_gevent.py", 
        "line": 47, 
        "samples": 1, 
        "func_name": "load_foo_and_bar_forever"
    }
]