
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftCOMMAPERIODleftCOLONleftPLUSMINUSleftTIMESDIVIDEleftSEMICOLONrightUMINUSNAME COLON SEMICOLON COMMA PERIOD OR AND FLOAT INT STRING PLUS MINUS TIMES DIVIDE EQUALS ASSIGN LPAREN RPAREN LBRACKET RBRACKET LQBRACKET RQBRACKETstatement : expression EQUALS expressionstatement : NAME ASSIGN expressionstatement : expressionscope : NAME PERIOD NAME\n             | scope PERIOD NAME\n    expression : scope queryexpression : NAME LPAREN expression RPAREN\n                  | NAME LPAREN RPAREN\n    expression : LPAREN expression RPAREN\n    expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n    expression : MINUS expression %prec UMINUS\n    expression : FLOAT\n               | INT\n               | STRING\n               | list\n               | dict\n               | querychain\n               | query\n               | scope\n    \n    expression : accessor\n    expression : NAMEdict : NAME COLON expressiondict : dict COMMA dictlist : expression COMMA expressionaccessor : expression LBRACKET expression RBRACKET\n    querychain : dict OR dictquerychain : querychain OR dict\n    querychain : querychain OR querychainquery : LQBRACKET expression RQBRACKET\n    query : LQBRACKET dict RQBRACKET\n    '
    
_lr_action_items = {'NAME':([0,6,7,15,16,17,18,19,20,21,22,23,24,25,26,28,32,33,34,],[3,30,30,37,30,30,30,30,30,30,30,30,30,48,30,50,53,53,53,]),'LPAREN':([0,3,6,7,15,16,17,18,19,20,21,22,23,24,26,30,37,],[6,24,6,6,6,6,6,6,6,6,6,6,6,6,6,24,24,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,],[7,18,-24,-22,-21,7,7,-15,-16,-17,-18,-19,-20,-23,7,7,7,7,7,7,7,7,7,7,7,-6,18,-24,-14,18,-19,-24,18,-10,-11,-12,-13,18,18,18,18,-8,-4,18,-5,-9,-26,-29,-31,-30,-32,-33,-28,-7,]),'FLOAT':([0,6,7,15,16,17,18,19,20,21,22,23,24,26,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'INT':([0,6,7,15,16,17,18,19,20,21,22,23,24,26,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'STRING':([0,6,7,15,16,17,18,19,20,21,22,23,24,26,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'LQBRACKET':([0,4,6,7,15,16,17,18,19,20,21,22,23,24,26,48,50,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-4,-5,]),'$end':([1,2,3,4,5,8,9,10,11,12,13,14,27,30,31,38,39,40,41,42,43,45,47,48,49,50,51,52,54,55,56,57,58,59,60,],[0,-3,-24,-22,-21,-15,-16,-17,-18,-19,-20,-23,-6,-24,-14,-1,-10,-11,-12,-13,-27,-2,-8,-4,-25,-5,-9,-26,-29,-31,-30,-32,-33,-28,-7,]),'EQUALS':([2,3,4,5,8,9,10,11,12,13,14,27,30,31,39,40,41,42,43,47,48,49,50,51,52,54,55,56,57,58,59,60,],[16,-24,-22,-21,-15,-16,-17,-18,-19,-20,-23,-6,-24,-14,-10,-11,-12,-13,-27,-8,-4,-25,-5,-9,-26,-29,-31,-30,-32,-33,-28,-7,]),'PLUS':([2,3,4,5,8,9,10,11,12,13,14,27,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,],[17,-24,-22,-21,-15,-16,-17,-18,-19,-20,-23,-6,17,-24,-14,17,-19,-24,17,-10,-11,-12,-13,17,17,17,17,-8,-4,17,-5,-9,-26,-29,-31,-30,-32,-33,-28,-7,]),'TIMES':([2,3,4,5,8,9,10,11,12,13,14,27,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,],[19,-24,-22,-21,-15,-16,-17,-18,-19,-20,-23,-6,19,-24,-14,19,-19,-24,19,19,19,-12,-13,19,19,19,19,-8,-4,19,-5,-9,-26,-29,-31,-30,-32,-33,-28,-7,]),'DIVIDE':([2,3,4,5,8,9,10,11,12,13,14,27,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,],[20,-24,-22,-21,-15,-16,-17,-18,-19,-20,-23,-6,20,-24,-14,20,-19,-24,20,20,20,-12,-13,20,20,20,20,-8,-4,20,-5,-9,-26,-29,-31,-30,-32,-33,-28,-7,]),'COMMA':([2,3,4,5,8,9,10,11,12,13,14,27,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,],[21,-24,-22,-21,-15,-16,-17,-18,32,-20,-23,-6,21,-24,-14,21,32,-24,21,-10,-11,-12,-13,-27,21,21,21,-8,-4,-25,-5,-9,-26,32,-31,32,-32,-33,-28,-7,]),'LBRACKET':([2,3,4,5,8,9,10,11,12,13,14,27,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,],[22,-24,-22,-21,-15,-16,-17,-18,-19,-20,-23,-6,22,-24,-14,22,-19,-24,22,-10,-11,-12,-13,-27,22,22,22,-8,-4,-25,-5,-9,-26,-29,-31,-30,-32,-33,-28,-7,]),'ASSIGN':([3,],[23,]),'PERIOD':([3,4,30,37,48,50,],[25,28,25,25,-4,-5,]),'COLON':([3,30,37,53,],[26,26,26,26,]),'RPAREN':([4,5,8,9,10,11,12,13,14,24,27,29,30,31,39,40,41,42,43,46,47,48,49,50,51,52,54,55,56,57,58,59,60,],[-22,-21,-15,-16,-17,-18,-19,-20,-23,47,-6,51,-24,-14,-10,-11,-12,-13,-27,60,-8,-4,-25,-5,-9,-26,-29,-31,-30,-32,-33,-28,-7,]),'RQBRACKET':([4,5,8,9,10,11,12,13,14,27,30,31,35,36,37,39,40,41,42,43,47,48,49,50,51,52,54,55,56,57,58,59,60,],[-22,-21,-15,-16,-17,-18,-19,-20,-23,-6,-24,-14,57,58,-24,-10,-11,-12,-13,-27,-8,-4,-25,-5,-9,-26,-29,-31,-30,-32,-33,-28,-7,]),'RBRACKET':([4,5,8,9,10,11,12,13,14,27,30,31,39,40,41,42,43,44,47,48,49,50,51,52,54,55,56,57,58,59,60,],[-22,-21,-15,-16,-17,-18,-19,-20,-23,-6,-24,-14,-10,-11,-12,-13,-27,59,-8,-4,-25,-5,-9,-26,-29,-31,-30,-32,-33,-28,-7,]),'OR':([4,5,8,9,10,11,12,13,14,27,30,31,36,39,40,41,42,43,47,48,49,50,51,52,54,55,56,57,58,59,60,],[-22,-21,-15,-16,-17,-18,33,34,-23,-6,-24,-14,33,-10,-11,-12,-13,-27,-8,-4,-25,-5,-9,-26,-29,-31,-30,-32,-33,-28,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,6,7,15,16,17,18,19,20,21,22,23,24,26,],[2,29,31,35,38,39,40,41,42,43,44,45,46,49,]),'scope':([0,6,7,15,16,17,18,19,20,21,22,23,24,26,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'query':([0,4,6,7,15,16,17,18,19,20,21,22,23,24,26,],[5,27,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'list':([0,6,7,15,16,17,18,19,20,21,22,23,24,26,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'dict':([0,6,7,15,16,17,18,19,20,21,22,23,24,26,32,33,34,],[12,12,12,36,12,12,12,12,12,12,12,12,12,12,52,54,56,]),'querychain':([0,6,7,15,16,17,18,19,20,21,22,23,24,26,34,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,55,]),'accessor':([0,6,7,15,16,17,18,19,20,21,22,23,24,26,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression EQUALS expression','statement',3,'p_statement_equals','parser.py',28),
  ('statement -> NAME ASSIGN expression','statement',3,'p_statement_assign','parser.py',33),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',38),
  ('scope -> NAME PERIOD NAME','scope',3,'p_scope','parser.py',60),
  ('scope -> scope PERIOD NAME','scope',3,'p_scope','parser.py',61),
  ('expression -> scope query','expression',2,'p_expression_query_filter','parser.py',74),
  ('expression -> NAME LPAREN expression RPAREN','expression',4,'p_expression_func','parser.py',80),
  ('expression -> NAME LPAREN RPAREN','expression',3,'p_expression_func','parser.py',81),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',91),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',97),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',98),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',99),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',100),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',113),
  ('expression -> FLOAT','expression',1,'p_expression_types','parser.py',119),
  ('expression -> INT','expression',1,'p_expression_types','parser.py',120),
  ('expression -> STRING','expression',1,'p_expression_types','parser.py',121),
  ('expression -> list','expression',1,'p_expression_types','parser.py',122),
  ('expression -> dict','expression',1,'p_expression_types','parser.py',123),
  ('expression -> querychain','expression',1,'p_expression_types','parser.py',124),
  ('expression -> query','expression',1,'p_expression_types','parser.py',125),
  ('expression -> scope','expression',1,'p_expression_types','parser.py',126),
  ('expression -> accessor','expression',1,'p_expression_accessor','parser.py',133),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',139),
  ('dict -> NAME COLON expression','dict',3,'p_dict','parser.py',148),
  ('dict -> dict COMMA dict','dict',3,'p_dict_chain','parser.py',154),
  ('list -> expression COMMA expression','list',3,'p_list','parser.py',160),
  ('accessor -> expression LBRACKET expression RBRACKET','accessor',4,'p_accessor','parser.py',177),
  ('querychain -> dict OR dict','querychain',3,'p_querychain','parser.py',208),
  ('querychain -> querychain OR dict','querychain',3,'p_querychain_or_dict','parser.py',213),
  ('querychain -> querychain OR querychain','querychain',3,'p_querychain_or_querychain','parser.py',219),
  ('query -> LQBRACKET expression RQBRACKET','query',3,'p_query','parser.py',224),
  ('query -> LQBRACKET dict RQBRACKET','query',3,'p_query_dict','parser.py',230),
]
