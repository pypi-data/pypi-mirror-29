Test-Scenario-1:
  Id: ts_01
  Path: hydratk/extensions/security/security/01_methods_ut.jedi
  Name: ts_init_extension
  Desc: Test _init_extension method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize extension
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_init
      Desc: Initialize extension
      
      Test: |
        mh = MasterHead.get_head()
        ext = mh._ext['Security']
        ext._ext_id = ext._ext_name = None
        ext._init_extension()
        res = [ext._ext_id, ext._ext_name]
      
      Validate: |
        this.test_result = str(res)
        exp = ['security', 'Security']
        assert (res == exp), '_ext_id, _ext_name = {0}'.format(exp)
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/extensions/security/security/01_methods_ut.jedi
  Name: ts_register_htk_actions
  Desc: Test method _register_htk_actions
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead
    import yodalib.hydratk.core.commandopt as commandopt    
  
  Test-Case-1:
    Id: tc_01
    Name: tc_register_htk_actions
    Desc: Register Hydra actions
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_register
      Desc: Register 
      
      Test: |
        th = TestHead()     
        ext = th._ext['Security']  
        th.clear_cmd()
        ext._register_htk_actions()
        res = th._cmd_hooks
        
      Validate: |         
        this.test_result = str(res)
        exp = ['sec-msf', 'sec-zap']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)
        res = commandopt.long_opt['htk']
        this.test_result = str(res)
        exp = ['sec-action', 'sec-area', 'sec-format', 'sec-host', 'sec-method', 'sec-output', 'sec-params', 'sec-passw', 'sec-path', 'sec-port', 'sec-type', 'sec-url', 'sec-user']
        assert (sorted(res) == exp), 'long_opt = {0}'.format(exp)
        th.clear_cmd()
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/extensions/security/security/01_methods_ut.jedi
  Name: ts_register_standalone_actions
  Desc: Test method _register_standalone_actions
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead
    import yodalib.hydratk.core.commandopt as commandopt           
  
  Test-Case-1:
    Id: tc_01
    Name: tc_register_standalone_actions
    Desc: Register standalone actions
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_register
      Desc: Register   
      
      Test: |
        th = TestHead()
        ext = th._ext['Security']
        th.clear_cmd()
        ext._register_standalone_actions()
        res = th._cmd_hooks
      
      Validate: |   
        this.test_result = str(res)
        exp = ['msf', 'zap']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)  
        res = commandopt.long_opt['security']
        this.test_result = str(res)
        exp = ['action', 'area', 'config', 'debug', 'debug-channel', 'force', 'format', 'home', 'host', 'interactive', 
               'language', 'method', 'output', 'params', 'passw', 'path', 'port', 'run-mode', 'type', 'url', 'user']
        assert (sorted(res) == exp), 'long_opt = {0}'.format(exp)        
        th.clear_cmd()     
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/extensions/security/security/01_methods_ut.jedi
  Name: ts_register_actions
  Desc: Test method _register_actions
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead
    import yodalib.hydratk.core.commandopt as commandopt           
  
  Test-Case-1:
    Id: tc_01
    Name: tc_register_actions
    Desc: Register actions
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_htk
      Desc: Profile htk
      
      Test: |
        th = TestHead()
        ext = th._ext['Security']
        th.clear_cmd()
        th.cli_cmdopt_profile = 'htk'
        ext._register_actions()
        res = th._cmd_hooks        
      
      Validate: |  
        this.test_result = str(res)
        exp = ['sec-msf', 'sec-zap']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)
        res = commandopt.long_opt['htk']
        this.test_result = str(res)
        exp = ['sec-action', 'sec-area', 'sec-format', 'sec-host', 'sec-method', 'sec-output', 'sec-params', 'sec-passw', 'sec-path', 'sec-port', 'sec-type', 'sec-url', 'sec-user']
        assert (sorted(res) == exp), 'long_opt = {0}'.format(exp)        
        th.clear_cmd()    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_security
      Desc: Profile security
      
      Test: |
        th = TestHead()
        ext = th._ext['Security']
        th.clear_cmd()      
        th.cli_cmdopt_profile = 'security'
        ext._register_actions()
        res = th._cmd_hooks        
      
      Validate: |  
        this.test_result = str(res)
        exp = ['msf', 'zap']
        assert (sorted(res.keys()) == exp), '_cmd_hooks = {0}'.format(exp)
        res = commandopt.long_opt['security']
        this.test_result = str(res)
        exp = ['action', 'area', 'config', 'debug', 'debug-channel', 'force', 'format', 'home', 'host', 'interactive', 
               'language', 'method', 'output', 'params', 'passw', 'path', 'port', 'run-mode', 'type', 'url', 'user']
        assert (sorted(res) == exp), 'long_opt = {0}'.format(exp)           
        th.clear_cmd()
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/extensions/security/security/01_methods_ut.jedi
  Name: ts_sec_zap
  Desc: Test method sec_zap
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead
    from subprocess import Popen, PIPE    
    from time import sleep
    from os import path, remove  
    import sys
    
    try:
        from StringIO import StringIO
    except ImportError:
        from io import StringIO     
  
  Test-Case-1:
    Id: tc_01
    Name: tc_sec_zap
    Desc: ZAP
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_start
      Desc: Action start        
      
      Test: |
        th = TestHead()
        ext = th._ext['Security']
        th.pre_replace()
        TestHead.options = {'sec-action': 'start', 'sec-path': '/usr/share/zaproxy/zap.sh', 'sec-host' : '0.0.0.0', 'sec-port': 8000}
        ext.sec_zap()
        proc = Popen(['ps', '-ef'], stdout=PIPE)
        out = proc.communicate()                
        res = True if ('zap' in str(out)) else False
        
      Validate: |
        this.test_result = res
        assert (res), 'ZAP started'        
             
    Test-Condition-2: 
      Id: tco_02
      Name: tco_spider
      Desc: Action spider        
      
      Test: |
        old = sys.stdout
        sys.stdout = res = StringIO()      
        TestHead.options = {'sec-action': 'spider', 'sec-host' : '0.0.0.0', 'sec-port': 8000, 
                            'sec-url': 'http://localhost/mutillidae/index.php?page=login.php'}
        ext.sec_zap()
        res = res.getvalue()
        sys.stdout = old
        
      Validate: |
        this.test_result = res
        print(res)
        assert ('urls found' in res), 'spider executed'    
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_scan
      Desc: Action scan        
      
      Test: |
        old = sys.stdout
        sys.stdout = res = StringIO()      
        TestHead.options = {'sec-action': 'scan', 'sec-host' : '0.0.0.0', 'sec-port': 8000, 
                            'sec-url': 'http://localhost/mutillidae/index.php?page=login.php', 'sec-method': 'POST',
                            'sec-params': 'username:ZAP|password:ZAP|login-php-submit-button:Login'}
        ext.sec_zap()
        res = res.getvalue()
        sys.stdout = old
        
      Validate: |
        this.test_result = res
        print(res)
        assert ('alerts found' in res), 'scan executed'       
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_export
      Desc: Action export        
      
      Test: |     
        TestHead.options = {'sec-action': 'export', 'sec-host' : '0.0.0.0', 'sec-port': 8000, 
                            'sec-url': 'http://localhost/mutillidae/index.php?page=login.php',
                            'sec-type': 'alert', 'sec-format': 'html', 'sec-output': 'alert.html'}
        ext.sec_zap()        
        res = path.exists(TestHead.options['sec-output'])
        
      Validate: |
        this.test_result = res
        assert (res), 'file created'
        remove(TestHead.options['sec-output'])
        TestHead.options['sec-type'], TestHead.options['sec-format'], TestHead.options['sec-output'] = 'msg', 'har', 'msg.har'
        ext.sec_zap()  
        res = path.exists(TestHead.options['sec-output'])   
        this.test_result = res
        assert (res), 'file created'
        remove(TestHead.options['sec-output'])           
        TestHead.options['sec-type'], TestHead.options['sec-format'], TestHead.options['sec-output'] = 'url', 'json', 'url.json'
        ext.sec_zap()  
        res = path.exists(TestHead.options['sec-output'])   
        this.test_result = res
        assert (res), 'file created'
        remove(TestHead.options['sec-output'])                              
                
    Test-Condition-5: 
      Id: tco_05
      Name: tco_stop
      Desc: Action stop        
      
      Test: |
        TestHead.options = {'sec-action': 'stop', 'sec-host' : '0.0.0.0', 'sec-port': 8000}
        ext.sec_zap()
        sleep(5)
        proc = Popen(['ps', '-ef'], stdout=PIPE)
        out = proc.communicate()
        res = True if ('zap' not in str(out)) else False
        
      Validate: |
        this.test_result = res
        assert (res), 'ZAP stopped'   
        th.post_replace()
        th.clear_cmd()
        
Test-Scenario-6:
  Id: ts_06
  Path: hydratk/extensions/security/security/01_methods_ut.jedi
  Name: ts_sec_msf
  Desc: Test method _sec_msf
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from yodalib.hydratk.core.testhead import TestHead
    from subprocess import Popen, PIPE    
    from time import sleep
    from os import path, remove  
    import sys
    
    try:
        from StringIO import StringIO
    except ImportError:
        from io import StringIO     
  
  Test-Case-1:
    Id: tc_01
    Name: tc_sec_msf
    Desc: MSF
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_start
      Desc: Action start        
      
      Test: |
        th = TestHead()
        ext = th._ext['Security']
        th.pre_replace()
        TestHead.options = {'sec-action': 'start', 'sec-path': '/usr/bin/msfrpcd', 'sec-host' : '0.0.0.0', 'sec-port': 8000}
        ext.sec_msf()
        proc = Popen(['ps', '-ef'], stdout=PIPE)
        out = proc.communicate()                
        res = True if ('msfrpcd' in str(out)) else False
        
      Validate: |
        this.test_result = res
        assert (res), 'MSF started'   
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_call
      Desc: Action call        
      
      Test: |
        old = sys.stdout
        sys.stdout = res = StringIO()            
        TestHead.options = {'sec-action': 'call', 'sec-host' : '0.0.0.0', 'sec-port': 8000, 'sec-method': 'auth.login', 'sec-params': 'msf|msf'}
        ext.sec_msf()        
        res = res.getvalue()
        sys.stdout = old
        
      Validate: |
        this.test_result = res
        assert ('success' in res), 'Login successful'                                             
                
    Test-Condition-3: 
      Id: tco_03
      Name: tco_stop
      Desc: Action stop        
      
      Test: |
        TestHead.options = {'sec-action': 'stop'}
        ext.sec_msf()
        sleep(5)
        proc = Popen(['ps', '-ef'], stdout=PIPE)
        out = proc.communicate()
        res = True if ('msfrpcd' not in str(out)) else False
        
      Validate: |
        this.test_result = res
        assert (res), 'MSF stopped'    
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_help
      Desc: Action help        
      
      Test: |
        old = sys.stdout
        sys.stdout = res = StringIO()        
        TestHead.options = {'sec-action': 'help', 'sec-method': 'auth.token_add'}
        ext.sec_msf()
        res = res.getvalue()
        sys.stdout = old
        res = True if ('A unique token' in res) else False
        
      Validate: |
        this.test_result = res
        assert (res), 'Help printed'   
        th.post_replace()
        th.clear_cmd()              