Test-Scenario-1:
  Id: ts_01
  Path: hydratk/extensions/security/msf/01_methods_ut.jedi
  Name: ts_init
  Desc: Test __init__ method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.extensions.security.msf import Client
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize client
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_input
      Desc: Input initialization
      
      Test: |
        host, port, user, passw = 'localhost', 8000, 'xxx', 'yyy'
        c = Client(host, port, user, passw)
        res = c.__class__.__name__
      
      Validate: |
        this.test_result = res
        assert (res == 'Client'), '__init__ = Client'
        res = [c._path, c._host, c._port, c._user, c._passw]
        exp = ['msfrpcd', host, port, user, passw]
        this.test_result = str(res)
        assert (res == exp), '_path, _host, _port, _user, _passw = {0}'.format(exp)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_config
      Desc: Initialization with configuration
      
      Test: |
        cfg = mh.cfg['Extensions']['Security']['msf']
        path, host, port, user, passw = '/usr/bin/msfrpcd', 'localhost', 8000, 'xxx', 'yyy'
        cfg['path'] = path
        cfg['host'] = host
        cfg['port'] = port
        cfg['user'] = user
        cfg['passw'] = passw
        c = Client()
        res = c.__class__.__name__
      
      Validate: | 
        this.test_result = res
        assert (res == 'Client'), '__init__ = Client'
        res = [c._path, c._host, c._port, c._user, c._passw]
        exp = [path, host, port, user, passw]   
        this.test_result = str(res)    
        assert (res == exp), '_path, _host, _port, _user, _passw = {0}'.format(exp)
        cfg['path'] = 'zap.sh'
        cfg['host'] = '127.0.0.1'
        cfg['port'] = 8080    
        cfg['user'] = cfg['passw'] = 'msf'
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/extensions/security/msf/01_methods_ut.jedi
  Name: ts_props
  Desc: Test properties
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.extensions.security.msf import Client
  
  Test-Case-1:
    Id: tc_01
    Name: tc_getters
    Desc: Getter methods
        
    Test-Condition-1: 
      Id: tco_01
      Name: tco_path
      Desc: Getter path
      
      Test: |
        c = Client()
        res = c.path    
      
      Validate: |        
        this.test_result = res
        exp = c._path
        assert (res == exp), 'path = {0}'.format(exp)    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_host
      Desc: Getter host
      
      Test: |
        res = c.host   
      
      Validate: |        
        this.test_result = res
        exp = c._host
        assert (res == exp), 'host = {0}'.format(exp)  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_port
      Desc: Getter port
      
      Test: |
        res = c.port   
      
      Validate: |        
        this.test_result = res
        exp = c._port
        assert (res == exp), 'port = {0}'.format(exp)   
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_user
      Desc: Getter user
      
      Test: |
        res = c.user
      
      Validate: |        
        this.test_result = res
        exp = c._user
        assert (res == exp), 'user = {0}'.format(exp) 
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_passw
      Desc: Getter passw
      
      Test: |
        res = c.passw
      
      Validate: |        
        this.test_result = res
        exp = c._passw
        assert (res == exp), 'passw = {0}'.format(exp) 
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_token
      Desc: Getter token
      
      Test: |
        res = c.token
      
      Validate: |        
        this.test_result = res
        exp = c._token
        assert (res == exp), 'token = {0}'.format(exp)                                                    
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/extensions/security/msf/01_methods_ut.jedi
  Name: ts_start
  Desc: Test method start
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    from hydratk.extensions.security.msf import Client
    
  Test-Case-1:
    Id: tc_01
    Name: tc_start
    Desc: Start MSF
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_start
      Desc: Start
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['msf_before_start', 'msf_after_start']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])        
        c = Client()
        path = '/usr/bin/msfrpcd'
        res = c.start(path)   
      
      Validate: |    
        this.test_result = res
        assert (res), 'start = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'start fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]  
        c.stop()
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_config
      Desc: Connect from configuration
      
      Test: |
        cfg = mh.cfg['Extensions']['Security']['msf']
        cfg['path'] = path
        cfg['host'] = '0.0.0.0'
        cfg['port'] = 8000
        cfg['user'] = 'xxx'
        cfg['passw'] = 'yyy'
        res = c.start()
      
      Validate: |        
        this.test_result = res
        assert (res), 'start = True'
        c.stop()
        cfg['path'] = 'msfrpcd'
        cfg['host'] = '127.0.0.1'
        cfg['port'] = 8080   
        cfg['user'] = cfg['passw'] = 'msf'
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_invalid_path
      Desc: Invalid path
      
      Test: |
        c = Client()
        path = 'xxx.sh'  
        res = c.start(path)
      
      Validate: |                       
        this.test_result = res
        assert (not res), 'start = False'      
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/extensions/security/msf/01_methods_ut.jedi
  Name: ts_stop
  Desc: Test method stop
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    from hydratk.extensions.security.msf import Client
    from time import sleep
    
  Test-Case-1:
    Id: tc_01
    Name: tc_stop
    Desc: Stop MSF
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_stop
      Desc: Stop
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['msf_before_stop', 'msf_after_stop']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])        
        c = Client()
        path = '/usr/bin/msfrpcd'
        c.start(path)
        res = c.stop()   
      
      Validate: |    
        this.test_result = res
        assert (res), 'stop = True'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'stop fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]  
        sleep(5)
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_not_started
      Desc: RPC not started
      
      Test: |
        c = Client()                                       
        res = c.stop()
        
      Validate: |
        this.test_result = res
        assert (not res), 'stop = False'
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/extensions/security/msf/01_methods_ut.jedi
  Name: ts_call
  Desc: Test method call
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.masterhead import MasterHead
    from yodahelpers.hydratk.core.events import events, reg_ev_hook  
    from hydratk.extensions.security.msf import Client
    from time import sleep
    from sys import version_info
    
  Test-Case-1:
    Id: tc_01
    Name: tc_call
    Desc: Call MSF method
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_login
      Desc: Login
      
      Test: |
        mh = MasterHead.get_head()
        evs = ['msf_before_call', 'msf_after_call']
        reg_ev_hook(mh, evs[0])
        reg_ev_hook(mh, evs[1])        
        c = Client()
        path = '/usr/bin/msfrpcd'
        c.start(path)
        res, out = c.call('auth.login', ['msf', 'msf']) 
      
      Validate: |    
        this.test_result = res
        assert (res), 'call = True'
        this.test_result = str(out)
        assert (out['result'] == 'success' if (version_info[0] == 2) else out[b'result'] == b'success'), 'result = success'
        res = [events[0]._id, events[1]._id]
        this.test_result = str(res)
        assert (res == evs), 'call fires {0}'.format(evs)  
        del mh._event_hooks[evs[0]]
        del mh._event_hooks[evs[1]]   
        del events[0]
        del events[0]  
        c.stop()
        sleep(10)
        
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_failed_login
      Desc: Failed login
      
      Test: |
        c = Client()                                       
        c.start('/usr/bin/msfrpcd')
        res, out = c.call('auth.login', ['xxx', 'yyy'])
        
      Validate: |
        this.test_result = res
        assert (not res), 'res = False'        
        c.stop()
        
Test-Scenario-6:
  Id: ts_06
  Path: hydratk/extensions/security/msf/01_methods_ut.jedi
  Name: ts_api_help
  Desc: Test method api_help
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.extensions.security.msf import Client
    
  Test-Case-1:
    Id: tc_01
    Name: tc_api_help
    Desc: Get RPC API help
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_areas
      Desc: Areas
      
      Test: |
        c = Client()
        res = c.api_help()
      
      Validate: |     
        this.test_result = res
        exp = 'auth'
        assert (exp in res), 'help contains {0}'.format(exp)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_methods
      Desc: Area methods
      
      Test: |        
        res = c.api_help('auth')
      
      Validate: |     
        this.test_result = res
        exp = 'token_add'
        assert (exp in res), 'help contains {0}'.format(exp)
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_method
      Desc: Method
      
      Test: |        
        res = c.api_help(method='auth.token_add')
      
      Validate: |     
        this.test_result = res
        exp = 'A unique token'
        assert (exp in res), 'help contains {0}'.format(exp)   
                     
  Test-Case-2:
    Id: tc_02
    Name: tc_negative
    Desc: Negative cases
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_unknown_area
      Desc: Unknown area
      
      Test: |
        c = Client()
        res = c.api_help('xxx')
      
      Validate: |                 
        this.test_result = res
        exp = 'Unknown area'
        assert (exp in res), 'help contains {0}'.format(exp)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_unknown_method
      Desc: Unknown method
      
      Test: |       
        res = c.api_help(method='auth.xxx')
      
      Validate: |                 
        this.test_result = res
        exp = 'Unknown method'
        assert (exp in res), 'help contains {0}'.format(exp)
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_format
      Desc: Invalid format
      
      Test: |        
        res = c.api_help(method='xxx')
      
      Validate: |                 
        this.test_result = res
        exp = 'Invalid method'
        assert (exp in res), 'help contains {0}'.format(exp)                