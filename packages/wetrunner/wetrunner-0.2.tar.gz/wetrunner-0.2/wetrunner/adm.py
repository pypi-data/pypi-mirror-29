r"""Anomalous dimension matrices.

The RGE have the form

$$\frac{d \vec{C}}{d\ln\mu} = \gamma^T \vec{C}$$

with

$$\gamma = \frac{\alpha_s}{4\pi} \gamma^{1,0} + \frac{\alpha_s}{4\pi} \gamma^{0,1}$$

The functions `adm_s_X` return $\gamma^{1,0}$.
The functions `adm_e_X` return $\gamma^{0,1}$.
"""

import numpy as np


def adm_s_I(*args, **kwargs):
    return np.array([[4, 0, 0, 0, 0, 0, 0, 0],
    [0, -28/3, 4/3, 0, 0, 0, 0, 0],
    [0, 16/3, 32/3, 0, 0, 0, 0, 0],
    [0, 0, 0, -16, 0, 0, 0, 0],
    [0, 0, 0, -6, 2, 0, 0, 0],
    [0, 0, 0, 0, 0, 4, 0, 0],
    [0, 0, 0, 0, 0, 0, -28/3, 4/3],
    [0, 0, 0, 0, 0, 0, 16/3, 32/3]])


def adm_e_I(*args, **kwargs):
    return np.array([[12, 0, 0, 0, 0, 0, 0, 0],
    [0, -4, 16, 0, 0, 0, 0, 0],
    [0, 16, -4, 0, 0, 0, 0, 0],
    [0, 0, 0, -12, 0, 0, 0, 0],
    [0, 0, 0, 0, -12, 0, 0, 0],
    [0, 0, 0, 0, 0, 12, 0, 0],
    [0, 0, 0, 0, 0, 0, -4, 16],
    [0, 0, 0, 0, 0, 0, 16, -4]]) / 9


def adm_s_II(*args, **kwargs):
    return np.array([[0, 0, 0, 0, 0], [0, -8, 0, 0, 0],
    [0, 0, 0, 0, 0], [0, 0, 0, -8, 0], [0, 0, 0, 0, 8/3]])


def adm_e_II(*args, **kwargs):
    return np.array([[-4, 0, 0, 0, 0], [0, 4/3, 0, 0, 0],
    [0, 0, -2, 0, 0], [0, 0, 0, 4/3, 1/6], [0, 0, 0, 8, -40/9]])


def adm_s_III(*args, **kwargs):
    return np.array([[0, -20, 0, 2, 0, 0, 0, 0, 0, 0],
     [-(40/9), -(52/3), 4/9, 5/6, 0, 0, 0, 0, 0, 0],
     [0, -128, 0, 20, 0, 0, 0, 0, 0, 0],
     [-(256/9), -(160/3), 40/9, -(2/3), 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, -16, 0, 0, -2, 0, 0],
     [0, 0, 0, 0, 0, 2, -(4/9), -(5/6), 0, 0],
     [0, 0, 0, 0, 0, 32, 16/3, -32, 0, -2],
     [0, 0, 0, 0, 64/9, 40/ 3, -(64/9), -26, -(4/9), -(5/6)],
     [0, 0, 0, 0, 0, -512, -(1024/3), 384, -16, 32],
     [0, 0, 0, 0, -(1024/9), -(640/3), 256/3, 1184/3, 64/ 9, 46/3]])


def adm_e_III(*args, **kwargs):
    return np.array([[40/9, 0, -(4/9), 0, 0, 0, 0, 0, 0, 0],
     [0, 40/9, 0, -(4/9), 0, 0, 0, 0, 0, 0],
     [256/9, 0, -(40/9), 0, 0, 0, 0, 0, 0, 0],
     [0, 256/9, 0, -(40/9), 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, -(10/3), 0, 4/9, 0, 0, 0],
     [0, 0, 0, 0, 0, -(10/3), 0, 4/9, 0, 0],
     [0, 0, 0, 0, -(64/9), 0, 74/9, 0, 4/9, 0],
     [0, 0, 0, 0, 0, -(64/9), 0, 74/9, 0, 4/9],
     [0, 0, 0, 0, 1024/9, 0, -(1408/9), 0, -(94/9), 0],
     [0, 0, 0, 0, 0, 1024/9, 0, -(1408/9), 0, -(94/9)]])


def adm_s_IV(f, m_u, m_d, m_s, m_c, m_b, m_e, m_mu, m_tau):
    return np.array([[4/3, 1/6, 16, -4, -1/4],
    [-32/3, 14/3, 64, -16, -1],
    [0, 0, -18, 11/6, 1/8],
    [0, 0, -40/3, 74/3, 5/6],
    [0, 0, 256/3, -1600/3, -64/3]])


def adm_e_IV(f, m_u, m_d, m_s, m_c, m_b, m_e, m_mu, m_tau):
    return np.array([[-20/9, 2/9, 0, 0, 0],
    [-128/9, 20/9, 0, 0, 0],
    [0, 0, -4/3, -2/9, 0],
    [0, 0, 32/9, -28/9, -2/9],
    [0, 0, -512/9, 128/9, 20/9]])


def adm_s_Vsb(f, m_u, m_d, m_s, m_c, m_b, m_e, m_mu, m_tau):
    xu = m_u / m_b
    xc = m_c / m_b
    xd = m_d / m_b
    xs = m_s / m_b
    xe = m_e / m_b
    xmu = m_mu / m_b
    xtau = m_tau / m_b
    Aud = np.array([[0, -20, 0, 2],
                     [-(40/9), -16, 4/9, 5/6],
                     [0, -128, 0, 20],
                     [-(256/9), -40, 40/9, -(2/3)]])
    Bud = np.array([[-16, 0, 0, -2, 0, 0],
                     [0, 2, -(4/9), -(5/6), 0, 0],
                     [0, 32, 16/3, -32, 0, -2],
                     [64/9, 40/ 3, -(64/9), -26, -(4/9), -(5/6)],
                     [0, -512, -(1024/3), 384, -16, 32],
                     [-(1024/9), -(640/3), 256/3, 1184/3, 64/9, 46/3]])
    Cmat = np.array([[8/9, 2/9, 128/9, -(32/9), -(2/9)],
                     [-(160/9), 50/9, 320/ 9, -(80/9), -(5/9)],
                     [2/9, -(1/36), -(154/9), 29/18, 1/9],
                     [0, 0, -(40/3), 74/3, 5/6],
                     [32/9, -(4/9), 896/ 9, -(4832/9), -(194/9)]])
    Dmat = np.array([[-(4/9), 1/18, -(16/9), 4/9, 1/36],
                     [-(64/9), 8/9, -(256/9), 64/9, 4/9],
                     [2/9, -(1/36), 8/9, -(2/9), -(1/72)],
                     [0, 0, 0, 0, 0],
                     [32/9, -(4/9), 128/9, -(32/9), -(2/9)]])
    Emat = np.array([[-(14/3) - 20/3 + 4/3 * f, 0],
                     [-(32/9), -6 - 20/3 + 4/3 * f]])
    Fmat = np.array([[0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0],
                     [0, 0, -8, 0, 0],
                     [0, 0, 0, 8/3, 0],
                     [0, 0, 0, -(512/3), -8]])
    Iud = np.array([[0, 4/3, 0, 0],
                     [0, 64/3, 0, 0],
                     [0, -(2/3), 0, 0],
                     [0, 0, 0, 0],
                     [0, -(32/3), 0, 0]])
    Hud = np.array([[0, 0, 0, 0, 0],
                     [-(4/9), 1/18, -(16/9), 4/9, 1/36],
                     [0, 0, 0, 0, 0],
                     [-(40/9), 5/9, -(160/9), 40/9, 5/18]])
    Zud = np.array([[0, 0, 0, 0],
                     [0, 4/3, 0, 0],
                     [0, 0, 0, 0],
                     [0, 40/3, 0, 0]])
    Kmatu = np.array([[0, 0], [0, 0],
                     [-16 * xu, 0],
                     [0, -4 * xu],
                     [256 * xu, 0],
                     [0, 64 * xu]])
    Kmatc = np.array([[0, 0], [0, 0],
                     [-16 * xc, 0],
                     [0, -4 * xc],
                     [256 * xc, 0],
                     [0, 64 * xc]])
    Kmatd = np.array([[0, 0], [0, 0],
                      [8 * xd, 0], [0, -4 * xd],
                      [-128 * xd, 0], [0, 64 * xd]])
    Jmats = np.array([[0, 0], [0, 0],
                      [-(1/3) * xs, xs], [28/3 * xs, -4 * xs],
                      [-(512/3) * xs, 128 * xs]])
    Jmat = np.array([[0, 0],
                     [0, 0],
                     [-(1/3), 1],
                     [28/3, -4],
                     [-(512/3), 128]])
    Mmate = np.array([[0, 0],  [0, 0],  [0, 0],
                     [8 * xe, 0],
                     [-128 * xe, 0]])
    Mmatmu = np.array([[0, 0],  [0, 0],  [0, 0],
                     [8 * xmu, 0],
                     [-128 * xmu, 0]])
    Mmattau = np.array([[0, 0],  [0, 0],  [0, 0],
                     [8 * xtau, 0],
                     [-128 * xtau, 0]])
    G = np.zeros((57, 57))
    G[0:4, 0:4] = G[10:14, 10:14] = G[20:24, 20:24] = Aud
    G[4:10, 4:10] = G[14:20, 14:20] = G[24:30, 24:30] = Bud
    G[30:35, 30:35] = G[35:40, 35:40] = Cmat
    G[30:35, 35:40] = G[35:40, 30:35] = Dmat
    G[40:42, 40:42] = Emat
    G[42:47, 42:47] = G[47:52, 47:52] = G[52:57, 52:57] = Fmat
    G[30:35, 0:4] = G[30:35, 10:14] = G[30:35, 20:24] = G[35:40, 0:4] = G[35:40, 10:14] = G[35:40, 20:24] = Iud
    G[0:4, 30:35] = G[0:4, 35:40] = G[10:14, 30:35] = G[10:14, 35:40] = G[20:24, 30:35] = G[20:24, 35:40] = Hud
    G[10:14, 0:4] = G[20:24, 0:4] = G[20:24, 10:14] = G[0:4, 10:14] = G[0:4, 20:24] = G[10:14, 20:24] = Zud
    G[4:10, 40:42] = Kmatu
    G[14:20, 40:42] = Kmatd
    G[24:30, 40:42] = Kmatc
    G[30:35, 40:42] = Jmats
    G[35:40, 40:42] = Jmat
    G[42:47, 40:42] = Mmate
    G[47:52, 40:42] = Mmatmu
    G[52:57, 40:42] = Mmattau
    return G


def adm_e_Vsb(f, m_u, m_d, m_s, m_c, m_b, m_e, m_mu, m_tau):
    Au = np.array([[8, 0, -(4/9), 0],
                   [0, 40/9, 0, -(4/9)],
                   [64, 0, -(40/9),    0],
                   [0, 256/9, 0, -(40/9)]])
    Ad = np.array([[-(4/3), 0, 2/9, 0],
                   [0, -(20/9), 0, 2/9],
                   [-(16/3), 0, 20/9,     0],
                   [0, -(128/9), 0, 20/9]])
    Bu = np.array([[-(10/3), 0, 4/9, 0, 0, 0],
                   [0, -(10/3), 0, 4/9, 0,    0],
                   [-(64/9), 0, 74/9, 0, 4/9, 0],
                   [0, -(64/9), 0, 74/9, 0, 4/    9],
                   [1024/9, 0, -(1408/9), 0, -(94/9), 0],
                   [0, 1024/9, 0, -(1408/9), 0, -(94/9)]])
    Bd = np.array([[-(4/3), 0, -(2/9), 0, 0, 0],
                   [0, -(4/3), 0, -(2/9), 0,    0],
                   [32/9, 0, -(28/9), 0, -(2/9), 0],
                   [0, 32/9, 0, -(28/9), 0, -(2/9)],
                   [-(512/9), 0, 128/9, 0, 20/9, 0],
                   [0, -(512/9), 0,    128/9, 0, 20/9]])
    Cmat = np.array([[-(32/27), 2/9, 0, 0, 0],
                   [-(80/27), 20/9, 0, 0,    0],
                   [-(2/27), 0, -(4/3), -(2/9), 0],
                   [0, 0, 32/    9, -(28/9), -(2/9)],
                   [-(32/27), 0, -(512/9), 128/9, 20/9]])
    Emat = np.array([[16/9, -8/3],
                   [0, 8/9]])
    Fmat = np.array([[-4, 2/3, 0, 0, 0],
                   [-16, 20/3, 0, 0, 0],
                   [0, 0, -(20/3), -(2/3), 0],
                   [0, 0, 32/3, -(76/9), -(2/3)],
                   [0, 0, -(512/3), -(128/9), 4]])
    Gmat = np.array([[8/3, 0, 0, 0, 0],
                   [80/3, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0],
                   [0, 0,     0, 0, 0],
                   [0, 0, 0, 0, 0]])
    Iu = np.array([[-(56/27), 0, 0, 0],
                   [-(608/27), 0, 0, 0],
                   [4/27, 0, 0,    0],
                   [0, 0, 0, 0],
                   [64/27, 0, 0, 0]])
    Id = np.array([[28/27, 0, 0, 0],
                   [304/27, 0, 0, 0],
                   [-(2/27), 0, 0, 0],
                   [0, 0, 0, 0],
                   [-(32/27), 0, 0, 0]])
    Hu = np.array([[-(16/9), 0, 0, 0, 0],
                   [0, 0, 0, 0, 0],
                   [-(160/9), 0, 0, 0,    0],
                   [0, 0, 0, 0, 0]])
    Hd = np.array([[8/9, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0],
                   [80/9, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0]])
    Zu = np.array([[32/9, 0, 0, 0],
                   [0, 0, 0, 0],
                   [320/9, 0, 0, 0],
                   [0, 0, 0,    0]])
    Zd = np.array([[-(16/9), 0, 0, 0],
                   [0, 0, 0, 0],
                   [-(160/9), 0, 0, 0],
                   [0, 0,     0, 0]])
    Dmat = np.array([[28/27, 0, 0, 0, 0],
                   [304/27, 0, 0, 0, 0],
                   [-(2/27), 0, 0, 0, 0],
                   [0, 0, 0, 0, 0],
                   [-(32/27), 0, 0, 0, 0]])
    Lu = np.array([[-(16/9), 0, 0, 0],
                   [-(160/9), 0, 0, 0],
                   [0, 0, 0, 0],
                   [0, 0,     0, 0],
                   [0, 0, 0, 0]])
    Ld = np.array([[8/9, 0, 0, 0],
                   [80/9, 0, 0, 0],
                   [0, 0, 0, 0],
                   [0, 0, 0,    0],
                   [0, 0, 0, 0]])
    matQ = np.array([[8/9, 0, 0, 0, 0],
                   [80/9, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0]])
    Nd = np.array([[8/3, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0],
                   [80/3, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0]])
    Nu = np.array([[-(16/3), 0, 0, 0, 0],
                   [0, 0, 0, 0, 0],
                   [-(160/3), 0, 0, 0,    0],
                   [0, 0, 0, 0, 0]])
    Pmat = np.array([[28/9, 0, 0, 0, 0],
                   [304/9, 0, 0, 0, 0],
                   [-(2/9), 0, 0, 0,    0],
                   [0, 0, 0, 0, 0],
                   [-(32/9), 0, 0, 0, 0]])
    G = np.zeros((57, 57))
    G[0:4, 0:4] = G[20:24, 20:24] = Au
    G[10:14, 10:14] = Ad
    G[4:10, 4:10] = G[24:30, 24:30] = Bu
    G[14:20, 14:20] = Bd
    G[30:35, 30:35] = G[35:40, 35:40] = Cmat
    G[40:42, 40:42] = Emat
    G[42:47, 42:47] = G[47:52, 47:52] = G[52:57, 52:57] = Fmat
    G[42:47, 47:52] = G[42:47, 52:57] = G[52:57, 47:52] = G[52:57, 42:47] = G[47:52, 42:47] = G[47:52, 52:57] = Gmat
    G[30:35, 0:4] = G[30:35, 20:24] = G[35:40, 0:4] = G[35:40, 20:24] = Iu
    G[30:35, 10:14] = G[35:40, 10:14] = Id
    G[0:4, 30:35] = G[0:4, 35:40] = G[20:24, 30:35] = G[20:24, 35:40] = Hu
    G[10:14, 30:35] = G[10:14, 35:40] = Hd
    G[0:4, 10:14] = G[10:14, 20:24] = G[10:14, 0:4] = G[20:24, 10:14] = Zd
    G[20:24, 0:4] = G[0:4, 20:24] = Zu
    G[30:35, 35:40] = G[35:40, 30:35] = Dmat
    G[42:47, 0:4] = G[47:52, 0:4] = G[52:57, 0:4] = G[42:47, 20:24] = G[47:52, 20:24] = G[52:57, 20:24] = Lu
    G[42:47, 10:14] = G[47:52, 10:14] = G[52:57, 10:14] = Ld
    G[42:47, 30:35] = G[42:47, 35:40] = G[47:52, 30:35] = G[47:52, 35:40] = G[52:57, 30:35] = G[52:57, 35:40] = matQ
    G[10:14, 42:47] = G[10:14, 47:52] = G[10:14, 52:57] = Nd
    G[0:4, 42:47] = G[0:4, 47:52] = G[0:4, 52:57] = G[20:24, 42:47] = G[20:24, 47:52] = G[20:24, 52:57] = Nu
    G[30:35, 42:47] = G[30:35, 47:52] = G[30:35, 52:57] = G[35:40, 42:47] = G[35:40, 47:52] = G[35:40, 52:57] = Pmat
    return G


def adm_s_Vdb(f, m_u, m_d, m_s, m_c, m_b, m_e, m_mu, m_tau):
    # s->d, d->s
    return adm_s_Vsb(f, m_u=m_u, m_d=m_s, m_s=m_d, m_c=m_c, m_b=m_b,
                     m_e=m_e, m_mu=m_mu, m_tau=m_tau)


def adm_e_Vdb(f, m_u, m_d, m_s, m_c, m_b, m_e, m_mu, m_tau):
    # s->d, d->s
    return adm_e_Vsb(f, m_u=m_u, m_d=m_s, m_s=m_d, m_c=m_c, m_b=m_b,
                     m_e=m_e, m_mu=m_mu, m_tau=m_tau)

def adm_s_Vds(f, m_u, m_d, m_s, m_c, m_b, m_e, m_mu, m_tau):
    # b->s, s->d, d->b
    return adm_s_Vsb(f, m_u=m_u, m_d=m_b, m_s=m_d, m_c=m_c, m_b=m_s,
                     m_e=m_e, m_mu=m_mu, m_tau=m_tau)


def adm_e_Vds(f, m_u, m_d, m_s, m_c, m_b, m_e, m_mu, m_tau):
    # b->s, s->d, d->b
    return adm_e_Vsb(f, m_u=m_u, m_d=m_b, m_s=m_d, m_c=m_c, m_b=m_s,
                     m_e=m_e, m_mu=m_mu, m_tau=m_tau)


def adm_s_Vb(*args, **kwargs):
    return np.array([[0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, -8, 0, 0],
    [0, 0, 0, 8/3, 0],
    [0, 0, 0, -(512/3), -8]])


def adm_e_Vb(*args, **kwargs):
    return np.array([[-20/3, 2/3, 0, 0, 0],
    [-128/3, 20/3, 0, 0, 0],
    [0, 0, -20/3, -2/3, 0],
    [0, 0, 32/3, -76/9, -2/3],
    [0, 0, -512/3, -128/9, 4]])
