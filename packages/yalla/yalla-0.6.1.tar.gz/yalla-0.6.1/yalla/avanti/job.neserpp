#!/bin/sh
#@ job_name = __JOB_NAME__
#@ output = __RESULTS_PATH__/LOGS/job.out
#@ error = __RESULTS_PATH__/LOGS/job.err
#@ environment = COPY_ALL;
#@ job_type = parallel
#@ node = __NODES__
#@ tasks_per_node   = __PPN__
#@ notification = always
#@ wall_clock_limit = __CPUTIME__
#@ account_no = __ACCOUNT__
#@ class = __QUEUE__
#@ queue

#module load maestro/1.4.1
module load /opt/share/maestro/1.4.1/module.sh
module load python/2.7.3
module load gcc/4.7.2

export PYTHONPATH=__PYTHONPATH__

touch  __AVANTI_OUTPUT__
touch  __AVANTI_ERR__
date >>  __AVANTI_OUTPUT__
NPP=`wc -l $LOADL_HOSTFILE | awk '{print $1}' `

date >  __AVANTI_OUTPUT__
NPP=__NB_PROCS__
echo ----------------------------------------------------- >>  __AVANTI_OUTPUT__
echo execution sur $NPP cores! >>  __AVANTI_OUTPUT__

cd __AVANTI_PATH__/../pp

cp $LOADL_HOSTFILE __RESULTS_PATH__/LOGS/machines.txt
mkdir __RESULTS_PATH__/LOGS/HOSTS/
split -l __PARALLEL_RUNS__ -d -a 3 $LOADL_HOSTFILE  __RESULTS_PATH__/LOGS/HOSTS/mach
head -1 __RESULTS_PATH__/LOGS/HOSTS/mach* -q > __RESULTS_PATH__/LOGS/machines_head.txt
NPPH=$((__NB_PROCS__/__PARALLEL_RUNS__))

__SPAWN_LOGGER__ 
cd __AVANTI_PATH__/../pp
python avanti.py "__COMMANDE__" __NB_JOBS__ $NPPH "__RESULTS_PATH__/LOGS/machines_head.txt" >> __AVANTI_DETAIL_OUTPUT__


echo fin de l''execution sur $NPP cores! >>  __AVANTI_OUTPUT__
echo ----------------------------------------------------- >>  __AVANTI_OUTPUT__
date >>  __AVANTI_OUTPUT__
