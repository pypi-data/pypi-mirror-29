# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AuthCacheItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AuthCacheItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'all': 'str',
            'gid': 'int',
            'group_name': 'str',
            'provider': 'str',
            'sid': 'str',
            'uid': 'int',
            'user_name': 'str'
        }

        self.attribute_map = {
            'all': 'all',
            'gid': 'gid',
            'group_name': 'group_name',
            'provider': 'provider',
            'sid': 'sid',
            'uid': 'uid',
            'user_name': 'user_name'
        }

        self._all = None
        self._gid = None
        self._group_name = None
        self._provider = None
        self._sid = None
        self._uid = None
        self._user_name = None

    @property
    def all(self):
        """
        Gets the all of this AuthCacheItem.
        Flush all objects in cache for access zone.

        :return: The all of this AuthCacheItem.
        :rtype: str
        """
        return self._all

    @all.setter
    def all(self, all):
        """
        Sets the all of this AuthCacheItem.
        Flush all objects in cache for access zone.

        :param all: The all of this AuthCacheItem.
        :type: str
        """
        
        self._all = all

    @property
    def gid(self):
        """
        Gets the gid of this AuthCacheItem.
        Flush objects in cache for access zone specified by GID.

        :return: The gid of this AuthCacheItem.
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """
        Sets the gid of this AuthCacheItem.
        Flush objects in cache for access zone specified by GID.

        :param gid: The gid of this AuthCacheItem.
        :type: int
        """
        
        self._gid = gid

    @property
    def group_name(self):
        """
        Gets the group_name of this AuthCacheItem.
        Flush objects in cache for access zone specified by group name.

        :return: The group_name of this AuthCacheItem.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name of this AuthCacheItem.
        Flush objects in cache for access zone specified by group name.

        :param group_name: The group_name of this AuthCacheItem.
        :type: str
        """
        
        self._group_name = group_name

    @property
    def provider(self):
        """
        Gets the provider of this AuthCacheItem.
        Flush objects in cache for access zone specified by authentication provider.

        :return: The provider of this AuthCacheItem.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this AuthCacheItem.
        Flush objects in cache for access zone specified by authentication provider.

        :param provider: The provider of this AuthCacheItem.
        :type: str
        """
        
        self._provider = provider

    @property
    def sid(self):
        """
        Gets the sid of this AuthCacheItem.
        Flush objects in cache for access zone specified by SID.

        :return: The sid of this AuthCacheItem.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """
        Sets the sid of this AuthCacheItem.
        Flush objects in cache for access zone specified by SID.

        :param sid: The sid of this AuthCacheItem.
        :type: str
        """
        
        self._sid = sid

    @property
    def uid(self):
        """
        Gets the uid of this AuthCacheItem.
        Flush objects in cache for access zone specified by UID.

        :return: The uid of this AuthCacheItem.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this AuthCacheItem.
        Flush objects in cache for access zone specified by UID.

        :param uid: The uid of this AuthCacheItem.
        :type: int
        """
        
        self._uid = uid

    @property
    def user_name(self):
        """
        Gets the user_name of this AuthCacheItem.
        Flush objects in cache for access zone specified by user name.

        :return: The user_name of this AuthCacheItem.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this AuthCacheItem.
        Flush objects in cache for access zone specified by user name.

        :param user_name: The user_name of this AuthCacheItem.
        :type: str
        """
        
        self._user_name = user_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

