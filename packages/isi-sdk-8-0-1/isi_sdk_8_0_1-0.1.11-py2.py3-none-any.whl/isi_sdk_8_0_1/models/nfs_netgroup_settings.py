# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NfsNetgroupSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NfsNetgroupSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bgwrite': 'int',
            'expiration': 'int',
            'lifetime': 'int',
            'retry': 'int'
        }

        self.attribute_map = {
            'bgwrite': 'bgwrite',
            'expiration': 'expiration',
            'lifetime': 'lifetime',
            'retry': 'retry'
        }

        self._bgwrite = None
        self._expiration = None
        self._lifetime = None
        self._retry = None

    @property
    def bgwrite(self):
        """
        Gets the bgwrite of this NfsNetgroupSettings.
        To-disk backup interval for the netgroup cache.

        :return: The bgwrite of this NfsNetgroupSettings.
        :rtype: int
        """
        return self._bgwrite

    @bgwrite.setter
    def bgwrite(self, bgwrite):
        """
        Sets the bgwrite of this NfsNetgroupSettings.
        To-disk backup interval for the netgroup cache.

        :param bgwrite: The bgwrite of this NfsNetgroupSettings.
        :type: int
        """
        
        self._bgwrite = bgwrite

    @property
    def expiration(self):
        """
        Gets the expiration of this NfsNetgroupSettings.
        Time between updates of netgroups in the cache.

        :return: The expiration of this NfsNetgroupSettings.
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """
        Sets the expiration of this NfsNetgroupSettings.
        Time between updates of netgroups in the cache.

        :param expiration: The expiration of this NfsNetgroupSettings.
        :type: int
        """
        
        self._expiration = expiration

    @property
    def lifetime(self):
        """
        Gets the lifetime of this NfsNetgroupSettings.
        Length of time an un-accessed netgroup remains in the cache.

        :return: The lifetime of this NfsNetgroupSettings.
        :rtype: int
        """
        return self._lifetime

    @lifetime.setter
    def lifetime(self, lifetime):
        """
        Sets the lifetime of this NfsNetgroupSettings.
        Length of time an un-accessed netgroup remains in the cache.

        :param lifetime: The lifetime of this NfsNetgroupSettings.
        :type: int
        """
        
        self._lifetime = lifetime

    @property
    def retry(self):
        """
        Gets the retry of this NfsNetgroupSettings.
        Retry interval for netgroup updates if the remote provider is unresponsive.

        :return: The retry of this NfsNetgroupSettings.
        :rtype: int
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """
        Sets the retry of this NfsNetgroupSettings.
        Retry interval for netgroup updates if the remote provider is unresponsive.

        :param retry: The retry of this NfsNetgroupSettings.
        :type: int
        """
        
        self._retry = retry

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

