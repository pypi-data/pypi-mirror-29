# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AuthAccessAccessItemShare(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AuthAccessAccessItemShare - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'effective_user': 'AuthAccessAccessItemShareEffectiveUser',
            'share_permissions': 'AuthAccessAccessItemShareSharePermissions'
        }

        self.attribute_map = {
            'effective_user': 'effective_user',
            'share_permissions': 'share_permissions'
        }

        self._effective_user = None
        self._share_permissions = None

    @property
    def effective_user(self):
        """
        Gets the effective_user of this AuthAccessAccessItemShare.
        Returns the effective user based on share settings.

        :return: The effective_user of this AuthAccessAccessItemShare.
        :rtype: AuthAccessAccessItemShareEffectiveUser
        """
        return self._effective_user

    @effective_user.setter
    def effective_user(self, effective_user):
        """
        Sets the effective_user of this AuthAccessAccessItemShare.
        Returns the effective user based on share settings.

        :param effective_user: The effective_user of this AuthAccessAccessItemShare.
        :type: AuthAccessAccessItemShareEffectiveUser
        """
        
        self._effective_user = effective_user

    @property
    def share_permissions(self):
        """
        Gets the share_permissions of this AuthAccessAccessItemShare.
        Specifies share permissions.

        :return: The share_permissions of this AuthAccessAccessItemShare.
        :rtype: AuthAccessAccessItemShareSharePermissions
        """
        return self._share_permissions

    @share_permissions.setter
    def share_permissions(self, share_permissions):
        """
        Sets the share_permissions of this AuthAccessAccessItemShare.
        Specifies share permissions.

        :param share_permissions: The share_permissions of this AuthAccessAccessItemShare.
        :type: AuthAccessAccessItemShareSharePermissions
        """
        
        self._share_permissions = share_permissions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

