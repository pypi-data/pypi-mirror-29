# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NodeStateServicelightNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NodeStateServicelightNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enabled': 'bool',
            'id': 'int',
            'lnn': 'int',
            'present': 'bool',
            'supported': 'bool',
            'valid': 'bool'
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'lnn': 'lnn',
            'present': 'present',
            'supported': 'supported',
            'valid': 'valid'
        }

        self._enabled = None
        self._id = None
        self._lnn = None
        self._present = None
        self._supported = None
        self._valid = None

    @property
    def enabled(self):
        """
        Gets the enabled of this NodeStateServicelightNode.
        The node service light state (True = on).

        :return: The enabled of this NodeStateServicelightNode.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this NodeStateServicelightNode.
        The node service light state (True = on).

        :param enabled: The enabled of this NodeStateServicelightNode.
        :type: bool
        """
        
        self._enabled = enabled

    @property
    def id(self):
        """
        Gets the id of this NodeStateServicelightNode.
        Node ID (Device Number) of this node.

        :return: The id of this NodeStateServicelightNode.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NodeStateServicelightNode.
        Node ID (Device Number) of this node.

        :param id: The id of this NodeStateServicelightNode.
        :type: int
        """
        
        self._id = id

    @property
    def lnn(self):
        """
        Gets the lnn of this NodeStateServicelightNode.
        Logical Node Number (LNN) of this node.

        :return: The lnn of this NodeStateServicelightNode.
        :rtype: int
        """
        return self._lnn

    @lnn.setter
    def lnn(self, lnn):
        """
        Sets the lnn of this NodeStateServicelightNode.
        Logical Node Number (LNN) of this node.

        :param lnn: The lnn of this NodeStateServicelightNode.
        :type: int
        """
        
        self._lnn = lnn

    @property
    def present(self):
        """
        Gets the present of this NodeStateServicelightNode.
        This node has a service light.

        :return: The present of this NodeStateServicelightNode.
        :rtype: bool
        """
        return self._present

    @present.setter
    def present(self, present):
        """
        Sets the present of this NodeStateServicelightNode.
        This node has a service light.

        :param present: The present of this NodeStateServicelightNode.
        :type: bool
        """
        
        self._present = present

    @property
    def supported(self):
        """
        Gets the supported of this NodeStateServicelightNode.
        This node supports a service light.

        :return: The supported of this NodeStateServicelightNode.
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """
        Sets the supported of this NodeStateServicelightNode.
        This node supports a service light.

        :param supported: The supported of this NodeStateServicelightNode.
        :type: bool
        """
        
        self._supported = supported

    @property
    def valid(self):
        """
        Gets the valid of this NodeStateServicelightNode.
        The node service light state is valid (False = Error).

        :return: The valid of this NodeStateServicelightNode.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """
        Sets the valid of this NodeStateServicelightNode.
        The node service light state is valid (False = Error).

        :param valid: The valid of this NodeStateServicelightNode.
        :type: bool
        """
        
        self._valid = valid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

