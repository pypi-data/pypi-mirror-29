# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class SummaryWorkloadWorkloadItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SummaryWorkloadWorkloadItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cpu': 'float',
            'job_type': 'str',
            'l2': 'float',
            'l3': 'float',
            'node': 'float',
            'reads': 'float',
            'system_name': 'str',
            'writes': 'float'
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'job_type': 'job_type',
            'l2': 'l2',
            'l3': 'l3',
            'node': 'node',
            'reads': 'reads',
            'system_name': 'system_name',
            'writes': 'writes'
        }

        self._cpu = None
        self._job_type = None
        self._l2 = None
        self._l3 = None
        self._node = None
        self._reads = None
        self._system_name = None
        self._writes = None

    @property
    def cpu(self):
        """
        Gets the cpu of this SummaryWorkloadWorkloadItem.
        The number (across all cores) of micro-seconds per second.

        :return: The cpu of this SummaryWorkloadWorkloadItem.
        :rtype: float
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this SummaryWorkloadWorkloadItem.
        The number (across all cores) of micro-seconds per second.

        :param cpu: The cpu of this SummaryWorkloadWorkloadItem.
        :type: float
        """
        
        self._cpu = cpu

    @property
    def job_type(self):
        """
        Gets the job_type of this SummaryWorkloadWorkloadItem.
        The canonical name for the job followed by phase in brackets, ie. 'AVscan[1]', etc...

        :return: The job_type of this SummaryWorkloadWorkloadItem.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """
        Sets the job_type of this SummaryWorkloadWorkloadItem.
        The canonical name for the job followed by phase in brackets, ie. 'AVscan[1]', etc...

        :param job_type: The job_type of this SummaryWorkloadWorkloadItem.
        :type: str
        """
        
        self._job_type = job_type

    @property
    def l2(self):
        """
        Gets the l2 of this SummaryWorkloadWorkloadItem.
        L2 cache hits per second.

        :return: The l2 of this SummaryWorkloadWorkloadItem.
        :rtype: float
        """
        return self._l2

    @l2.setter
    def l2(self, l2):
        """
        Sets the l2 of this SummaryWorkloadWorkloadItem.
        L2 cache hits per second.

        :param l2: The l2 of this SummaryWorkloadWorkloadItem.
        :type: float
        """
        
        self._l2 = l2

    @property
    def l3(self):
        """
        Gets the l3 of this SummaryWorkloadWorkloadItem.
        L3 cache hits per second.

        :return: The l3 of this SummaryWorkloadWorkloadItem.
        :rtype: float
        """
        return self._l3

    @l3.setter
    def l3(self, l3):
        """
        Sets the l3 of this SummaryWorkloadWorkloadItem.
        L3 cache hits per second.

        :param l3: The l3 of this SummaryWorkloadWorkloadItem.
        :type: float
        """
        
        self._l3 = l3

    @property
    def node(self):
        """
        Gets the node of this SummaryWorkloadWorkloadItem.
        The node on which the operation was performed.

        :return: The node of this SummaryWorkloadWorkloadItem.
        :rtype: float
        """
        return self._node

    @node.setter
    def node(self, node):
        """
        Sets the node of this SummaryWorkloadWorkloadItem.
        The node on which the operation was performed.

        :param node: The node of this SummaryWorkloadWorkloadItem.
        :type: float
        """
        
        self._node = node

    @property
    def reads(self):
        """
        Gets the reads of this SummaryWorkloadWorkloadItem.
        Disk read operations per second.

        :return: The reads of this SummaryWorkloadWorkloadItem.
        :rtype: float
        """
        return self._reads

    @reads.setter
    def reads(self, reads):
        """
        Sets the reads of this SummaryWorkloadWorkloadItem.
        Disk read operations per second.

        :param reads: The reads of this SummaryWorkloadWorkloadItem.
        :type: float
        """
        
        self._reads = reads

    @property
    def system_name(self):
        """
        Gets the system_name of this SummaryWorkloadWorkloadItem.
        The process name, job ID, etc...

        :return: The system_name of this SummaryWorkloadWorkloadItem.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """
        Sets the system_name of this SummaryWorkloadWorkloadItem.
        The process name, job ID, etc...

        :param system_name: The system_name of this SummaryWorkloadWorkloadItem.
        :type: str
        """
        
        self._system_name = system_name

    @property
    def writes(self):
        """
        Gets the writes of this SummaryWorkloadWorkloadItem.
        Disk write operations per second.

        :return: The writes of this SummaryWorkloadWorkloadItem.
        :rtype: float
        """
        return self._writes

    @writes.setter
    def writes(self, writes):
        """
        Sets the writes of this SummaryWorkloadWorkloadItem.
        Disk write operations per second.

        :param writes: The writes of this SummaryWorkloadWorkloadItem.
        :type: float
        """
        
        self._writes = writes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

