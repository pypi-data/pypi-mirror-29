# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class UpgradeClusterClusterOverview(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UpgradeClusterClusterOverview - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'nodes_current': 'int',
            'nodes_total': 'int',
            'nodes_transitioning': 'int',
            'nodes_upgraded': 'int'
        }

        self.attribute_map = {
            'nodes_current': 'nodes_current',
            'nodes_total': 'nodes_total',
            'nodes_transitioning': 'nodes_transitioning',
            'nodes_upgraded': 'nodes_upgraded'
        }

        self._nodes_current = None
        self._nodes_total = None
        self._nodes_transitioning = None
        self._nodes_upgraded = None

    @property
    def nodes_current(self):
        """
        Gets the nodes_current of this UpgradeClusterClusterOverview.
        Number of nodes running the current OneFS version.

        :return: The nodes_current of this UpgradeClusterClusterOverview.
        :rtype: int
        """
        return self._nodes_current

    @nodes_current.setter
    def nodes_current(self, nodes_current):
        """
        Sets the nodes_current of this UpgradeClusterClusterOverview.
        Number of nodes running the current OneFS version.

        :param nodes_current: The nodes_current of this UpgradeClusterClusterOverview.
        :type: int
        """
        
        self._nodes_current = nodes_current

    @property
    def nodes_total(self):
        """
        Gets the nodes_total of this UpgradeClusterClusterOverview.
        Total number of nodes on the cluster.

        :return: The nodes_total of this UpgradeClusterClusterOverview.
        :rtype: int
        """
        return self._nodes_total

    @nodes_total.setter
    def nodes_total(self, nodes_total):
        """
        Sets the nodes_total of this UpgradeClusterClusterOverview.
        Total number of nodes on the cluster.

        :param nodes_total: The nodes_total of this UpgradeClusterClusterOverview.
        :type: int
        """
        
        self._nodes_total = nodes_total

    @property
    def nodes_transitioning(self):
        """
        Gets the nodes_transitioning of this UpgradeClusterClusterOverview.
        Number of nodes transitioning between OneFS versions. Null if the cluster_state is 'committed' or 'assessing.'

        :return: The nodes_transitioning of this UpgradeClusterClusterOverview.
        :rtype: int
        """
        return self._nodes_transitioning

    @nodes_transitioning.setter
    def nodes_transitioning(self, nodes_transitioning):
        """
        Sets the nodes_transitioning of this UpgradeClusterClusterOverview.
        Number of nodes transitioning between OneFS versions. Null if the cluster_state is 'committed' or 'assessing.'

        :param nodes_transitioning: The nodes_transitioning of this UpgradeClusterClusterOverview.
        :type: int
        """
        
        self._nodes_transitioning = nodes_transitioning

    @property
    def nodes_upgraded(self):
        """
        Gets the nodes_upgraded of this UpgradeClusterClusterOverview.
        Number of nodes running the upgraded OneFS version. Null if the cluster_state is 'committed' or 'assessing.'

        :return: The nodes_upgraded of this UpgradeClusterClusterOverview.
        :rtype: int
        """
        return self._nodes_upgraded

    @nodes_upgraded.setter
    def nodes_upgraded(self, nodes_upgraded):
        """
        Sets the nodes_upgraded of this UpgradeClusterClusterOverview.
        Number of nodes running the upgraded OneFS version. Null if the cluster_state is 'committed' or 'assessing.'

        :param nodes_upgraded: The nodes_upgraded of this UpgradeClusterClusterOverview.
        :type: int
        """
        
        self._nodes_upgraded = nodes_upgraded

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

