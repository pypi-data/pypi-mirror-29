# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class DrivesDriveFirmwareUpdateNodeStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DrivesDriveFirmwareUpdateNodeStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'failed': 'int',
            'finish_time': 'str',
            'remaining': 'int',
            'start_time': 'str',
            'status': 'str',
            'updated': 'int'
        }

        self.attribute_map = {
            'failed': 'failed',
            'finish_time': 'finish_time',
            'remaining': 'remaining',
            'start_time': 'start_time',
            'status': 'status',
            'updated': 'updated'
        }

        self._failed = None
        self._finish_time = None
        self._remaining = None
        self._start_time = None
        self._status = None
        self._updated = None

    @property
    def failed(self):
        """
        Gets the failed of this DrivesDriveFirmwareUpdateNodeStatus.
        The number of drives that did not successfully complete firmware updates update on the node.

        :return: The failed of this DrivesDriveFirmwareUpdateNodeStatus.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """
        Sets the failed of this DrivesDriveFirmwareUpdateNodeStatus.
        The number of drives that did not successfully complete firmware updates update on the node.

        :param failed: The failed of this DrivesDriveFirmwareUpdateNodeStatus.
        :type: int
        """
        
        self._failed = failed

    @property
    def finish_time(self):
        """
        Gets the finish_time of this DrivesDriveFirmwareUpdateNodeStatus.
        Time when drive firmware update finished on node.

        :return: The finish_time of this DrivesDriveFirmwareUpdateNodeStatus.
        :rtype: str
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """
        Sets the finish_time of this DrivesDriveFirmwareUpdateNodeStatus.
        Time when drive firmware update finished on node.

        :param finish_time: The finish_time of this DrivesDriveFirmwareUpdateNodeStatus.
        :type: str
        """
        
        self._finish_time = finish_time

    @property
    def remaining(self):
        """
        Gets the remaining of this DrivesDriveFirmwareUpdateNodeStatus.
        Number of drives remaining to be updated on node.

        :return: The remaining of this DrivesDriveFirmwareUpdateNodeStatus.
        :rtype: int
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """
        Sets the remaining of this DrivesDriveFirmwareUpdateNodeStatus.
        Number of drives remaining to be updated on node.

        :param remaining: The remaining of this DrivesDriveFirmwareUpdateNodeStatus.
        :type: int
        """
        
        self._remaining = remaining

    @property
    def start_time(self):
        """
        Gets the start_time of this DrivesDriveFirmwareUpdateNodeStatus.
        Time when drive firmware update started on node.

        :return: The start_time of this DrivesDriveFirmwareUpdateNodeStatus.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this DrivesDriveFirmwareUpdateNodeStatus.
        Time when drive firmware update started on node.

        :param start_time: The start_time of this DrivesDriveFirmwareUpdateNodeStatus.
        :type: str
        """
        
        self._start_time = start_time

    @property
    def status(self):
        """
        Gets the status of this DrivesDriveFirmwareUpdateNodeStatus.
        Overall status of this nodes firmware updates.

        :return: The status of this DrivesDriveFirmwareUpdateNodeStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DrivesDriveFirmwareUpdateNodeStatus.
        Overall status of this nodes firmware updates.

        :param status: The status of this DrivesDriveFirmwareUpdateNodeStatus.
        :type: str
        """
        
        self._status = status

    @property
    def updated(self):
        """
        Gets the updated of this DrivesDriveFirmwareUpdateNodeStatus.
        The number of drives that completed firmware updates on the node.

        :return: The updated of this DrivesDriveFirmwareUpdateNodeStatus.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this DrivesDriveFirmwareUpdateNodeStatus.
        The number of drives that completed firmware updates on the node.

        :param updated: The updated of this DrivesDriveFirmwareUpdateNodeStatus.
        :type: int
        """
        
        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

