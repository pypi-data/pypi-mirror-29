# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ReportsThreatsReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ReportsThreatsReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'file': 'str',
            'id': 'str',
            'policy_id': 'str',
            'remediation': 'str',
            'scan_id': 'str',
            'threat': 'str',
            'time': 'int'
        }

        self.attribute_map = {
            'file': 'file',
            'id': 'id',
            'policy_id': 'policy_id',
            'remediation': 'remediation',
            'scan_id': 'scan_id',
            'threat': 'threat',
            'time': 'time'
        }

        self._file = None
        self._id = None
        self._policy_id = None
        self._remediation = None
        self._scan_id = None
        self._threat = None
        self._time = None

    @property
    def file(self):
        """
        Gets the file of this ReportsThreatsReport.
        The file that contained the threat.

        :return: The file of this ReportsThreatsReport.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """
        Sets the file of this ReportsThreatsReport.
        The file that contained the threat.

        :param file: The file of this ReportsThreatsReport.
        :type: str
        """
        
        self._file = file

    @property
    def id(self):
        """
        Gets the id of this ReportsThreatsReport.
        A unique identifier for the report.

        :return: The id of this ReportsThreatsReport.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ReportsThreatsReport.
        A unique identifier for the report.

        :param id: The id of this ReportsThreatsReport.
        :type: str
        """
        
        self._id = id

    @property
    def policy_id(self):
        """
        Gets the policy_id of this ReportsThreatsReport.
        The id of the policy that found this threat.

        :return: The policy_id of this ReportsThreatsReport.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """
        Sets the policy_id of this ReportsThreatsReport.
        The id of the policy that found this threat.

        :param policy_id: The policy_id of this ReportsThreatsReport.
        :type: str
        """
        
        self._policy_id = policy_id

    @property
    def remediation(self):
        """
        Gets the remediation of this ReportsThreatsReport.
        The action that was taken to remediate the threat.

        :return: The remediation of this ReportsThreatsReport.
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """
        Sets the remediation of this ReportsThreatsReport.
        The action that was taken to remediate the threat.

        :param remediation: The remediation of this ReportsThreatsReport.
        :type: str
        """
        
        self._remediation = remediation

    @property
    def scan_id(self):
        """
        Gets the scan_id of this ReportsThreatsReport.
        The id of the scan report this threat is associated with.

        :return: The scan_id of this ReportsThreatsReport.
        :rtype: str
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """
        Sets the scan_id of this ReportsThreatsReport.
        The id of the scan report this threat is associated with.

        :param scan_id: The scan_id of this ReportsThreatsReport.
        :type: str
        """
        
        self._scan_id = scan_id

    @property
    def threat(self):
        """
        Gets the threat of this ReportsThreatsReport.
        A description of the threat that was found.

        :return: The threat of this ReportsThreatsReport.
        :rtype: str
        """
        return self._threat

    @threat.setter
    def threat(self, threat):
        """
        Sets the threat of this ReportsThreatsReport.
        A description of the threat that was found.

        :param threat: The threat of this ReportsThreatsReport.
        :type: str
        """
        
        self._threat = threat

    @property
    def time(self):
        """
        Gets the time of this ReportsThreatsReport.
        The time that the threat was found, in Unix epoch seconds.

        :return: The time of this ReportsThreatsReport.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this ReportsThreatsReport.
        The time that the threat was found, in Unix epoch seconds.

        :param time: The time of this ReportsThreatsReport.
        :type: int
        """
        
        self._time = time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

