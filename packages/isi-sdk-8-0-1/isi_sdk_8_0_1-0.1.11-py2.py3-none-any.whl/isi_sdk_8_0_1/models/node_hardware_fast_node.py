# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NodeHardwareFastNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NodeHardwareFastNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'lnn': 'int',
            'product': 'str',
            'serial_number': 'str',
            'storage_class': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'lnn': 'lnn',
            'product': 'product',
            'serial_number': 'serial_number',
            'storage_class': 'storage_class'
        }

        self._id = None
        self._lnn = None
        self._product = None
        self._serial_number = None
        self._storage_class = None

    @property
    def id(self):
        """
        Gets the id of this NodeHardwareFastNode.
        Node ID (Device Number) of this node.

        :return: The id of this NodeHardwareFastNode.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NodeHardwareFastNode.
        Node ID (Device Number) of this node.

        :param id: The id of this NodeHardwareFastNode.
        :type: int
        """
        
        self._id = id

    @property
    def lnn(self):
        """
        Gets the lnn of this NodeHardwareFastNode.
        Logical Node Number (LNN) of this node.

        :return: The lnn of this NodeHardwareFastNode.
        :rtype: int
        """
        return self._lnn

    @lnn.setter
    def lnn(self, lnn):
        """
        Sets the lnn of this NodeHardwareFastNode.
        Logical Node Number (LNN) of this node.

        :param lnn: The lnn of this NodeHardwareFastNode.
        :type: int
        """
        
        self._lnn = lnn

    @property
    def product(self):
        """
        Gets the product of this NodeHardwareFastNode.
        Isilon product name.

        :return: The product of this NodeHardwareFastNode.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this NodeHardwareFastNode.
        Isilon product name.

        :param product: The product of this NodeHardwareFastNode.
        :type: str
        """
        
        self._product = product

    @property
    def serial_number(self):
        """
        Gets the serial_number of this NodeHardwareFastNode.
        Serial number of this node.

        :return: The serial_number of this NodeHardwareFastNode.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this NodeHardwareFastNode.
        Serial number of this node.

        :param serial_number: The serial_number of this NodeHardwareFastNode.
        :type: str
        """
        
        self._serial_number = serial_number

    @property
    def storage_class(self):
        """
        Gets the storage_class of this NodeHardwareFastNode.
        Storage class of this node (storage or diskless).

        :return: The storage_class of this NodeHardwareFastNode.
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """
        Sets the storage_class of this NodeHardwareFastNode.
        Storage class of this node (storage or diskless).

        :param storage_class: The storage_class of this NodeHardwareFastNode.
        :type: str
        """
        
        self._storage_class = storage_class

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

