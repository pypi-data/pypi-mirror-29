# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ClusterVersionNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ClusterVersionNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'build': 'str',
            'error': 'str',
            'id': 'int',
            'lnn': 'int',
            'release': 'str',
            'revision': 'str',
            'status': 'int',
            'type': 'str',
            'version': 'str'
        }

        self.attribute_map = {
            'build': 'build',
            'error': 'error',
            'id': 'id',
            'lnn': 'lnn',
            'release': 'release',
            'revision': 'revision',
            'status': 'status',
            'type': 'type',
            'version': 'version'
        }

        self._build = None
        self._error = None
        self._id = None
        self._lnn = None
        self._release = None
        self._revision = None
        self._status = None
        self._type = None
        self._version = None

    @property
    def build(self):
        """
        Gets the build of this ClusterVersionNode.
        OneFS build string.

        :return: The build of this ClusterVersionNode.
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """
        Sets the build of this ClusterVersionNode.
        OneFS build string.

        :param build: The build of this ClusterVersionNode.
        :type: str
        """
        
        self._build = build

    @property
    def error(self):
        """
        Gets the error of this ClusterVersionNode.
        Error message, if the HTTP status returned from this node was not 200.

        :return: The error of this ClusterVersionNode.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this ClusterVersionNode.
        Error message, if the HTTP status returned from this node was not 200.

        :param error: The error of this ClusterVersionNode.
        :type: str
        """
        
        self._error = error

    @property
    def id(self):
        """
        Gets the id of this ClusterVersionNode.
        Node ID of the node reporting this information.

        :return: The id of this ClusterVersionNode.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ClusterVersionNode.
        Node ID of the node reporting this information.

        :param id: The id of this ClusterVersionNode.
        :type: int
        """
        
        if id is not None  and id > 4.294967295E9:
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `4.294967295E9`")
        if id is not None and id < 0.0:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0.0`")

        self._id = id

    @property
    def lnn(self):
        """
        Gets the lnn of this ClusterVersionNode.
        Logical node number of the node reporting this information.

        :return: The lnn of this ClusterVersionNode.
        :rtype: int
        """
        return self._lnn

    @lnn.setter
    def lnn(self, lnn):
        """
        Sets the lnn of this ClusterVersionNode.
        Logical node number of the node reporting this information.

        :param lnn: The lnn of this ClusterVersionNode.
        :type: int
        """
        
        if lnn is not None  and lnn > 4.294967295E9:
            raise ValueError("Invalid value for `lnn`, must be a value less than or equal to `4.294967295E9`")
        if lnn is not None and lnn < 0.0:
            raise ValueError("Invalid value for `lnn`, must be a value greater than or equal to `0.0`")

        self._lnn = lnn

    @property
    def release(self):
        """
        Gets the release of this ClusterVersionNode.
        Kernel release number.

        :return: The release of this ClusterVersionNode.
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """
        Sets the release of this ClusterVersionNode.
        Kernel release number.

        :param release: The release of this ClusterVersionNode.
        :type: str
        """
        
        self._release = release

    @property
    def revision(self):
        """
        Gets the revision of this ClusterVersionNode.
        OneFS build number.

        :return: The revision of this ClusterVersionNode.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this ClusterVersionNode.
        OneFS build number.

        :param revision: The revision of this ClusterVersionNode.
        :type: str
        """
        
        self._revision = revision

    @property
    def status(self):
        """
        Gets the status of this ClusterVersionNode.
        Status of the HTTP response from this node if not 200.  If 200, this field does not appear.

        :return: The status of this ClusterVersionNode.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ClusterVersionNode.
        Status of the HTTP response from this node if not 200.  If 200, this field does not appear.

        :param status: The status of this ClusterVersionNode.
        :type: int
        """
        
        if status is not None  and status > 4.294967295E9:
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `4.294967295E9`")
        if status is not None and status < 0.0:
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `0.0`")

        self._status = status

    @property
    def type(self):
        """
        Gets the type of this ClusterVersionNode.
        Kernel release type.

        :return: The type of this ClusterVersionNode.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ClusterVersionNode.
        Kernel release type.

        :param type: The type of this ClusterVersionNode.
        :type: str
        """
        
        self._type = type

    @property
    def version(self):
        """
        Gets the version of this ClusterVersionNode.
        Kernel full version information.

        :return: The version of this ClusterVersionNode.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ClusterVersionNode.
        Kernel full version information.

        :param version: The version of this ClusterVersionNode.
        :type: str
        """
        
        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

