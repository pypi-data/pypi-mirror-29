# coding: utf-8

"""
StatisticsApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class StatisticsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_statistics_current(self, **kwargs):
        """
        
        Retrieve stats.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statistics_current(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] key: One key name. Can be used more than one time to query multiple keys. Also works with 'keys' arguments.
        :param list[str] keys: Multiple key names. May request matching keys or request 'all' keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with 'substr'. Also works with 'key' arguments.
        :param list[str] devid: Node devid to query. Either an <integer> or \"all\". Can be used more than one time to query multiple nodes. \"all\" queries all up nodes. 0 means query the local node. For \"cluster\" scoped keys, in any devid including 0 can be used.
        :param bool substr: Used in conjunction with the 'keys' argument, alters the behavior of keys. Makes the 'keys' arg perform a partial match. Defaults to false.
        :param int timeout: Time in seconds to wait for results from remote nodes.
        :param bool degraded: If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data.
        :return: StatisticsCurrent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'keys', 'devid', 'substr', 'timeout', 'degraded']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statistics_current" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/statistics/current'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'key' in params:
            query_params['key'] = params['key']
        if 'keys' in params:
            query_params['keys'] = params['keys']
        if 'devid' in params:
            query_params['devid'] = params['devid']
        if 'substr' in params:
            query_params['substr'] = params['substr']
        if 'timeout' in params:
            query_params['timeout'] = params['timeout']
        if 'degraded' in params:
            query_params['degraded'] = params['degraded']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StatisticsCurrent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_statistics_history(self, **kwargs):
        """
        
        Retrieve stats.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statistics_history(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int begin: Earliest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now.
        :param int interval: Minimum sampling interval time in seconds. If native statistics are higher resolution, data will be down-sampled.
        :param int end: Latest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now. If not supplied, use now as the end time.
        :param int timeout: Time in seconds to wait for results from remote nodes.
        :param bool substr: Used in conjunction with the 'keys' argument, alters the behavior of keys. Makes the 'keys' arg perform a partial match. Defaults to false.
        :param list[str] keys: Multiple key names. May request matching keys or request 'all' keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with 'substr'. Also works with 'key' arguments.
        :param list[str] devid: Node devid to query. Either an <integer> or \"all\". Can be used more than one time to query multiple nodes. \"all\" queries all up nodes. 0 means query the local node. For \"cluster\" scoped keys, in any devid including 0 can be used.
        :param bool memory_only: Only use statistics sources that reside in memory (faster, but with less retention).
        :param list[str] key: One key name. Can be used more than one time to query multiple keys. Also works with 'keys' arguments.
        :param bool degraded: If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data.
        :param int resolution: Synonymous with 'interval', if supplied supersedes interval.
        :return: StatisticsHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['begin', 'interval', 'end', 'timeout', 'substr', 'keys', 'devid', 'memory_only', 'key', 'degraded', 'resolution']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statistics_history" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/statistics/history'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'begin' in params:
            query_params['begin'] = params['begin']
        if 'interval' in params:
            query_params['interval'] = params['interval']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'timeout' in params:
            query_params['timeout'] = params['timeout']
        if 'substr' in params:
            query_params['substr'] = params['substr']
        if 'keys' in params:
            query_params['keys'] = params['keys']
        if 'devid' in params:
            query_params['devid'] = params['devid']
        if 'memory_only' in params:
            query_params['memory_only'] = params['memory_only']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'degraded' in params:
            query_params['degraded'] = params['degraded']
        if 'resolution' in params:
            query_params['resolution'] = params['resolution']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StatisticsHistory',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_statistics_key(self, statistics_key_id, **kwargs):
        """
        
        List key meta-data.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statistics_key(statistics_key_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str statistics_key_id: List key meta-data. (required)
        :return: StatisticsKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['statistics_key_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statistics_key" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'statistics_key_id' is set
        if ('statistics_key_id' not in params) or (params['statistics_key_id'] is None):
            raise ValueError("Missing the required parameter `statistics_key_id` when calling `get_statistics_key`")


        resource_path = '/platform/1/statistics/keys/{StatisticsKeyId}'.replace('{format}', 'json')
        path_params = {}
        if 'statistics_key_id' in params:
            path_params['StatisticsKeyId'] = params['statistics_key_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StatisticsKeys',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_statistics_keys(self, **kwargs):
        """
        
        List meta-data for matching keys.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statistics_keys(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool count: Only count matching keys, do not return meta-data.
        :param int limit: Return no more than this many results at once (see resume).
        :param bool queryable: Only list keys that can/cannot be queries. Default is true.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: StatisticsKeysExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'limit', 'queryable', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statistics_keys" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_statistics_keys`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/1/statistics/keys'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'count' in params:
            query_params['count'] = params['count']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'queryable' in params:
            query_params['queryable'] = params['queryable']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StatisticsKeysExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_statistics_operations(self, **kwargs):
        """
        
        Retrieve operations list.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statistics_operations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] protocols: A comma separated list. Only report operations for specified protocol(s). Default is all.
        :return: StatisticsOperations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['protocols']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statistics_operations" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/statistics/operations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'protocols' in params:
            query_params['protocols'] = params['protocols']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StatisticsOperations',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_statistics_protocols(self, **kwargs):
        """
        
        Retrieve protocol list.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statistics_protocols(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str type: Specifies whether internal, external, or all protocols should be returned.
        :return: StatisticsProtocols
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statistics_protocols" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/1/statistics/protocols'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StatisticsProtocols',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_summary_client(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_summary_client(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: Sort data by the specified comma-separated field(s). (num_operations | operation_rate | in_max | in_min | in | in_avg | out_max | out_min | out | out_avg | time_max | time_min | time_avg | node | protocol | class | user_id | user_name | local_addr | local_name | remote_addr | remote_name) Prepend 'asc:' or 'desc:' to a field to change the sort direction. 
        :param str totalby: A comma separated list specifying what should be unique. (node | protocol | class | local_addr | local_name | remote_addr | remote_name | user_id | user_name | devid). Aggregation is performed over all the fields not specified in the list.
        :param str user_names: A comma separated list. Only report statistics for operations requested by users with resolved names enumerated. 
        :param str remote_addresses: A comma separated list. Only report statistics for operations requested by the remote clients with dotted-quad IP addresses enumerated. 
        :param bool numeric: Do not resolve hostnames and usernames to their human readable form(s). Default is false. 
        :param str local_names: A comma separated list. Only report statistics for operations handled by the local hosts with resolved names enumerated. 
        :param str user_ids: A comma separated list. Only report statistics for operations requested by users with numeric UIDs enumerated. 
        :param str classes: A comma separated list. Default is all. (other | write | read | namespace_read | namespace_write)
        :param int timeout: Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.
        :param str local_addresses: A comma separated list. Only report statistics for operations handled by the local hosts with dotted-quad IP addresses enumerated. 
        :param bool degraded: Continue to report if some nodes do not respond.
        :param str remote_names: A comma separated list. Only report statistics for operations requested by the remote clients with resolved names enumerated. 
        :param str nodes: A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local.
        :param str protocols: A comma separated list. Default is all. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs | internal | external)
        :return: SummaryClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'totalby', 'user_names', 'remote_addresses', 'numeric', 'local_names', 'user_ids', 'classes', 'timeout', 'local_addresses', 'degraded', 'remote_names', 'nodes', 'protocols']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_summary_client" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/statistics/summary/client'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'totalby' in params:
            query_params['totalby'] = params['totalby']
        if 'user_names' in params:
            query_params['user_names'] = params['user_names']
        if 'remote_addresses' in params:
            query_params['remote_addresses'] = params['remote_addresses']
        if 'numeric' in params:
            query_params['numeric'] = params['numeric']
        if 'local_names' in params:
            query_params['local_names'] = params['local_names']
        if 'user_ids' in params:
            query_params['user_ids'] = params['user_ids']
        if 'classes' in params:
            query_params['classes'] = params['classes']
        if 'timeout' in params:
            query_params['timeout'] = params['timeout']
        if 'local_addresses' in params:
            query_params['local_addresses'] = params['local_addresses']
        if 'degraded' in params:
            query_params['degraded'] = params['degraded']
        if 'remote_names' in params:
            query_params['remote_names'] = params['remote_names']
        if 'nodes' in params:
            query_params['nodes'] = params['nodes']
        if 'protocols' in params:
            query_params['protocols'] = params['protocols']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SummaryClient',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_summary_drive(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_summary_drive(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: Sort data by the specified comma-separated field(s). (drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes). Prepend 'asc:' or 'desc:' to a field to change the sort direction. 
        :param bool degraded: Continue to report if some nodes do not respond.
        :param str type: Specify drive type(s) for which statistics should be reported.
        :param str nodes: A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local.
        :param int timeout: Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.
        :return: SummaryDrive
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'degraded', 'type', 'nodes', 'timeout']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_summary_drive" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/statistics/summary/drive'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'degraded' in params:
            query_params['degraded'] = params['degraded']
        if 'type' in params:
            query_params['type'] = params['type']
        if 'nodes' in params:
            query_params['nodes'] = params['nodes']
        if 'timeout' in params:
            query_params['timeout'] = params['timeout']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SummaryDrive',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_summary_heat(self, **kwargs):
        """
        
        File heat map, i.e. rate of file operations, and the type of operation listed by path/lin(s).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_summary_heat(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: Sort data by the specified comma-separated field(s). (operation_rate | node | event_name | class_name | lin | path). Prepend 'asc:' or 'desc:' to a field to change the sort direction. 
        :param bool convertlin: Convert lin to hex. Default is true. 
        :param str totalby: A comma separated list specifying what should be unique. (node | event_name | event_class | operation_rate | path | lin). Aggregation is performed over all the fields not specified in the list.
        :param int pathdepth: Squash paths to this directory depth. Defaults to none, ie. the paths are not limited (Subject to the system limits.)
        :param bool numeric: Do not resolve LINs into filenames. Default is false. 
        :param str events: A comma separated list. Default is all. Only report specified event types(s). (blocked | contended | deadlocked | getattr | link | lock | lookup | read | rename | setattr | unlink | write).
        :param int maxpath: Maximum bytes allocated for looking up a path. An ASCII character is 1 byte (It may be more for other types of encoding). The default is 1024 bytes. Zero (0) means unlimited (Subject to the system limits.)
        :param str classes: A comma separated list. Default is all. (other | write | read | namespace_read | namespace_write).
        :param int timeout: Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.
        :param str nodes: A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local.
        :param bool degraded: Continue to report if some nodes do not respond.
        :return: SummaryHeat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'convertlin', 'totalby', 'pathdepth', 'numeric', 'events', 'maxpath', 'classes', 'timeout', 'nodes', 'degraded']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_summary_heat" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/statistics/summary/heat'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'convertlin' in params:
            query_params['convertlin'] = params['convertlin']
        if 'totalby' in params:
            query_params['totalby'] = params['totalby']
        if 'pathdepth' in params:
            query_params['pathdepth'] = params['pathdepth']
        if 'numeric' in params:
            query_params['numeric'] = params['numeric']
        if 'events' in params:
            query_params['events'] = params['events']
        if 'maxpath' in params:
            query_params['maxpath'] = params['maxpath']
        if 'classes' in params:
            query_params['classes'] = params['classes']
        if 'timeout' in params:
            query_params['timeout'] = params['timeout']
        if 'nodes' in params:
            query_params['nodes'] = params['nodes']
        if 'degraded' in params:
            query_params['degraded'] = params['degraded']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SummaryHeat',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_summary_protocol(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_summary_protocol(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str operations: Specify operation(s) for which statistics should be reported (See the cli command: 'isi statistics list operations', for a total list). Default is all. 
        :param str sort: Sort data by the specified comma-separated field(s). (time | operation_count | operation_rate | in_max | in_min | in | in_avg | in_standard_dev | out_max | out_min | out | out_avg | out_standard_dev | time_max | time_min | time_avg | time_standard_dev | node | protocol | class | operation). Prepend 'asc:' or 'desc:' to a field to change the sort direction. 
        :param str totalby: A comma separated list specifying what should be unique. (node | protocol | class | operation). Aggregation is performed over all the fields not specified in the list.
        :param bool zero: Show table entries with no values.
        :param str classes: A comma separated list. Default is all. (other | write | read | create | delete | namespace_read | namespace_write | file_state | session_state).
        :param int timeout: Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.
        :param bool degraded: Continue to report if some nodes do not respond.
        :param str nodes: A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local.
        :param str protocols: A comma separated list. Default is all. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs | all | internal | external)
        :return: SummaryProtocol
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operations', 'sort', 'totalby', 'zero', 'classes', 'timeout', 'degraded', 'nodes', 'protocols']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_summary_protocol" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/statistics/summary/protocol'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'operations' in params:
            query_params['operations'] = params['operations']
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'totalby' in params:
            query_params['totalby'] = params['totalby']
        if 'zero' in params:
            query_params['zero'] = params['zero']
        if 'classes' in params:
            query_params['classes'] = params['classes']
        if 'timeout' in params:
            query_params['timeout'] = params['timeout']
        if 'degraded' in params:
            query_params['degraded'] = params['degraded']
        if 'nodes' in params:
            query_params['nodes'] = params['nodes']
        if 'protocols' in params:
            query_params['protocols'] = params['protocols']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SummaryProtocol',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_summary_system(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_summary_system(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: Sort data by the specified comma-separated field(s). (time | node | cpu | smb | ftp | http | nfs | hdfs | total | net_in | net_out | disk_in). Prepend 'asc:' or 'desc:' to a field to change the sort direction. 
        :param bool oprates: Display protocol operation rate statistics rather than the default throughput statistics.
        :param bool degraded: Continue to report if some nodes do not respond.
        :param str nodes: A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local.
        :param int timeout: Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.
        :return: SummarySystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'oprates', 'degraded', 'nodes', 'timeout']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_summary_system" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/3/statistics/summary/system'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'oprates' in params:
            query_params['oprates'] = params['oprates']
        if 'degraded' in params:
            query_params['degraded'] = params['degraded']
        if 'nodes' in params:
            query_params['nodes'] = params['nodes']
        if 'timeout' in params:
            query_params['timeout'] = params['timeout']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SummarySystem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_summary_workload(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_summary_workload(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sort: Sort data by the specified comma-separated field(s). (node | system_name | job_type | cpu | reads | writes | l2 | l3). Prepend 'asc:' or 'desc:' to a field to change the sort direction. 
        :param str totalby: A comma separated list specifying what should be unique. (node | system_name | job_type). Aggregation is performed over all the fields not specified in the list.
        :param str job_type: Only report statistics for a job specified by type, if configured. 
        :param int timeout: Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.
        :param bool degraded: Continue to report if some nodes do not respond.
        :param str nodes: A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local.
        :param str system_names: A comma separated list. Only report statistics for workloads specified by system names.
        :return: SummaryWorkload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'totalby', 'job_type', 'timeout', 'degraded', 'nodes', 'system_names']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_summary_workload" % key
                )
            params[key] = val
        del params['kwargs']



        resource_path = '/platform/4/statistics/summary/workload'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'totalby' in params:
            query_params['totalby'] = params['totalby']
        if 'job_type' in params:
            query_params['job_type'] = params['job_type']
        if 'timeout' in params:
            query_params['timeout'] = params['timeout']
        if 'degraded' in params:
            query_params['degraded'] = params['degraded']
        if 'nodes' in params:
            query_params['nodes'] = params['nodes']
        if 'system_names' in params:
            query_params['system_names'] = params['system_names']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SummaryWorkload',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
