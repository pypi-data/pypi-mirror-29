# coding: utf-8

"""
HealthcheckApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class HealthcheckApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_healthcheck_evaluation(self, healthcheck_evaluation, **kwargs):
        """
        
        Request an evaluation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_healthcheck_evaluation(healthcheck_evaluation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HealthcheckEvaluationCreateParams healthcheck_evaluation:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['healthcheck_evaluation']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_healthcheck_evaluation" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'healthcheck_evaluation' is set
        if ('healthcheck_evaluation' not in params) or (params['healthcheck_evaluation'] is None):
            raise ValueError("Missing the required parameter `healthcheck_evaluation` when calling `create_healthcheck_evaluation`")


        resource_path = '/platform/5/healthcheck/evaluations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'healthcheck_evaluation' in params:
            body_params = params['healthcheck_evaluation']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_healthcheck_parameter(self, healthcheck_parameter, **kwargs):
        """
        
        Create a parameter.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_healthcheck_parameter(healthcheck_parameter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HealthcheckParameterCreateParams healthcheck_parameter:  (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['healthcheck_parameter']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_healthcheck_parameter" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'healthcheck_parameter' is set
        if ('healthcheck_parameter' not in params) or (params['healthcheck_parameter'] is None):
            raise ValueError("Missing the required parameter `healthcheck_parameter` when calling `create_healthcheck_parameter`")


        resource_path = '/platform/5/healthcheck/parameters'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'healthcheck_parameter' in params:
            body_params = params['healthcheck_parameter']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_healthcheck_checklist(self, healthcheck_checklist_id, **kwargs):
        """
        
        Retrieve a checklist definition.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_healthcheck_checklist(healthcheck_checklist_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str healthcheck_checklist_id: Retrieve a checklist definition. (required)
        :return: HealthcheckChecklists
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['healthcheck_checklist_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_healthcheck_checklist" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'healthcheck_checklist_id' is set
        if ('healthcheck_checklist_id' not in params) or (params['healthcheck_checklist_id'] is None):
            raise ValueError("Missing the required parameter `healthcheck_checklist_id` when calling `get_healthcheck_checklist`")


        resource_path = '/platform/5/healthcheck/checklists/{HealthcheckChecklistId}'.replace('{format}', 'json')
        path_params = {}
        if 'healthcheck_checklist_id' in params:
            path_params['HealthcheckChecklistId'] = params['healthcheck_checklist_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HealthcheckChecklists',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_healthcheck_checklists(self, **kwargs):
        """
        
        List checklists.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_healthcheck_checklists(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Return no more than this many results at once (see resume).
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: HealthcheckChecklistsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_healthcheck_checklists" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_healthcheck_checklists`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/5/healthcheck/checklists'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HealthcheckChecklistsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_healthcheck_evaluation(self, healthcheck_evaluation_id, **kwargs):
        """
        
        Retrieve individual evaluation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_healthcheck_evaluation(healthcheck_evaluation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str healthcheck_evaluation_id: Retrieve individual evaluation. (required)
        :return: HealthcheckEvaluations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['healthcheck_evaluation_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_healthcheck_evaluation" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'healthcheck_evaluation_id' is set
        if ('healthcheck_evaluation_id' not in params) or (params['healthcheck_evaluation_id'] is None):
            raise ValueError("Missing the required parameter `healthcheck_evaluation_id` when calling `get_healthcheck_evaluation`")


        resource_path = '/platform/5/healthcheck/evaluations/{HealthcheckEvaluationId}'.replace('{format}', 'json')
        path_params = {}
        if 'healthcheck_evaluation_id' in params:
            path_params['HealthcheckEvaluationId'] = params['healthcheck_evaluation_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HealthcheckEvaluations',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_healthcheck_item(self, healthcheck_item_id, **kwargs):
        """
        
        Retrieve an item definition.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_healthcheck_item(healthcheck_item_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str healthcheck_item_id: Retrieve an item definition. (required)
        :return: HealthcheckItems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['healthcheck_item_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_healthcheck_item" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'healthcheck_item_id' is set
        if ('healthcheck_item_id' not in params) or (params['healthcheck_item_id'] is None):
            raise ValueError("Missing the required parameter `healthcheck_item_id` when calling `get_healthcheck_item`")


        resource_path = '/platform/5/healthcheck/items/{HealthcheckItemId}'.replace('{format}', 'json')
        path_params = {}
        if 'healthcheck_item_id' in params:
            path_params['HealthcheckItemId'] = params['healthcheck_item_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HealthcheckItems',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_healthcheck_items(self, **kwargs):
        """
        
        List items.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_healthcheck_items(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Return no more than this many results at once (see resume).
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: HealthcheckItemsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_healthcheck_items" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `get_healthcheck_items`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/5/healthcheck/items'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HealthcheckItemsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_healthcheck_parameter(self, healthcheck_parameter_id, **kwargs):
        """
        
        Retrieve individual parameter.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_healthcheck_parameter(healthcheck_parameter_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str healthcheck_parameter_id: Retrieve individual parameter. (required)
        :return: HealthcheckParameters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['healthcheck_parameter_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_healthcheck_parameter" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'healthcheck_parameter_id' is set
        if ('healthcheck_parameter_id' not in params) or (params['healthcheck_parameter_id'] is None):
            raise ValueError("Missing the required parameter `healthcheck_parameter_id` when calling `get_healthcheck_parameter`")


        resource_path = '/platform/5/healthcheck/parameters/{HealthcheckParameterId}'.replace('{format}', 'json')
        path_params = {}
        if 'healthcheck_parameter_id' in params:
            path_params['HealthcheckParameterId'] = params['healthcheck_parameter_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HealthcheckParameters',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_healthcheck_evaluations(self, **kwargs):
        """
        
        List evaluations.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_healthcheck_evaluations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Return no more than this many results at once (see resume).
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: HealthcheckEvaluationsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_healthcheck_evaluations" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_healthcheck_evaluations`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/5/healthcheck/evaluations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HealthcheckEvaluationsExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_healthcheck_parameters(self, **kwargs):
        """
        
        List parameters.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_healthcheck_parameters(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Return no more than this many results at once (see resume).
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :return: HealthcheckParametersExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'resume']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_healthcheck_parameters" % key
                )
            params[key] = val
        del params['kwargs']


        if 'limit' in params and params['limit'] < 1.0: 
            raise ValueError("Invalid value for parameter `limit` when calling `list_healthcheck_parameters`, must be a value greater than or equal to `1.0`")

        resource_path = '/platform/5/healthcheck/parameters'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'resume' in params:
            query_params['resume'] = params['resume']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HealthcheckParametersExtended',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_healthcheck_evaluation(self, healthcheck_evaluation, healthcheck_evaluation_id, **kwargs):
        """
        
        Pause or resume an evaluation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_healthcheck_evaluation(healthcheck_evaluation, healthcheck_evaluation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HealthcheckEvaluation healthcheck_evaluation:  (required)
        :param str healthcheck_evaluation_id: Pause or resume an evaluation. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['healthcheck_evaluation', 'healthcheck_evaluation_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_healthcheck_evaluation" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'healthcheck_evaluation' is set
        if ('healthcheck_evaluation' not in params) or (params['healthcheck_evaluation'] is None):
            raise ValueError("Missing the required parameter `healthcheck_evaluation` when calling `update_healthcheck_evaluation`")
        # verify the required parameter 'healthcheck_evaluation_id' is set
        if ('healthcheck_evaluation_id' not in params) or (params['healthcheck_evaluation_id'] is None):
            raise ValueError("Missing the required parameter `healthcheck_evaluation_id` when calling `update_healthcheck_evaluation`")


        resource_path = '/platform/5/healthcheck/evaluations/{HealthcheckEvaluationId}'.replace('{format}', 'json')
        path_params = {}
        if 'healthcheck_evaluation_id' in params:
            path_params['HealthcheckEvaluationId'] = params['healthcheck_evaluation_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'healthcheck_evaluation' in params:
            body_params = params['healthcheck_evaluation']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_healthcheck_parameter(self, healthcheck_parameter, healthcheck_parameter_id, **kwargs):
        """
        
        Modify a parameter value.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_healthcheck_parameter(healthcheck_parameter, healthcheck_parameter_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HealthcheckParameter healthcheck_parameter:  (required)
        :param str healthcheck_parameter_id: Modify a parameter value. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['healthcheck_parameter', 'healthcheck_parameter_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_healthcheck_parameter" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'healthcheck_parameter' is set
        if ('healthcheck_parameter' not in params) or (params['healthcheck_parameter'] is None):
            raise ValueError("Missing the required parameter `healthcheck_parameter` when calling `update_healthcheck_parameter`")
        # verify the required parameter 'healthcheck_parameter_id' is set
        if ('healthcheck_parameter_id' not in params) or (params['healthcheck_parameter_id'] is None):
            raise ValueError("Missing the required parameter `healthcheck_parameter_id` when calling `update_healthcheck_parameter`")


        resource_path = '/platform/5/healthcheck/parameters/{HealthcheckParameterId}'.replace('{format}', 'json')
        path_params = {}
        if 'healthcheck_parameter_id' in params:
            path_params['HealthcheckParameterId'] = params['healthcheck_parameter_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'healthcheck_parameter' in params:
            body_params = params['healthcheck_parameter']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic_auth']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
