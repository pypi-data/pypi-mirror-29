# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class CloudProxyExtended(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CloudProxyExtended - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'host': 'str',
            'name': 'str',
            'password': 'str',
            'port': 'int',
            'type': 'str',
            'username': 'str',
            'id': 'str',
            'password_is_set': 'bool'
        }

        self.attribute_map = {
            'host': 'host',
            'name': 'name',
            'password': 'password',
            'port': 'port',
            'type': 'type',
            'username': 'username',
            'id': 'id',
            'password_is_set': 'password_is_set'
        }

        self._host = None
        self._name = None
        self._password = None
        self._port = None
        self._type = None
        self._username = None
        self._id = None
        self._password_is_set = None

    @property
    def host(self):
        """
        Gets the host of this CloudProxyExtended.
        A host name or network address for connecting to this proxy

        :return: The host of this CloudProxyExtended.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this CloudProxyExtended.
        A host name or network address for connecting to this proxy

        :param host: The host of this CloudProxyExtended.
        :type: str
        """
        
        self._host = host

    @property
    def name(self):
        """
        Gets the name of this CloudProxyExtended.
        A unique friendly name for this proxy configuration

        :return: The name of this CloudProxyExtended.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CloudProxyExtended.
        A unique friendly name for this proxy configuration

        :param name: The name of this CloudProxyExtended.
        :type: str
        """
        
        self._name = name

    @property
    def password(self):
        """
        Gets the password of this CloudProxyExtended.
        The password to connect to this proxy if required (write-only)

        :return: The password of this CloudProxyExtended.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this CloudProxyExtended.
        The password to connect to this proxy if required (write-only)

        :param password: The password of this CloudProxyExtended.
        :type: str
        """
        
        self._password = password

    @property
    def port(self):
        """
        Gets the port of this CloudProxyExtended.
        The port used to connect to this proxy

        :return: The port of this CloudProxyExtended.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this CloudProxyExtended.
        The port used to connect to this proxy

        :param port: The port of this CloudProxyExtended.
        :type: int
        """
        
        self._port = port

    @property
    def type(self):
        """
        Gets the type of this CloudProxyExtended.
        The type of connection used to connect to this proxy

        :return: The type of this CloudProxyExtended.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CloudProxyExtended.
        The type of connection used to connect to this proxy

        :param type: The type of this CloudProxyExtended.
        :type: str
        """
        allowed_values = ["socks_4", "socks_5", "http"]
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """
        Gets the username of this CloudProxyExtended.
        The username to connect to this proxy if required

        :return: The username of this CloudProxyExtended.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this CloudProxyExtended.
        The username to connect to this proxy if required

        :param username: The username of this CloudProxyExtended.
        :type: str
        """
        
        self._username = username

    @property
    def id(self):
        """
        Gets the id of this CloudProxyExtended.
        A globally unique ID (guid) or the name of this proxy (read-only)

        :return: The id of this CloudProxyExtended.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CloudProxyExtended.
        A globally unique ID (guid) or the name of this proxy (read-only)

        :param id: The id of this CloudProxyExtended.
        :type: str
        """
        
        self._id = id

    @property
    def password_is_set(self):
        """
        Gets the password_is_set of this CloudProxyExtended.
        Indicates whether a password has been set for this proxy

        :return: The password_is_set of this CloudProxyExtended.
        :rtype: bool
        """
        return self._password_is_set

    @password_is_set.setter
    def password_is_set(self, password_is_set):
        """
        Sets the password_is_set of this CloudProxyExtended.
        Indicates whether a password has been set for this proxy

        :param password_is_set: The password_is_set of this CloudProxyExtended.
        :type: bool
        """
        
        self._password_is_set = password_is_set

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

