# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class PoolsPoolRulesRule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PoolsPoolRulesRule - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'groupnet': 'str',
            'id': 'str',
            'iface': 'str',
            'name': 'str',
            'node_type': 'str',
            'pool': 'str',
            'subnet': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'groupnet': 'groupnet',
            'id': 'id',
            'iface': 'iface',
            'name': 'name',
            'node_type': 'node_type',
            'pool': 'pool',
            'subnet': 'subnet'
        }

        self._description = None
        self._groupnet = None
        self._id = None
        self._iface = None
        self._name = None
        self._node_type = None
        self._pool = None
        self._subnet = None

    @property
    def description(self):
        """
        Gets the description of this PoolsPoolRulesRule.
        Description for the provisioning rule.

        :return: The description of this PoolsPoolRulesRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PoolsPoolRulesRule.
        Description for the provisioning rule.

        :param description: The description of this PoolsPoolRulesRule.
        :type: str
        """
        
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if len(description) > 128: 
            raise ValueError("Invalid value for `description`, length must be less than `128`")

        self._description = description

    @property
    def groupnet(self):
        """
        Gets the groupnet of this PoolsPoolRulesRule.
        Name of the groupnet this rule belongs to

        :return: The groupnet of this PoolsPoolRulesRule.
        :rtype: str
        """
        return self._groupnet

    @groupnet.setter
    def groupnet(self, groupnet):
        """
        Sets the groupnet of this PoolsPoolRulesRule.
        Name of the groupnet this rule belongs to

        :param groupnet: The groupnet of this PoolsPoolRulesRule.
        :type: str
        """
        
        self._groupnet = groupnet

    @property
    def id(self):
        """
        Gets the id of this PoolsPoolRulesRule.
        Unique rule ID.

        :return: The id of this PoolsPoolRulesRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PoolsPoolRulesRule.
        Unique rule ID.

        :param id: The id of this PoolsPoolRulesRule.
        :type: str
        """
        
        self._id = id

    @property
    def iface(self):
        """
        Gets the iface of this PoolsPoolRulesRule.
        Interface name the provisioning rule applies to.

        :return: The iface of this PoolsPoolRulesRule.
        :rtype: str
        """
        return self._iface

    @iface.setter
    def iface(self, iface):
        """
        Sets the iface of this PoolsPoolRulesRule.
        Interface name the provisioning rule applies to.

        :param iface: The iface of this PoolsPoolRulesRule.
        :type: str
        """
        
        self._iface = iface

    @property
    def name(self):
        """
        Gets the name of this PoolsPoolRulesRule.
        Name of the provisioning rule.

        :return: The name of this PoolsPoolRulesRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PoolsPoolRulesRule.
        Name of the provisioning rule.

        :param name: The name of this PoolsPoolRulesRule.
        :type: str
        """
        
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if len(name) > 32: 
            raise ValueError("Invalid value for `name`, length must be less than `32`")

        self._name = name

    @property
    def node_type(self):
        """
        Gets the node_type of this PoolsPoolRulesRule.
        Node type the provisioning rule applies to.

        :return: The node_type of this PoolsPoolRulesRule.
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """
        Sets the node_type of this PoolsPoolRulesRule.
        Node type the provisioning rule applies to.

        :param node_type: The node_type of this PoolsPoolRulesRule.
        :type: str
        """
        allowed_values = ["any", "storage", "accelerator", "storage-i", "accelerator-i", "backup-accelerator"]
        if node_type not in allowed_values:
            raise ValueError(
                "Invalid value for `node_type`, must be one of {0}"
                .format(allowed_values)
            )

        self._node_type = node_type

    @property
    def pool(self):
        """
        Gets the pool of this PoolsPoolRulesRule.
        Name of the pool this rule belongs to.

        :return: The pool of this PoolsPoolRulesRule.
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """
        Sets the pool of this PoolsPoolRulesRule.
        Name of the pool this rule belongs to.

        :param pool: The pool of this PoolsPoolRulesRule.
        :type: str
        """
        
        self._pool = pool

    @property
    def subnet(self):
        """
        Gets the subnet of this PoolsPoolRulesRule.
        Name of the subnet this rule belongs to.

        :return: The subnet of this PoolsPoolRulesRule.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """
        Sets the subnet of this PoolsPoolRulesRule.
        Name of the subnet this rule belongs to.

        :param subnet: The subnet of this PoolsPoolRulesRule.
        :type: str
        """
        
        self._subnet = subnet

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

