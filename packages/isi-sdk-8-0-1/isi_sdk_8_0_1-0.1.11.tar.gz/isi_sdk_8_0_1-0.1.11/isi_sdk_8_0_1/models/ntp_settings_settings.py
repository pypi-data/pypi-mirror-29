# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NtpSettingsSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NtpSettingsSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'chimers': 'int',
            'excluded': 'list[str]',
            'key_file': 'str'
        }

        self.attribute_map = {
            'chimers': 'chimers',
            'excluded': 'excluded',
            'key_file': 'key_file'
        }

        self._chimers = None
        self._excluded = None
        self._key_file = None

    @property
    def chimers(self):
        """
        Gets the chimers of this NtpSettingsSettings.
        Number of nodes that will contact the NTP servers.

        :return: The chimers of this NtpSettingsSettings.
        :rtype: int
        """
        return self._chimers

    @chimers.setter
    def chimers(self, chimers):
        """
        Sets the chimers of this NtpSettingsSettings.
        Number of nodes that will contact the NTP servers.

        :param chimers: The chimers of this NtpSettingsSettings.
        :type: int
        """
        
        if chimers is not None and chimers < 1.0:
            raise ValueError("Invalid value for `chimers`, must be a value greater than or equal to `1.0`")

        self._chimers = chimers

    @property
    def excluded(self):
        """
        Gets the excluded of this NtpSettingsSettings.
        Node number (LNN) for nodes excluded from chimer duty.

        :return: The excluded of this NtpSettingsSettings.
        :rtype: list[str]
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded):
        """
        Sets the excluded of this NtpSettingsSettings.
        Node number (LNN) for nodes excluded from chimer duty.

        :param excluded: The excluded of this NtpSettingsSettings.
        :type: list[str]
        """
        
        self._excluded = excluded

    @property
    def key_file(self):
        """
        Gets the key_file of this NtpSettingsSettings.
        Path to NTP key file within /ifs.

        :return: The key_file of this NtpSettingsSettings.
        :rtype: str
        """
        return self._key_file

    @key_file.setter
    def key_file(self, key_file):
        """
        Sets the key_file of this NtpSettingsSettings.
        Path to NTP key file within /ifs.

        :param key_file: The key_file of this NtpSettingsSettings.
        :type: str
        """
        
        self._key_file = key_file

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

