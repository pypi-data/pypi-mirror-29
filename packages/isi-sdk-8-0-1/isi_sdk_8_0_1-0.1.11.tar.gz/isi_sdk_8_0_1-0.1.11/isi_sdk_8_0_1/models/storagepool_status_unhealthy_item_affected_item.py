# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class StoragepoolStatusUnhealthyItemAffectedItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        StoragepoolStatusUnhealthyItemAffectedItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device': 'int',
            'down': 'bool',
            'restriping': 'bool',
            'smartfailed': 'bool',
            'type': 'str'
        }

        self.attribute_map = {
            'device': 'device',
            'down': 'down',
            'restriping': 'restriping',
            'smartfailed': 'smartfailed',
            'type': 'type'
        }

        self._device = None
        self._down = None
        self._restriping = None
        self._smartfailed = None
        self._type = None

    @property
    def device(self):
        """
        Gets the device of this StoragepoolStatusUnhealthyItemAffectedItem.
        The logical node number or drive identifier.

        :return: The device of this StoragepoolStatusUnhealthyItemAffectedItem.
        :rtype: int
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this StoragepoolStatusUnhealthyItemAffectedItem.
        The logical node number or drive identifier.

        :param device: The device of this StoragepoolStatusUnhealthyItemAffectedItem.
        :type: int
        """
        
        self._device = device

    @property
    def down(self):
        """
        Gets the down of this StoragepoolStatusUnhealthyItemAffectedItem.
        Whether or not the device is currently down.

        :return: The down of this StoragepoolStatusUnhealthyItemAffectedItem.
        :rtype: bool
        """
        return self._down

    @down.setter
    def down(self, down):
        """
        Sets the down of this StoragepoolStatusUnhealthyItemAffectedItem.
        Whether or not the device is currently down.

        :param down: The down of this StoragepoolStatusUnhealthyItemAffectedItem.
        :type: bool
        """
        
        self._down = down

    @property
    def restriping(self):
        """
        Gets the restriping of this StoragepoolStatusUnhealthyItemAffectedItem.
        Whether or not the device is currently being repaired.

        :return: The restriping of this StoragepoolStatusUnhealthyItemAffectedItem.
        :rtype: bool
        """
        return self._restriping

    @restriping.setter
    def restriping(self, restriping):
        """
        Sets the restriping of this StoragepoolStatusUnhealthyItemAffectedItem.
        Whether or not the device is currently being repaired.

        :param restriping: The restriping of this StoragepoolStatusUnhealthyItemAffectedItem.
        :type: bool
        """
        
        self._restriping = restriping

    @property
    def smartfailed(self):
        """
        Gets the smartfailed of this StoragepoolStatusUnhealthyItemAffectedItem.
        Whether or not the device is currently smartfailed.

        :return: The smartfailed of this StoragepoolStatusUnhealthyItemAffectedItem.
        :rtype: bool
        """
        return self._smartfailed

    @smartfailed.setter
    def smartfailed(self, smartfailed):
        """
        Sets the smartfailed of this StoragepoolStatusUnhealthyItemAffectedItem.
        Whether or not the device is currently smartfailed.

        :param smartfailed: The smartfailed of this StoragepoolStatusUnhealthyItemAffectedItem.
        :type: bool
        """
        
        self._smartfailed = smartfailed

    @property
    def type(self):
        """
        Gets the type of this StoragepoolStatusUnhealthyItemAffectedItem.
        The type of affected device.

        :return: The type of this StoragepoolStatusUnhealthyItemAffectedItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this StoragepoolStatusUnhealthyItemAffectedItem.
        The type of affected device.

        :param type: The type of this StoragepoolStatusUnhealthyItemAffectedItem.
        :type: str
        """
        allowed_values = ["node", "drive"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

