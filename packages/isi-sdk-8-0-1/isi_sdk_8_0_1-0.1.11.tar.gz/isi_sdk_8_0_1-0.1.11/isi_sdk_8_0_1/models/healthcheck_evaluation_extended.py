# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class HealthcheckEvaluationExtended(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HealthcheckEvaluationExtended - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'checklist_id': 'str',
            'details': 'list[HealthcheckEvaluationDetail]',
            'id': 'str',
            'overrides': 'list[HealthcheckEvaluationOverride]',
            'parameters': 'Empty',
            'result': 'str',
            'run_status': 'str'
        }

        self.attribute_map = {
            'checklist_id': 'checklist_id',
            'details': 'details',
            'id': 'id',
            'overrides': 'overrides',
            'parameters': 'parameters',
            'result': 'result',
            'run_status': 'run_status'
        }

        self._checklist_id = None
        self._details = None
        self._id = None
        self._overrides = None
        self._parameters = None
        self._result = None
        self._run_status = None

    @property
    def checklist_id(self):
        """
        Gets the checklist_id of this HealthcheckEvaluationExtended.
        Checklist to be run

        :return: The checklist_id of this HealthcheckEvaluationExtended.
        :rtype: str
        """
        return self._checklist_id

    @checklist_id.setter
    def checklist_id(self, checklist_id):
        """
        Sets the checklist_id of this HealthcheckEvaluationExtended.
        Checklist to be run

        :param checklist_id: The checklist_id of this HealthcheckEvaluationExtended.
        :type: str
        """
        
        self._checklist_id = checklist_id

    @property
    def details(self):
        """
        Gets the details of this HealthcheckEvaluationExtended.
        Evaluation results by item - only if COMPLETED

        :return: The details of this HealthcheckEvaluationExtended.
        :rtype: list[HealthcheckEvaluationDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this HealthcheckEvaluationExtended.
        Evaluation results by item - only if COMPLETED

        :param details: The details of this HealthcheckEvaluationExtended.
        :type: list[HealthcheckEvaluationDetail]
        """
        
        self._details = details

    @property
    def id(self):
        """
        Gets the id of this HealthcheckEvaluationExtended.
        Unique identifier

        :return: The id of this HealthcheckEvaluationExtended.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this HealthcheckEvaluationExtended.
        Unique identifier

        :param id: The id of this HealthcheckEvaluationExtended.
        :type: str
        """
        
        self._id = id

    @property
    def overrides(self):
        """
        Gets the overrides of this HealthcheckEvaluationExtended.
        Optional overrides for thresholds etc.

        :return: The overrides of this HealthcheckEvaluationExtended.
        :rtype: list[HealthcheckEvaluationOverride]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """
        Sets the overrides of this HealthcheckEvaluationExtended.
        Optional overrides for thresholds etc.

        :param overrides: The overrides of this HealthcheckEvaluationExtended.
        :type: list[HealthcheckEvaluationOverride]
        """
        
        self._overrides = overrides

    @property
    def parameters(self):
        """
        Gets the parameters of this HealthcheckEvaluationExtended.
        Parameters supplied for this evaluation

        :return: The parameters of this HealthcheckEvaluationExtended.
        :rtype: Empty
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this HealthcheckEvaluationExtended.
        Parameters supplied for this evaluation

        :param parameters: The parameters of this HealthcheckEvaluationExtended.
        :type: Empty
        """
        
        self._parameters = parameters

    @property
    def result(self):
        """
        Gets the result of this HealthcheckEvaluationExtended.
        Overall result of evaluation - only if COMPLETED

        :return: The result of this HealthcheckEvaluationExtended.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this HealthcheckEvaluationExtended.
        Overall result of evaluation - only if COMPLETED

        :param result: The result of this HealthcheckEvaluationExtended.
        :type: str
        """
        allowed_values = ["PASS", "FAIL"]
        if result is not None and result not in allowed_values:
            raise ValueError(
                "Invalid value for `result`, must be one of {0}"
                .format(allowed_values)
            )

        self._result = result

    @property
    def run_status(self):
        """
        Gets the run_status of this HealthcheckEvaluationExtended.


        :return: The run_status of this HealthcheckEvaluationExtended.
        :rtype: str
        """
        return self._run_status

    @run_status.setter
    def run_status(self, run_status):
        """
        Sets the run_status of this HealthcheckEvaluationExtended.


        :param run_status: The run_status of this HealthcheckEvaluationExtended.
        :type: str
        """
        allowed_values = ["QUEUED", "RUNNING", "PAUSED", "FAILED", "COMPLETED"]
        if run_status is not None and run_status not in allowed_values:
            raise ValueError(
                "Invalid value for `run_status`, must be one of {0}"
                .format(allowed_values)
            )

        self._run_status = run_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

