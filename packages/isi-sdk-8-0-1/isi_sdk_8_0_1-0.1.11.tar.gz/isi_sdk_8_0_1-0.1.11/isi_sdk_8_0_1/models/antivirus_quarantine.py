# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class AntivirusQuarantine(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AntivirusQuarantine - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'file': 'str',
            'last_istag': 'str',
            'last_scan': 'int',
            'quarantined': 'bool',
            'scan_result': 'str',
            'scan_status': 'str'
        }

        self.attribute_map = {
            'file': 'file',
            'last_istag': 'last_istag',
            'last_scan': 'last_scan',
            'quarantined': 'quarantined',
            'scan_result': 'scan_result',
            'scan_status': 'scan_status'
        }

        self._file = None
        self._last_istag = None
        self._last_scan = None
        self._quarantined = None
        self._scan_result = None
        self._scan_status = None

    @property
    def file(self):
        """
        Gets the file of this AntivirusQuarantine.
        Path of this file, starting with /ifs.

        :return: The file of this AntivirusQuarantine.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """
        Sets the file of this AntivirusQuarantine.
        Path of this file, starting with /ifs.

        :param file: The file of this AntivirusQuarantine.
        :type: str
        """
        
        self._file = file

    @property
    def last_istag(self):
        """
        Gets the last_istag of this AntivirusQuarantine.
        The ICAP Service Tag (ISTag) recorded for this file during the last scan, or null if no tag was recorded.  For more information about ISTags, see https://tools.ietf.org/html/rfc3507.

        :return: The last_istag of this AntivirusQuarantine.
        :rtype: str
        """
        return self._last_istag

    @last_istag.setter
    def last_istag(self, last_istag):
        """
        Sets the last_istag of this AntivirusQuarantine.
        The ICAP Service Tag (ISTag) recorded for this file during the last scan, or null if no tag was recorded.  For more information about ISTags, see https://tools.ietf.org/html/rfc3507.

        :param last_istag: The last_istag of this AntivirusQuarantine.
        :type: str
        """
        
        self._last_istag = last_istag

    @property
    def last_scan(self):
        """
        Gets the last_scan of this AntivirusQuarantine.
        The date and time this file was last scanned for viruses, as a UNIX timestamp.  If null, the file has never been scanned.

        :return: The last_scan of this AntivirusQuarantine.
        :rtype: int
        """
        return self._last_scan

    @last_scan.setter
    def last_scan(self, last_scan):
        """
        Sets the last_scan of this AntivirusQuarantine.
        The date and time this file was last scanned for viruses, as a UNIX timestamp.  If null, the file has never been scanned.

        :param last_scan: The last_scan of this AntivirusQuarantine.
        :type: int
        """
        
        self._last_scan = last_scan

    @property
    def quarantined(self):
        """
        Gets the quarantined of this AntivirusQuarantine.
        If true, this file is quarantined.  If false, the file is not quarantined.

        :return: The quarantined of this AntivirusQuarantine.
        :rtype: bool
        """
        return self._quarantined

    @quarantined.setter
    def quarantined(self, quarantined):
        """
        Sets the quarantined of this AntivirusQuarantine.
        If true, this file is quarantined.  If false, the file is not quarantined.

        :param quarantined: The quarantined of this AntivirusQuarantine.
        :type: bool
        """
        
        self._quarantined = quarantined

    @property
    def scan_result(self):
        """
        Gets the scan_result of this AntivirusQuarantine.
        The result of the last scan on this file.  This string is usually one of: never_scanned, clean, quarantined, repaired, truncated, infected_no_action_taken, skipped_per_settings.  However, a longer string starting with 'unknown_status' and describing the details can also appear in uncommon edge cases.

        :return: The scan_result of this AntivirusQuarantine.
        :rtype: str
        """
        return self._scan_result

    @scan_result.setter
    def scan_result(self, scan_result):
        """
        Sets the scan_result of this AntivirusQuarantine.
        The result of the last scan on this file.  This string is usually one of: never_scanned, clean, quarantined, repaired, truncated, infected_no_action_taken, skipped_per_settings.  However, a longer string starting with 'unknown_status' and describing the details can also appear in uncommon edge cases.

        :param scan_result: The scan_result of this AntivirusQuarantine.
        :type: str
        """
        
        self._scan_result = scan_result

    @property
    def scan_status(self):
        """
        Gets the scan_status of this AntivirusQuarantine.
        The scanning status of this file.  If 'current', the file was scanned with the most up-to-date virus defintions.  If 'not_current', it has either not been scanned, been modified since the last scan, or the virus definitions are not current.

        :return: The scan_status of this AntivirusQuarantine.
        :rtype: str
        """
        return self._scan_status

    @scan_status.setter
    def scan_status(self, scan_status):
        """
        Sets the scan_status of this AntivirusQuarantine.
        The scanning status of this file.  If 'current', the file was scanned with the most up-to-date virus defintions.  If 'not_current', it has either not been scanned, been modified since the last scan, or the virus definitions are not current.

        :param scan_status: The scan_status of this AntivirusQuarantine.
        :type: str
        """
        allowed_values = ["current", "not_current"]
        if scan_status not in allowed_values:
            raise ValueError(
                "Invalid value for `scan_status`, must be one of {0}"
                .format(allowed_values)
            )

        self._scan_status = scan_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

