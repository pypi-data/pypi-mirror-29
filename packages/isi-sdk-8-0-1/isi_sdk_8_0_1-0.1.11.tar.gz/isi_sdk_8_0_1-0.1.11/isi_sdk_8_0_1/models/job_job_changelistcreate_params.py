# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class JobJobChangelistcreateParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        JobJobChangelistcreateParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'newer_snapid': 'int',
            'older_snapid': 'int',
            'retain_repstate': 'bool'
        }

        self.attribute_map = {
            'newer_snapid': 'newer_snapid',
            'older_snapid': 'older_snapid',
            'retain_repstate': 'retain_repstate'
        }

        self._newer_snapid = None
        self._older_snapid = None
        self._retain_repstate = None

    @property
    def newer_snapid(self):
        """
        Gets the newer_snapid of this JobJobChangelistcreateParams.
        Newer snapshot ID.

        :return: The newer_snapid of this JobJobChangelistcreateParams.
        :rtype: int
        """
        return self._newer_snapid

    @newer_snapid.setter
    def newer_snapid(self, newer_snapid):
        """
        Sets the newer_snapid of this JobJobChangelistcreateParams.
        Newer snapshot ID.

        :param newer_snapid: The newer_snapid of this JobJobChangelistcreateParams.
        :type: int
        """
        
        if newer_snapid is None:
            raise ValueError("Invalid value for `newer_snapid`, must not be `None`")
        if newer_snapid < 1.0:
            raise ValueError("Invalid value for `newer_snapid`, must be a value greater than or equal to `1.0`")

        self._newer_snapid = newer_snapid

    @property
    def older_snapid(self):
        """
        Gets the older_snapid of this JobJobChangelistcreateParams.
        Older snapshot ID.

        :return: The older_snapid of this JobJobChangelistcreateParams.
        :rtype: int
        """
        return self._older_snapid

    @older_snapid.setter
    def older_snapid(self, older_snapid):
        """
        Sets the older_snapid of this JobJobChangelistcreateParams.
        Older snapshot ID.

        :param older_snapid: The older_snapid of this JobJobChangelistcreateParams.
        :type: int
        """
        
        if older_snapid is None:
            raise ValueError("Invalid value for `older_snapid`, must not be `None`")
        if older_snapid < 1.0:
            raise ValueError("Invalid value for `older_snapid`, must be a value greater than or equal to `1.0`")

        self._older_snapid = older_snapid

    @property
    def retain_repstate(self):
        """
        Gets the retain_repstate of this JobJobChangelistcreateParams.
        Whether to retain the replication record after a changelist is created. Retaining a replication record allows a changelist to be recreated later.

        :return: The retain_repstate of this JobJobChangelistcreateParams.
        :rtype: bool
        """
        return self._retain_repstate

    @retain_repstate.setter
    def retain_repstate(self, retain_repstate):
        """
        Sets the retain_repstate of this JobJobChangelistcreateParams.
        Whether to retain the replication record after a changelist is created. Retaining a replication record allows a changelist to be recreated later.

        :param retain_repstate: The retain_repstate of this JobJobChangelistcreateParams.
        :type: bool
        """
        
        self._retain_repstate = retain_repstate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

