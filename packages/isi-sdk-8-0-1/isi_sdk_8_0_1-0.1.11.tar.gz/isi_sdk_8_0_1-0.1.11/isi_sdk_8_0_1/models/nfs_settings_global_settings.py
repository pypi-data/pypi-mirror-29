# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NfsSettingsGlobalSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NfsSettingsGlobalSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'nfsv3_enabled': 'bool',
            'nfsv4_enabled': 'bool',
            'rpc_maxthreads': 'int',
            'rpc_minthreads': 'int',
            'service': 'bool'
        }

        self.attribute_map = {
            'nfsv3_enabled': 'nfsv3_enabled',
            'nfsv4_enabled': 'nfsv4_enabled',
            'rpc_maxthreads': 'rpc_maxthreads',
            'rpc_minthreads': 'rpc_minthreads',
            'service': 'service'
        }

        self._nfsv3_enabled = None
        self._nfsv4_enabled = None
        self._rpc_maxthreads = None
        self._rpc_minthreads = None
        self._service = None

    @property
    def nfsv3_enabled(self):
        """
        Gets the nfsv3_enabled of this NfsSettingsGlobalSettings.
        True if NFSv3 is enabled.

        :return: The nfsv3_enabled of this NfsSettingsGlobalSettings.
        :rtype: bool
        """
        return self._nfsv3_enabled

    @nfsv3_enabled.setter
    def nfsv3_enabled(self, nfsv3_enabled):
        """
        Sets the nfsv3_enabled of this NfsSettingsGlobalSettings.
        True if NFSv3 is enabled.

        :param nfsv3_enabled: The nfsv3_enabled of this NfsSettingsGlobalSettings.
        :type: bool
        """
        
        self._nfsv3_enabled = nfsv3_enabled

    @property
    def nfsv4_enabled(self):
        """
        Gets the nfsv4_enabled of this NfsSettingsGlobalSettings.
        True if NFSv4 is enabled.

        :return: The nfsv4_enabled of this NfsSettingsGlobalSettings.
        :rtype: bool
        """
        return self._nfsv4_enabled

    @nfsv4_enabled.setter
    def nfsv4_enabled(self, nfsv4_enabled):
        """
        Sets the nfsv4_enabled of this NfsSettingsGlobalSettings.
        True if NFSv4 is enabled.

        :param nfsv4_enabled: The nfsv4_enabled of this NfsSettingsGlobalSettings.
        :type: bool
        """
        
        self._nfsv4_enabled = nfsv4_enabled

    @property
    def rpc_maxthreads(self):
        """
        Gets the rpc_maxthreads of this NfsSettingsGlobalSettings.
        Specifies the maximum number of threads in the nfsd thread pool.

        :return: The rpc_maxthreads of this NfsSettingsGlobalSettings.
        :rtype: int
        """
        return self._rpc_maxthreads

    @rpc_maxthreads.setter
    def rpc_maxthreads(self, rpc_maxthreads):
        """
        Sets the rpc_maxthreads of this NfsSettingsGlobalSettings.
        Specifies the maximum number of threads in the nfsd thread pool.

        :param rpc_maxthreads: The rpc_maxthreads of this NfsSettingsGlobalSettings.
        :type: int
        """
        
        self._rpc_maxthreads = rpc_maxthreads

    @property
    def rpc_minthreads(self):
        """
        Gets the rpc_minthreads of this NfsSettingsGlobalSettings.
        Specifies the minimum number of threads in the nfsd thread pool.

        :return: The rpc_minthreads of this NfsSettingsGlobalSettings.
        :rtype: int
        """
        return self._rpc_minthreads

    @rpc_minthreads.setter
    def rpc_minthreads(self, rpc_minthreads):
        """
        Sets the rpc_minthreads of this NfsSettingsGlobalSettings.
        Specifies the minimum number of threads in the nfsd thread pool.

        :param rpc_minthreads: The rpc_minthreads of this NfsSettingsGlobalSettings.
        :type: int
        """
        
        self._rpc_minthreads = rpc_minthreads

    @property
    def service(self):
        """
        Gets the service of this NfsSettingsGlobalSettings.
        True if the NFS service is enabled. When set to false, the NFS service is disabled.

        :return: The service of this NfsSettingsGlobalSettings.
        :rtype: bool
        """
        return self._service

    @service.setter
    def service(self, service):
        """
        Sets the service of this NfsSettingsGlobalSettings.
        True if the NFS service is enabled. When set to false, the NFS service is disabled.

        :param service: The service of this NfsSettingsGlobalSettings.
        :type: bool
        """
        
        self._service = service

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

