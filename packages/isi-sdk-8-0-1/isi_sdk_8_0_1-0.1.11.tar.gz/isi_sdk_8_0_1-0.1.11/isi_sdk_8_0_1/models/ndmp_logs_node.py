# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class NdmpLogsNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NdmpLogsNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'current_page': 'str',
            'error': 'str',
            'id': 'int',
            'lnn': 'int',
            'logs': 'str',
            'max_page': 'int',
            'status': 'int'
        }

        self.attribute_map = {
            'current_page': 'current_page',
            'error': 'error',
            'id': 'id',
            'lnn': 'lnn',
            'logs': 'logs:',
            'max_page': 'max_page',
            'status': 'status'
        }

        self._current_page = None
        self._error = None
        self._id = None
        self._lnn = None
        self._logs = None
        self._max_page = None
        self._status = None

    @property
    def current_page(self):
        """
        Gets the current_page of this NdmpLogsNode.
        The page on this node's NDMP log file being returned.

        :return: The current_page of this NdmpLogsNode.
        :rtype: str
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """
        Sets the current_page of this NdmpLogsNode.
        The page on this node's NDMP log file being returned.

        :param current_page: The current_page of this NdmpLogsNode.
        :type: str
        """
        
        self._current_page = current_page

    @property
    def error(self):
        """
        Gets the error of this NdmpLogsNode.
        Error message, if the HTTP status returned from this node was not 200.

        :return: The error of this NdmpLogsNode.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this NdmpLogsNode.
        Error message, if the HTTP status returned from this node was not 200.

        :param error: The error of this NdmpLogsNode.
        :type: str
        """
        
        self._error = error

    @property
    def id(self):
        """
        Gets the id of this NdmpLogsNode.
        Node ID of the node reporting this information.

        :return: The id of this NdmpLogsNode.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NdmpLogsNode.
        Node ID of the node reporting this information.

        :param id: The id of this NdmpLogsNode.
        :type: int
        """
        
        if id is not None  and id > 4.294967295E9:
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `4.294967295E9`")
        if id is not None and id < 0.0:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0.0`")

        self._id = id

    @property
    def lnn(self):
        """
        Gets the lnn of this NdmpLogsNode.
        Logical node number of the node reporting this information.

        :return: The lnn of this NdmpLogsNode.
        :rtype: int
        """
        return self._lnn

    @lnn.setter
    def lnn(self, lnn):
        """
        Sets the lnn of this NdmpLogsNode.
        Logical node number of the node reporting this information.

        :param lnn: The lnn of this NdmpLogsNode.
        :type: int
        """
        
        if lnn is not None  and lnn > 4.294967295E9:
            raise ValueError("Invalid value for `lnn`, must be a value less than or equal to `4.294967295E9`")
        if lnn is not None and lnn < 0.0:
            raise ValueError("Invalid value for `lnn`, must be a value greater than or equal to `0.0`")

        self._lnn = lnn

    @property
    def logs(self):
        """
        Gets the logs of this NdmpLogsNode.
        The log file entries from the current page on this node.

        :return: The logs of this NdmpLogsNode.
        :rtype: str
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """
        Sets the logs of this NdmpLogsNode.
        The log file entries from the current page on this node.

        :param logs: The logs of this NdmpLogsNode.
        :type: str
        """
        
        self._logs = logs

    @property
    def max_page(self):
        """
        Gets the max_page of this NdmpLogsNode.
        The highest page number in this node's NDMP log file.

        :return: The max_page of this NdmpLogsNode.
        :rtype: int
        """
        return self._max_page

    @max_page.setter
    def max_page(self, max_page):
        """
        Sets the max_page of this NdmpLogsNode.
        The highest page number in this node's NDMP log file.

        :param max_page: The max_page of this NdmpLogsNode.
        :type: int
        """
        
        self._max_page = max_page

    @property
    def status(self):
        """
        Gets the status of this NdmpLogsNode.
        Status of the HTTP response from this node if not 200.  If 200, this field does not appear.

        :return: The status of this NdmpLogsNode.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this NdmpLogsNode.
        Status of the HTTP response from this node if not 200.  If 200, this field does not appear.

        :param status: The status of this NdmpLogsNode.
        :type: int
        """
        
        if status is not None  and status > 4.294967295E9:
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `4.294967295E9`")
        if status is not None and status < 0.0:
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `0.0`")

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

