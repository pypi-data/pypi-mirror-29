# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class HealthcheckChecklistItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HealthcheckChecklistItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'freshness': 'int',
            'id': 'str',
            'parameters': 'list[HealthcheckChecklistItemParameter]',
            'pass_status': 'str',
            'thresholds': 'HealthcheckChecklistItemThresholds'
        }

        self.attribute_map = {
            'freshness': 'freshness',
            'id': 'id',
            'parameters': 'parameters',
            'pass_status': 'pass_status',
            'thresholds': 'thresholds'
        }

        self._freshness = None
        self._id = None
        self._parameters = None
        self._pass_status = None
        self._thresholds = None

    @property
    def freshness(self):
        """
        Gets the freshness of this HealthcheckChecklistItem.
        Optional freshness override

        :return: The freshness of this HealthcheckChecklistItem.
        :rtype: int
        """
        return self._freshness

    @freshness.setter
    def freshness(self, freshness):
        """
        Sets the freshness of this HealthcheckChecklistItem.
        Optional freshness override

        :param freshness: The freshness of this HealthcheckChecklistItem.
        :type: int
        """
        
        if freshness is not None and freshness < 0.0:
            raise ValueError("Invalid value for `freshness`, must be a value greater than or equal to `0.0`")

        self._freshness = freshness

    @property
    def id(self):
        """
        Gets the id of this HealthcheckChecklistItem.
        Unique identifier of item

        :return: The id of this HealthcheckChecklistItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this HealthcheckChecklistItem.
        Unique identifier of item

        :param id: The id of this HealthcheckChecklistItem.
        :type: str
        """
        
        self._id = id

    @property
    def parameters(self):
        """
        Gets the parameters of this HealthcheckChecklistItem.
        Parameters available for the item

        :return: The parameters of this HealthcheckChecklistItem.
        :rtype: list[HealthcheckChecklistItemParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this HealthcheckChecklistItem.
        Parameters available for the item

        :param parameters: The parameters of this HealthcheckChecklistItem.
        :type: list[HealthcheckChecklistItemParameter]
        """
        
        self._parameters = parameters

    @property
    def pass_status(self):
        """
        Gets the pass_status of this HealthcheckChecklistItem.
        Optional pass status override

        :return: The pass_status of this HealthcheckChecklistItem.
        :rtype: str
        """
        return self._pass_status

    @pass_status.setter
    def pass_status(self, pass_status):
        """
        Sets the pass_status of this HealthcheckChecklistItem.
        Optional pass status override

        :param pass_status: The pass_status of this HealthcheckChecklistItem.
        :type: str
        """
        allowed_values = ["OK", "WARNING", "CRITICAL", "EMERGENCY"]
        if pass_status is not None and pass_status not in allowed_values:
            raise ValueError(
                "Invalid value for `pass_status`, must be one of {0}"
                .format(allowed_values)
            )

        self._pass_status = pass_status

    @property
    def thresholds(self):
        """
        Gets the thresholds of this HealthcheckChecklistItem.
        Overrides for status thresholds

        :return: The thresholds of this HealthcheckChecklistItem.
        :rtype: HealthcheckChecklistItemThresholds
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """
        Sets the thresholds of this HealthcheckChecklistItem.
        Overrides for status thresholds

        :param thresholds: The thresholds of this HealthcheckChecklistItem.
        :type: HealthcheckChecklistItemThresholds
        """
        
        self._thresholds = thresholds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

