# coding: utf-8

"""
    shado-python-client

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from shado_client.models.object_id import ObjectID  # noqa: F401,E501


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'is_admin': 'bool',
        'disabled': 'bool',
        'first_name': 'str',
        'last_name': 'str',
        'username': 'str',
        'realm': 'str',
        'email': 'str',
        'email_verified': 'bool',
        'id': 'ObjectID'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'is_admin': 'isAdmin',
        'disabled': 'disabled',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'username': 'username',
        'realm': 'realm',
        'email': 'email',
        'email_verified': 'emailVerified',
        'id': 'id'
    }

    def __init__(self, created_at=None, is_admin=False, disabled=False, first_name=None, last_name=None, username=None, realm=None, email=None, email_verified=None, id=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._is_admin = None
        self._disabled = None
        self._first_name = None
        self._last_name = None
        self._username = None
        self._realm = None
        self._email = None
        self._email_verified = None
        self._id = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if is_admin is not None:
            self.is_admin = is_admin
        if disabled is not None:
            self.disabled = disabled
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.username = username
        if realm is not None:
            self.realm = realm
        self.email = email
        if email_verified is not None:
            self.email_verified = email_verified
        if id is not None:
            self.id = id

    @property
    def created_at(self):
        """Gets the created_at of this Account.  # noqa: E501


        :return: The created_at of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Account.


        :param created_at: The created_at of this Account.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def is_admin(self):
        """Gets the is_admin of this Account.  # noqa: E501


        :return: The is_admin of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this Account.


        :param is_admin: The is_admin of this Account.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def disabled(self):
        """Gets the disabled of this Account.  # noqa: E501


        :return: The disabled of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Account.


        :param disabled: The disabled of this Account.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def first_name(self):
        """Gets the first_name of this Account.  # noqa: E501


        :return: The first_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Account.


        :param first_name: The first_name of this Account.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Account.  # noqa: E501


        :return: The last_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Account.


        :param last_name: The last_name of this Account.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def username(self):
        """Gets the username of this Account.  # noqa: E501


        :return: The username of this Account.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Account.


        :param username: The username of this Account.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def realm(self):
        """Gets the realm of this Account.  # noqa: E501


        :return: The realm of this Account.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this Account.


        :param realm: The realm of this Account.  # noqa: E501
        :type: str
        """

        self._realm = realm

    @property
    def email(self):
        """Gets the email of this Account.  # noqa: E501


        :return: The email of this Account.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Account.


        :param email: The email of this Account.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this Account.  # noqa: E501


        :return: The email_verified of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this Account.


        :param email_verified: The email_verified of this Account.  # noqa: E501
        :type: bool
        """

        self._email_verified = email_verified

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501


        :return: The id of this Account.  # noqa: E501
        :rtype: ObjectID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.


        :param id: The id of this Account.  # noqa: E501
        :type: ObjectID
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
