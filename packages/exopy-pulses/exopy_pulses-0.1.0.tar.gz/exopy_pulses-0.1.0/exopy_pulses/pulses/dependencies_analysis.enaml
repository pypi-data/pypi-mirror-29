# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by ExopyPulses Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Depndencies analysis and collection machinery for pulses.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint

from exopy.app.dependencies.api import BuildDependency, RuntimeDependencyAnalyser


# TODO need an addtional coollector for template configs
enamldef PulsesBuildingDependenciesExtension(Extension):
        id = 'build_deps'
        point = 'exopy.app.dependencies.build'

        BuildDependency:
            id = 'exopy.pulses.item'
            analyse => (workbench, obj, getter, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')

                i_id = getter(obj, 'item_id')
                i_infos = manager.get_item_infos(i_id)

                if i_infos is None:
                    errors[i_id] = 'Unknown item.'
                    return

                dependencies.add(i_id)
                return i_infos.dependencies

            validate => (workbench, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')
                for i_id in dependencies:
                    cls = manager.get_item(i_id)
                    if cls is None:
                        errors[i_id] = 'Unknown item.'

            collect => (workbench, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')
                for i_id in dependencies:
                    cls = manager.get_item(i_id)
                    if cls is None:
                        errors[i_id] = 'Unknown item.'
                        continue

                    dependencies[i_id] = cls

        BuildDependency:
            id = 'exopy.pulses.context'
            analyse => (workbench, obj, getter, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')

                c_id = getter(obj, 'context_id')
                c_infos = manager.get_context_infos(c_id)

                if c_infos is None:
                    errors[c_id] = 'Unknown context.'
                    return

                dependencies.add(c_id)
                return c_infos.dependencies

            validate => (workbench, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')
                for c_id in dependencies:
                    cls = manager.get_context(c_id)
                    if cls is None:
                        errors[c_id] = 'Unknown context.'

            collect => (workbench, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')
                for c_id in dependencies:
                    cls = manager.get_context(c_id)
                    if cls is None:
                        errors[c_id] = 'Unknown context.'
                        continue

                    dependencies[c_id] = cls

        BuildDependency:
            id = 'exopy.pulses.shape'
            analyse => (workbench, obj, getter, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')

                s_id = getter(obj, 'shape_id')
                s_infos = manager.get_shape_infos(s_id)

                if s_infos is None:
                    errors[s_id] = 'Unknown shape.'
                    return

                dependencies.add(s_id)
                return s_infos.dependencies

            validate => (workbench, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')
                for s_id in dependencies:
                    cls = manager.get_shape(s_id)
                    if cls is None:
                        errors[s_id] = 'Unknown shape.'

            collect => (workbench, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')
                for s_id in dependencies:
                    cls = manager.get_shape(s_id)
                    if cls is None:
                        errors[s_id] = 'Unknown shape.'
                        continue

                    dependencies[s_id] = cls

        BuildDependency:
            id = 'exopy.pulses.modulation'
            analyse => (workbench, obj, getter, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')

                m_id = getter(obj, 'modulation_id')
                cls = manager.get_modulation(m_id)
                if cls is None:
                    errors[m_id] = 'Unknown modulation.'
                    return

                dependencies.add(m_id)
                return set()

            validate => (workbench, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')
                for m_id in dependencies:
                    cls = manager.get_modulation(m_id)
                    if cls is None:
                        errors[m_id] = 'Unknown modulation.'

            collect => (workbench, dependencies, errors):
                manager = workbench.get_plugin('exopy.pulses')
                for m_id in dependencies:
                    cls = manager.get_modulation(m_id)
                    if cls is None:
                        errors[m_id] = 'Unknown modulation.'
                        continue

                    dependencies[m_id] = cls
