# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by ExopyPulses Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Declarations for the View of a Pulse.

This is the view that is displayed in the SequenceEditor.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from enaml.layout.api import hbox, vbox, spacer, align
from enaml.widgets.api import (Container, Label, GroupBox, CheckBox, Splitter,
                               SplitItem, FlowArea, ObjectCombo)
from enaml.core.api import Conditional, Include

from exopy.utils.widgets.qt_completers import QtLineCompleter
from exopy.utils.transformers import ids_to_unique_names
from .utils.normalizers import normalize_shape_name
from .utils.entry_eval import EVALUATER_TOOLTIP
from .shapes.views.modulation_view import ModulationView


def default_add_displays(core, item):
    """Method to retrieve the additional subviews needed for editing the
    parameters of sub-elements of the Pulse.

    Additional views are the ModulationView and the ShapeView, referring to the
    shape and the modulation.

    """
    if item.kind == 'Analogical':
        add_displays = []
        if item.modulation.activated:
            add_displays.append(ModulationView(item=item,
                                               modulation=item.modulation))

        if item.shape:
            cmd = 'exopy.pulses.get_shape_infos'
            s_info = core.invoke_command(cmd,
                                         {'shape_id': item.shape.shape_id})
            if s_info:
                add_displays.append(s_info.view(item=item, shape=item.shape))

        return add_displays

    else:
        return []


enamldef PulseView(GroupBox): view:
    """ View for a pulse item.

    """
    #: Reference to the Pulse object owning this view.
    attr item

    #: Reference to the currently selected context.
    attr context << item.root.context

    #: Reference to the root view of the sequence.
    attr root

    #: Additional Views to be displayed.
    attr add_displays = default_add_displays(root.core, item)

    #: State of the exopy_pulses plugin.
    attr pulse_state = root.core.invoke_command('exopy.app.states.get',
                                                {'state_id':
                                                 'exopy.pulses'})

    func refresh():
        """Ensure that the view will be displayed properly.

        This methods should be called after reparenting a view.

        """
        self.show()

    title << 'Pulse {}'.format(item.index)
    hug_height = 'strong'

    constraints << [vbox(
                        hbox(kind_lab, kind_val, ch_lab, ch_val, def_lab,
                             def_val, defs, *analog.items),
                        *add.items),
                    align('v_center', kind_lab, kind_val),
                    align('v_center', ch_lab, ch_val),
                    align('v_center',  def_lab, def_val)]

    Label: kind_lab:
        text = 'Kind'
    ObjectCombo: kind_val:
        items = list(item.get_member('kind').items)
        selected := item.kind

    Label: ch_lab:
        text = 'Channel'
    ObjectCombo: ch_val:
        items << list(getattr(context, 'logical_channels', []))\
            if item.kind == 'Logical'\
            else list(getattr(context, 'analogical_channels', []))
        selected := item.channel
        tool_tip << ('First select a context before selecting the channel'
                     if not context else '')

    Label: def_lab:
        text = 'Mode'
    ObjectCombo: def_val:
        items << list(item.get_member('def_mode').items)
        selected := item.def_mode

    Splitter: defs:
        hug_width = 'ignore'
        SplitItem:
            Container:
                constraints = [hbox(d1_lab, d1_val),
                               align('v_center', d1_lab, d1_val)]
                padding = 0
                Label: d1_lab:
                    text << item.def_mode.split('/')[0]
                QtLineCompleter: d1_val:
                    hug_width = 'ignore'
                    text := item.def_1
                    entries_updater << item.parent.get_accessible_vars
                    tool_tip = EVALUATER_TOOLTIP
        SplitItem:
            Container:
                constraints = [hbox(d2_lab, d2_val),
                               align('v_center', d2_lab, d2_val)]
                padding = 0
                Label: d2_lab:
                    text << item.def_mode.split('/')[1]
                QtLineCompleter: d2_val:
                    hug_width = 'ignore'
                    text := item.def_2
                    entries_updater << item.parent.get_accessible_vars
                    tool_tip = EVALUATER_TOOLTIP

    Conditional: analog:
        condition << item.kind == 'Analogical'

        Container:
            padding = 0
            hug_width = 'strong'
            constraints = [hbox(m_val, s_lab, s_val),
                           align('v_center', s_lab, s_val)]
            CheckBox: m_val:
                text = 'Use modulation'
                hug_width = 'strong'
                checked := item.modulation.activated
                checked ::
                    if change['value']:
                        a_d = view.add_displays[:]
                        mod = ModulationView(item=item,
                                             modulation=item.modulation)
                        a_d.insert(0, mod)
                        view.add_displays = a_d
                    else:
                        a_d = view.add_displays[:]
                        a_d.pop(0)
                        view.add_displays = a_d

            Label: s_lab:
                text = 'Shape'
            ObjectCombo: s_val:
                # Map between shape ids and their name
                attr ids_map << ids_to_unique_names(pulse_state.shapes,
                                                    normalize_shape_name,
                                                    reverse=True)

                func _to_name(id_):
                    """Convert id to name.

                    """
                    return self.ids_map[id_]

                items << list(ids_map)
                selected << item.shape.shape_id if item.shape else ''
                to_string = _to_name
                selected ::
                    if change.get('oldvalue'):
                        a_d = view.add_displays[:]
                        a_d.pop()
                        view.add_displays = a_d
                    if change['value']:
                        cmd = 'exopy.pulses.get_shape_infos'
                        infos = core.invoke_command(cmd,
                                                    {'shape_id':
                                                     change['value']})
                        item.shape = infos.cls()
                        disp = view.add_displays[:]
                        disp.append(infos.view(item=item, shape=item.shape))
                        view.add_displays = disp

    Conditional: add:
        condition << item.kind == 'Analogical' and bool(add_displays)
        Splitter:
            Include:
                objects << add_displays
