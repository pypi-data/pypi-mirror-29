# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by ExopyPulses Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Views for the base sequences.

"""
from atom.api import Atom, Dict, Value
from enaml.layout.api import hbox, align, spacer, vbox
from enaml.widgets.api import (PushButton, Container, Label, Notebook, Page,
                               CheckBox, ObjectCombo, Splitter, SplitItem,
                               HGroup, ScrollArea)
from enaml.core.api import Conditional, Include
from enaml.workbench.core.core_plugin import CorePlugin
from exopy.utils.widgets.dict_editor import (DictEditor, FieldFieldEditor,
                                            FieldFieldCompleterEditor)
from exopy.utils.widgets.qt_completers import QtLineCompleter

from .sequence_editor_view import (SequenceEditor, FoldableSequenceEditor)
from .abstract_sequence_view import AbstractSequenceView

from ...utils.entry_eval import EVALUATER_TOOLTIP
from ...pulse import Pulse


def instantiate_context_view(core, sequence, context):
    """ Instantiate the appropriate view for the given context.

    """
    if context:
        cmd = 'exopy.pulses.get_context'
        cls, view = core.invoke_command(cmd, {'context_id': context.context_id,
                                              'view': True})
        return view(core=core, context=context, sequence=sequence)


enamldef LocalVariablesEditorPage(Page):
    """Page used to edit the local variable of a sequence.

    """
    #: Refrence to the sequence whose locals are edited.
    attr sequence

    title = 'Local vars'
    DictEditor(FieldFieldCompleterEditor): de:
        de.mapping := sequence.local_vars
        de.operations = ['add','move','remove']
        de.attributes = {'entries_updater': item.get_accessible_vars,
                         'evaluater_tooltip': EVALUATER_TOOLTIP}


enamldef BaseSequenceView(AbstractSequenceView): view:
    """ View for Sequence.

    """
    #: Time constraint checkbox that should be properly set in the layout.
    alias t_bool: _t_bool

    #: Definitions associated with the time constraint tha should be properly
    #: set in the layout.
    alias t_def: _t_def

    #: Notebook displaying either the items or the local vars.
    #: Should be properly set in the layout.
    alias nb: _nb

    refresh => ():
        """Ensure that all children items are also properly displayed.

        """
        AbstractSequenceView.refresh(self)
        editor.refresh()

    constraints << [vbox(hbox(_t_bool, *_t_def.items), _nb),
                    align('v_center', _t_def.items[0], _t_def.items[1])]\
                    if t_def.condition else [vbox(_t_bool, _nb)]

    CheckBox: _t_bool:
        text = 'Time'
        checked := item.time_constrained
        tool_tip = 'Whether to define the start and stop of the sequence.'

    Conditional: _t_def:
        condition << item.time_constrained

        Label: def_lab:
            text = 'Mode'
        ObjectCombo: def_val:
            items << list(item.get_member('def_mode').items)
            selected := item.def_mode

        Splitter: defs:
            hug_width = 'ignore'
            SplitItem:
                Container:
                    constraints = [hbox(lab_1, val_1),
                                   align('v_center', lab_1, val_1)]
                    padding = 0
                    Label: lab_1:
                        text << item.def_mode.split('/')[0]
                    QtLineCompleter: val_1:
                        hug_width = 'ignore'
                        text := item.def_1
                        entries_updater << item.parent.get_accessible_vars
                        tool_tip = EVALUATER_TOOLTIP
            SplitItem:
                Container:
                    constraints = [hbox(lab_2, val_2),
                                   align('v_center', lab_2, val_2)]
                    padding = 0
                    Label: lab_2:
                        text << item.def_mode.split('/')[1]
                    QtLineCompleter: val_2:
                        hug_width = 'ignore'
                        text := item.def_2
                        entries_updater << item.parent.get_accessible_vars
                        tool_tip = EVALUATER_TOOLTIP

    Notebook: _nb:
        tabs_closable = False

        Page:
            title = 'Sequence'
            FoldableSequenceEditor: editor:
                sequence := view.item
                root << view.root

        LocalVariablesEditorPage:
            sequence = view.item


enamldef RootSequenceView(AbstractSequenceView): view:
    """ View for root sequence.

    """
    #: Additional pages to display other than children items and context.
    alias additional_pages : include.objects

    #: Refrence to the core plugin of the application.
    attr core

    func create_new_sequence():
        """Create a new sequence to insert into the hierarchy.

        """
        return core.invoke_command('exopy.pulses.create_sequence',
                                   {'parent_ui': editor, 'root': self.item})

    func view_for(obj):
        """Create a widget for the specified item.

        The view is initialized but given no parent.

        """
        if obj not in _cache:
            cmd = 'exopy.pulses.get_item'
            _, view_cls = core.invoke_command(cmd,
                                              {'item_id': obj.item_id,
                                               'view': True})
            _cache[obj] = view_cls(item=obj, root=self)

        return _cache[obj]

    func discard_view(item):
        """Take care of destroying the view associated with a given item.

        """
        try:
            view = _cache.pop(item)
            view.destroy()
        except KeyError:
            pass

    ended ::
        # When this view is destroyed it must destroy all the view in the cache
        for view in _cache.values():
            if not view.is_destroyed:
                view.destroy()

    constraints << [vbox(hbox(dur, *val.items), nb),
                    align('v_center', val.items[0], val.items[1])] \
                   if val.items else \
                   [vbox(dur, nb)]

    CheckBox: dur:
        text = 'Fix duration'
        checked := item.time_constrained

    Conditional: val:
        condition << item.time_constrained
        Label:
            text = 'Duration'
        QtLineCompleter:
            hug_width = 'ignore'
            text := item.sequence_duration
            entries_updater << item.get_accessible_vars
            tool_tip = EVALUATER_TOOLTIP

    Notebook: nb:
        tabs_closable = False
        Page:
            title = 'Sequence'
            Container:
                ScrollArea:
                    SequenceEditor: editor:
                        sequence << view.item
                        root = view

        Page:
            title = 'Context'
            Container:
                PushButton:
                    text = ('Change context' if item.context else
                            'Choose context')
                    clicked ::
                        cmd = 'exopy.pulses.create_context'
                        view.core.invoke_command(cmd, {'root': item,
                                                       'parent_ui': self})
                Include:
                    objects << ([instantiate_context_view(core, item,
                                                          item.context)]
                                if getattr(item, 'context') else [])

        LocalVariablesEditorPage:
            sequence = item

        Include: include:
            pass

    # =========================================================================
    # --- Private API ---------------------------------------------------------
    # =========================================================================

    #: Dictionary used to store the view associated with each task.
    attr _cache : dict = {item: self}
