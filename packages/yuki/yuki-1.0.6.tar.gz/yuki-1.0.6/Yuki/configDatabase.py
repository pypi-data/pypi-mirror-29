import os
import uuid
import xml.sax
class XmlHandler(xml.sax.ContentHandler):
    def __init__(self):
        self.inExecute = False
        self.executeXml = ""
        self.configXml = ""

    def init(self):
        self.inExecute = False
        self.executeXml = ""
        self.configXml = ""

    def startElement(self, tag, attributes):
        if tag == "execute":
            self.inExecute = True
            self.executeXml += "  <execute>\n"
        if tag == "processor" and self.inExecute:
            proc_type = attributes["type"]
            self.executeXml += "<processor name=\"std{0}\"/>\n".format(proc_type)
            self.configXml += "  <processor name=\"std{0}\" type=\"{0}\"/>\n".format(proc_type)
        if tag == "processor" and (not self.inExecute):
            self.executeXml += "<processor name=>"


    def endElement(self, tag):
        if tag == "execute":
            self.inExecute = False
            self.executeXml += "</execute>\n"

    def characters(self, content):
        if content.endswith("\n"):
            content = content[:-1]
        if self.inExecute:
            self.executeXml += content
        else:
            self.configXml += content

class ConfigDatabase(object):
    """ Configuration database
    """
    ins = None

    def __local_dir(self):
        local_dir = os.environ["HOME"] + "/.yuki/local/configurations/"
        if not os.path.exists(local_dir):
            os.makedirs(local_dir)
        return local_dir

    def __official_dir(self):
        local_dir = os.environ["HOME"] + "/.yuki/official/configurations/"
        if not os.path.exists(local_dir):
            os.makedirs(local_dir)
        return local_dir

    @classmethod
    def instance(cls):
        """ Return the database itself
        """
        if cls.ins is None:
            cls.ins = ConfigDatabase()
        return cls.ins

    def __init__(self):
        self.handler = XmlHandler()

    def listXmls(self):
        path = self.__local_dir()
        return os.listdir(path)

    def new_config(self, template=None):
        uid = uuid.uuid4().hex
        file_name = self.__local_dir() + "/{0}".format(uid)
        open(file_name, "w").close()
        return file_name

    def __getXml(self, config):
        path = self.__local_dir() + "/" + config
        with open(path) as f:
            return f.read()

    def getHeaderXml(self):
        return """<!--
    This xml configration file is automatically generated by Yuki.
    None experts will not be able to touch the core of it.
-->
"""
    def getExecuteXml(self, config):
        xmlstring = self.__getXml(config)
        self.handler.init()
        xml.sax.parseString(xmlstring, self.handler)
        return self.handler.executeXml

    def getConfigXml(self, config):
        xmlstring = self.__getXml(config)
        self.handler.init()
        xml.sax.parseString(xmlstring, self.handler)
        return self.handler.configXml

    def get_output_xml(self, output_file, config, release):
        return """  <processor name="yukiLCIOWriter" type="YukiLCIOWriter">
    <parameter name="LCIOOutputFile" type="string" >
        {0}
    </parameter>
    <parameter name="release" type="string" value="{1}"/>
    <parameter name="config" type="string" value="{2}"/>
    <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
  </processor>
""".format(output_file, release, config)


    def getGlobalXml(self, input_file):
        return """  <global>
    <parameter name="LCIOInputFiles">
      {0}
    </parameter>
    <parameter name="GearXMLFile">
      GearOutput.xml
    </parameter>
    <parameter name="MaxRecordNumber" value="-1"/>
    <parameter name="SkipNEvents" value="-1"/>
    <parameter name="SupressCheck" value="false"/>
    <parameter name="Verbosity" options="DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4" />
    <parameter name="RandomSeed" value="1234567890" />
  </global>
""".format(input_file)

configdb = ConfigDatabase.instance()
