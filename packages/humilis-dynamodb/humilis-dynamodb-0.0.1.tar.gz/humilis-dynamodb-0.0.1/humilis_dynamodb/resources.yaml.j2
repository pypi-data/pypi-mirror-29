---
{% set globs = {"prevpath": ""} %}
{% set already_created_resources=[] %}
resources:
    Table:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: {{read_capacity}}
          WriteCapacityUnits: {{write_capacity}}
        TableName: {{__context.environment.name}}-{{__context.layer.name}}-{{__context.stage}}

    {% if dax_subnets %}
    DaxIamRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Principal:
                      Service:
                        - "dax.amazonaws.com"
                    Action:
                      - "sts:AssumeRole"
            Policies:
              - PolicyName: "FullAccessDynamoDBTable"
                PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: Allow
                      # Permissions to access the DynamoDB table
                      Action:
                        - "dynamodb:*"
                      Resource:
                        - "Fn::GetAtt":
                          - Table
                          - Arn

    DaxCluster:
        Type: AWS::DAX::Cluster
        Properties:
          NodeType: "{{dax_node_type}}"
          ReplicationFactor: {{dax_replication_factor}}
          IAMRoleARN:
            "Fn::GetAtt":
              - DaxIamRole
              - Arn
          Description: "DAX cluster for table {{__context.environment.name}}-{{__context.layer.name}}-{{__context.stage}}"
          SubnetGroupName: {Ref: DaxSubnetGroup}

    DaxSubnetGroup:
        Type: AWS::DAX::SubnetGroup
        Properties:
          Description: "Subnet group for DAX cluster "
          SubnetIds:
            {% for subnet in dax_subnets %}
            - {{subnet}}
            {% endfor %}
    {% endif %}

    {% if has_public_api %}
    RestApi:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
        Name: "{{__context.environment.name}}-{{__context.stage}}-{{__context.layer.name}}"
        Description: "{{api_description or __context.environment.name}}"

    {% if domain_name and certificate_arn %}
    DomainName:
        Type: "AWS::ApiGateway::DomainName"
        Properties:
            CertificateArn: {{certificate_arn}}
            DomainName: {{domain_name}}

    DomainNameMapping:
       Type: "AWS::ApiGateway::BasePathMapping"
       Properties:
         Stage: "{{__context.stage.lower()}}"
         RestApiId:
            Ref: RestApi
         DomainName:
            Ref: DomainName

    ApiDnsRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        {% if hosted_zone_id %}
        HostedZoneId: {{hosted_zone_id}}
        {% else %}
        HostedZoneName: {{'.'.join(domain_name.split('.')[-2:])}}.
        {% endif %}
        RecordSets:
            - Name: "{{domain_name}}"
              Type: A
              AliasTarget:
                HostedZoneId: Z2FDTNDATAQYW2
                DNSName:
                    "Fn::GetAtt":
                        - DomainName
                        - DistributionDomainName
    {% endif %}

    {% for resource in api_resources %}
    {% set resid = resource.path|replace('/', '') %}
    Role{{resid.title()}}:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                  Service: 'apigateway.amazonaws.com'
              Action: 'sts:AssumeRole'
        # Keep all environment role under the same path
        Path: {{ "/{}/".format(__context.environment.name) }}
        Policies:
          - PolicyName: ReadFromDynamoDB
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  # Permissions to read from the DynamoDB table
                  Action:
                    - "dynamodb:BatchGetItem"
                    - "dynamodb:GetItem"
                  Resource:
                    - "Fn::GetAtt":
                        - Table
                        - Arn

    # Create parent resources
    {% if '/' in resource.path %}
    {% set _ = globs.update({'prevpath': ''}) %}
    {% for path in resource.path.split('/') %}
    {% set subresid = globs.prevpath+path %}
    {% if subresid not in already_created_resources %}
    {% set _ = already_created_resources.append(subresid) %}
    Resource{{subresid.title()}}:
      Type: "AWS::ApiGateway::Resource"
      Properties:
        RestApiId: {"Ref": "RestApi"}
        ParentId:
            {% if globs.prevpath %}
            {"Ref": Resource{{globs.prevpath.title()}}}
            {% else %}
            "Fn::GetAtt":
              - RestApi
              - RootResourceId
            {% endif %}
        PathPart: "{{path}}"
    {% endif %}
    {% set _ = globs.update({"prevpath": subresid}) %}
    {% endfor %}
    {% endif %}

    {% if resid not in already_created_resources %}
    {% set _ = already_created_resources.append(resid) %}
    Resource{{resid.title()}}:
      Type: "AWS::ApiGateway::Resource"
      Properties:
        RestApiId: {"Ref": "RestApi"}
        ParentId:
            {% if '/' in resource.path %}
            {"Ref": Resource{{''.join(resource.path.split('/')[:-1]).title()}}}
            {% else %}
            "Fn::GetAtt":
              - RestApi
              - RootResourceId
            {% endif %}
        PathPart: "{{resource.path.split('/')[-1]}}"
    {% endif %}

    {% if not resource.method or resource.method.upper() == 'GET' %}
    MethodGet{{resid.title()}}:
      Type: "AWS::ApiGateway::Method"
      Properties:
        RestApiId: {"Ref": "RestApi"}
        ResourceId: {"Ref": "Resource{{resid.title()}}"}
        ApiKeyRequired: {{api_key_required}}
        HttpMethod: GET
        AuthorizationType: NONE
        MethodResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
            StatusCode: '200'
        {% if resource.request_parameters %}
        RequestParameters:
          {% for k, v in resource.request_parameters.items() %}
          "method.request.{{k}}": {{v}}
          {% endfor %}
        {% endif %}
        Integration:
          Type: AWS
          IntegrationHttpMethod: POST
          Credentials: {"Fn::GetAtt": ["Role{{resid.title()}}", "Arn"]}
          Uri:
            "Fn::Join":
              - ""
              - ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":", "dynamodb:action/BatchGetItem"]
          PassthroughBehavior: WHEN_NO_TEMPLATES
          IntegrationResponses:
              - StatusCode: 200
                ResponseParameters:
                  method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                  method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                  method.response.header.Access-Control-Allow-Origin: "'*'"
          RequestTemplates:
            "application/json": |
              #set($keyList = $input.params().querystring.get('{{key_name}}'))
              {
                  "RequestItems":
                  {
                    "{{__context.environment.name}}-{{__context.layer.name}}-{{__context.stage}}": {
                      "Keys": [
                          #foreach( $key in $keyList.split("[,]") )
                          {
                              "{{key_name}}": {
                                  "S": "$key"
                              }
                          }
                          #if($foreach.hasNext),#end
                          #end
                      ]
                    }
                  }
              }
    {% endif %}

    MethodOptions{{resid.title()}}:
      Type: "AWS::ApiGateway::Method"
      Properties:
        ResourceId: {"Ref": "Resource{{resid.title()}}"}
        RestApiId: {"Ref": "RestApi"}
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          Type: MOCK
          IntegrationResponses:
            - ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              ResponseTemplates:
                application/json: ''
              StatusCode: 200
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: '{"statusCode": 200}'
        MethodResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
            StatusCode: '200'

    {% endfor %}


    RestApiDeployment:
      Type: "AWS::ApiGateway::Deployment"
      DependsOn:
        {% for resource in api_resources %}
        {% set resid = resource.path|replace('/', '') %}
        {% if not resource.method or resource.method.upper() == 'GET' %}
        - MethodGet{{resid.title()}}
        {% endif %}
        - MethodOptions{{resid.title()}}
        {% endfor %}
      Properties:
          Description: "{{__context.environment.name}} ({{__context.stage}})"
          RestApiId:
            {"Ref": "RestApi"}
          StageName: {{__context.stage|lower}}

    ApiKey:
      Type: "AWS::ApiGateway::ApiKey"
      DependsOn:
        - "RestApiDeployment"
        - "RestApi"
      Properties:
        Name: "{{__context.environment.name}}-{{__context.layer.name}}-{{__context.stage}}"
        Description: "API key for stage {{__context.stage}} of environment {{__context.environment.name}}"
        Enabled: "true"
        StageKeys:
          - RestApiId: {"Ref": "RestApi"}
            StageName: "{{__context.stage|lower}}"
    {% endif %}
