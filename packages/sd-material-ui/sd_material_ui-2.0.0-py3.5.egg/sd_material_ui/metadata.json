{
  "src/components/BottomNavigation/BottomNavigation.react.js": {
    "description": "BottomNavigationItem is an item in a BottomNavigation component",
    "displayName": "BottomNavigation",
    "methods": [
      {
        "name": "buildBottomNavigationItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "navItem",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  label: string,\n  icon: Element | string,\n  value: string | number,\n  /** ID of component to jump to when this option is selected */\n  targetId?: string,\n  /** Class to apply to the icon span */\n  iconClassName?: string,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "icon",
                    "value": {
                      "name": "union",
                      "raw": "Element | string",
                      "elements": [
                        {
                          "name": "Element"
                        },
                        {
                          "name": "string"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "union",
                      "raw": "string | number",
                      "elements": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "targetId",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "iconClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "T_NAV_ITEM"
            }
          },
          {
            "name": "selectedIndex",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks"
      },
      "navItems": {
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  label: string,\n  icon: Element | string,\n  value: string | number,\n  /** ID of component to jump to when this option is selected */\n  targetId?: string,\n  /** Class to apply to the icon span */\n  iconClassName?: string,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "icon",
                    "value": {
                      "name": "union",
                      "raw": "Element | string",
                      "elements": [
                        {
                          "name": "Element"
                        },
                        {
                          "name": "string"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "union",
                      "raw": "string | number",
                      "elements": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "targetId",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "iconClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<T_NAV_ITEM>"
        },
        "required": true,
        "description": "Array of navigation item props to pass to BottomNavigationItem"
      },
      "selectedIndex": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "Initial selected index for the BottomNavigation",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "selectedStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Style to apply to the selected icon",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { selectedIndex: number }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ selectedIndex: number }",
                  "signature": {
                    "properties": [
                      {
                        "key": "selectedIndex",
                        "value": {
                          "name": "number",
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change",
        "defaultValue": {
          "value": "() => {\n}",
          "computed": false
        }
      }
    }
  },
  "src/components/Checkbox/Checkbox.react.js": {
    "description": "",
    "displayName": "Checkbox",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "checked",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Checkbox is checked if true.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disabled if true.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash.",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "iconStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Overrides the inline-styles of the icon element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The element's ID",
        "flowType": {
          "name": "string"
        }
      },
      "inputStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Overrides the inline-styles of the input element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text label for the checkbox",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "labelPosition": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Where the label will be placed next to the checkbox.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "'right'",
          "computed": false
        }
      },
      "labelStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Overrides the inline-styles of the Checkbox element label.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/Dialog/Dialog.react.js": {
    "description": "",
    "displayName": "Dialog",
    "methods": [
      {
        "name": "changeDialogOpenStatus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "open",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Dialog ID",
        "flowType": {
          "name": "string"
        }
      },
      "actions": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            }
          ]
        },
        "required": false,
        "description": "Actions component or list of components for the Dialog",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The css class name of the root element.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "modal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is the Dialog a modal (must click on an action to close the Dialog)?",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is the dialog open?\nIMPORTANT: When using this component in Dash, a listener must be set up (either as state or\nan input) for this component's props.open value in order to achieve the desired behavior.\nIf such a listener is not in place, the non-modal version of this dialog will contaminate\nother callbacks in the browser",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { modal?: boolean, open?: boolean }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ modal?: boolean, open?: boolean }",
                  "signature": {
                    "properties": [
                      {
                        "key": "modal",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "open",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "children of the Dialog",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      }
    }
  },
  "src/components/Drawer/Drawer.react.js": {
    "description": "",
    "displayName": "Drawer",
    "methods": [
      {
        "name": "changeDrawerStatus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "open",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The contents of the Drawer",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the root element.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "containerclassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the container element.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "containerStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the container element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "disableSwipeToOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, swiping sideways when the Drawer is closed will not open it.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "docked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the Drawer will be docked. In this state, the overlay won't show and clicking on a\nmenu item will not close the Drawer.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "",
        "flowType": {
          "name": "string"
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the Drawer is opened. Whether true or false, ensures that the drawer is a controlled\ncomponent.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "openSecondary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the Drawer is positioned to open from the opposite side.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "overlayClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name to add to the Overlay component that is rendered behind the Drawer.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "overlayStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the Overlay component that is rendered behind the Drawer.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash callback to update props on the server.",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "swipeAreaWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the left most (or right most) area in pixels where the Drawer can be swiped\nopen from. Setting this to null spans that area to the entire page (CAUTION! Setting this\nproperty to null might cause issues with sliders and swipeable Tabs: use at your own risk).",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "PropTypes.string",
              "computed": true
            },
            {
              "value": "PropTypes.number",
              "computed": true
            }
          ]
        },
        "required": false,
        "description": "The width of the Drawer in pixels or percentage in string format ex. 50% to fill half of the\nwindow or 100% and so on. Defaults to using the values from theme.",
        "flowType": {
          "name": "union",
          "raw": "string | number",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "zDepth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The zDepth of the Drawer.",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      }
    }
  },
  "src/components/DropDownMenu/DropDownMenu.react.js": {
    "description": "A Dash material-ui DropDownMenu component",
    "displayName": "DropDownMenu",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": {
              "name": "object",
              "alias": "object"
            }
          },
          {
            "name": "index",
            "type": {
              "name": "number"
            }
          },
          {
            "name": "value",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "buildMenuItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  checked?: boolean,\n  children?: Node,\n  customData: any,\n  disabled?: boolean,\n  label?: string,\n  primaryText: string,\n  secondaryText?: string,\n  style?: Object,\n  value: any,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "checked",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "customData",
                    "value": {
                      "name": "any",
                      "required": true
                    }
                  },
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "primaryText",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "secondaryText",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": true
                    }
                  }
                ]
              },
              "alias": "SD_MENU_ITEM"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "anchorOrigin": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "This is the point on the anchor that the popover's targetOrigin will attach to.\nOptions: vertical: [top, center, bottom] horizontal: [left, middle, right].",
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  vertical?: 'top' | 'center' | 'bottom',\n  horizontal?: 'left' | 'middle' | 'right',\n}",
          "signature": {
            "properties": [
              {
                "key": "vertical",
                "value": {
                  "name": "union",
                  "raw": "'top' | 'center' | 'bottom'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'top'"
                    },
                    {
                      "name": "literal",
                      "value": "'center'"
                    },
                    {
                      "name": "literal",
                      "value": "'bottom'"
                    }
                  ],
                  "required": false
                }
              },
              {
                "key": "horizontal",
                "value": {
                  "name": "union",
                  "raw": "'left' | 'middle' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'middle'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ],
                  "required": false
                }
              }
            ]
          }
        },
        "defaultValue": {
          "value": "{ vertical: 'top', horizontal: 'left'}",
          "computed": false
        }
      },
      "animated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the popover will apply transitions when it gets added to the DOM.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "autoWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The width will automatically be set according to the items inside the menu. To control\nthis width in css instead, set this prop to false.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The css class name of the root element.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the menu.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the input changes.",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "iconButton": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Overrides default SvgIcon dropdown arrow component.",
        "flowType": {
          "name": "Node"
        }
      },
      "iconStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Overrides the styles of icon element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The element's ID.",
        "flowType": {
          "name": "string"
        }
      },
      "labelStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Overrides the styles of label when the DropDownMenu is inactive.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "listStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "The style object to use to override underlying list style.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "maxHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum height of the Menu when it is displayed.",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "500",
          "computed": false
        }
      },
      "menuItemStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of menu items.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "menuStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Overrides the styles of Menu when the DropDownMenu is displayed.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "openImmediately": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true to have the DropDownMenu automatically open on mount.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "options": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "checked": {
                "name": "bool",
                "description": "If true, a left check mark will be rendered.",
                "required": false
              },
              "children": {
                "name": "node",
                "description": "Elements passed as children to the underlying `ListItem`.",
                "required": false
              },
              "customData": {
                "name": "any",
                "description": "A field able to hold any additional data a Dash user may want to include with a menu item,\nbut does not want rendered on screen.",
                "required": false
              },
              "disabled": {
                "name": "bool",
                "description": "If true, the menu item will be disabled.",
                "required": false
              },
              "label": {
                "name": "string",
                "description": "The text to display in the dropdown menu when this item is selected (if not given,\nthe menu will use the primaryText).",
                "required": false
              },
              "primaryText": {
                "name": "string",
                "description": "The text shown in the open menu and, if label is not given, also used to show the name\nof the selected item when the menu is closed.",
                "required": true
              },
              "secondaryText": {
                "name": "string",
                "description": "Can be used to render secondary text within the menu item.",
                "required": false
              },
              "style": {
                "name": "objectOf",
                "value": {
                  "name": "any"
                },
                "description": "Override the inline-styles of the root element.",
                "required": false
              },
              "value": {
                "name": "any",
                "description": "The value of the menu item.",
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "Used to create the MenuItems to populate the Menu with. A Dash user passes in a list of dict\nitems, each one having at least a `value` and `primaryText`. If the 'label' is used,\nthat value will be used to render the representation of that item within the field.",
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  checked?: boolean,\n  children?: Node,\n  customData: any,\n  disabled?: boolean,\n  label?: string,\n  primaryText: string,\n  secondaryText?: string,\n  style?: Object,\n  value: any,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "checked",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "customData",
                    "value": {
                      "name": "any",
                      "required": true
                    }
                  },
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "primaryText",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "secondaryText",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": true
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<SD_MENU_ITEM>"
        },
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "selectedMenuItemStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of selected menu items.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash callback to update props on the server.",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "targetOrigin": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "This is the point on the popover which will attach to the anchor's origin.\nOptions: vertical: [top, center, bottom] horizontal: [left, middle, right].",
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  vertical?: 'top' | 'center' | 'bottom',\n  horizontal?: 'left' | 'middle' | 'right',\n}",
          "signature": {
            "properties": [
              {
                "key": "vertical",
                "value": {
                  "name": "union",
                  "raw": "'top' | 'center' | 'bottom'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'top'"
                    },
                    {
                      "name": "literal",
                      "value": "'center'"
                    },
                    {
                      "name": "literal",
                      "value": "'bottom'"
                    }
                  ],
                  "required": false
                }
              },
              {
                "key": "horizontal",
                "value": {
                  "name": "union",
                  "raw": "'left' | 'middle' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'middle'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ],
                  "required": false
                }
              }
            ]
          }
        },
        "defaultValue": {
          "value": "{vertical: 'top', horizontal: 'left'}",
          "computed": false
        }
      },
      "underlineStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Overrides the inline-styles of the underline.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The value of the selected menu item.",
        "flowType": {
          "name": "any"
        }
      }
    }
  },
  "src/components/FlatButton/FlatButton.react.js": {
    "description": "",
    "displayName": "FlatButton",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "backgroundColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of button when mouse is not hovering over it.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "This is what will be displayed inside the button.\nIf a label is specified, the text within the label prop will\nbe displayed. Otherwise, the component will expect children\nwhich will then be displayed. (In our example,\nwe are nesting an `<input type=\"file\" />` and a `span`\nthat acts as our label to be displayed.) This only\napplies to flat and raised buttons.",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the root element.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disableTouchRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the element's ripple effect will be disabled.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the button if set to true.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash.",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will take up the full width of its container.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hoverColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of button when mouse hovers over.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Use this property to display an icon.",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "flowType": {
          "name": "string"
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Label for the button.",
        "flowType": {
          "name": "string"
        }
      },
      "labelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'before'",
              "computed": false
            },
            {
              "value": "'after'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Place label before or after the passed children.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "'after'",
          "computed": false
        }
      },
      "labelStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the button's label element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "primary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, colors button according to\nprimaryTextColor from the Theme.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rippleColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color for the ripple after button is clicked.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "secondary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, colors button according to secondaryTextColor from the theme.\nThe primary prop has precendent if set to true.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/RaisedButton/RaisedButton.react.js": {
    "description": "",
    "displayName": "RaisedButton",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "backgroundColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override the default background color for the button, but not the default disabled\nbackground color (use disabledBackgroundColor for this).",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "buttonStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the button element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the button. If a label is provided via the label prop, the text within the\nlabel will be displayed in addition to the content provided here.",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the root element.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disableTouchRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the element's ripple effect will be disabled.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the button if set to true.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabledBackgroundColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override the default background color for the button when it is disabled.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disabledLabelColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The color of the button's label when the button is disabled.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash.",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will take up the full width of its container.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Use this property to display an icon.",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element's ID",
        "flowType": {
          "name": "string"
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The label to be displayed within the button. If content is provided via the children prop,\nthat content will be displayed in addition to the label provided here.",
        "flowType": {
          "name": "string"
        }
      },
      "labelColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The color of the button's label.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "labelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'before'",
              "computed": false
            },
            {
              "value": "'after'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The position of the button's label relative to the button's children.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "'after'",
          "computed": false
        }
      },
      "labelStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the button's label element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "overlayStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline style of the button overlay.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "primary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will use the theme's primary color.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rippleStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline style of the ripple element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "secondary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will use the theme's secondary color. If both secondary and primary are\ntrue, the button will use the theme's primary color.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "rippleColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/components/Snackbar/Snackbar.react.js": {
    "description": "",
    "displayName": "Snackbar",
    "methods": [
      {
        "name": "handleOpen",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleActionClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "action": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The label for the action on the snackbar.",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "autoHideDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds to wait before automatically dismissing. If no value is specified\nthe snackbar will dismiss normally. If a value is provided the snackbar can still be dismissed\nnormally. If a snackbar is dismissed before the timer expires, the timer will be cleared.",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "3000",
          "computed": false
        }
      },
      "bodyStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the body element.",
        "flowType": {
          "name": "object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The css class name of the root element.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "contentStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the content element.",
        "flowType": {
          "name": "object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash.",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The element's ID.",
        "flowType": {
          "name": "string"
        }
      },
      "message": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The message to be displayed.\n\t(Note: If the message is an element or array, and the Snackbar may re-render while it is\n\tstill open, ensure that the same object remains as the message property if you want to avoid\n\tthe Snackbar hiding and showing again)",
        "flowType": {
          "name": "Node"
        }
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times that action button has been clicked on.",
        "flowType": {
          "name": "number"
        },
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "Controls whether the Snackbar is opened or not.",
        "flowType": {
          "name": "boolean"
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: {open?: boolean}) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{open?: boolean}",
                  "signature": {
                    "properties": [
                      {
                        "key": "open",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "flowType": {
          "name": "object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/Toggle/Toggle.react.js": {
    "description": "",
    "displayName": "Toggle",
    "methods": [
      {
        "name": "handleToggle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "toggled",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Will disable the toggle if true.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "elementStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Overrides the inline-styles of the Toggle element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash.",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "iconStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Overrides the inline-styles of the Icon element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The element's ID",
        "flowType": {
          "name": "string"
        }
      },
      "inputStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Overrides the inline-styles of the input element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Label for toggle.",
        "flowType": {
          "name": "Node"
        },
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "labelPosition": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Where the label will be placed next to the toggle.",
        "flowType": {
          "name": "string"
        },
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "labelStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Overrides the inline-styles of the Toggle element label.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "rippleStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override style of ripple.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash callback to update props on the server.",
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "thumbStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override style for thumb.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "thumbSwitchedStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline styles for thumb when the toggle switch is toggled on.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "toggled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggled if set to true.",
        "flowType": {
          "name": "boolean"
        },
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "trackStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override style for track.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "trackSwitchedStyle": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "any"
          }
        },
        "required": false,
        "description": "Override the inline styles for track when the toggle switch is toggled on.",
        "flowType": {
          "name": "Object"
        },
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  }
}