# coding: utf-8

"""
    Flip API

    Description  # noqa: E501

    OpenAPI spec version: 2.0.1
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_flip.models.cloud_notification_settings_events import CloudNotificationSettingsEvents  # noqa: F401,E501


class CloudNotificationSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'delay': 'int',
        'send_video_payload': 'bool',
        'events': 'CloudNotificationSettingsEvents'
    }

    attribute_map = {
        'url': 'url',
        'delay': 'delay',
        'send_video_payload': 'send_video_payload',
        'events': 'events'
    }

    def __init__(self, url=None, delay=None, send_video_payload=None, events=None):  # noqa: E501
        """CloudNotificationSettings - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._delay = None
        self._send_video_payload = None
        self._events = None
        self.discriminator = None

        self.url = url
        self.delay = delay
        self.send_video_payload = send_video_payload
        self.events = events

    @property
    def url(self):
        """Gets the url of this CloudNotificationSettings.  # noqa: E501

        Notifications will be sent to this endpoint.  # noqa: E501

        :return: The url of this CloudNotificationSettings.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CloudNotificationSettings.

        Notifications will be sent to this endpoint.  # noqa: E501

        :param url: The url of this CloudNotificationSettings.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def delay(self):
        """Gets the delay of this CloudNotificationSettings.  # noqa: E501


        :return: The delay of this CloudNotificationSettings.  # noqa: E501
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this CloudNotificationSettings.


        :param delay: The delay of this CloudNotificationSettings.  # noqa: E501
        :type: int
        """
        if delay is None:
            raise ValueError("Invalid value for `delay`, must not be `None`")  # noqa: E501

        self._delay = delay

    @property
    def send_video_payload(self):
        """Gets the send_video_payload of this CloudNotificationSettings.  # noqa: E501

        Determines whether a video payload will be included in notification messages.  # noqa: E501

        :return: The send_video_payload of this CloudNotificationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._send_video_payload

    @send_video_payload.setter
    def send_video_payload(self, send_video_payload):
        """Sets the send_video_payload of this CloudNotificationSettings.

        Determines whether a video payload will be included in notification messages.  # noqa: E501

        :param send_video_payload: The send_video_payload of this CloudNotificationSettings.  # noqa: E501
        :type: bool
        """
        if send_video_payload is None:
            raise ValueError("Invalid value for `send_video_payload`, must not be `None`")  # noqa: E501

        self._send_video_payload = send_video_payload

    @property
    def events(self):
        """Gets the events of this CloudNotificationSettings.  # noqa: E501


        :return: The events of this CloudNotificationSettings.  # noqa: E501
        :rtype: CloudNotificationSettingsEvents
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this CloudNotificationSettings.


        :param events: The events of this CloudNotificationSettings.  # noqa: E501
        :type: CloudNotificationSettingsEvents
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")  # noqa: E501

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudNotificationSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
