# coding: utf-8

"""
    Flip API

    Description  # noqa: E501

    OpenAPI spec version: 2.0.1
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_flip.models.extra_file import ExtraFile  # noqa: F401,E501


class VideoUploadBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_size': 'int',
        'file_name': 'str',
        'extra_files': 'list[ExtraFile]',
        'profiles': 'str',
        'path_format': 'str',
        'payload': 'str',
        'extra_variables': 'dict(str, str)',
        'watermark_url': 'str',
        'watermark_left': 'str',
        'watermark_top': 'str',
        'watermark_right': 'str',
        'watermark_bottom': 'str',
        'watermark_width': 'str',
        'watermark_height': 'str',
        'clip_length': 'str',
        'clip_offset': 'str',
        'multi_chunk': 'bool'
    }

    attribute_map = {
        'file_size': 'file_size',
        'file_name': 'file_name',
        'extra_files': 'extra_files',
        'profiles': 'profiles',
        'path_format': 'path_format',
        'payload': 'payload',
        'extra_variables': 'extra_variables',
        'watermark_url': 'watermark_url',
        'watermark_left': 'watermark_left',
        'watermark_top': 'watermark_top',
        'watermark_right': 'watermark_right',
        'watermark_bottom': 'watermark_bottom',
        'watermark_width': 'watermark_width',
        'watermark_height': 'watermark_height',
        'clip_length': 'clip_length',
        'clip_offset': 'clip_offset',
        'multi_chunk': 'multi_chunk'
    }

    def __init__(self, file_size=None, file_name=None, extra_files=None, profiles=None, path_format=None, payload=None, extra_variables=None, watermark_url=None, watermark_left=None, watermark_top=None, watermark_right=None, watermark_bottom=None, watermark_width=None, watermark_height=None, clip_length=None, clip_offset=None, multi_chunk=True):  # noqa: E501
        """VideoUploadBody - a model defined in Swagger"""  # noqa: E501

        self._file_size = None
        self._file_name = None
        self._extra_files = None
        self._profiles = None
        self._path_format = None
        self._payload = None
        self._extra_variables = None
        self._watermark_url = None
        self._watermark_left = None
        self._watermark_top = None
        self._watermark_right = None
        self._watermark_bottom = None
        self._watermark_width = None
        self._watermark_height = None
        self._clip_length = None
        self._clip_offset = None
        self._multi_chunk = None
        self.discriminator = None

        self.file_size = file_size
        self.file_name = file_name
        if extra_files is not None:
            self.extra_files = extra_files
        if profiles is not None:
            self.profiles = profiles
        if path_format is not None:
            self.path_format = path_format
        if payload is not None:
            self.payload = payload
        if extra_variables is not None:
            self.extra_variables = extra_variables
        if watermark_url is not None:
            self.watermark_url = watermark_url
        if watermark_left is not None:
            self.watermark_left = watermark_left
        if watermark_top is not None:
            self.watermark_top = watermark_top
        if watermark_right is not None:
            self.watermark_right = watermark_right
        if watermark_bottom is not None:
            self.watermark_bottom = watermark_bottom
        if watermark_width is not None:
            self.watermark_width = watermark_width
        if watermark_height is not None:
            self.watermark_height = watermark_height
        if clip_length is not None:
            self.clip_length = clip_length
        if clip_offset is not None:
            self.clip_offset = clip_offset
        if multi_chunk is not None:
            self.multi_chunk = multi_chunk

    @property
    def file_size(self):
        """Gets the file_size of this VideoUploadBody.  # noqa: E501

        Size of the file that will be uploaded in `bytes`.  # noqa: E501

        :return: The file_size of this VideoUploadBody.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this VideoUploadBody.

        Size of the file that will be uploaded in `bytes`.  # noqa: E501

        :param file_size: The file_size of this VideoUploadBody.  # noqa: E501
        :type: int
        """
        if file_size is None:
            raise ValueError("Invalid value for `file_size`, must not be `None`")  # noqa: E501

        self._file_size = file_size

    @property
    def file_name(self):
        """Gets the file_name of this VideoUploadBody.  # noqa: E501

        Name of the file that will be uploaded.  # noqa: E501

        :return: The file_name of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this VideoUploadBody.

        Name of the file that will be uploaded.  # noqa: E501

        :param file_name: The file_name of this VideoUploadBody.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def extra_files(self):
        """Gets the extra_files of this VideoUploadBody.  # noqa: E501

        A list of names of additional files that will be uploaded.  # noqa: E501

        :return: The extra_files of this VideoUploadBody.  # noqa: E501
        :rtype: list[ExtraFile]
        """
        return self._extra_files

    @extra_files.setter
    def extra_files(self, extra_files):
        """Sets the extra_files of this VideoUploadBody.

        A list of names of additional files that will be uploaded.  # noqa: E501

        :param extra_files: The extra_files of this VideoUploadBody.  # noqa: E501
        :type: list[ExtraFile]
        """

        self._extra_files = extra_files

    @property
    def profiles(self):
        """Gets the profiles of this VideoUploadBody.  # noqa: E501

        A comma-separated list of profile names or IDs to be used during encoding. Alternatively, specify none so no encodings will created right away.  # noqa: E501

        :return: The profiles of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this VideoUploadBody.

        A comma-separated list of profile names or IDs to be used during encoding. Alternatively, specify none so no encodings will created right away.  # noqa: E501

        :param profiles: The profiles of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._profiles = profiles

    @property
    def path_format(self):
        """Gets the path_format of this VideoUploadBody.  # noqa: E501


        :return: The path_format of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._path_format

    @path_format.setter
    def path_format(self, path_format):
        """Sets the path_format of this VideoUploadBody.


        :param path_format: The path_format of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._path_format = path_format

    @property
    def payload(self):
        """Gets the payload of this VideoUploadBody.  # noqa: E501

        Payload is an arbitrary text of length 256 or shorter that you can store along the Video. It is typically used to retain an association with one of your own DB record ID.  # noqa: E501

        :return: The payload of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this VideoUploadBody.

        Payload is an arbitrary text of length 256 or shorter that you can store along the Video. It is typically used to retain an association with one of your own DB record ID.  # noqa: E501

        :param payload: The payload of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def extra_variables(self):
        """Gets the extra_variables of this VideoUploadBody.  # noqa: E501


        :return: The extra_variables of this VideoUploadBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra_variables

    @extra_variables.setter
    def extra_variables(self, extra_variables):
        """Sets the extra_variables of this VideoUploadBody.


        :param extra_variables: The extra_variables of this VideoUploadBody.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra_variables = extra_variables

    @property
    def watermark_url(self):
        """Gets the watermark_url of this VideoUploadBody.  # noqa: E501

        URL pointing to an image that will be used asa watermark.  # noqa: E501

        :return: The watermark_url of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._watermark_url

    @watermark_url.setter
    def watermark_url(self, watermark_url):
        """Sets the watermark_url of this VideoUploadBody.

        URL pointing to an image that will be used asa watermark.  # noqa: E501

        :param watermark_url: The watermark_url of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._watermark_url = watermark_url

    @property
    def watermark_left(self):
        """Gets the watermark_left of this VideoUploadBody.  # noqa: E501

        Determines distance between the left edge of a video and the left edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_right is not.  # noqa: E501

        :return: The watermark_left of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._watermark_left

    @watermark_left.setter
    def watermark_left(self, watermark_left):
        """Sets the watermark_left of this VideoUploadBody.

        Determines distance between the left edge of a video and the left edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_right is not.  # noqa: E501

        :param watermark_left: The watermark_left of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._watermark_left = watermark_left

    @property
    def watermark_top(self):
        """Gets the watermark_top of this VideoUploadBody.  # noqa: E501

        Determines distance between the top edge of a video and the top edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_bottom is not.  # noqa: E501

        :return: The watermark_top of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._watermark_top

    @watermark_top.setter
    def watermark_top(self, watermark_top):
        """Sets the watermark_top of this VideoUploadBody.

        Determines distance between the top edge of a video and the top edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_bottom is not.  # noqa: E501

        :param watermark_top: The watermark_top of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._watermark_top = watermark_top

    @property
    def watermark_right(self):
        """Gets the watermark_right of this VideoUploadBody.  # noqa: E501

        Determines distance between the right edge of a video and the right edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_left is not.  # noqa: E501

        :return: The watermark_right of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._watermark_right

    @watermark_right.setter
    def watermark_right(self, watermark_right):
        """Sets the watermark_right of this VideoUploadBody.

        Determines distance between the right edge of a video and the right edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_left is not.  # noqa: E501

        :param watermark_right: The watermark_right of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._watermark_right = watermark_right

    @property
    def watermark_bottom(self):
        """Gets the watermark_bottom of this VideoUploadBody.  # noqa: E501

        Determines distance between the bottom edge of a video and the bottom edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_top is not.  # noqa: E501

        :return: The watermark_bottom of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._watermark_bottom

    @watermark_bottom.setter
    def watermark_bottom(self, watermark_bottom):
        """Sets the watermark_bottom of this VideoUploadBody.

        Determines distance between the bottom edge of a video and the bottom edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_top is not.  # noqa: E501

        :param watermark_bottom: The watermark_bottom of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._watermark_bottom = watermark_bottom

    @property
    def watermark_width(self):
        """Gets the watermark_width of this VideoUploadBody.  # noqa: E501

        Determines width of the watermark image. Should be specified in pixels.  # noqa: E501

        :return: The watermark_width of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._watermark_width

    @watermark_width.setter
    def watermark_width(self, watermark_width):
        """Sets the watermark_width of this VideoUploadBody.

        Determines width of the watermark image. Should be specified in pixels.  # noqa: E501

        :param watermark_width: The watermark_width of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._watermark_width = watermark_width

    @property
    def watermark_height(self):
        """Gets the watermark_height of this VideoUploadBody.  # noqa: E501

        Determines width of the watermark image. Should be specified in pixels.  # noqa: E501

        :return: The watermark_height of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._watermark_height

    @watermark_height.setter
    def watermark_height(self, watermark_height):
        """Sets the watermark_height of this VideoUploadBody.

        Determines width of the watermark image. Should be specified in pixels.  # noqa: E501

        :param watermark_height: The watermark_height of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._watermark_height = watermark_height

    @property
    def clip_length(self):
        """Gets the clip_length of this VideoUploadBody.  # noqa: E501

        Length of the uploaded video. Should be formatted as follows: HH:MM:SS  # noqa: E501

        :return: The clip_length of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._clip_length

    @clip_length.setter
    def clip_length(self, clip_length):
        """Sets the clip_length of this VideoUploadBody.

        Length of the uploaded video. Should be formatted as follows: HH:MM:SS  # noqa: E501

        :param clip_length: The clip_length of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._clip_length = clip_length

    @property
    def clip_offset(self):
        """Gets the clip_offset of this VideoUploadBody.  # noqa: E501

        Clip starts at a specific offset.  # noqa: E501

        :return: The clip_offset of this VideoUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._clip_offset

    @clip_offset.setter
    def clip_offset(self, clip_offset):
        """Sets the clip_offset of this VideoUploadBody.

        Clip starts at a specific offset.  # noqa: E501

        :param clip_offset: The clip_offset of this VideoUploadBody.  # noqa: E501
        :type: str
        """

        self._clip_offset = clip_offset

    @property
    def multi_chunk(self):
        """Gets the multi_chunk of this VideoUploadBody.  # noqa: E501


        :return: The multi_chunk of this VideoUploadBody.  # noqa: E501
        :rtype: bool
        """
        return self._multi_chunk

    @multi_chunk.setter
    def multi_chunk(self, multi_chunk):
        """Sets the multi_chunk of this VideoUploadBody.


        :param multi_chunk: The multi_chunk of this VideoUploadBody.  # noqa: E501
        :type: bool
        """

        self._multi_chunk = multi_chunk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoUploadBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
