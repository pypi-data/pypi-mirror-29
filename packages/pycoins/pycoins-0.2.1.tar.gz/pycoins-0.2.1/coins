#!/usr/bin/env python

from datetime import datetime
import dateparser
import csv
import json
import os
import sys

from bs4 import BeautifulSoup
from termcolor import colored
from terminaltables import SingleTable

import requests


COINFILE = os.path.join(os.getenv("HOME"), ".coins")


def to_date(datestring):
    try:
        return dateparser.parse(datestring)
    except:
        return datestring


def to_float(floatstring):
    try:
        return float(floatstring)
    except:
        return floatstring


def read_coins():
    if not os.path.exists(COINFILE):
        return {}
    with open(COINFILE, 'r') as coinfile:
        return json.load(coinfile)


def write_coins(coins):
    with open(COINFILE, 'w') as coinfile:
        return json.dump(coins, coinfile)


def check_coin(coin):
    return True


def add(coin):
    coins = read_coins()
    coin = coin.upper()
    if not coin in coins:
        coins[coin] = datetime.now().isoformat()
    if not check_coin(coin):
        print("No coin found for symbol %s" % coin)
        return False
    write_coins(coins)
    return True


def remove(coin):
    coins = read_coins()
    coin = coin.upper()
    if coin in coins:
        del coins[coin]
    write_coins(coins)
    return True


def list():
    coins = read_coins()
    if not coins:
        print("Not tracking any coins.")
    for coin in sorted(coins.keys()):
        print(coin)
    return True


def get(coin):
    res = get_coin_data()
    target = [t for t in res if t['symbol'].upper() == coin.upper()]
    if target:
        print_coin_table(target)
        return True
    print("No coin found for symbol %s" % coin)
    return False


def scrape_data(coin):
    today = datetime.utcnow()
    url = "https://coinmarketcap.com/currencies/%s/historical-data/?start=20130428&end=%s" % (coin, today.strftime("%Y%m%d"))
    res = requests.get(url)
    soup = BeautifulSoup(res.content, 'html.parser')
    historical = soup.find('div', {'id': 'historical-data'})
    rows = historical.find_all('tr', {'class': 'text-right'})
    data = []
    for row in rows:
        tds = row.find_all('td')
        row_data = {}
        row_data['date'] = to_date(tds[0].get_text()).isoformat()
        row_data['open'] = to_float(tds[1].get_text())
        row_data['high'] = to_float(tds[2].get_text())
        row_data['low'] = to_float(tds[3].get_text())
        row_data['close'] = to_float(tds[4].get_text())
        row_data['volume'] = to_float(tds[5].get_text().replace(",", ""))
        row_data['marketcap'] = to_float(tds[6].get_text().replace(",", ""))
        data.append(row_data)
    return data


def write_file(hist, coin):
    headers = hist[0].keys()
    filename = "%s.csv" % coin
    with open(filename, 'w') as f:
        dict_writer = csv.DictWriter(f, headers)
        dict_writer.writeheader()
        dict_writer.writerows(hist)
    print("Saved output to %s." % filename)


def history(coin):
    res = get_coin_data()
    target = [t for t in res if t['symbol']]
    if len(target):
        hist = scrape_data(target[0]['id'])
        write_file(hist, coin)
        return True
    print("No coin found for symbold %s" % coin)
    return False


def get_coin_data():
    url = "https://api.coinmarketcap.com/v1/ticker/?limit=2000"
    res = requests.get(url)
    return res.json()


def format_marketcap(marketcap):
    ONE_BILLION = 1000000000
    ONE_MILLION = 1000000
    marketcap = float(marketcap)
    if marketcap < ONE_BILLION:
        return "$%sM" % round(marketcap / ONE_MILLION, 2)
    return "$%sB" % round(marketcap / ONE_BILLION, 2)


def print_coin_table(coinlist):
    tabledata = []
    headers = ["", "", "24hr Change", "BTC Price", "USD Price", "Market Cap"]
    tabledata.append(headers)
    for coindata in coinlist:
        usdcolor = 'red' if coindata['percent_change_24h'].startswith('-') else 'green'
        tabledata.append([
            coindata['name'],
            coindata['symbol'],
            "(%s%%)" % colored(round(float(coindata['percent_change_24h']), 1), usdcolor),
            colored(coindata['price_btc'], usdcolor),
            colored("$%s" % round(float(coindata['price_usd']), 2), usdcolor),
            format_marketcap(coindata['market_cap_usd'])
        ])
    table_instance = SingleTable(tabledata, "")
    table_instance.justify_columns[2] = 'right'
    print(table_instance.table)
    print()


def run_coins():
    coins = read_coins()
    res = get_coin_data()
    tracked = [cd for cd in res if cd['symbol'] in coins]
    print_coin_table(tracked)


def run_command(command, arg=None):
    COMMANDS = {
        'add': add,
        'remove': remove,
        'list': list,
        'get': get,
        'history': history
    }
    if arg:
        return COMMANDS[command](arg)
    return COMMANDS[command]()


def help():
    print("An error occurred.")


def print_help_and_exit():
    help()
    exit()


if len(sys.argv) == 1:
    run_coins()
elif len(sys.argv) == 3:
    run_command(sys.argv[1], sys.argv[2])
elif len(sys.argv) == 2:
    run_command(sys.argv[1])
else:
    print_help_and_exit()
