from distutils.core import setup

packages = \
['poetry',
 'poetry.console',
 'poetry.console.commands',
 'poetry.console.styles',
 'poetry.installation',
 'poetry.io',
 'poetry.layouts',
 'poetry.masonry',
 'poetry.masonry.builders',
 'poetry.masonry.publishing',
 'poetry.masonry.utils',
 'poetry.mixology',
 'poetry.mixology.contracts',
 'poetry.mixology.graph',
 'poetry.packages',
 'poetry.packages.constraints',
 'poetry.puzzle',
 'poetry.puzzle.operations',
 'poetry.repositories',
 'poetry.semver',
 'poetry.semver.constraints',
 'poetry.toml',
 'poetry.toml.prettify',
 'poetry.toml.prettify.elements',
 'poetry.toml.prettify.elements.traversal',
 'poetry.toml.prettify.lexer',
 'poetry.toml.prettify.parser',
 'poetry.toml.prettify.tokens',
 'poetry.utils',
 'poetry.vcs',
 'poetry.version']

package_data = \
{'': ['*']}

install_requires = \
['cleo (>=0.6.0.0,<0.7.0.0)',
 'requests (>=2.18.0.0,<3.0.0.0)',
 'toml (>=0.9.0.0,<0.10.0.0)',
 'cachy (>=0.1.0.0,<0.2.0.0)',
 'pip-tools (>=1.11.0.0,<2.0.0.0)',
 'requests-toolbelt (>=0.8.0.0,<0.9.0.0)']

entry_points = \
{'console_scripts': ['poetry = poetry:console.run']}

setup_kwargs = {
    'name': 'poetry',
    'version': '0.5.0b2',
    'description': 'Python dependency management and packaging made easy.',
    'long_description': 'Poetry: Dependency Management for Python\n========================================\n\n.. figure:: https://travis-ci.org/sdispater/poetry.svg\n   :alt: Poetry build status\n\n   Poetry build status\n\nPoetry helps you declare, manage and install dependencies of Python\nprojects, ensuring you have the right stack everywhere.\n\n.. figure:: https://raw.githubusercontent.com/sdispater/poetry/master/assets/install.gif\n   :alt: Poet Install\n\n   Poet Install\n\nThe package is **highly experimental** at the moment so expect things to\nchange and break. However, if you feel adventurous feedback and pull\nrequests are greatly appreciated.\n\nAlso, be aware that the features described here are the goal that this\nlibrary is aiming for and, as of now, not all of them are implemented\n(but most of them are). The dependency management is done while the\npackaging and publishing are still at the beginning.\n\nAnd finally, Poetry\'s code is only compatible with Python 3.6+ but it\ncan manage Python project\'s with previous versions without any problem.\n\nInstallation\n------------\n\n.. code:: bash\n\n    pip install poetry\n\nEnable tab completion for Bash, Fish, or Zsh\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``poetry`` supports generating completion scripts for Bash, Fish, and\nZsh. See ``poet help completions`` for full details, but the gist is as\nsimple as using one of the following:\n\n.. code:: bash\n\n    # Bash\n    poetry completions bash > /etc/bash_completion.d/pyproject.bash-completion\n\n    # Bash (macOS/Homebrew)\n    poetry completions bash > $(brew --prefix)/etc/bash_completion.d/pyproject.bash-completion\n\n    # Fish\n    poetry completions fish > ~/.config/fish/completions/pyproject.fish\n\n    # Zsh\n    poetry completions zsh > ~/.zfunc/_poetry\n\n*Note:* you may need to restart your shell in order for the changes to\ntake effect.\n\nFor ``zsh``, you must then add the following line in your ``~/.zshrc``\nbefore ``compinit``:\n\n.. code:: zsh\n\n    fpath+=~/.zfunc\n\nIntroduction\n------------\n\n``poetry`` is a tool to handle dependencies installation, building and\npackaging of Python packages. It only needs one file to do all of that:\nthe new, `standardized <https://www.python.org/dev/peps/pep-0518/>`__\n``pyproject.toml``.\n\n.. code:: toml\n\n    [tool.poetry]\n    name = "my-package"\n    version = "0.1.0"\n    description = "The description of the package"\n\n    license = "MIT"\n\n    authors = [\n        "Sébastien Eustace <sebastien@eustace.io>"\n    ]\n\n    readme = \'README.md\'\n\n    repository = "https://github.com/sdispater/poetry"\n    homepage = "https://github.com/sdispater/poetry"\n\n    keywords = [\'packaging\', \'poetry\']\n\n    [tool.poetry.dependencies]\n    python = "~2.7 || ^3.2"  # Compatible python versions must be declared here\n    toml = "^0.9"\n    # Dependencies with extras\n    requests = { version = "^2.13", extras = [ "security" ] }\n    # Python specific dependencies with prereleases allowed\n    pathlib2 = { version = "^2.2", python = "~2.7", allows_prereleases = true }\n    # Git dependencies\n    cleo = { git = "https://github.com/sdispater/cleo.git", branch = "master" }\n\n    # Optional dependencies (extras)\n    pendulum = { version = "^1.4", optional = true }\n\n    [tool.poetry.dev-dependencies]\n    pytest = "^3.0"\n    pytest-cov = "^2.4"\n\n    [tool.poetry.scripts]\n    my-script = \'my_package:main\'\n\nThere are some things we can notice here:\n\n-  It will try to enforce `semantic versioning <http://semver.org>`__ as\n   the best practice in version naming.\n-  You can specify the readme, included and excluded files: no more\n   ``MANIFEST.in``. ``poetry`` will also use VCS ignore files (like\n   ``.gitignore``) to populate the ``exclude`` section.\n-  Keywords (up to 5) can be specified and will act as tags on the\n   packaging site.\n-  The dependencies sections support caret, tilde, wildcard, inequality\n   and multiple requirements.\n-  You must specify the python versions for which your package is\n   compatible.\n\n``poetry`` will also detect if you are inside a virtualenv and install\nthe packages accordingly. So, ``poetry`` can be installed globally and\nused everywhere.\n\n``poetry`` also comes with a full fledged dependency resolution library,\ninspired by `Molinillo <https://github.com/CocoaPods/Molinillo>`__.\n\nWhy?\n----\n\nPackaging system and dependency management in Python is rather\nconvoluted and hard to understand for newcomers. Even for seasoned\ndevelopers it might be cumbersome at times to create all files needed in\na Python project: ``setup.py``, ``requirements.txt``, ``setup.cfg``,\n``MANIFEST.in`` and the newly added ``Pipfile``.\n\nSo I wanted a tool that would limit everything to a single configuration\nfile to do: dependency management, packaging and publishing.\n\nIt takes inspiration in tools that exist in other languages, like\n``composer`` (PHP) or ``cargo`` (Rust).\n\nAnd, finally, there is no reliable tool to properly resolves\ndependencies in Python, so I started ``poetry`` to bring an exhaustive\ndepency resolver to the Python community.\n\nWhat about Pipenv?\n~~~~~~~~~~~~~~~~~~\n\nIn short: I do not like the CLI it provides, or some of the decisions\nmade, and I think we can do a better and more intuitive one. Here are a\nfew things that I don\'t like.\n\nDependency resolution\n^^^^^^^^^^^^^^^^^^^^^\n\nThe dependency resolution is erratic and will fail even is there is a\nsolution. Let\'s take an example:\n\n.. code:: bash\n\n    pipenv install oslo.utils==1.4.0\n\nwill fail with this error:\n\n.. code:: text\n\n    Could not find a version that matches pbr!=0.7,!=2.1.0,<1.0,>=0.6,>=2.0.0\n\nwhile Poetry will get you the right set of packages:\n\n.. code:: bash\n\n    poetry add oslo.utils=1.4.0\n\nresults in :\n\n.. code:: text\n\n      - Installing pytz (2018.3)\n      - Installing netifaces (0.10.6)\n      - Installing netaddr (0.7.19)\n      - Installing oslo.i18n (2.1.0)\n      - Installing iso8601 (0.1.12)\n      - Installing six (1.11.0)\n      - Installing babel (2.5.3)\n      - Installing pbr (0.11.1)\n      - Installing oslo.utils (1.4.0)\n\nInstall command\n^^^^^^^^^^^^^^^\n\nWhen you specify a package to the ``install`` command it will add it as\na wildcard dependency. This means that **any** version of this package\ncan be installed which can lead to compatibility issues.\n\nAlso, you have to explicitely tell it to not update the locked packages\nwhen you installed new ones. This should be the default.\n\nRemove command\n^^^^^^^^^^^^^^\n\nThe ``remove`` command will only remove the package specified but not\nits dependencies if they are no longer needed.\n\nYou either have to use ``sync`` or ``clean`` to fix that.\n\nToo limited in scope\n^^^^^^^^^^^^^^^^^^^^\n\nFinally, the ``Pipfile`` is just a replacement from ``requirements.txt``\nand, in the end, you will still need to populate your ``setup.py`` file\n(or ``setup.cfg``) with the exact same dependencies you declared in your\n``Pipfile``. So, in the end, you will still need to manage a few\nconfiguration files to properly setup your project.\n\nCommands\n--------\n\nnew\n~~~\n\nThis command will help you kickstart your new Python project by creating\na directory structure suitable for most projects.\n\n.. code:: bash\n\n    poetry new my-package\n\nwill create a folder as follows:\n\n.. code:: text\n\n    my-package\n    ├── pyproject.toml\n    ├── README.rst\n    ├── my_package\n        └── __init__.py\n    └── tests\n        ├── __init__.py\n        └── test_my_package\n\nIf you want to name your project differently than the folder, you can\npass the ``--name`` option:\n\n.. code:: bash\n\n    poetry new my-folder --name my-package\n\ninstall\n~~~~~~~\n\nThe ``install`` command reads the ``pyproject.toml`` file from the\ncurrent directory, resolves the dependencies, and installs them.\n\n.. code:: bash\n\n    poetry install\n\nIf there is a ``pyproject.lock`` file in the current directory, it will\nuse the exact versions from there instead of resolving them. This\nensures that everyone using the library will get the same versions of\nthe dependencies.\n\nIf there is no ``pyproject.lock`` file, Poetry will create one after\ndependency resolution.\n\nYou can specify to the command that you do not want the development\ndependencies installed by passing the ``--no-dev`` option.\n\n.. code:: bash\n\n    poetry install --no-dev\n\nYou can also specify the extras you want installed by passing the\n``--E|--extras`` option (See `Extras <#extras>`__ for more info)\n\n.. code:: bash\n\n    poetry install --extras "mysql pgsql"\n    poetry install -E mysql -E pgsql\n\nOptions\n^^^^^^^\n\n-  ``--no-dev``: Do not install dev dependencies.\n-  ``-E|--extras``: Features to install (multiple values allowed).\n\nupdate\n~~~~~~\n\nIn order to get the latest versions of the dependencies and to update\nthe ``pyproject.lock`` file, you should use the ``update`` command.\n\n.. code:: bash\n\n    poetry update\n\nThis will resolve all dependencies of the project and write the exact\nversions into ``pyproject.lock``.\n\nIf you just want to update a few packages and not all, you can list them\nas such:\n\n.. code:: bash\n\n    poetry update requests toml\n\nOptions\n^^^^^^^\n\n-  ``--dry-run`` : Outputs the operations but will not execute anything\n   (implicitly enables --verbose).\n\nadd\n~~~\n\nThe ``add`` command adds required packages to your ``pyproject.toml``\nand installs them.\n\nIf you do not specify a version constraint, poetry will choose a\nsuitable one based on the available package versions.\n\n.. code:: bash\n\n    poetry add requests pendulum\n\nOptions\n^^^^^^^\n\n-  ``--D|dev``: Add package as development dependency.\n-  ``--optional`` : Add as an optional dependency.\n-  ``--dry-run`` : Outputs the operations but will not execute anything\n   (implicitly enables --verbose).\n\nremove\n~~~~~~\n\nThe ``remove`` command removes a package from the current list of\ninstalled packages\n\n.. code:: bash\n\n    poetry remove pendulum\n\nOptions\n^^^^^^^\n\n-  ``--D|dev``: Removes a package from the development dependencies.\n-  ``--dry-run`` : Outputs the operations but will not execute anything\n   (implicitly enables --verbose).\n\nshow\n~~~~\n\nTo list all of the available packages, you can use the ``show`` command.\n\n.. code:: bash\n\n    poetry show\n\nIf you want to see the details of a certain package, you can pass the\npackage name.\n\n.. code:: bash\n\n    poetry show pendulum\n\n    name        : pendulum\n    version     : 1.4.2\n    description : Python datetimes made easy\n\n    dependencies:\n     - python-dateutil >=2.6.1\n     - tzlocal >=1.4\n     - pytzdata >=2017.2.2\n\nOptions\n^^^^^^^\n\n-  ``--tree``: List the dependencies as a tree.\n-  ``-l|--latest``: Show the latest version.\n-  ``-o|--outdated``: Show the latest version but only for packages that\n   are outdated.\n\nbuild\n~~~~~\n\nThe ``build`` command builds the source and wheels archives.\n\n.. code:: bash\n\n    poetry build\n\nNote that, at the moment, only pure python wheels are supported.\n\nOptions\n^^^^^^^\n\n-  ``-F|--format``: Limit the format to either wheel or sdist.\n\npublish\n~~~~~~~\n\nThis command builds (if not already built) and publishes the package to\nthe remote repository.\n\nIt will automatically register the package before uploading if this is\nthe first time it is submitted.\n\n.. code:: bash\n\n    poetry publish\n\nOptions\n^^^^^^^\n\n-  ``-r|--repository``: The repository to register the package to\n   (default: ``pypi``). Should match a repository name set by the\n   ```config`` <#config>`__ command.\n\n``config``\n~~~~~~~~~~\n\nThe ``config`` command allows you to edit poetry config settings and\nrepositories.\n\n.. code:: bash\n\n    poetry config --list\n\nUsage\n^^^^^\n\n.. code:: bash\n\n    poetry config [options] [setting-key] [setting-value1] ... [setting-valueN]\n\n``setting-key`` is a configuration option name and ``setting-value1`` is\na configuration value.\n\nModifying repositories\n^^^^^^^^^^^^^^^^^^^^^^\n\nIn addition to modifying the config section, the config command also\nsupports making changes to the repositories section by using it the\nfollowing way:\n\n.. code:: bash\n\n    poetry config repositories.foo https://foo.bar/simple/\n\nThis will set the url for repository ``foo`` to\n``https://foo.bar/simple/``.\n\nIf you want to store your credentials for a specific repository, you can\ndo so easily:\n\n.. code:: bash\n\n    poetry config http-basic.foo username password\n\nIf you do not specify the password you will be prompted to write it.\n\nOptions\n^^^^^^^\n\n-  ``--unset``: Remove the configuration element named by\n   ``setting-key``.\n-  ``--list``: Show the list of current config variables.\n\nsearch\n~~~~~~\n\nThis command searches for packages on a remote index.\n\n.. code:: bash\n\n    poetry search requests pendulum\n\nOptions\n^^^^^^^\n\n-  ``-N|--only-name``: Search only in name.\n\nlock\n~~~~\n\nThis command locks (without installing) the dependencies specified in\n``pyproject.toml``.\n\n.. code:: bash\n\n    poetry lock\n\nThe ``pyproject.toml`` file\n---------------------------\n\nThe ``tool.poetry`` section of the ``pyproject.toml`` file is composed\nof multiple sections.\n\nname\n~~~~\n\nThe name of the package. **Required**\n\nversion\n~~~~~~~\n\nThe version of the package. **Required**\n\nThis should follow `semantic versioning <http://semver.org/>`__. However\nit will not be enforced and you remain free to follow another\nspecification.\n\ndescription\n~~~~~~~~~~~\n\nA short description of the package. **Required**\n\nlicense\n~~~~~~~\n\nThe license of the package.\n\nThe recommended notation for the most common licenses is (alphabetical):\n\n-  Apache-2.0\n-  BSD-2-Clause\n-  BSD-3-Clause\n-  BSD-4-Clause\n-  GPL-2.0\n-  GPL-2.0+\n-  GPL-3.0\n-  GPL-3.0+\n-  LGPL-2.1\n-  LGPL-2.1+\n-  LGPL-3.0\n-  LGPL-3.0+\n-  MIT\n\nOptional, but it is highly recommended to supply this. More identifiers\nare listed at the `SPDX Open Source License\nRegistry <https://www.spdx.org/licenses/>`__.\n\nauthors\n~~~~~~~\n\nThe authors of the package. This is a list of authors and should contain\nat least one author.\n\nAuthors must be in the form ``name <email>``.\n\nreadme\n~~~~~~\n\nThe readme file of the package. **Required**\n\nThe file can be either ``README.rst`` or ``README.md``. If it\'s a\nmarkdown file you have to install the\n`pandoc <https://github.com/jgm/pandoc>`__ utility so that it can be\nautomatically converted to a RestructuredText file.\n\nYou also need to have the\n`pypandoc <https://pypi.python.org/pypi/pypandoc/>`__ package installed.\nIf you install ``poet`` via ``pip`` you can use the ``markdown-readme``\nextra to do so.\n\n.. code:: bash\n\n    pip install pypoet[markdown-readme]\n\nhomepage\n~~~~~~~~\n\nAn URL to the website of the project. **Optional**\n\nrepository\n~~~~~~~~~~\n\nAn URL to the repository of the project. **Optional**\n\ndocumentation\n~~~~~~~~~~~~~\n\nAn URL to the documentation of the project. **Optional**\n\nkeywords\n~~~~~~~~\n\nA list of keywords (max: 5) that the package is related to. **Optional**\n\ninclude and exclude\n~~~~~~~~~~~~~~~~~~~\n\nA list of patterns that will be included in the final package.\n\nYou can explicitly specify to Poet that a set of globs should be ignored\nor included for the purposes of packaging. The globs specified in the\nexclude field identify a set of files that are not included when a\npackage is built.\n\nIf a VCS is being used for a package, the exclude field will be seeded\nwith the VCS’ ignore settings (``.gitignore`` for git for example).\n\n.. code:: toml\n\n    [package]\n    # ...\n    include = ["package/**/*.py", "package/**/.c"]\n\n.. code:: toml\n\n    exclude = ["package/excluded.py"]\n\n``dependencies`` and ``dev-dependencies``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPoetry is configured to look for dependencies on\n`PyPi <https://pypi.org>`__ by default. Only the name and a version\nstring are required in this case.\n\n.. code:: toml\n\n    [tool.poetry.dependencies]\n    requests = "^2.13.0"\n\nIf you want to use a private repository, you can add it to your\n``pyproject.toml`` file, like so:\n\n.. code:: toml\n\n    [[tool.poetry.source]]\n    name = \'private\'\n    url = \'http://example.com/simple\'\n\nBe aware that declaring the python version for which your package is\ncompatible is mandatory:\n\n.. code:: toml\n\n    [tool.poetry.dependencies]\n    python = "^3.6"\n\nCaret requirement\n^^^^^^^^^^^^^^^^^\n\n**Caret requirements** allow SemVer compatible updates to a specified\nversion. An update is allowed if the new version number does not modify\nthe left-most non-zero digit in the major, minor, patch grouping. In\nthis case, if we ran ``poetry update requests``, poetry would update us\nto version ``2.14.0`` if it was available, but would not update us to\n``3.0.0``. If instead we had specified the version string as\n``^0.1.13``, poetry would update to ``0.1.14`` but not ``0.2.0``.\n``0.0.x`` is not considered compatible with any other version.\n\nHere are some more examples of caret requirements and the versions that\nwould be allowed with them:\n\n.. code:: text\n\n    ^1.2.3 := >=1.2.3 <2.0.0\n    ^1.2 := >=1.2.0 <2.0.0\n    ^1 := >=1.0.0 <2.0.0\n    ^0.2.3 := >=0.2.3 <0.3.0\n    ^0.0.3 := >=0.0.3 <0.0.4\n    ^0.0 := >=0.0.0 <0.1.0\n    ^0 := >=0.0.0 <1.0.0\n\nTilde requirements\n^^^^^^^^^^^^^^^^^^\n\n**Tilde requirements** specify a minimal version with some ability to\nupdate. If you specify a major, minor, and patch version or only a major\nand minor version, only patch-level changes are allowed. If you only\nspecify a major version, then minor- and patch-level changes are\nallowed.\n\n``~1.2.3`` is an example of a tilde requirement.\n\n.. code:: text\n\n    ~1.2.3 := >=1.2.3 <1.3.0\n    ~1.2 := >=1.2.0 <1.3.0\n    ~1 := >=1.0.0 <2.0.0\n\nWildcard requirements\n^^^^^^^^^^^^^^^^^^^^^\n\n**Wildcard requirements** allow for any version where the wildcard is\npositioned.\n\n``*``, ``1.*`` and ``1.2.*`` are examples of wildcard requirements.\n\n.. code:: text\n\n    * := >=0.0.0\n    1.* := >=1.0.0 <2.0.0\n    1.2.* := >=1.2.0 <1.3.0\n\nInequality requirements\n^^^^^^^^^^^^^^^^^^^^^^^\n\n**Inequality requirements** allow manually specifying a version range or\nan exact version to depend on.\n\nHere are some examples of inequality requirements:\n\n.. code:: text\n\n    >= 1.2.0\n    > 1\n    < 2\n    != 1.2.3\n\nMultiple requirements\n^^^^^^^^^^^^^^^^^^^^^\n\nMultiple version requirements can also be separated with a comma, e.g.\n``>= 1.2, < 1.5``.\n\n``git`` dependencies\n^^^^^^^^^^^^^^^^^^^^\n\nTo depend on a library located in a ``git`` repository, the minimum\ninformation you need to specify is the location of the repository with\nthe git key:\n\n.. code:: toml\n\n    [dependencies]\n    requests = { git = "https://github.com/requests/requests.git" }\n\nSince we haven’t specified any other information, Poetry assumes that we\nintend to use the latest commit on the ``master`` branch to build our\nproject. You can combine the ``git`` key with the ``rev``, ``tag``, or\n``branch`` keys to specify something else. Here\'s an example of\nspecifying that you want to use the latest commit on a branch named\n``next``:\n\n.. code:: toml\n\n    [dependencies]\n    requests = { git = "https://github.com/kennethreitz/requests.git", branch = "next" }\n\nPython restricted dependencies\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can also specify that a dependency should be installed only for\nspecific Python versions:\n\n.. code:: toml\n\n    [dependencies]\n    pathlib2 = { version = "^2.2", python = "~2.7" }\n\n.. code:: toml\n\n    [dependencies]\n    pathlib2 = { version = "^2.2", python = ["~2.7", "^3.2"] }\n\n``scripts``\n~~~~~~~~~~~\n\nThis section describe the scripts or executable that will be installed\nwhen installing the package\n\n.. code:: toml\n\n    [scripts]\n    poetry = \'poetry:console.run\'\n\nHere, we will have the ``poetry`` script installed which will execute\n``console.run`` in the ``poetry`` package.\n\n``extras``\n~~~~~~~~~~\n\nPoetry supports extras to allow expression of:\n\n-  optional dependencies, which enhance a package, but are not required;\n   and\n-  clusters of optional dependencies.\n\n.. code:: toml\n\n    [tool.poetry]\n    name = "awesome"\n\n    [tool.poetry.dependencies]\n    # These packages are mandatory and form the core of this package’s distribution.\n    mandatory = "^1.0"\n\n    # A list of all of the optional dependencies, some of which are included in the\n    # below `extras`. They can be opted into by apps.\n    psycopg2 = { version = "^2.7", optional = true }\n    mysqlclient = { version = "^1.3", optional = true }\n\n    [tool.poetry.extras]\n    mysql = ["mysqlclient"]\n    pgsql = ["psycopg2"]\n\nWhen installing packages, you can specify extras by using the\n``-E|--extras`` option:\n\n.. code:: bash\n\n    poet install --extras "mysql pgsql"\n    poet install -E mysql -E pgsql\n\n``plugins``\n~~~~~~~~~~~\n\nPoetry supports arbitrary plugins wich work similarly to `setuptools\nentry\npoints <http://setuptools.readthedocs.io/en/latest/setuptools.html>`__.\nTo match the example in the setuptools documentation, you would use the\nfollowing:\n\n.. code:: toml\n\n    [plugins] # Optional super table\n\n    [plugins."blogtool.parsers"]\n    ".rst" = "some_module::SomeClass"\n\nResources\n---------\n\n-  `Official Website <https://poetry.eustace.io>`__\n-  `Issue Tracker <https://github.com/sdispater/poetry/issues>`__\n',
    'author': 'Sébastien Eustace',
    'author_email': 'sebastien@eustace.io',
    'url': 'https://poetry.eustace.io/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>= 3.6.0.0, < 4.0.0.0',
}


setup(**setup_kwargs)
